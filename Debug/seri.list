
seri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c14  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003cd4  08003cd4  00004cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d90  08003d90  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003d90  08003d90  00004d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d98  08003d98  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d98  08003d98  00004d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d9c  08003d9c  00004d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003da0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08003dac  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003dac  00005168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0b2  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff0  00000000  00000000  000110e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  000130d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000857  00000000  00000000  00013ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f2a  00000000  00000000  000143ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfcc  00000000  00000000  00029329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082591  00000000  00000000  000362f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8886  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b4  00000000  00000000  000b88cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000bae80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003cbc 	.word	0x08003cbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003cbc 	.word	0x08003cbc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <lorawan_is_config_required>:




int lorawan_is_config_required(UART_HandleTypeDef *huart)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b08b      	sub	sp, #44	@ 0x2c
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(huart, (uint8_t*)"AT\r\n", 4, 300);
 8000464:	2396      	movs	r3, #150	@ 0x96
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	492d      	ldr	r1, [pc, #180]	@ (8000520 <lorawan_is_config_required+0xc4>)
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	2204      	movs	r2, #4
 800046e:	f002 fbd7 	bl	8002c20 <HAL_UART_Transmit>
	uint8_t rxwakebuf[16] = {0};
 8000472:	2418      	movs	r4, #24
 8000474:	193b      	adds	r3, r7, r4
 8000476:	0018      	movs	r0, r3
 8000478:	2310      	movs	r3, #16
 800047a:	001a      	movs	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f003 fbf1 	bl	8003c64 <memset>
	  HAL_UART_Receive(huart, rxwakebuf, 6, 200);
 8000482:	1939      	adds	r1, r7, r4
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	23c8      	movs	r3, #200	@ 0xc8
 8000488:	2206      	movs	r2, #6
 800048a:	f002 fc69 	bl	8002d60 <HAL_UART_Receive>
	  uint8_t rxbuf[16] = {0};
 800048e:	2408      	movs	r4, #8
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	2310      	movs	r3, #16
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f003 fbe3 	bl	8003c64 <memset>
	  // Totally Flush buffer and stuff
	  HAL_UART_AbortReceive(huart);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	0018      	movs	r0, r3
 80004a2:	f002 fd43 	bl	8002f2c <HAL_UART_AbortReceive>
	  __HAL_UART_FLUSH_DRREGISTER(huart);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	699a      	ldr	r2, [r3, #24]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2108      	movs	r1, #8
 80004b2:	430a      	orrs	r2, r1
 80004b4:	619a      	str	r2, [r3, #24]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	699a      	ldr	r2, [r3, #24]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2110      	movs	r1, #16
 80004c2:	430a      	orrs	r2, r1
 80004c4:	619a      	str	r2, [r3, #24]
	  __HAL_UART_CLEAR_IDLEFLAG(huart);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2210      	movs	r2, #16
 80004cc:	621a      	str	r2, [r3, #32]
	  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_FEF | UART_CLEAR_PEF | UART_CLEAR_NEF);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	220f      	movs	r2, #15
 80004d4:	621a      	str	r2, [r3, #32]

	  HAL_UART_Transmit(&huart2, (uint8_t*)"AT%S 502=?\r\n", 12, 300);
 80004d6:	2396      	movs	r3, #150	@ 0x96
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	4912      	ldr	r1, [pc, #72]	@ (8000524 <lorawan_is_config_required+0xc8>)
 80004dc:	4812      	ldr	r0, [pc, #72]	@ (8000528 <lorawan_is_config_required+0xcc>)
 80004de:	220c      	movs	r2, #12
 80004e0:	f002 fb9e 	bl	8002c20 <HAL_UART_Transmit>
	  HAL_UART_Receive(huart, rxbuf, 16, 200);
 80004e4:	1939      	adds	r1, r7, r4
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	23c8      	movs	r3, #200	@ 0xc8
 80004ea:	2210      	movs	r2, #16
 80004ec:	f002 fc38 	bl	8002d60 <HAL_UART_Receive>

	  if (rxbuf[1] == '0')
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	785b      	ldrb	r3, [r3, #1]
 80004f4:	2b30      	cmp	r3, #48	@ 0x30
 80004f6:	d107      	bne.n	8000508 <lorawan_is_config_required+0xac>
	  {
		  memset(rxbuf, 0, sizeof(rxbuf)); // Clear buffer
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2210      	movs	r2, #16
 80004fc:	2100      	movs	r1, #0
 80004fe:	0018      	movs	r0, r3
 8000500:	f003 fbb0 	bl	8003c64 <memset>
		  return 0;
 8000504:	2300      	movs	r3, #0
 8000506:	e007      	b.n	8000518 <lorawan_is_config_required+0xbc>
	  }
	  else
	  {
		  memset(rxbuf, 0, sizeof(rxbuf)); // Clear buffer
 8000508:	2308      	movs	r3, #8
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	2210      	movs	r2, #16
 800050e:	2100      	movs	r1, #0
 8000510:	0018      	movs	r0, r3
 8000512:	f003 fba7 	bl	8003c64 <memset>
		  return 1;
 8000516:	2301      	movs	r3, #1
	  }
}
 8000518:	0018      	movs	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	b00b      	add	sp, #44	@ 0x2c
 800051e:	bd90      	pop	{r4, r7, pc}
 8000520:	08003cd4 	.word	0x08003cd4
 8000524:	08003cdc 	.word	0x08003cdc
 8000528:	200000d4 	.word	0x200000d4

0800052c <lorawan_is_connected>:



int lorawan_is_connected(UART_HandleTypeDef *huart)
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b0c6      	sub	sp, #280	@ 0x118
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t*)"AT\r\n", 4, 300);
 8000534:	2396      	movs	r3, #150	@ 0x96
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	4932      	ldr	r1, [pc, #200]	@ (8000604 <lorawan_is_connected+0xd8>)
 800053a:	4833      	ldr	r0, [pc, #204]	@ (8000608 <lorawan_is_connected+0xdc>)
 800053c:	2204      	movs	r2, #4
 800053e:	f002 fb6f 	bl	8002c20 <HAL_UART_Transmit>
	uint8_t rxwakebuf[16] = {0};
 8000542:	2484      	movs	r4, #132	@ 0x84
 8000544:	0064      	lsls	r4, r4, #1
 8000546:	193b      	adds	r3, r7, r4
 8000548:	0018      	movs	r0, r3
 800054a:	2310      	movs	r3, #16
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f003 fb88 	bl	8003c64 <memset>
	  HAL_UART_Receive(huart, rxwakebuf, 4, 200);
 8000554:	1939      	adds	r1, r7, r4
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	23c8      	movs	r3, #200	@ 0xc8
 800055a:	2204      	movs	r2, #4
 800055c:	f002 fc00 	bl	8002d60 <HAL_UART_Receive>
	  uint8_t rxbuf[256] = {0};
 8000560:	4b2a      	ldr	r3, [pc, #168]	@ (800060c <lorawan_is_connected+0xe0>)
 8000562:	248c      	movs	r4, #140	@ 0x8c
 8000564:	0064      	lsls	r4, r4, #1
 8000566:	191b      	adds	r3, r3, r4
 8000568:	19db      	adds	r3, r3, r7
 800056a:	0018      	movs	r0, r3
 800056c:	2380      	movs	r3, #128	@ 0x80
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	001a      	movs	r2, r3
 8000572:	2100      	movs	r1, #0
 8000574:	f003 fb76 	bl	8003c64 <memset>
	  // Totally Flush buffer and stuff
	  HAL_UART_AbortReceive(huart);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	0018      	movs	r0, r3
 800057c:	f002 fcd6 	bl	8002f2c <HAL_UART_AbortReceive>
	  __HAL_UART_FLUSH_DRREGISTER(huart);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	699a      	ldr	r2, [r3, #24]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2108      	movs	r1, #8
 800058c:	430a      	orrs	r2, r1
 800058e:	619a      	str	r2, [r3, #24]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	699a      	ldr	r2, [r3, #24]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2110      	movs	r1, #16
 800059c:	430a      	orrs	r2, r1
 800059e:	619a      	str	r2, [r3, #24]
	  __HAL_UART_CLEAR_IDLEFLAG(huart);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2210      	movs	r2, #16
 80005a6:	621a      	str	r2, [r3, #32]
	  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_FEF | UART_CLEAR_PEF | UART_CLEAR_NEF);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	220f      	movs	r2, #15
 80005ae:	621a      	str	r2, [r3, #32]

	  HAL_UART_Transmit(huart, (uint8_t*)"ATI 3001\r\n", 10, 300);
 80005b0:	2396      	movs	r3, #150	@ 0x96
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	4916      	ldr	r1, [pc, #88]	@ (8000610 <lorawan_is_connected+0xe4>)
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	220a      	movs	r2, #10
 80005ba:	f002 fb31 	bl	8002c20 <HAL_UART_Transmit>
	  HAL_UART_Receive(huart, rxbuf, 7, 100);
 80005be:	2508      	movs	r5, #8
 80005c0:	1979      	adds	r1, r7, r5
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	2364      	movs	r3, #100	@ 0x64
 80005c6:	2207      	movs	r2, #7
 80005c8:	f002 fbca 	bl	8002d60 <HAL_UART_Receive>

	  if (rxbuf[1] == '0')
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <lorawan_is_connected+0xe0>)
 80005ce:	191b      	adds	r3, r3, r4
 80005d0:	19db      	adds	r3, r3, r7
 80005d2:	785b      	ldrb	r3, [r3, #1]
 80005d4:	2b30      	cmp	r3, #48	@ 0x30
 80005d6:	d108      	bne.n	80005ea <lorawan_is_connected+0xbe>
	  {
		  memset(rxbuf, 0, sizeof(rxbuf)); // Clear buffer
 80005d8:	2380      	movs	r3, #128	@ 0x80
 80005da:	005a      	lsls	r2, r3, #1
 80005dc:	197b      	adds	r3, r7, r5
 80005de:	2100      	movs	r1, #0
 80005e0:	0018      	movs	r0, r3
 80005e2:	f003 fb3f 	bl	8003c64 <memset>
		  return 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e008      	b.n	80005fc <lorawan_is_connected+0xd0>
	  }
	  else
	  {
		  memset(rxbuf, 0, sizeof(rxbuf)); // Clear buffer
 80005ea:	2380      	movs	r3, #128	@ 0x80
 80005ec:	005a      	lsls	r2, r3, #1
 80005ee:	2308      	movs	r3, #8
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	0018      	movs	r0, r3
 80005f6:	f003 fb35 	bl	8003c64 <memset>
		  return 1;
 80005fa:	2301      	movs	r3, #1
	  }
}
 80005fc:	0018      	movs	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	b046      	add	sp, #280	@ 0x118
 8000602:	bdb0      	pop	{r4, r5, r7, pc}
 8000604:	08003cd4 	.word	0x08003cd4
 8000608:	200000d4 	.word	0x200000d4
 800060c:	fffffef0 	.word	0xfffffef0
 8000610:	08003cec 	.word	0x08003cec

08000614 <join>:


int join(UART_HandleTypeDef *huart)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b0c7      	sub	sp, #284	@ 0x11c
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)"AT\r\n", 4, 300);
 800061c:	2396      	movs	r3, #150	@ 0x96
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	4940      	ldr	r1, [pc, #256]	@ (8000724 <join+0x110>)
 8000622:	4841      	ldr	r0, [pc, #260]	@ (8000728 <join+0x114>)
 8000624:	2204      	movs	r2, #4
 8000626:	f002 fafb 	bl	8002c20 <HAL_UART_Transmit>
	uint16_t total_rcv = 0;
 800062a:	2386      	movs	r3, #134	@ 0x86
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	18fb      	adds	r3, r7, r3
 8000630:	2200      	movs	r2, #0
 8000632:	801a      	strh	r2, [r3, #0]
	int16_t total_expected =11;
 8000634:	2387      	movs	r3, #135	@ 0x87
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	18fb      	adds	r3, r7, r3
 800063a:	220b      	movs	r2, #11
 800063c:	801a      	strh	r2, [r3, #0]
	uint8_t rxbuf[256] = {0};
 800063e:	4b3b      	ldr	r3, [pc, #236]	@ (800072c <join+0x118>)
 8000640:	2288      	movs	r2, #136	@ 0x88
 8000642:	0052      	lsls	r2, r2, #1
 8000644:	189b      	adds	r3, r3, r2
 8000646:	19db      	adds	r3, r3, r7
 8000648:	0018      	movs	r0, r3
 800064a:	2380      	movs	r3, #128	@ 0x80
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	001a      	movs	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f003 fb07 	bl	8003c64 <memset>
	HAL_UART_Transmit(&huart2, (uint8_t*)"AT+JOIN\r\n", 9, 300);
 8000656:	2396      	movs	r3, #150	@ 0x96
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4935      	ldr	r1, [pc, #212]	@ (8000730 <join+0x11c>)
 800065c:	4832      	ldr	r0, [pc, #200]	@ (8000728 <join+0x114>)
 800065e:	2209      	movs	r2, #9
 8000660:	f002 fade 	bl	8002c20 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rxbuf, 4, 100);
 8000664:	230c      	movs	r3, #12
 8000666:	18f9      	adds	r1, r7, r3
 8000668:	482f      	ldr	r0, [pc, #188]	@ (8000728 <join+0x114>)
 800066a:	2364      	movs	r3, #100	@ 0x64
 800066c:	2204      	movs	r2, #4
 800066e:	f002 fb77 	bl	8002d60 <HAL_UART_Receive>
	__HAL_UART_FLUSH_DRREGISTER(&huart2);
 8000672:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <join+0x114>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	699a      	ldr	r2, [r3, #24]
 8000678:	4b2b      	ldr	r3, [pc, #172]	@ (8000728 <join+0x114>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2108      	movs	r1, #8
 800067e:	430a      	orrs	r2, r1
 8000680:	619a      	str	r2, [r3, #24]
 8000682:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <join+0x114>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	699a      	ldr	r2, [r3, #24]
 8000688:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <join+0x114>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2110      	movs	r1, #16
 800068e:	430a      	orrs	r2, r1
 8000690:	619a      	str	r2, [r3, #24]
	__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8000692:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <join+0x114>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2210      	movs	r2, #16
 8000698:	621a      	str	r2, [r3, #32]

	while (total_expected > 0)
 800069a:	e019      	b.n	80006d0 <join+0xbc>
	{
		  HAL_UARTEx_ReceiveToIdle(&huart2, rxbuf + total_rcv, 100, &total_rcv, 10000);
 800069c:	2086      	movs	r0, #134	@ 0x86
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	183b      	adds	r3, r7, r0
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	001a      	movs	r2, r3
 80006a6:	230c      	movs	r3, #12
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	1899      	adds	r1, r3, r2
 80006ac:	0004      	movs	r4, r0
 80006ae:	183b      	adds	r3, r7, r0
 80006b0:	481d      	ldr	r0, [pc, #116]	@ (8000728 <join+0x114>)
 80006b2:	4a20      	ldr	r2, [pc, #128]	@ (8000734 <join+0x120>)
 80006b4:	9200      	str	r2, [sp, #0]
 80006b6:	2264      	movs	r2, #100	@ 0x64
 80006b8:	f003 f9b4 	bl	8003a24 <HAL_UARTEx_ReceiveToIdle>
		  total_expected -= total_rcv;
 80006bc:	2187      	movs	r1, #135	@ 0x87
 80006be:	0049      	lsls	r1, r1, #1
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	881a      	ldrh	r2, [r3, #0]
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	801a      	strh	r2, [r3, #0]
	while (total_expected > 0)
 80006d0:	2387      	movs	r3, #135	@ 0x87
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	2200      	movs	r2, #0
 80006d8:	5e9b      	ldrsh	r3, [r3, r2]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	dcde      	bgt.n	800069c <join+0x88>
	}

	__HAL_UART_FLUSH_DRREGISTER(&huart2);
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <join+0x114>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	699a      	ldr	r2, [r3, #24]
 80006e4:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <join+0x114>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2108      	movs	r1, #8
 80006ea:	430a      	orrs	r2, r1
 80006ec:	619a      	str	r2, [r3, #24]
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <join+0x114>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	699a      	ldr	r2, [r3, #24]
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <join+0x114>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2110      	movs	r1, #16
 80006fa:	430a      	orrs	r2, r1
 80006fc:	619a      	str	r2, [r3, #24]
	__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80006fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <join+0x114>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2210      	movs	r2, #16
 8000704:	621a      	str	r2, [r3, #32]

	if (rxbuf[8] == 'O')
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <join+0x118>)
 8000708:	2288      	movs	r2, #136	@ 0x88
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	189b      	adds	r3, r3, r2
 800070e:	19db      	adds	r3, r3, r7
 8000710:	7a1b      	ldrb	r3, [r3, #8]
 8000712:	2b4f      	cmp	r3, #79	@ 0x4f
 8000714:	d101      	bne.n	800071a <join+0x106>
	{
		return 1;
 8000716:	2301      	movs	r3, #1
 8000718:	e000      	b.n	800071c <join+0x108>
		__NOP(); // success
	}
	else
	{
		return 0;
 800071a:	2300      	movs	r3, #0
		__NOP(); // fail
	}
}
 800071c:	0018      	movs	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	b045      	add	sp, #276	@ 0x114
 8000722:	bd90      	pop	{r4, r7, pc}
 8000724:	08003cd4 	.word	0x08003cd4
 8000728:	200000d4 	.word	0x200000d4
 800072c:	fffffefc 	.word	0xfffffefc
 8000730:	08003cf8 	.word	0x08003cf8
 8000734:	00002710 	.word	0x00002710

08000738 <SendData>:



int SendData(UART_HandleTypeDef *huart, char* data)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b0c4      	sub	sp, #272	@ 0x110
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)"AT\r\n", 4, 300);
 8000742:	2396      	movs	r3, #150	@ 0x96
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	4938      	ldr	r1, [pc, #224]	@ (8000828 <SendData+0xf0>)
 8000748:	4838      	ldr	r0, [pc, #224]	@ (800082c <SendData+0xf4>)
 800074a:	2204      	movs	r2, #4
 800074c:	f002 fa68 	bl	8002c20 <HAL_UART_Transmit>
	uint16_t total_rcv = 0;
 8000750:	2387      	movs	r3, #135	@ 0x87
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	2200      	movs	r2, #0
 8000758:	801a      	strh	r2, [r3, #0]
	int16_t total_expected = 200;
 800075a:	2386      	movs	r3, #134	@ 0x86
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	18fb      	adds	r3, r7, r3
 8000760:	22c8      	movs	r2, #200	@ 0xc8
 8000762:	801a      	strh	r2, [r3, #0]
	uint8_t rxbuf[256] = {0};
 8000764:	4b32      	ldr	r3, [pc, #200]	@ (8000830 <SendData+0xf8>)
 8000766:	2288      	movs	r2, #136	@ 0x88
 8000768:	0052      	lsls	r2, r2, #1
 800076a:	189b      	adds	r3, r3, r2
 800076c:	19db      	adds	r3, r3, r7
 800076e:	0018      	movs	r0, r3
 8000770:	2380      	movs	r3, #128	@ 0x80
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	001a      	movs	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	f003 fa74 	bl	8003c64 <memset>
	int data_size = strlen(data);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	0018      	movs	r0, r3
 8000780:	f7ff fcc2 	bl	8000108 <strlen>
 8000784:	0003      	movs	r3, r0
 8000786:	2284      	movs	r2, #132	@ 0x84
 8000788:	0052      	lsls	r2, r2, #1
 800078a:	18b9      	adds	r1, r7, r2
 800078c:	600b      	str	r3, [r1, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)data, data_size, 300);
 800078e:	18bb      	adds	r3, r7, r2
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	b29a      	uxth	r2, r3
 8000794:	2396      	movs	r3, #150	@ 0x96
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	6839      	ldr	r1, [r7, #0]
 800079a:	4824      	ldr	r0, [pc, #144]	@ (800082c <SendData+0xf4>)
 800079c:	f002 fa40 	bl	8002c20 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rxbuf, 4, 100); // Get the OK back from the sync data send
 80007a0:	2308      	movs	r3, #8
 80007a2:	18f9      	adds	r1, r7, r3
 80007a4:	4821      	ldr	r0, [pc, #132]	@ (800082c <SendData+0xf4>)
 80007a6:	2364      	movs	r3, #100	@ 0x64
 80007a8:	2204      	movs	r2, #4
 80007aa:	f002 fad9 	bl	8002d60 <HAL_UART_Receive>
	  HAL_UART_AbortReceive(huart);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fbbb 	bl	8002f2c <HAL_UART_AbortReceive>
	  __HAL_UART_FLUSH_DRREGISTER(huart);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	699a      	ldr	r2, [r3, #24]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2108      	movs	r1, #8
 80007c2:	430a      	orrs	r2, r1
 80007c4:	619a      	str	r2, [r3, #24]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	699a      	ldr	r2, [r3, #24]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2110      	movs	r1, #16
 80007d2:	430a      	orrs	r2, r1
 80007d4:	619a      	str	r2, [r3, #24]
	  __HAL_UART_CLEAR_IDLEFLAG(huart);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2210      	movs	r2, #16
 80007dc:	621a      	str	r2, [r3, #32]
	  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_FEF | UART_CLEAR_PEF | UART_CLEAR_NEF);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	220f      	movs	r2, #15
 80007e4:	621a      	str	r2, [r3, #32]
//	{
//		  HAL_UARTEx_ReceiveToIdle(&huart2, rxbuf + total_rcv, 200, &total_rcv, 15000);
//		  total_expected -= total_rcv;
//	}

	  HAL_UART_AbortReceive(huart);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 fb9f 	bl	8002f2c <HAL_UART_AbortReceive>
	  __HAL_UART_FLUSH_DRREGISTER(huart);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	699a      	ldr	r2, [r3, #24]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2108      	movs	r1, #8
 80007fa:	430a      	orrs	r2, r1
 80007fc:	619a      	str	r2, [r3, #24]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	699a      	ldr	r2, [r3, #24]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2110      	movs	r1, #16
 800080a:	430a      	orrs	r2, r1
 800080c:	619a      	str	r2, [r3, #24]
	  __HAL_UART_CLEAR_IDLEFLAG(huart);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2210      	movs	r2, #16
 8000814:	621a      	str	r2, [r3, #32]
	  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_FEF | UART_CLEAR_PEF | UART_CLEAR_NEF);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	220f      	movs	r2, #15
 800081c:	621a      	str	r2, [r3, #32]

	  return 1;
 800081e:	2301      	movs	r3, #1
//	else
//	{
//		return 0;
//		__NOP(); // fail
//	}
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	b044      	add	sp, #272	@ 0x110
 8000826:	bd80      	pop	{r7, pc}
 8000828:	08003cd4 	.word	0x08003cd4
 800082c:	200000d4 	.word	0x200000d4
 8000830:	fffffef8 	.word	0xfffffef8

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 fbe8 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f84a 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f000 f98e 	bl	8000b60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000844:	f000 f95c 	bl	8000b00 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000848:	f000 f926 	bl	8000a98 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800084c:	f000 f8ee 	bl	8000a2c <MX_RTC_Init>
//	  HAL_Delay(10);
//  }



  lorawan_is_config_required(&huart2);
 8000850:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <main+0x90>)
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff fe02 	bl	800045c <lorawan_is_config_required>


  is_connected = lorawan_is_connected(&huart2);
 8000858:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <main+0x90>)
 800085a:	0018      	movs	r0, r3
 800085c:	f7ff fe66 	bl	800052c <lorawan_is_connected>
 8000860:	0002      	movs	r2, r0
 8000862:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <main+0x94>)
 8000864:	601a      	str	r2, [r3, #0]
  if (!is_connected)
 8000866:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <main+0x94>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d106      	bne.n	800087c <main+0x48>
  {
	  is_connected = join(&huart2);
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <main+0x90>)
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff fecf 	bl	8000614 <join>
 8000876:	0002      	movs	r2, r0
 8000878:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <main+0x94>)
 800087a:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Check if it's time to process LoRaWAN (every 40th wake-up = 600 seconds = 10 minutes)
	if (wakeup_counter >= 40) 
 800087c:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <main+0x98>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b27      	cmp	r3, #39	@ 0x27
 8000882:	d91b      	bls.n	80008bc <main+0x88>
	{
		wakeup_counter = 0;  // Reset counter
 8000884:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <main+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
		
		is_connected = lorawan_is_connected(&huart2);
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <main+0x90>)
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff fe4d 	bl	800052c <lorawan_is_connected>
 8000892:	0002      	movs	r2, r0
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <main+0x94>)
 8000896:	601a      	str	r2, [r3, #0]
		if (!is_connected)
 8000898:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <main+0x94>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d107      	bne.n	80008b0 <main+0x7c>
		{
		  is_connected = join(&huart2);
 80008a0:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <main+0x90>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff feb6 	bl	8000614 <join>
 80008a8:	0002      	movs	r2, r0
 80008aa:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <main+0x94>)
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e005      	b.n	80008bc <main+0x88>
		}
		else
		{
			// We ARE connected!
			SendData(&huart2, "AT+SEND \"AABB\"\r\n");
 80008b0:	4a07      	ldr	r2, [pc, #28]	@ (80008d0 <main+0x9c>)
 80008b2:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <main+0x90>)
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f7ff ff3e 	bl	8000738 <SendData>
		}
	}

	// Enter deep sleep mode - device will wake up on RTC timer every 15 seconds
	// But only process LoRaWAN every 40th wake-up (600 seconds = 10 minutes total)
	EnterDeepSleepMode();
 80008bc:	f000 fa1a 	bl	8000cf4 <EnterDeepSleepMode>
	if (wakeup_counter >= 40) 
 80008c0:	e7dc      	b.n	800087c <main+0x48>
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	200000d4 	.word	0x200000d4
 80008c8:	2000015c 	.word	0x2000015c
 80008cc:	20000160 	.word	0x20000160
 80008d0:	08003d10 	.word	0x08003d10

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b0a5      	sub	sp, #148	@ 0x94
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	2458      	movs	r4, #88	@ 0x58
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	0018      	movs	r0, r3
 80008e0:	2338      	movs	r3, #56	@ 0x38
 80008e2:	001a      	movs	r2, r3
 80008e4:	2100      	movs	r1, #0
 80008e6:	f003 f9bd 	bl	8003c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ea:	2344      	movs	r3, #68	@ 0x44
 80008ec:	18fb      	adds	r3, r7, r3
 80008ee:	0018      	movs	r0, r3
 80008f0:	2314      	movs	r3, #20
 80008f2:	001a      	movs	r2, r3
 80008f4:	2100      	movs	r1, #0
 80008f6:	f003 f9b5 	bl	8003c64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fa:	231c      	movs	r3, #28
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	0018      	movs	r0, r3
 8000900:	2328      	movs	r3, #40	@ 0x28
 8000902:	001a      	movs	r2, r3
 8000904:	2100      	movs	r1, #0
 8000906:	f003 f9ad 	bl	8003c64 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	0018      	movs	r0, r3
 800090e:	2318      	movs	r3, #24
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f003 f9a6 	bl	8003c64 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000918:	4b40      	ldr	r3, [pc, #256]	@ (8000a1c <SystemClock_Config+0x148>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a40      	ldr	r2, [pc, #256]	@ (8000a20 <SystemClock_Config+0x14c>)
 800091e:	401a      	ands	r2, r3
 8000920:	4b3e      	ldr	r3, [pc, #248]	@ (8000a1c <SystemClock_Config+0x148>)
 8000922:	2180      	movs	r1, #128	@ 0x80
 8000924:	0109      	lsls	r1, r1, #4
 8000926:	430a      	orrs	r2, r1
 8000928:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800092a:	f000 fec5 	bl	80016b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800092e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a24 <SystemClock_Config+0x150>)
 8000930:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000932:	4b3c      	ldr	r3, [pc, #240]	@ (8000a24 <SystemClock_Config+0x150>)
 8000934:	493a      	ldr	r1, [pc, #232]	@ (8000a20 <SystemClock_Config+0x14c>)
 8000936:	400a      	ands	r2, r1
 8000938:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800093a:	193b      	adds	r3, r7, r4
 800093c:	221c      	movs	r2, #28
 800093e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2280      	movs	r2, #128	@ 0x80
 8000944:	0052      	lsls	r2, r2, #1
 8000946:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000948:	0021      	movs	r1, r4
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2201      	movs	r2, #1
 800094e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2201      	movs	r2, #1
 8000954:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	22a0      	movs	r2, #160	@ 0xa0
 8000960:	0212      	lsls	r2, r2, #8
 8000962:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	187b      	adds	r3, r7, r1
 800096c:	0018      	movs	r0, r3
 800096e:	f000 ff0d 	bl	800178c <HAL_RCC_OscConfig>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000976:	f000 fa43 	bl	8000e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097a:	2144      	movs	r1, #68	@ 0x44
 800097c:	187b      	adds	r3, r7, r1
 800097e:	220f      	movs	r2, #15
 8000980:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2100      	movs	r1, #0
 800099e:	0018      	movs	r0, r3
 80009a0:	f001 fac8 	bl	8001f34 <HAL_RCC_ClockConfig>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80009a8:	f000 fa2a 	bl	8000e00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80009ac:	211c      	movs	r1, #28
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2223      	movs	r2, #35	@ 0x23
 80009b2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2280      	movs	r2, #128	@ 0x80
 80009c4:	0252      	lsls	r2, r2, #9
 80009c6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	0018      	movs	r0, r3
 80009cc:	f001 fcb6 	bl	800233c <HAL_RCCEx_PeriphCLKConfig>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x104>
  {
    Error_Handler();
 80009d4:	f000 fa14 	bl	8000e00 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <SystemClock_Config+0x150>)
 80009da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <SystemClock_Config+0x150>)
 80009de:	2180      	movs	r1, #128	@ 0x80
 80009e0:	0509      	lsls	r1, r1, #20
 80009e2:	430a      	orrs	r2, r1
 80009e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2280      	movs	r2, #128	@ 0x80
 80009f0:	0552      	lsls	r2, r2, #21
 80009f2:	605a      	str	r2, [r3, #4]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <SystemClock_Config+0x154>)
 80009fe:	60da      	str	r2, [r3, #12]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2222      	movs	r2, #34	@ 0x22
 8000a04:	611a      	str	r2, [r3, #16]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2220      	movs	r2, #32
 8000a0a:	615a      	str	r2, [r3, #20]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 fe32 	bl	8002678 <HAL_RCCEx_CRSConfig>
}
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b025      	add	sp, #148	@ 0x94
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	40007000 	.word	0x40007000
 8000a20:	ffffe7ff 	.word	0xffffe7ff
 8000a24:	40021000 	.word	0x40021000
 8000a28:	000005b7 	.word	0x000005b7

08000a2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <MX_RTC_Init+0x60>)
 8000a32:	4a17      	ldr	r2, [pc, #92]	@ (8000a90 <MX_RTC_Init+0x64>)
 8000a34:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a36:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_RTC_Init+0x60>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a3c:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <MX_RTC_Init+0x60>)
 8000a3e:	227f      	movs	r2, #127	@ 0x7f
 8000a40:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a42:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <MX_RTC_Init+0x60>)
 8000a44:	22ff      	movs	r2, #255	@ 0xff
 8000a46:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <MX_RTC_Init+0x60>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <MX_RTC_Init+0x60>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a54:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <MX_RTC_Init+0x60>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <MX_RTC_Init+0x60>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a60:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <MX_RTC_Init+0x60>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 fe4e 	bl	8002704 <HAL_RTC_Init>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a6c:	f000 f9c8 	bl	8000e00 <Error_Handler>
   *  LSE = 32768 Hz
   *  Using RTC_WAKEUPCLOCK_RTCCLK_DIV16: 32768/16 = 2048 Hz
   *  For 15 seconds: 15 * 2048 = 30720 - 1 = 30719 (fits in 16-bit counter)
   *  Will wake every 15 seconds, but only process LoRaWAN every 40th wake (600 seconds = 10 minutes total)
   */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 30719, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000a70:	4908      	ldr	r1, [pc, #32]	@ (8000a94 <MX_RTC_Init+0x68>)
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_RTC_Init+0x60>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	0018      	movs	r0, r3
 8000a78:	f001 ff76 	bl	8002968 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000a80:	f000 f9be 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	20000028 	.word	0x20000028
 8000a90:	40002800 	.word	0x40002800
 8000a94:	000077ff 	.word	0x000077ff

08000a98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_USART1_UART_Init+0x60>)
 8000a9e:	4a17      	ldr	r2, [pc, #92]	@ (8000afc <MX_USART1_UART_Init+0x64>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_USART1_UART_Init+0x60>)
 8000aa4:	22e1      	movs	r2, #225	@ 0xe1
 8000aa6:	0252      	lsls	r2, r2, #9
 8000aa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <MX_USART1_UART_Init+0x60>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_USART1_UART_Init+0x60>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_USART1_UART_Init+0x60>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_USART1_UART_Init+0x60>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <MX_USART1_UART_Init+0x60>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_USART1_UART_Init+0x60>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ace:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <MX_USART1_UART_Init+0x60>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_USART1_UART_Init+0x60>)
 8000ad6:	2220      	movs	r2, #32
 8000ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000ada:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <MX_USART1_UART_Init+0x60>)
 8000adc:	2280      	movs	r2, #128	@ 0x80
 8000ade:	0192      	lsls	r2, r2, #6
 8000ae0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ae2:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <MX_USART1_UART_Init+0x60>)
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 f847 	bl	8002b78 <HAL_UART_Init>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000aee:	f000 f987 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000004c 	.word	0x2000004c
 8000afc:	40013800 	.word	0x40013800

08000b00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b04:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b06:	4a15      	ldr	r2, [pc, #84]	@ (8000b5c <MX_USART2_UART_Init+0x5c>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b0c:	2296      	movs	r2, #150	@ 0x96
 8000b0e:	0192      	lsls	r2, r2, #6
 8000b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b42:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b44:	0018      	movs	r0, r3
 8000b46:	f002 f817 	bl	8002b78 <HAL_UART_Init>
 8000b4a:	1e03      	subs	r3, r0, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f000 f957 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200000d4 	.word	0x200000d4
 8000b5c:	40004400 	.word	0x40004400

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_GPIO_Init+0x40>)
 8000b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <MX_GPIO_Init+0x40>)
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <MX_GPIO_Init+0x40>)
 8000b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b76:	2204      	movs	r2, #4
 8000b78:	4013      	ands	r3, r2
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <MX_GPIO_Init+0x40>)
 8000b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b82:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <MX_GPIO_Init+0x40>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	430a      	orrs	r2, r1
 8000b88:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <MX_GPIO_Init+0x40>)
 8000b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4013      	ands	r3, r2
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Wake up from deep sleep every 15 seconds */
  /* Increment counter - only process LoRaWAN every 40th wake-up (600 seconds = 10 minutes total) */
  wakeup_counter++;
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b02      	ldr	r3, [pc, #8]	@ (8000bc0 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 8000bb6:	701a      	strb	r2, [r3, #0]
  
  /* For debugging: you can add LED toggle here to see wake-ups every 15 seconds */
  /* If you have an LED, uncomment next line to see it blink every 15 seconds */
  /* HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); */
}
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000160 	.word	0x20000160

08000bc4 <ConfigureGPIOForLowPower>:
/**
  * @brief  Configure GPIOs for ultra-low power consumption
  * @retval None
  */
void ConfigureGPIOForLowPower(void)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b08b      	sub	sp, #44	@ 0x2c
 8000bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bca:	2414      	movs	r4, #20
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	0018      	movs	r0, r3
 8000bd0:	2314      	movs	r3, #20
 8000bd2:	001a      	movs	r2, r3
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	f003 f845 	bl	8003c64 <memset>
  
  /* Enable all GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b3a      	ldr	r3, [pc, #232]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bde:	4b39      	ldr	r3, [pc, #228]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	430a      	orrs	r2, r1
 8000be4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000be6:	4b37      	ldr	r3, [pc, #220]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bea:	2201      	movs	r2, #1
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b34      	ldr	r3, [pc, #208]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bf6:	4b33      	ldr	r3, [pc, #204]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bfe:	4b31      	ldr	r3, [pc, #196]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c02:	2202      	movs	r2, #2
 8000c04:	4013      	ands	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000c10:	2104      	movs	r1, #4
 8000c12:	430a      	orrs	r2, r1
 8000c14:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c16:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	4b28      	ldr	r3, [pc, #160]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c26:	4b27      	ldr	r3, [pc, #156]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000c28:	2108      	movs	r1, #8
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c2e:	4b25      	ldr	r3, [pc, #148]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c32:	2208      	movs	r2, #8
 8000c34:	4013      	ands	r3, r2
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c3e:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000c40:	2180      	movs	r1, #128	@ 0x80
 8000c42:	430a      	orrs	r2, r1
 8000c44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c46:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <ConfigureGPIOForLowPower+0x100>)
 8000c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c4a:	2280      	movs	r2, #128	@ 0x80
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
  
  /* Configure all GPIO pins as analog to reduce power consumption */
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2203      	movs	r2, #3
 8000c56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  
  /* Configure GPIOA pins (except UART pins PA2, PA3 and PA9, PA10) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | 
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	4a19      	ldr	r2, [pc, #100]	@ (8000cc8 <ConfigureGPIOForLowPower+0x104>)
 8000c62:	601a      	str	r2, [r3, #0]
                        GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | 
                        GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	193a      	adds	r2, r7, r4
 8000c66:	23a0      	movs	r3, #160	@ 0xa0
 8000c68:	05db      	lsls	r3, r3, #23
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 fba5 	bl	80013bc <HAL_GPIO_Init>
  
  /* Configure all GPIOB pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	4a15      	ldr	r2, [pc, #84]	@ (8000ccc <ConfigureGPIOForLowPower+0x108>)
 8000c76:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	4a15      	ldr	r2, [pc, #84]	@ (8000cd0 <ConfigureGPIOForLowPower+0x10c>)
 8000c7c:	0019      	movs	r1, r3
 8000c7e:	0010      	movs	r0, r2
 8000c80:	f000 fb9c 	bl	80013bc <HAL_GPIO_Init>
  
  /* Configure GPIOC pins (except PC14, PC15 for LSE crystal) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | 
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	4a13      	ldr	r2, [pc, #76]	@ (8000cd4 <ConfigureGPIOForLowPower+0x110>)
 8000c88:	601a      	str	r2, [r3, #0]
                        GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | 
                        GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | 
                        GPIO_PIN_12 | GPIO_PIN_13;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <ConfigureGPIOForLowPower+0x114>)
 8000c8e:	0019      	movs	r1, r3
 8000c90:	0010      	movs	r0, r2
 8000c92:	f000 fb93 	bl	80013bc <HAL_GPIO_Init>
  
  /* Configure all GPIOD pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	4a0c      	ldr	r2, [pc, #48]	@ (8000ccc <ConfigureGPIOForLowPower+0x108>)
 8000c9a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cdc <ConfigureGPIOForLowPower+0x118>)
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	f000 fb8a 	bl	80013bc <HAL_GPIO_Init>
  
  /* Configure all GPIOH pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000ca8:	0021      	movs	r1, r4
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <ConfigureGPIOForLowPower+0x108>)
 8000cae:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce0 <ConfigureGPIOForLowPower+0x11c>)
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	0010      	movs	r0, r2
 8000cb8:	f000 fb80 	bl	80013bc <HAL_GPIO_Init>
}
 8000cbc:	46c0      	nop			@ (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b00b      	add	sp, #44	@ 0x2c
 8000cc2:	bd90      	pop	{r4, r7, pc}
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	0000f9f3 	.word	0x0000f9f3
 8000ccc:	0000ffff 	.word	0x0000ffff
 8000cd0:	50000400 	.word	0x50000400
 8000cd4:	00003fff 	.word	0x00003fff
 8000cd8:	50000800 	.word	0x50000800
 8000cdc:	50000c00 	.word	0x50000c00
 8000ce0:	50001c00 	.word	0x50001c00

08000ce4 <RestoreGPIOAfterWakeup>:
/**
  * @brief  Restore GPIOs after wake-up
  * @retval None
  */
void RestoreGPIOAfterWakeup(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* Reinitialize GPIOs needed for UART operation */
  MX_GPIO_Init();
 8000ce8:	f7ff ff3a 	bl	8000b60 <MX_GPIO_Init>
}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <EnterDeepSleepMode>:
/**
  * @brief  Enter Deep Sleep Mode using STOP mode with RTC wake-up
  * @retval None
  */
void EnterDeepSleepMode(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
  /* Configure all GPIOs for ultra-low power */
  ConfigureGPIOForLowPower();
 8000cfa:	f7ff ff63 	bl	8000bc4 <ConfigureGPIOForLowPower>
  
  /* Disable unnecessary peripheral clocks */
  __HAL_RCC_USART1_CLK_DISABLE();
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d02:	4b3b      	ldr	r3, [pc, #236]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d04:	493b      	ldr	r1, [pc, #236]	@ (8000df4 <EnterDeepSleepMode+0x100>)
 8000d06:	400a      	ands	r2, r1
 8000d08:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_USART2_CLK_DISABLE();
 8000d0a:	4b39      	ldr	r3, [pc, #228]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d0e:	4b38      	ldr	r3, [pc, #224]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d10:	4939      	ldr	r1, [pc, #228]	@ (8000df8 <EnterDeepSleepMode+0x104>)
 8000d12:	400a      	ands	r2, r1
 8000d14:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000d16:	4b36      	ldr	r3, [pc, #216]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d1a:	4b35      	ldr	r3, [pc, #212]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	438a      	bics	r2, r1
 8000d20:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000d22:	4b33      	ldr	r3, [pc, #204]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d26:	4b32      	ldr	r3, [pc, #200]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d28:	2102      	movs	r1, #2
 8000d2a:	438a      	bics	r2, r1
 8000d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8000d2e:	4b30      	ldr	r3, [pc, #192]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d32:	4b2f      	ldr	r3, [pc, #188]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d34:	2104      	movs	r1, #4
 8000d36:	438a      	bics	r2, r1
 8000d38:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOD_CLK_DISABLE();
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d40:	2108      	movs	r1, #8
 8000d42:	438a      	bics	r2, r1
 8000d44:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d4a:	4b29      	ldr	r3, [pc, #164]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d4c:	2180      	movs	r1, #128	@ 0x80
 8000d4e:	438a      	bics	r2, r1
 8000d50:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Suspend SysTick to avoid wake-up from SysTick interrupt */
  HAL_SuspendTick();
 8000d52:	f000 f9ef 	bl	8001134 <HAL_SuspendTick>
  
  /* Clear any pending wake-up flags */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000d56:	4b29      	ldr	r3, [pc, #164]	@ (8000dfc <EnterDeepSleepMode+0x108>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4b28      	ldr	r3, [pc, #160]	@ (8000dfc <EnterDeepSleepMode+0x108>)
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	601a      	str	r2, [r3, #0]
  
  /* Enter STOP Mode with Low Power Regulator */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000d62:	2101      	movs	r1, #1
 8000d64:	2001      	movs	r0, #1
 8000d66:	f000 fcb5 	bl	80016d4 <HAL_PWR_EnterSTOPMode>
  
  /* === DEVICE IS NOW IN DEEP SLEEP === */
  /* === WAKE UP OCCURS HERE === */
  
  /* Upon wake-up, the system clock needs to be reconfigured */
  SystemClock_Config();
 8000d6a:	f7ff fdb3 	bl	80008d4 <SystemClock_Config>
  
  /* Re-enable peripheral clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d72:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	430a      	orrs	r2, r1
 8000d78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d92:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d96:	2202      	movs	r2, #2
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000da2:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000da4:	2104      	movs	r1, #4
 8000da6:	430a      	orrs	r2, r1
 8000da8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000daa:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dae:	2204      	movs	r2, #4
 8000db0:	4013      	ands	r3, r2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_USART1_CLK_ENABLE();
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000db8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dba:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000dbc:	2180      	movs	r1, #128	@ 0x80
 8000dbe:	01c9      	lsls	r1, r1, #7
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_USART2_CLK_ENABLE();
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000dc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <EnterDeepSleepMode+0xfc>)
 8000dca:	2180      	movs	r1, #128	@ 0x80
 8000dcc:	0289      	lsls	r1, r1, #10
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Restore GPIO configuration for normal operation */
  RestoreGPIOAfterWakeup();
 8000dd2:	f7ff ff87 	bl	8000ce4 <RestoreGPIOAfterWakeup>
  
  /* Re-initialize UARTs */
  MX_USART1_UART_Init();
 8000dd6:	f7ff fe5f 	bl	8000a98 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000dda:	f7ff fe91 	bl	8000b00 <MX_USART2_UART_Init>
  
  /* Resume SysTick */
  HAL_ResumeTick();
 8000dde:	f000 f9b7 	bl	8001150 <HAL_ResumeTick>
  
  /* Small delay to ensure system is stable after wake-up */
  HAL_Delay(10);
 8000de2:	200a      	movs	r0, #10
 8000de4:	f000 f982 	bl	80010ec <HAL_Delay>
}
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b004      	add	sp, #16
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40021000 	.word	0x40021000
 8000df4:	ffffbfff 	.word	0xffffbfff
 8000df8:	fffdffff 	.word	0xfffdffff
 8000dfc:	40007000 	.word	0x40007000

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	e7fd      	b.n	8000e08 <Error_Handler+0x8>

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e10:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <HAL_MspInit+0x24>)
 8000e12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_MspInit+0x24>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1c:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <HAL_MspInit+0x24>)
 8000e1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <HAL_MspInit+0x24>)
 8000e22:	2180      	movs	r1, #128	@ 0x80
 8000e24:	0549      	lsls	r1, r1, #21
 8000e26:	430a      	orrs	r2, r1
 8000e28:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <HAL_RTC_MspInit+0x38>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d10e      	bne.n	8000e64 <HAL_RTC_MspInit+0x30>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <HAL_RTC_MspInit+0x3c>)
 8000e48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000e4a:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <HAL_RTC_MspInit+0x3c>)
 8000e4c:	2180      	movs	r1, #128	@ 0x80
 8000e4e:	02c9      	lsls	r1, r1, #11
 8000e50:	430a      	orrs	r2, r1
 8000e52:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f000 fa33 	bl	80012c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f000 fa45 	bl	80012ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000e64:	46c0      	nop			@ (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40002800 	.word	0x40002800
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b08b      	sub	sp, #44	@ 0x2c
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	2414      	movs	r4, #20
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	0018      	movs	r0, r3
 8000e82:	2314      	movs	r3, #20
 8000e84:	001a      	movs	r2, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	f002 feec 	bl	8003c64 <memset>
  if(huart->Instance==USART1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a30      	ldr	r2, [pc, #192]	@ (8000f54 <HAL_UART_MspInit+0xe0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d12b      	bne.n	8000eee <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e96:	4b30      	ldr	r3, [pc, #192]	@ (8000f58 <HAL_UART_MspInit+0xe4>)
 8000e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <HAL_UART_MspInit+0xe4>)
 8000e9c:	2180      	movs	r1, #128	@ 0x80
 8000e9e:	01c9      	lsls	r1, r1, #7
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <HAL_UART_MspInit+0xe4>)
 8000ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f58 <HAL_UART_MspInit+0xe4>)
 8000eaa:	2101      	movs	r1, #1
 8000eac:	430a      	orrs	r2, r1
 8000eae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000eb0:	4b29      	ldr	r3, [pc, #164]	@ (8000f58 <HAL_UART_MspInit+0xe4>)
 8000eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ebc:	193b      	adds	r3, r7, r4
 8000ebe:	22c0      	movs	r2, #192	@ 0xc0
 8000ec0:	00d2      	lsls	r2, r2, #3
 8000ec2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	0021      	movs	r1, r4
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2202      	movs	r2, #2
 8000eca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2204      	movs	r2, #4
 8000edc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	187a      	adds	r2, r7, r1
 8000ee0:	23a0      	movs	r3, #160	@ 0xa0
 8000ee2:	05db      	lsls	r3, r3, #23
 8000ee4:	0011      	movs	r1, r2
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 fa68 	bl	80013bc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eec:	e02e      	b.n	8000f4c <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f5c <HAL_UART_MspInit+0xe8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d129      	bne.n	8000f4c <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef8:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <HAL_UART_MspInit+0xe4>)
 8000efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000efc:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <HAL_UART_MspInit+0xe4>)
 8000efe:	2180      	movs	r1, #128	@ 0x80
 8000f00:	0289      	lsls	r1, r1, #10
 8000f02:	430a      	orrs	r2, r1
 8000f04:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <HAL_UART_MspInit+0xe4>)
 8000f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f0a:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <HAL_UART_MspInit+0xe4>)
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <HAL_UART_MspInit+0xe4>)
 8000f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f16:	2201      	movs	r2, #1
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f1e:	2114      	movs	r1, #20
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	220c      	movs	r2, #12
 8000f24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2202      	movs	r2, #2
 8000f2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2203      	movs	r2, #3
 8000f36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	187a      	adds	r2, r7, r1
 8000f40:	23a0      	movs	r3, #160	@ 0xa0
 8000f42:	05db      	lsls	r3, r3, #23
 8000f44:	0011      	movs	r1, r2
 8000f46:	0018      	movs	r0, r3
 8000f48:	f000 fa38 	bl	80013bc <HAL_GPIO_Init>
}
 8000f4c:	46c0      	nop			@ (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b00b      	add	sp, #44	@ 0x2c
 8000f52:	bd90      	pop	{r4, r7, pc}
 8000f54:	40013800 	.word	0x40013800
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40004400 	.word	0x40004400

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f64:	46c0      	nop			@ (mov r8, r8)
 8000f66:	e7fd      	b.n	8000f64 <NMI_Handler+0x4>

08000f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6c:	46c0      	nop			@ (mov r8, r8)
 8000f6e:	e7fd      	b.n	8000f6c <HardFault_Handler+0x4>

08000f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f74:	46c0      	nop			@ (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f88:	f000 f894 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000f98:	4b03      	ldr	r3, [pc, #12]	@ (8000fa8 <RTC_IRQHandler+0x14>)
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f001 fdbc 	bl	8002b18 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	20000028 	.word	0x20000028

08000fac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb0:	46c0      	nop			@ (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000fb8:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000fba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fbc:	f7ff fff6 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	@ (8000ff8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <LoopForever+0xe>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001004 <LoopForever+0x16>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f002 fe45 	bl	8003c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fc23 	bl	8000834 <main>

08000fee <LoopForever>:

LoopForever:
    b LoopForever
 8000fee:	e7fe      	b.n	8000fee <LoopForever>
   ldr   r0, =_estack
 8000ff0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ffc:	08003da0 	.word	0x08003da0
  ldr r2, =_sbss
 8001000:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001004:	20000168 	.word	0x20000168

08001008 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_COMP_IRQHandler>
	...

0800100c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <HAL_Init+0x3c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <HAL_Init+0x3c>)
 800101e:	2140      	movs	r1, #64	@ 0x40
 8001020:	430a      	orrs	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001024:	2003      	movs	r0, #3
 8001026:	f000 f811 	bl	800104c <HAL_InitTick>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d003      	beq.n	8001036 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	e001      	b.n	800103a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001036:	f7ff fee9 	bl	8000e0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
}
 800103e:	0018      	movs	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	40022000 	.word	0x40022000

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <HAL_InitTick+0x5c>)
 8001056:	681c      	ldr	r4, [r3, #0]
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <HAL_InitTick+0x60>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	0019      	movs	r1, r3
 800105e:	23fa      	movs	r3, #250	@ 0xfa
 8001060:	0098      	lsls	r0, r3, #2
 8001062:	f7ff f859 	bl	8000118 <__udivsi3>
 8001066:	0003      	movs	r3, r0
 8001068:	0019      	movs	r1, r3
 800106a:	0020      	movs	r0, r4
 800106c:	f7ff f854 	bl	8000118 <__udivsi3>
 8001070:	0003      	movs	r3, r0
 8001072:	0018      	movs	r0, r3
 8001074:	f000 f94b 	bl	800130e <HAL_SYSTICK_Config>
 8001078:	1e03      	subs	r3, r0, #0
 800107a:	d001      	beq.n	8001080 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e00f      	b.n	80010a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d80b      	bhi.n	800109e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	2301      	movs	r3, #1
 800108a:	425b      	negs	r3, r3
 800108c:	2200      	movs	r2, #0
 800108e:	0018      	movs	r0, r3
 8001090:	f000 f918 	bl	80012c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_InitTick+0x64>)
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b003      	add	sp, #12
 80010a6:	bd90      	pop	{r4, r7, pc}
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <HAL_IncTick+0x1c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	001a      	movs	r2, r3
 80010be:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <HAL_IncTick+0x20>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	18d2      	adds	r2, r2, r3
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <HAL_IncTick+0x20>)
 80010c6:	601a      	str	r2, [r3, #0]
}
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000164 	.word	0x20000164

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b02      	ldr	r3, [pc, #8]	@ (80010e8 <HAL_GetTick+0x10>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	0018      	movs	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	20000164 	.word	0x20000164

080010ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f4:	f7ff fff0 	bl	80010d8 <HAL_GetTick>
 80010f8:	0003      	movs	r3, r0
 80010fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	3301      	adds	r3, #1
 8001104:	d005      	beq.n	8001112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_Delay+0x44>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	001a      	movs	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	189b      	adds	r3, r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ff ffe0 	bl	80010d8 <HAL_GetTick>
 8001118:	0002      	movs	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d8f7      	bhi.n	8001114 <HAL_Delay+0x28>
  {
  }
}
 8001124:	46c0      	nop			@ (mov r8, r8)
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b004      	add	sp, #16
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	20000008 	.word	0x20000008

08001134 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <HAL_SuspendTick+0x18>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <HAL_SuspendTick+0x18>)
 800113e:	2102      	movs	r1, #2
 8001140:	438a      	bics	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
}
 8001144:	46c0      	nop			@ (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001154:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <HAL_ResumeTick+0x18>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <HAL_ResumeTick+0x18>)
 800115a:	2102      	movs	r1, #2
 800115c:	430a      	orrs	r2, r1
 800115e:	601a      	str	r2, [r3, #0]
}
 8001160:	46c0      	nop			@ (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	e000e010 	.word	0xe000e010

0800116c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	0002      	movs	r2, r0
 8001174:	1dfb      	adds	r3, r7, #7
 8001176:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001178:	1dfb      	adds	r3, r7, #7
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b7f      	cmp	r3, #127	@ 0x7f
 800117e:	d809      	bhi.n	8001194 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001180:	1dfb      	adds	r3, r7, #7
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	001a      	movs	r2, r3
 8001186:	231f      	movs	r3, #31
 8001188:	401a      	ands	r2, r3
 800118a:	4b04      	ldr	r3, [pc, #16]	@ (800119c <__NVIC_EnableIRQ+0x30>)
 800118c:	2101      	movs	r1, #1
 800118e:	4091      	lsls	r1, r2
 8001190:	000a      	movs	r2, r1
 8001192:	601a      	str	r2, [r3, #0]
  }
}
 8001194:	46c0      	nop			@ (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b002      	add	sp, #8
 800119a:	bd80      	pop	{r7, pc}
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	0002      	movs	r2, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80011b4:	d828      	bhi.n	8001208 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001274 <__NVIC_SetPriority+0xd4>)
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	33c0      	adds	r3, #192	@ 0xc0
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	589b      	ldr	r3, [r3, r2]
 80011c6:	1dfa      	adds	r2, r7, #7
 80011c8:	7812      	ldrb	r2, [r2, #0]
 80011ca:	0011      	movs	r1, r2
 80011cc:	2203      	movs	r2, #3
 80011ce:	400a      	ands	r2, r1
 80011d0:	00d2      	lsls	r2, r2, #3
 80011d2:	21ff      	movs	r1, #255	@ 0xff
 80011d4:	4091      	lsls	r1, r2
 80011d6:	000a      	movs	r2, r1
 80011d8:	43d2      	mvns	r2, r2
 80011da:	401a      	ands	r2, r3
 80011dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	019b      	lsls	r3, r3, #6
 80011e2:	22ff      	movs	r2, #255	@ 0xff
 80011e4:	401a      	ands	r2, r3
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	0018      	movs	r0, r3
 80011ec:	2303      	movs	r3, #3
 80011ee:	4003      	ands	r3, r0
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f4:	481f      	ldr	r0, [pc, #124]	@ (8001274 <__NVIC_SetPriority+0xd4>)
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	430a      	orrs	r2, r1
 8001200:	33c0      	adds	r3, #192	@ 0xc0
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001206:	e031      	b.n	800126c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001208:	4a1b      	ldr	r2, [pc, #108]	@ (8001278 <__NVIC_SetPriority+0xd8>)
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	0019      	movs	r1, r3
 8001210:	230f      	movs	r3, #15
 8001212:	400b      	ands	r3, r1
 8001214:	3b08      	subs	r3, #8
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3306      	adds	r3, #6
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	18d3      	adds	r3, r2, r3
 800121e:	3304      	adds	r3, #4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1dfa      	adds	r2, r7, #7
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	0011      	movs	r1, r2
 8001228:	2203      	movs	r2, #3
 800122a:	400a      	ands	r2, r1
 800122c:	00d2      	lsls	r2, r2, #3
 800122e:	21ff      	movs	r1, #255	@ 0xff
 8001230:	4091      	lsls	r1, r2
 8001232:	000a      	movs	r2, r1
 8001234:	43d2      	mvns	r2, r2
 8001236:	401a      	ands	r2, r3
 8001238:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	019b      	lsls	r3, r3, #6
 800123e:	22ff      	movs	r2, #255	@ 0xff
 8001240:	401a      	ands	r2, r3
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	0018      	movs	r0, r3
 8001248:	2303      	movs	r3, #3
 800124a:	4003      	ands	r3, r0
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001250:	4809      	ldr	r0, [pc, #36]	@ (8001278 <__NVIC_SetPriority+0xd8>)
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	001c      	movs	r4, r3
 8001258:	230f      	movs	r3, #15
 800125a:	4023      	ands	r3, r4
 800125c:	3b08      	subs	r3, #8
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	430a      	orrs	r2, r1
 8001262:	3306      	adds	r3, #6
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	18c3      	adds	r3, r0, r3
 8001268:	3304      	adds	r3, #4
 800126a:	601a      	str	r2, [r3, #0]
}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b003      	add	sp, #12
 8001272:	bd90      	pop	{r4, r7, pc}
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	1e5a      	subs	r2, r3, #1
 8001288:	2380      	movs	r3, #128	@ 0x80
 800128a:	045b      	lsls	r3, r3, #17
 800128c:	429a      	cmp	r2, r3
 800128e:	d301      	bcc.n	8001294 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001290:	2301      	movs	r3, #1
 8001292:	e010      	b.n	80012b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <SysTick_Config+0x44>)
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	3a01      	subs	r2, #1
 800129a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129c:	2301      	movs	r3, #1
 800129e:	425b      	negs	r3, r3
 80012a0:	2103      	movs	r1, #3
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7ff ff7c 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <SysTick_Config+0x44>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <SysTick_Config+0x44>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	0018      	movs	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b002      	add	sp, #8
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	210f      	movs	r1, #15
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	1c02      	adds	r2, r0, #0
 80012d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b25b      	sxtb	r3, r3
 80012de:	0011      	movs	r1, r2
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff ff5d 	bl	80011a0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b004      	add	sp, #16
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	0002      	movs	r2, r0
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff ff33 	bl	800116c <__NVIC_EnableIRQ>
}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b002      	add	sp, #8
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff ffaf 	bl	800127c <SysTick_Config>
 800131e:	0003      	movs	r3, r0
}
 8001320:	0018      	movs	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	b002      	add	sp, #8
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001330:	230f      	movs	r3, #15
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2225      	movs	r2, #37	@ 0x25
 800133c:	5c9b      	ldrb	r3, [r3, r2]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d008      	beq.n	8001356 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2204      	movs	r2, #4
 8001348:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2224      	movs	r2, #36	@ 0x24
 800134e:	2100      	movs	r1, #0
 8001350:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e024      	b.n	80013a0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	210e      	movs	r1, #14
 8001362:	438a      	bics	r2, r1
 8001364:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	438a      	bics	r2, r1
 8001374:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	221c      	movs	r2, #28
 800137c:	401a      	ands	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	2101      	movs	r1, #1
 8001384:	4091      	lsls	r1, r2
 8001386:	000a      	movs	r2, r1
 8001388:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2225      	movs	r2, #37	@ 0x25
 800138e:	2101      	movs	r1, #1
 8001390:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2224      	movs	r2, #36	@ 0x24
 8001396:	2100      	movs	r1, #0
 8001398:	5499      	strb	r1, [r3, r2]

    return status;
 800139a:	230f      	movs	r3, #15
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b004      	add	sp, #16
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80013d2:	e155      	b.n	8001680 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2101      	movs	r1, #1
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	4091      	lsls	r1, r2
 80013de:	000a      	movs	r2, r1
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d100      	bne.n	80013ec <HAL_GPIO_Init+0x30>
 80013ea:	e146      	b.n	800167a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2203      	movs	r2, #3
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d005      	beq.n	8001404 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001400:	2b02      	cmp	r3, #2
 8001402:	d130      	bne.n	8001466 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	409a      	lsls	r2, r3
 8001412:	0013      	movs	r3, r2
 8001414:	43da      	mvns	r2, r3
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	409a      	lsls	r2, r3
 8001426:	0013      	movs	r3, r2
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800143a:	2201      	movs	r2, #1
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
 8001440:	0013      	movs	r3, r2
 8001442:	43da      	mvns	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	2201      	movs	r2, #1
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2203      	movs	r2, #3
 800146c:	4013      	ands	r3, r2
 800146e:	2b03      	cmp	r3, #3
 8001470:	d017      	beq.n	80014a2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	409a      	lsls	r2, r3
 8001480:	0013      	movs	r3, r2
 8001482:	43da      	mvns	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	409a      	lsls	r2, r3
 8001494:	0013      	movs	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2203      	movs	r2, #3
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d123      	bne.n	80014f6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	08da      	lsrs	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3208      	adds	r2, #8
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	58d3      	ldr	r3, [r2, r3]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2207      	movs	r2, #7
 80014c0:	4013      	ands	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	220f      	movs	r2, #15
 80014c6:	409a      	lsls	r2, r3
 80014c8:	0013      	movs	r3, r2
 80014ca:	43da      	mvns	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	691a      	ldr	r2, [r3, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2107      	movs	r1, #7
 80014da:	400b      	ands	r3, r1
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	08da      	lsrs	r2, r3, #3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3208      	adds	r2, #8
 80014f0:	0092      	lsls	r2, r2, #2
 80014f2:	6939      	ldr	r1, [r7, #16]
 80014f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	43da      	mvns	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2203      	movs	r2, #3
 8001514:	401a      	ands	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	23c0      	movs	r3, #192	@ 0xc0
 8001530:	029b      	lsls	r3, r3, #10
 8001532:	4013      	ands	r3, r2
 8001534:	d100      	bne.n	8001538 <HAL_GPIO_Init+0x17c>
 8001536:	e0a0      	b.n	800167a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001538:	4b57      	ldr	r3, [pc, #348]	@ (8001698 <HAL_GPIO_Init+0x2dc>)
 800153a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800153c:	4b56      	ldr	r3, [pc, #344]	@ (8001698 <HAL_GPIO_Init+0x2dc>)
 800153e:	2101      	movs	r1, #1
 8001540:	430a      	orrs	r2, r1
 8001542:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001544:	4a55      	ldr	r2, [pc, #340]	@ (800169c <HAL_GPIO_Init+0x2e0>)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	589b      	ldr	r3, [r3, r2]
 8001550:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2203      	movs	r2, #3
 8001556:	4013      	ands	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	409a      	lsls	r2, r3
 800155e:	0013      	movs	r3, r2
 8001560:	43da      	mvns	r2, r3
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	23a0      	movs	r3, #160	@ 0xa0
 800156c:	05db      	lsls	r3, r3, #23
 800156e:	429a      	cmp	r2, r3
 8001570:	d01f      	beq.n	80015b2 <HAL_GPIO_Init+0x1f6>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4a      	ldr	r2, [pc, #296]	@ (80016a0 <HAL_GPIO_Init+0x2e4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d019      	beq.n	80015ae <HAL_GPIO_Init+0x1f2>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a49      	ldr	r2, [pc, #292]	@ (80016a4 <HAL_GPIO_Init+0x2e8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d013      	beq.n	80015aa <HAL_GPIO_Init+0x1ee>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a48      	ldr	r2, [pc, #288]	@ (80016a8 <HAL_GPIO_Init+0x2ec>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d00d      	beq.n	80015a6 <HAL_GPIO_Init+0x1ea>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a47      	ldr	r2, [pc, #284]	@ (80016ac <HAL_GPIO_Init+0x2f0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d007      	beq.n	80015a2 <HAL_GPIO_Init+0x1e6>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a46      	ldr	r2, [pc, #280]	@ (80016b0 <HAL_GPIO_Init+0x2f4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d101      	bne.n	800159e <HAL_GPIO_Init+0x1e2>
 800159a:	2305      	movs	r3, #5
 800159c:	e00a      	b.n	80015b4 <HAL_GPIO_Init+0x1f8>
 800159e:	2306      	movs	r3, #6
 80015a0:	e008      	b.n	80015b4 <HAL_GPIO_Init+0x1f8>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x1f8>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x1f8>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x1f8>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x1f8>
 80015b2:	2300      	movs	r3, #0
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	2103      	movs	r1, #3
 80015b8:	400a      	ands	r2, r1
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c4:	4935      	ldr	r1, [pc, #212]	@ (800169c <HAL_GPIO_Init+0x2e0>)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b38      	ldr	r3, [pc, #224]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43da      	mvns	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	2380      	movs	r3, #128	@ 0x80
 80015e8:	035b      	lsls	r3, r3, #13
 80015ea:	4013      	ands	r3, r2
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015f6:	4b2f      	ldr	r3, [pc, #188]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015fc:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43da      	mvns	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	039b      	lsls	r3, r3, #14
 8001614:	4013      	ands	r3, r2
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001620:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001626:	4b23      	ldr	r3, [pc, #140]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43da      	mvns	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	2380      	movs	r3, #128	@ 0x80
 800163c:	029b      	lsls	r3, r3, #10
 800163e:	4013      	ands	r3, r2
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800164a:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001650:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43da      	mvns	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	2380      	movs	r3, #128	@ 0x80
 8001666:	025b      	lsls	r3, r3, #9
 8001668:	4013      	ands	r3, r2
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001674:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <HAL_GPIO_Init+0x2f8>)
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	40da      	lsrs	r2, r3
 8001688:	1e13      	subs	r3, r2, #0
 800168a:	d000      	beq.n	800168e <HAL_GPIO_Init+0x2d2>
 800168c:	e6a2      	b.n	80013d4 <HAL_GPIO_Init+0x18>
  }
}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	46c0      	nop			@ (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	b006      	add	sp, #24
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	50000400 	.word	0x50000400
 80016a4:	50000800 	.word	0x50000800
 80016a8:	50000c00 	.word	0x50000c00
 80016ac:	50001000 	.word	0x50001000
 80016b0:	50001c00 	.word	0x50001c00
 80016b4:	40010400 	.word	0x40010400

080016b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80016bc:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80016c2:	2180      	movs	r1, #128	@ 0x80
 80016c4:	0049      	lsls	r1, r1, #1
 80016c6:	430a      	orrs	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]
}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40007000 	.word	0x40007000

080016d4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	000a      	movs	r2, r1
 80016de:	1cfb      	adds	r3, r7, #3
 80016e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80016e6:	4b25      	ldr	r3, [pc, #148]	@ (800177c <HAL_PWR_EnterSTOPMode+0xa8>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80016f2:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <HAL_PWR_EnterSTOPMode+0xac>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	2201      	movs	r2, #1
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d008      	beq.n	8001714 <HAL_PWR_EnterSTOPMode+0x40>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001708:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <HAL_PWR_EnterSTOPMode+0xa8>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <HAL_PWR_EnterSTOPMode+0xa8>)
 800170e:	491d      	ldr	r1, [pc, #116]	@ (8001784 <HAL_PWR_EnterSTOPMode+0xb0>)
 8001710:	400a      	ands	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2203      	movs	r2, #3
 800171e:	4393      	bics	r3, r2
 8001720:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4313      	orrs	r3, r2
 8001728:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <HAL_PWR_EnterSTOPMode+0xa8>)
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001730:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001736:	2104      	movs	r1, #4
 8001738:	430a      	orrs	r2, r1
 800173a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800173c:	1cfb      	adds	r3, r7, #3
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001744:	bf30      	wfi
 8001746:	e002      	b.n	800174e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001748:	bf40      	sev
    __WFE();
 800174a:	bf20      	wfe
    __WFE();
 800174c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800174e:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001754:	2104      	movs	r1, #4
 8001756:	438a      	bics	r2, r1
 8001758:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d009      	beq.n	8001774 <HAL_PWR_EnterSTOPMode+0xa0>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d006      	beq.n	8001774 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001766:	4b05      	ldr	r3, [pc, #20]	@ (800177c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b04      	ldr	r3, [pc, #16]	@ (800177c <HAL_PWR_EnterSTOPMode+0xa8>)
 800176c:	2180      	movs	r1, #128	@ 0x80
 800176e:	0089      	lsls	r1, r1, #2
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]
  }
}
 8001774:	46c0      	nop			@ (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	b006      	add	sp, #24
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40007000 	.word	0x40007000
 8001780:	40010000 	.word	0x40010000
 8001784:	fffffdff 	.word	0xfffffdff
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800178c:	b5b0      	push	{r4, r5, r7, lr}
 800178e:	b08a      	sub	sp, #40	@ 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	f000 fbbf 	bl	8001f1e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a0:	4bc9      	ldr	r3, [pc, #804]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	220c      	movs	r2, #12
 80017a6:	4013      	ands	r3, r2
 80017a8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017aa:	4bc7      	ldr	r3, [pc, #796]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	2380      	movs	r3, #128	@ 0x80
 80017b0:	025b      	lsls	r3, r3, #9
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	d100      	bne.n	80017c2 <HAL_RCC_OscConfig+0x36>
 80017c0:	e07e      	b.n	80018c0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d007      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d112      	bne.n	80017f4 <HAL_RCC_OscConfig+0x68>
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	2380      	movs	r3, #128	@ 0x80
 80017d2:	025b      	lsls	r3, r3, #9
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d10d      	bne.n	80017f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	4bbb      	ldr	r3, [pc, #748]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	029b      	lsls	r3, r3, #10
 80017e0:	4013      	ands	r3, r2
 80017e2:	d100      	bne.n	80017e6 <HAL_RCC_OscConfig+0x5a>
 80017e4:	e06b      	b.n	80018be <HAL_RCC_OscConfig+0x132>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d167      	bne.n	80018be <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f000 fb95 	bl	8001f1e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	025b      	lsls	r3, r3, #9
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_OscConfig+0x84>
 8001800:	4bb1      	ldr	r3, [pc, #708]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4bb0      	ldr	r3, [pc, #704]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001806:	2180      	movs	r1, #128	@ 0x80
 8001808:	0249      	lsls	r1, r1, #9
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e027      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	23a0      	movs	r3, #160	@ 0xa0
 8001816:	02db      	lsls	r3, r3, #11
 8001818:	429a      	cmp	r2, r3
 800181a:	d10e      	bne.n	800183a <HAL_RCC_OscConfig+0xae>
 800181c:	4baa      	ldr	r3, [pc, #680]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4ba9      	ldr	r3, [pc, #676]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001822:	2180      	movs	r1, #128	@ 0x80
 8001824:	02c9      	lsls	r1, r1, #11
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	4ba7      	ldr	r3, [pc, #668]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4ba6      	ldr	r3, [pc, #664]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001830:	2180      	movs	r1, #128	@ 0x80
 8001832:	0249      	lsls	r1, r1, #9
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e012      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 800183a:	4ba3      	ldr	r3, [pc, #652]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4ba2      	ldr	r3, [pc, #648]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001840:	49a2      	ldr	r1, [pc, #648]	@ (8001acc <HAL_RCC_OscConfig+0x340>)
 8001842:	400a      	ands	r2, r1
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	4ba0      	ldr	r3, [pc, #640]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	@ 0x80
 800184c:	025b      	lsls	r3, r3, #9
 800184e:	4013      	ands	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4b9c      	ldr	r3, [pc, #624]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b9b      	ldr	r3, [pc, #620]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 800185a:	499d      	ldr	r1, [pc, #628]	@ (8001ad0 <HAL_RCC_OscConfig+0x344>)
 800185c:	400a      	ands	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d015      	beq.n	8001894 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fc36 	bl	80010d8 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001870:	e009      	b.n	8001886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001872:	f7ff fc31 	bl	80010d8 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b64      	cmp	r3, #100	@ 0x64
 800187e:	d902      	bls.n	8001886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	f000 fb4c 	bl	8001f1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001886:	4b90      	ldr	r3, [pc, #576]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	2380      	movs	r3, #128	@ 0x80
 800188c:	029b      	lsls	r3, r3, #10
 800188e:	4013      	ands	r3, r2
 8001890:	d0ef      	beq.n	8001872 <HAL_RCC_OscConfig+0xe6>
 8001892:	e015      	b.n	80018c0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fc20 	bl	80010d8 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800189e:	f7ff fc1b 	bl	80010d8 <HAL_GetTick>
 80018a2:	0002      	movs	r2, r0
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b64      	cmp	r3, #100	@ 0x64
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e336      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018b0:	4b85      	ldr	r3, [pc, #532]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	029b      	lsls	r3, r3, #10
 80018b8:	4013      	ands	r3, r2
 80018ba:	d1f0      	bne.n	800189e <HAL_RCC_OscConfig+0x112>
 80018bc:	e000      	b.n	80018c0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018be:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2202      	movs	r2, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	d100      	bne.n	80018cc <HAL_RCC_OscConfig+0x140>
 80018ca:	e099      	b.n	8001a00 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	2220      	movs	r2, #32
 80018d6:	4013      	ands	r3, r2
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80018da:	4b7b      	ldr	r3, [pc, #492]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b7a      	ldr	r3, [pc, #488]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 80018e0:	2120      	movs	r1, #32
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	2220      	movs	r2, #32
 80018ea:	4393      	bics	r3, r2
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d13e      	bne.n	8001978 <HAL_RCC_OscConfig+0x1ec>
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d13b      	bne.n	8001978 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001900:	4b71      	ldr	r3, [pc, #452]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2204      	movs	r2, #4
 8001906:	4013      	ands	r3, r2
 8001908:	d004      	beq.n	8001914 <HAL_RCC_OscConfig+0x188>
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e304      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001914:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4a6e      	ldr	r2, [pc, #440]	@ (8001ad4 <HAL_RCC_OscConfig+0x348>)
 800191a:	4013      	ands	r3, r2
 800191c:	0019      	movs	r1, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	021a      	lsls	r2, r3, #8
 8001924:	4b68      	ldr	r3, [pc, #416]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001926:	430a      	orrs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800192a:	4b67      	ldr	r3, [pc, #412]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2209      	movs	r2, #9
 8001930:	4393      	bics	r3, r2
 8001932:	0019      	movs	r1, r3
 8001934:	4b64      	ldr	r3, [pc, #400]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193c:	f000 fc42 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8001940:	0001      	movs	r1, r0
 8001942:	4b61      	ldr	r3, [pc, #388]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	220f      	movs	r2, #15
 800194a:	4013      	ands	r3, r2
 800194c:	4a62      	ldr	r2, [pc, #392]	@ (8001ad8 <HAL_RCC_OscConfig+0x34c>)
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	000a      	movs	r2, r1
 8001952:	40da      	lsrs	r2, r3
 8001954:	4b61      	ldr	r3, [pc, #388]	@ (8001adc <HAL_RCC_OscConfig+0x350>)
 8001956:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001958:	4b61      	ldr	r3, [pc, #388]	@ (8001ae0 <HAL_RCC_OscConfig+0x354>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2513      	movs	r5, #19
 800195e:	197c      	adds	r4, r7, r5
 8001960:	0018      	movs	r0, r3
 8001962:	f7ff fb73 	bl	800104c <HAL_InitTick>
 8001966:	0003      	movs	r3, r0
 8001968:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800196a:	197b      	adds	r3, r7, r5
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d046      	beq.n	8001a00 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001972:	197b      	adds	r3, r7, r5
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	e2d2      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	2b00      	cmp	r3, #0
 800197c:	d027      	beq.n	80019ce <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800197e:	4b52      	ldr	r3, [pc, #328]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2209      	movs	r2, #9
 8001984:	4393      	bics	r3, r2
 8001986:	0019      	movs	r1, r3
 8001988:	4b4f      	ldr	r3, [pc, #316]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 800198a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fba2 	bl	80010d8 <HAL_GetTick>
 8001994:	0003      	movs	r3, r0
 8001996:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800199a:	f7ff fb9d 	bl	80010d8 <HAL_GetTick>
 800199e:	0002      	movs	r2, r0
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e2b8      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ac:	4b46      	ldr	r3, [pc, #280]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2204      	movs	r2, #4
 80019b2:	4013      	ands	r3, r2
 80019b4:	d0f1      	beq.n	800199a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	4b44      	ldr	r3, [pc, #272]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a46      	ldr	r2, [pc, #280]	@ (8001ad4 <HAL_RCC_OscConfig+0x348>)
 80019bc:	4013      	ands	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	021a      	lsls	r2, r3, #8
 80019c6:	4b40      	ldr	r3, [pc, #256]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	e018      	b.n	8001a00 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ce:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 80019d4:	2101      	movs	r1, #1
 80019d6:	438a      	bics	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff fb7d 	bl	80010d8 <HAL_GetTick>
 80019de:	0003      	movs	r3, r0
 80019e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e4:	f7ff fb78 	bl	80010d8 <HAL_GetTick>
 80019e8:	0002      	movs	r2, r0
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e293      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019f6:	4b34      	ldr	r3, [pc, #208]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2204      	movs	r2, #4
 80019fc:	4013      	ands	r3, r2
 80019fe:	d1f1      	bne.n	80019e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2210      	movs	r2, #16
 8001a06:	4013      	ands	r3, r2
 8001a08:	d100      	bne.n	8001a0c <HAL_RCC_OscConfig+0x280>
 8001a0a:	e0a2      	b.n	8001b52 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d140      	bne.n	8001a94 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	@ 0x80
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x29e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e279      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2a:	4b27      	ldr	r3, [pc, #156]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae4 <HAL_RCC_OscConfig+0x358>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	0019      	movs	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a38:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	0a19      	lsrs	r1, r3, #8
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	061a      	lsls	r2, r3, #24
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	0b5b      	lsrs	r3, r3, #13
 8001a58:	3301      	adds	r3, #1
 8001a5a:	2280      	movs	r2, #128	@ 0x80
 8001a5c:	0212      	lsls	r2, r2, #8
 8001a5e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	210f      	movs	r1, #15
 8001a68:	400b      	ands	r3, r1
 8001a6a:	491b      	ldr	r1, [pc, #108]	@ (8001ad8 <HAL_RCC_OscConfig+0x34c>)
 8001a6c:	5ccb      	ldrb	r3, [r1, r3]
 8001a6e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a70:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <HAL_RCC_OscConfig+0x350>)
 8001a72:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001a74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <HAL_RCC_OscConfig+0x354>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2513      	movs	r5, #19
 8001a7a:	197c      	adds	r4, r7, r5
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff fae5 	bl	800104c <HAL_InitTick>
 8001a82:	0003      	movs	r3, r0
 8001a84:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001a86:	197b      	adds	r3, r7, r5
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d061      	beq.n	8001b52 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001a8e:	197b      	adds	r3, r7, r5
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	e244      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d040      	beq.n	8001b1e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_RCC_OscConfig+0x33c>)
 8001aa2:	2180      	movs	r1, #128	@ 0x80
 8001aa4:	0049      	lsls	r1, r1, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff fb15 	bl	80010d8 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ab2:	e019      	b.n	8001ae8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fb10 	bl	80010d8 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d912      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e22b      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
 8001ac6:	46c0      	nop			@ (mov r8, r8)
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	fffeffff 	.word	0xfffeffff
 8001ad0:	fffbffff 	.word	0xfffbffff
 8001ad4:	ffffe0ff 	.word	0xffffe0ff
 8001ad8:	08003d24 	.word	0x08003d24
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ae8:	4bca      	ldr	r3, [pc, #808]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4013      	ands	r3, r2
 8001af2:	d0df      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af4:	4bc7      	ldr	r3, [pc, #796]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4ac7      	ldr	r2, [pc, #796]	@ (8001e18 <HAL_RCC_OscConfig+0x68c>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b02:	4bc4      	ldr	r3, [pc, #784]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001b04:	430a      	orrs	r2, r1
 8001b06:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b08:	4bc2      	ldr	r3, [pc, #776]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	0a19      	lsrs	r1, r3, #8
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	061a      	lsls	r2, r3, #24
 8001b16:	4bbf      	ldr	r3, [pc, #764]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	e019      	b.n	8001b52 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b1e:	4bbd      	ldr	r3, [pc, #756]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4bbc      	ldr	r3, [pc, #752]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001b24:	49bd      	ldr	r1, [pc, #756]	@ (8001e1c <HAL_RCC_OscConfig+0x690>)
 8001b26:	400a      	ands	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fad5 	bl	80010d8 <HAL_GetTick>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b34:	f7ff fad0 	bl	80010d8 <HAL_GetTick>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e1eb      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b46:	4bb3      	ldr	r3, [pc, #716]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	2380      	movs	r3, #128	@ 0x80
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2208      	movs	r2, #8
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d036      	beq.n	8001bca <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d019      	beq.n	8001b98 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b64:	4bab      	ldr	r3, [pc, #684]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001b66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b68:	4baa      	ldr	r3, [pc, #680]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b70:	f7ff fab2 	bl	80010d8 <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff faad 	bl	80010d8 <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1c8      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b8c:	4ba1      	ldr	r3, [pc, #644]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b90:	2202      	movs	r2, #2
 8001b92:	4013      	ands	r3, r2
 8001b94:	d0f1      	beq.n	8001b7a <HAL_RCC_OscConfig+0x3ee>
 8001b96:	e018      	b.n	8001bca <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b98:	4b9e      	ldr	r3, [pc, #632]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001b9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b9c:	4b9d      	ldr	r3, [pc, #628]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	438a      	bics	r2, r1
 8001ba2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fa98 	bl	80010d8 <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff fa93 	bl	80010d8 <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e1ae      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bc0:	4b94      	ldr	r3, [pc, #592]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d1f1      	bne.n	8001bae <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2204      	movs	r2, #4
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d100      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x44a>
 8001bd4:	e0ae      	b.n	8001d34 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd6:	2023      	movs	r0, #35	@ 0x23
 8001bd8:	183b      	adds	r3, r7, r0
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bde:	4b8d      	ldr	r3, [pc, #564]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001be2:	2380      	movs	r3, #128	@ 0x80
 8001be4:	055b      	lsls	r3, r3, #21
 8001be6:	4013      	ands	r3, r2
 8001be8:	d109      	bne.n	8001bfe <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b8a      	ldr	r3, [pc, #552]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001bec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bee:	4b89      	ldr	r3, [pc, #548]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001bf0:	2180      	movs	r1, #128	@ 0x80
 8001bf2:	0549      	lsls	r1, r1, #21
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001bf8:	183b      	adds	r3, r7, r0
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	4b88      	ldr	r3, [pc, #544]	@ (8001e20 <HAL_RCC_OscConfig+0x694>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	2380      	movs	r3, #128	@ 0x80
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	d11a      	bne.n	8001c40 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0a:	4b85      	ldr	r3, [pc, #532]	@ (8001e20 <HAL_RCC_OscConfig+0x694>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b84      	ldr	r3, [pc, #528]	@ (8001e20 <HAL_RCC_OscConfig+0x694>)
 8001c10:	2180      	movs	r1, #128	@ 0x80
 8001c12:	0049      	lsls	r1, r1, #1
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c18:	f7ff fa5e 	bl	80010d8 <HAL_GetTick>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c22:	f7ff fa59 	bl	80010d8 <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b64      	cmp	r3, #100	@ 0x64
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e174      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	4b7a      	ldr	r3, [pc, #488]	@ (8001e20 <HAL_RCC_OscConfig+0x694>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	2380      	movs	r3, #128	@ 0x80
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_OscConfig+0x4d0>
 8001c4c:	4b71      	ldr	r3, [pc, #452]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001c4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c50:	4b70      	ldr	r3, [pc, #448]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001c52:	2180      	movs	r1, #128	@ 0x80
 8001c54:	0049      	lsls	r1, r1, #1
 8001c56:	430a      	orrs	r2, r1
 8001c58:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c5a:	e031      	b.n	8001cc0 <HAL_RCC_OscConfig+0x534>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x4f2>
 8001c64:	4b6b      	ldr	r3, [pc, #428]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001c66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c68:	4b6a      	ldr	r3, [pc, #424]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001c6a:	496c      	ldr	r1, [pc, #432]	@ (8001e1c <HAL_RCC_OscConfig+0x690>)
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c70:	4b68      	ldr	r3, [pc, #416]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001c72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c74:	4b67      	ldr	r3, [pc, #412]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001c76:	496b      	ldr	r1, [pc, #428]	@ (8001e24 <HAL_RCC_OscConfig+0x698>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c7c:	e020      	b.n	8001cc0 <HAL_RCC_OscConfig+0x534>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	23a0      	movs	r3, #160	@ 0xa0
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d10e      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x51c>
 8001c8a:	4b62      	ldr	r3, [pc, #392]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001c8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c8e:	4b61      	ldr	r3, [pc, #388]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001c90:	2180      	movs	r1, #128	@ 0x80
 8001c92:	00c9      	lsls	r1, r1, #3
 8001c94:	430a      	orrs	r2, r1
 8001c96:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c98:	4b5e      	ldr	r3, [pc, #376]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001c9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c9c:	4b5d      	ldr	r3, [pc, #372]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001c9e:	2180      	movs	r1, #128	@ 0x80
 8001ca0:	0049      	lsls	r1, r1, #1
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ca6:	e00b      	b.n	8001cc0 <HAL_RCC_OscConfig+0x534>
 8001ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001caa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cac:	4b59      	ldr	r3, [pc, #356]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001cae:	495b      	ldr	r1, [pc, #364]	@ (8001e1c <HAL_RCC_OscConfig+0x690>)
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001cb4:	4b57      	ldr	r3, [pc, #348]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001cb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cb8:	4b56      	ldr	r3, [pc, #344]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001cba:	495a      	ldr	r1, [pc, #360]	@ (8001e24 <HAL_RCC_OscConfig+0x698>)
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d015      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc8:	f7ff fa06 	bl	80010d8 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cd0:	e009      	b.n	8001ce6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7ff fa01 	bl	80010d8 <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	4a52      	ldr	r2, [pc, #328]	@ (8001e28 <HAL_RCC_OscConfig+0x69c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e11b      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ce6:	4b4b      	ldr	r3, [pc, #300]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001ce8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cea:	2380      	movs	r3, #128	@ 0x80
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d0ef      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x546>
 8001cf2:	e014      	b.n	8001d1e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf4:	f7ff f9f0 	bl	80010d8 <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cfc:	e009      	b.n	8001d12 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7ff f9eb 	bl	80010d8 <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	4a47      	ldr	r2, [pc, #284]	@ (8001e28 <HAL_RCC_OscConfig+0x69c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e105      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d12:	4b40      	ldr	r3, [pc, #256]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001d14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d16:	2380      	movs	r3, #128	@ 0x80
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d1ef      	bne.n	8001cfe <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d1e:	2323      	movs	r3, #35	@ 0x23
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d28:	4b3a      	ldr	r3, [pc, #232]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001d2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d2c:	4b39      	ldr	r3, [pc, #228]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001d2e:	493f      	ldr	r1, [pc, #252]	@ (8001e2c <HAL_RCC_OscConfig+0x6a0>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d049      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d026      	beq.n	8001d94 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d46:	4b33      	ldr	r3, [pc, #204]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	4b32      	ldr	r3, [pc, #200]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	4b30      	ldr	r3, [pc, #192]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d56:	4b2f      	ldr	r3, [pc, #188]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001d58:	2101      	movs	r1, #1
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d5e:	4b34      	ldr	r3, [pc, #208]	@ (8001e30 <HAL_RCC_OscConfig+0x6a4>)
 8001d60:	6a1a      	ldr	r2, [r3, #32]
 8001d62:	4b33      	ldr	r3, [pc, #204]	@ (8001e30 <HAL_RCC_OscConfig+0x6a4>)
 8001d64:	2180      	movs	r1, #128	@ 0x80
 8001d66:	0189      	lsls	r1, r1, #6
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f9b4 	bl	80010d8 <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d76:	f7ff f9af 	bl	80010d8 <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e0ca      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d88:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d0f1      	beq.n	8001d76 <HAL_RCC_OscConfig+0x5ea>
 8001d92:	e01e      	b.n	8001dd2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d94:	4b1f      	ldr	r3, [pc, #124]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	438a      	bics	r2, r1
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	4b23      	ldr	r3, [pc, #140]	@ (8001e30 <HAL_RCC_OscConfig+0x6a4>)
 8001da2:	6a1a      	ldr	r2, [r3, #32]
 8001da4:	4b22      	ldr	r3, [pc, #136]	@ (8001e30 <HAL_RCC_OscConfig+0x6a4>)
 8001da6:	4923      	ldr	r1, [pc, #140]	@ (8001e34 <HAL_RCC_OscConfig+0x6a8>)
 8001da8:	400a      	ands	r2, r1
 8001daa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff f994 	bl	80010d8 <HAL_GetTick>
 8001db0:	0003      	movs	r3, r0
 8001db2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001db6:	f7ff f98f 	bl	80010d8 <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e0aa      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dc8:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d1f1      	bne.n	8001db6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d100      	bne.n	8001ddc <HAL_RCC_OscConfig+0x650>
 8001dda:	e09f      	b.n	8001f1c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d100      	bne.n	8001de4 <HAL_RCC_OscConfig+0x658>
 8001de2:	e078      	b.n	8001ed6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d159      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <HAL_RCC_OscConfig+0x688>)
 8001df2:	4911      	ldr	r1, [pc, #68]	@ (8001e38 <HAL_RCC_OscConfig+0x6ac>)
 8001df4:	400a      	ands	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff f96e 	bl	80010d8 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e00:	e01c      	b.n	8001e3c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff f969 	bl	80010d8 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d915      	bls.n	8001e3c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e084      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
 8001e14:	40021000 	.word	0x40021000
 8001e18:	ffff1fff 	.word	0xffff1fff
 8001e1c:	fffffeff 	.word	0xfffffeff
 8001e20:	40007000 	.word	0x40007000
 8001e24:	fffffbff 	.word	0xfffffbff
 8001e28:	00001388 	.word	0x00001388
 8001e2c:	efffffff 	.word	0xefffffff
 8001e30:	40010000 	.word	0x40010000
 8001e34:	ffffdfff 	.word	0xffffdfff
 8001e38:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f28 <HAL_RCC_OscConfig+0x79c>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	049b      	lsls	r3, r3, #18
 8001e44:	4013      	ands	r3, r2
 8001e46:	d1dc      	bne.n	8001e02 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e48:	4b37      	ldr	r3, [pc, #220]	@ (8001f28 <HAL_RCC_OscConfig+0x79c>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4a37      	ldr	r2, [pc, #220]	@ (8001f2c <HAL_RCC_OscConfig+0x7a0>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e60:	431a      	orrs	r2, r3
 8001e62:	4b31      	ldr	r3, [pc, #196]	@ (8001f28 <HAL_RCC_OscConfig+0x79c>)
 8001e64:	430a      	orrs	r2, r1
 8001e66:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e68:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <HAL_RCC_OscConfig+0x79c>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f28 <HAL_RCC_OscConfig+0x79c>)
 8001e6e:	2180      	movs	r1, #128	@ 0x80
 8001e70:	0449      	lsls	r1, r1, #17
 8001e72:	430a      	orrs	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7ff f92f 	bl	80010d8 <HAL_GetTick>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff f92a 	bl	80010d8 <HAL_GetTick>
 8001e84:	0002      	movs	r2, r0
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e045      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e92:	4b25      	ldr	r3, [pc, #148]	@ (8001f28 <HAL_RCC_OscConfig+0x79c>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2380      	movs	r3, #128	@ 0x80
 8001e98:	049b      	lsls	r3, r3, #18
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x6f4>
 8001e9e:	e03d      	b.n	8001f1c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea0:	4b21      	ldr	r3, [pc, #132]	@ (8001f28 <HAL_RCC_OscConfig+0x79c>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b20      	ldr	r3, [pc, #128]	@ (8001f28 <HAL_RCC_OscConfig+0x79c>)
 8001ea6:	4922      	ldr	r1, [pc, #136]	@ (8001f30 <HAL_RCC_OscConfig+0x7a4>)
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff f914 	bl	80010d8 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7ff f90f 	bl	80010d8 <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e02a      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ec8:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <HAL_RCC_OscConfig+0x79c>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	049b      	lsls	r3, r3, #18
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x72a>
 8001ed4:	e022      	b.n	8001f1c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e01d      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <HAL_RCC_OscConfig+0x79c>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	025b      	lsls	r3, r3, #9
 8001eee:	401a      	ands	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d10f      	bne.n	8001f18 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	23f0      	movs	r3, #240	@ 0xf0
 8001efc:	039b      	lsls	r3, r3, #14
 8001efe:	401a      	ands	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	23c0      	movs	r3, #192	@ 0xc0
 8001f0c:	041b      	lsls	r3, r3, #16
 8001f0e:	401a      	ands	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	0018      	movs	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b00a      	add	sp, #40	@ 0x28
 8001f24:	bdb0      	pop	{r4, r5, r7, pc}
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	ff02ffff 	.word	0xff02ffff
 8001f30:	feffffff 	.word	0xfeffffff

08001f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f34:	b5b0      	push	{r4, r5, r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e128      	b.n	800219a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f48:	4b96      	ldr	r3, [pc, #600]	@ (80021a4 <HAL_RCC_ClockConfig+0x270>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4013      	ands	r3, r2
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d91e      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b93      	ldr	r3, [pc, #588]	@ (80021a4 <HAL_RCC_ClockConfig+0x270>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4393      	bics	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	4b90      	ldr	r3, [pc, #576]	@ (80021a4 <HAL_RCC_ClockConfig+0x270>)
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f68:	f7ff f8b6 	bl	80010d8 <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f70:	e009      	b.n	8001f86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f72:	f7ff f8b1 	bl	80010d8 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	4a8a      	ldr	r2, [pc, #552]	@ (80021a8 <HAL_RCC_ClockConfig+0x274>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e109      	b.n	800219a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b87      	ldr	r3, [pc, #540]	@ (80021a4 <HAL_RCC_ClockConfig+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d1ee      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9e:	4b83      	ldr	r3, [pc, #524]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	22f0      	movs	r2, #240	@ 0xf0
 8001fa4:	4393      	bics	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	4b7f      	ldr	r3, [pc, #508]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d100      	bne.n	8001fbe <HAL_RCC_ClockConfig+0x8a>
 8001fbc:	e089      	b.n	80020d2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fc6:	4b79      	ldr	r3, [pc, #484]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	2380      	movs	r3, #128	@ 0x80
 8001fcc:	029b      	lsls	r3, r3, #10
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d120      	bne.n	8002014 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0e1      	b.n	800219a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fde:	4b73      	ldr	r3, [pc, #460]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	2380      	movs	r3, #128	@ 0x80
 8001fe4:	049b      	lsls	r3, r3, #18
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d114      	bne.n	8002014 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0d5      	b.n	800219a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d106      	bne.n	8002004 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ff6:	4b6d      	ldr	r3, [pc, #436]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d109      	bne.n	8002014 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0ca      	b.n	800219a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002004:	4b69      	ldr	r3, [pc, #420]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4013      	ands	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0c2      	b.n	800219a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002014:	4b65      	ldr	r3, [pc, #404]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2203      	movs	r2, #3
 800201a:	4393      	bics	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	4b62      	ldr	r3, [pc, #392]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 8002024:	430a      	orrs	r2, r1
 8002026:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002028:	f7ff f856 	bl	80010d8 <HAL_GetTick>
 800202c:	0003      	movs	r3, r0
 800202e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d111      	bne.n	800205c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002038:	e009      	b.n	800204e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203a:	f7ff f84d 	bl	80010d8 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	4a58      	ldr	r2, [pc, #352]	@ (80021a8 <HAL_RCC_ClockConfig+0x274>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e0a5      	b.n	800219a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800204e:	4b57      	ldr	r3, [pc, #348]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	220c      	movs	r2, #12
 8002054:	4013      	ands	r3, r2
 8002056:	2b08      	cmp	r3, #8
 8002058:	d1ef      	bne.n	800203a <HAL_RCC_ClockConfig+0x106>
 800205a:	e03a      	b.n	80020d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d111      	bne.n	8002088 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002064:	e009      	b.n	800207a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002066:	f7ff f837 	bl	80010d8 <HAL_GetTick>
 800206a:	0002      	movs	r2, r0
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	4a4d      	ldr	r2, [pc, #308]	@ (80021a8 <HAL_RCC_ClockConfig+0x274>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e08f      	b.n	800219a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800207a:	4b4c      	ldr	r3, [pc, #304]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	220c      	movs	r2, #12
 8002080:	4013      	ands	r3, r2
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d1ef      	bne.n	8002066 <HAL_RCC_ClockConfig+0x132>
 8002086:	e024      	b.n	80020d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d11b      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002090:	e009      	b.n	80020a6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002092:	f7ff f821 	bl	80010d8 <HAL_GetTick>
 8002096:	0002      	movs	r2, r0
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	4a42      	ldr	r2, [pc, #264]	@ (80021a8 <HAL_RCC_ClockConfig+0x274>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e079      	b.n	800219a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a6:	4b41      	ldr	r3, [pc, #260]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	220c      	movs	r2, #12
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d1ef      	bne.n	8002092 <HAL_RCC_ClockConfig+0x15e>
 80020b2:	e00e      	b.n	80020d2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7ff f810 	bl	80010d8 <HAL_GetTick>
 80020b8:	0002      	movs	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	4a3a      	ldr	r2, [pc, #232]	@ (80021a8 <HAL_RCC_ClockConfig+0x274>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e068      	b.n	800219a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80020c8:	4b38      	ldr	r3, [pc, #224]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	220c      	movs	r2, #12
 80020ce:	4013      	ands	r3, r2
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d2:	4b34      	ldr	r3, [pc, #208]	@ (80021a4 <HAL_RCC_ClockConfig+0x270>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d21e      	bcs.n	800211e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e0:	4b30      	ldr	r3, [pc, #192]	@ (80021a4 <HAL_RCC_ClockConfig+0x270>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2201      	movs	r2, #1
 80020e6:	4393      	bics	r3, r2
 80020e8:	0019      	movs	r1, r3
 80020ea:	4b2e      	ldr	r3, [pc, #184]	@ (80021a4 <HAL_RCC_ClockConfig+0x270>)
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020f2:	f7fe fff1 	bl	80010d8 <HAL_GetTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	e009      	b.n	8002110 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7fe ffec 	bl	80010d8 <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	4a28      	ldr	r2, [pc, #160]	@ (80021a8 <HAL_RCC_ClockConfig+0x274>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e044      	b.n	800219a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002110:	4b24      	ldr	r3, [pc, #144]	@ (80021a4 <HAL_RCC_ClockConfig+0x270>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2201      	movs	r2, #1
 8002116:	4013      	ands	r3, r2
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d1ee      	bne.n	80020fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2204      	movs	r2, #4
 8002124:	4013      	ands	r3, r2
 8002126:	d009      	beq.n	800213c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002128:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a20      	ldr	r2, [pc, #128]	@ (80021b0 <HAL_RCC_ClockConfig+0x27c>)
 800212e:	4013      	ands	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	4b1d      	ldr	r3, [pc, #116]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 8002138:	430a      	orrs	r2, r1
 800213a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2208      	movs	r2, #8
 8002142:	4013      	ands	r3, r2
 8002144:	d00a      	beq.n	800215c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002146:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	4a1a      	ldr	r2, [pc, #104]	@ (80021b4 <HAL_RCC_ClockConfig+0x280>)
 800214c:	4013      	ands	r3, r2
 800214e:	0019      	movs	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	00da      	lsls	r2, r3, #3
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 8002158:	430a      	orrs	r2, r1
 800215a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800215c:	f000 f832 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002160:	0001      	movs	r1, r0
 8002162:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_RCC_ClockConfig+0x278>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	220f      	movs	r2, #15
 800216a:	4013      	ands	r3, r2
 800216c:	4a12      	ldr	r2, [pc, #72]	@ (80021b8 <HAL_RCC_ClockConfig+0x284>)
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	000a      	movs	r2, r1
 8002172:	40da      	lsrs	r2, r3
 8002174:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <HAL_RCC_ClockConfig+0x288>)
 8002176:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002178:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <HAL_RCC_ClockConfig+0x28c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	250b      	movs	r5, #11
 800217e:	197c      	adds	r4, r7, r5
 8002180:	0018      	movs	r0, r3
 8002182:	f7fe ff63 	bl	800104c <HAL_InitTick>
 8002186:	0003      	movs	r3, r0
 8002188:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800218a:	197b      	adds	r3, r7, r5
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002192:	197b      	adds	r3, r7, r5
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	e000      	b.n	800219a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b004      	add	sp, #16
 80021a0:	bdb0      	pop	{r4, r5, r7, pc}
 80021a2:	46c0      	nop			@ (mov r8, r8)
 80021a4:	40022000 	.word	0x40022000
 80021a8:	00001388 	.word	0x00001388
 80021ac:	40021000 	.word	0x40021000
 80021b0:	fffff8ff 	.word	0xfffff8ff
 80021b4:	ffffc7ff 	.word	0xffffc7ff
 80021b8:	08003d24 	.word	0x08003d24
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000004 	.word	0x20000004

080021c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80021ca:	4b3c      	ldr	r3, [pc, #240]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	220c      	movs	r2, #12
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d013      	beq.n	8002202 <HAL_RCC_GetSysClockFreq+0x3e>
 80021da:	d85c      	bhi.n	8002296 <HAL_RCC_GetSysClockFreq+0xd2>
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d002      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x22>
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d00b      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x38>
 80021e4:	e057      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80021e6:	4b35      	ldr	r3, [pc, #212]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2210      	movs	r2, #16
 80021ec:	4013      	ands	r3, r2
 80021ee:	d002      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80021f0:	4b33      	ldr	r3, [pc, #204]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021f2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80021f4:	e05d      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80021f6:	4b33      	ldr	r3, [pc, #204]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x100>)
 80021f8:	613b      	str	r3, [r7, #16]
      break;
 80021fa:	e05a      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021fc:	4b32      	ldr	r3, [pc, #200]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80021fe:	613b      	str	r3, [r7, #16]
      break;
 8002200:	e057      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	0c9b      	lsrs	r3, r3, #18
 8002206:	220f      	movs	r2, #15
 8002208:	4013      	ands	r3, r2
 800220a:	4a30      	ldr	r2, [pc, #192]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 800220c:	5cd3      	ldrb	r3, [r2, r3]
 800220e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	0d9b      	lsrs	r3, r3, #22
 8002214:	2203      	movs	r2, #3
 8002216:	4013      	ands	r3, r2
 8002218:	3301      	adds	r3, #1
 800221a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800221c:	4b27      	ldr	r3, [pc, #156]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	025b      	lsls	r3, r3, #9
 8002224:	4013      	ands	r3, r2
 8002226:	d00f      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	000a      	movs	r2, r1
 800222c:	0152      	lsls	r2, r2, #5
 800222e:	1a52      	subs	r2, r2, r1
 8002230:	0193      	lsls	r3, r2, #6
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	185b      	adds	r3, r3, r1
 8002238:	025b      	lsls	r3, r3, #9
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	0018      	movs	r0, r3
 800223e:	f7fd ff6b 	bl	8000118 <__udivsi3>
 8002242:	0003      	movs	r3, r0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e023      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002248:	4b1c      	ldr	r3, [pc, #112]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2210      	movs	r2, #16
 800224e:	4013      	ands	r3, r2
 8002250:	d00f      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	000a      	movs	r2, r1
 8002256:	0152      	lsls	r2, r2, #5
 8002258:	1a52      	subs	r2, r2, r1
 800225a:	0193      	lsls	r3, r2, #6
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	185b      	adds	r3, r3, r1
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	0018      	movs	r0, r3
 8002268:	f7fd ff56 	bl	8000118 <__udivsi3>
 800226c:	0003      	movs	r3, r0
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	e00e      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	000a      	movs	r2, r1
 8002276:	0152      	lsls	r2, r2, #5
 8002278:	1a52      	subs	r2, r2, r1
 800227a:	0193      	lsls	r3, r2, #6
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	185b      	adds	r3, r3, r1
 8002282:	029b      	lsls	r3, r3, #10
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	0018      	movs	r0, r3
 8002288:	f7fd ff46 	bl	8000118 <__udivsi3>
 800228c:	0003      	movs	r3, r0
 800228e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	613b      	str	r3, [r7, #16]
      break;
 8002294:	e00d      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	0b5b      	lsrs	r3, r3, #13
 800229c:	2207      	movs	r2, #7
 800229e:	4013      	ands	r3, r2
 80022a0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	2280      	movs	r2, #128	@ 0x80
 80022a8:	0212      	lsls	r2, r2, #8
 80022aa:	409a      	lsls	r2, r3
 80022ac:	0013      	movs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
      break;
 80022b0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022b2:	693b      	ldr	r3, [r7, #16]
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b006      	add	sp, #24
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000
 80022c0:	003d0900 	.word	0x003d0900
 80022c4:	00f42400 	.word	0x00f42400
 80022c8:	007a1200 	.word	0x007a1200
 80022cc:	08003d3c 	.word	0x08003d3c

080022d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d4:	4b02      	ldr	r3, [pc, #8]	@ (80022e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	20000000 	.word	0x20000000

080022e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022e8:	f7ff fff2 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 80022ec:	0001      	movs	r1, r0
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	2207      	movs	r2, #7
 80022f6:	4013      	ands	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <HAL_RCC_GetPCLK1Freq+0x28>)
 80022fa:	5cd3      	ldrb	r3, [r2, r3]
 80022fc:	40d9      	lsrs	r1, r3
 80022fe:	000b      	movs	r3, r1
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			@ (mov r8, r8)
 8002308:	40021000 	.word	0x40021000
 800230c:	08003d34 	.word	0x08003d34

08002310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002314:	f7ff ffdc 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 8002318:	0001      	movs	r1, r0
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_RCC_GetPCLK2Freq+0x24>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	0adb      	lsrs	r3, r3, #11
 8002320:	2207      	movs	r2, #7
 8002322:	4013      	ands	r3, r2
 8002324:	4a04      	ldr	r2, [pc, #16]	@ (8002338 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002326:	5cd3      	ldrb	r3, [r2, r3]
 8002328:	40d9      	lsrs	r1, r3
 800232a:	000b      	movs	r3, r1
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	40021000 	.word	0x40021000
 8002338:	08003d34 	.word	0x08003d34

0800233c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002344:	2317      	movs	r3, #23
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2220      	movs	r2, #32
 8002352:	4013      	ands	r3, r2
 8002354:	d106      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	4013      	ands	r3, r2
 8002360:	d100      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002362:	e104      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002364:	4bb9      	ldr	r3, [pc, #740]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002366:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002368:	2380      	movs	r3, #128	@ 0x80
 800236a:	055b      	lsls	r3, r3, #21
 800236c:	4013      	ands	r3, r2
 800236e:	d10a      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002370:	4bb6      	ldr	r3, [pc, #728]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002374:	4bb5      	ldr	r3, [pc, #724]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002376:	2180      	movs	r1, #128	@ 0x80
 8002378:	0549      	lsls	r1, r1, #21
 800237a:	430a      	orrs	r2, r1
 800237c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800237e:	2317      	movs	r3, #23
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	4bb2      	ldr	r3, [pc, #712]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	2380      	movs	r3, #128	@ 0x80
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4013      	ands	r3, r2
 8002390:	d11a      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002392:	4baf      	ldr	r3, [pc, #700]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4bae      	ldr	r3, [pc, #696]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002398:	2180      	movs	r1, #128	@ 0x80
 800239a:	0049      	lsls	r1, r1, #1
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a0:	f7fe fe9a 	bl	80010d8 <HAL_GetTick>
 80023a4:	0003      	movs	r3, r0
 80023a6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	e008      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023aa:	f7fe fe95 	bl	80010d8 <HAL_GetTick>
 80023ae:	0002      	movs	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b64      	cmp	r3, #100	@ 0x64
 80023b6:	d901      	bls.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e143      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	4ba4      	ldr	r3, [pc, #656]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2380      	movs	r3, #128	@ 0x80
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4013      	ands	r3, r2
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80023c8:	4ba0      	ldr	r3, [pc, #640]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	23c0      	movs	r3, #192	@ 0xc0
 80023ce:	039b      	lsls	r3, r3, #14
 80023d0:	4013      	ands	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	23c0      	movs	r3, #192	@ 0xc0
 80023da:	039b      	lsls	r3, r3, #14
 80023dc:	4013      	ands	r3, r2
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d107      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	23c0      	movs	r3, #192	@ 0xc0
 80023ea:	039b      	lsls	r3, r3, #14
 80023ec:	4013      	ands	r3, r2
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d013      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	23c0      	movs	r3, #192	@ 0xc0
 80023fa:	029b      	lsls	r3, r3, #10
 80023fc:	401a      	ands	r2, r3
 80023fe:	23c0      	movs	r3, #192	@ 0xc0
 8002400:	029b      	lsls	r3, r3, #10
 8002402:	429a      	cmp	r2, r3
 8002404:	d10a      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002406:	4b91      	ldr	r3, [pc, #580]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	@ 0x80
 800240c:	029b      	lsls	r3, r3, #10
 800240e:	401a      	ands	r2, r3
 8002410:	2380      	movs	r3, #128	@ 0x80
 8002412:	029b      	lsls	r3, r3, #10
 8002414:	429a      	cmp	r2, r3
 8002416:	d101      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e113      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800241c:	4b8b      	ldr	r3, [pc, #556]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800241e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002420:	23c0      	movs	r3, #192	@ 0xc0
 8002422:	029b      	lsls	r3, r3, #10
 8002424:	4013      	ands	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d049      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	23c0      	movs	r3, #192	@ 0xc0
 8002434:	029b      	lsls	r3, r3, #10
 8002436:	4013      	ands	r3, r2
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	429a      	cmp	r2, r3
 800243c:	d004      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2220      	movs	r2, #32
 8002444:	4013      	ands	r3, r2
 8002446:	d10d      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	23c0      	movs	r3, #192	@ 0xc0
 800244e:	029b      	lsls	r3, r3, #10
 8002450:	4013      	ands	r3, r2
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	429a      	cmp	r2, r3
 8002456:	d034      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	4013      	ands	r3, r2
 8002462:	d02e      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002464:	4b79      	ldr	r3, [pc, #484]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002468:	4a7a      	ldr	r2, [pc, #488]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800246a:	4013      	ands	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800246e:	4b77      	ldr	r3, [pc, #476]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002470:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002472:	4b76      	ldr	r3, [pc, #472]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002474:	2180      	movs	r1, #128	@ 0x80
 8002476:	0309      	lsls	r1, r1, #12
 8002478:	430a      	orrs	r2, r1
 800247a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800247c:	4b73      	ldr	r3, [pc, #460]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800247e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002480:	4b72      	ldr	r3, [pc, #456]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002482:	4975      	ldr	r1, [pc, #468]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002484:	400a      	ands	r2, r1
 8002486:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002488:	4b70      	ldr	r3, [pc, #448]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	2380      	movs	r3, #128	@ 0x80
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4013      	ands	r3, r2
 8002496:	d014      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fe1e 	bl	80010d8 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024a0:	e009      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe fe19 	bl	80010d8 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	4a6b      	ldr	r2, [pc, #428]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0c6      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024b6:	4b65      	ldr	r3, [pc, #404]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80024b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024ba:	2380      	movs	r3, #128	@ 0x80
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4013      	ands	r3, r2
 80024c0:	d0ef      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	@ 0x80
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	4013      	ands	r3, r2
 80024cc:	d01f      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	23c0      	movs	r3, #192	@ 0xc0
 80024d4:	029b      	lsls	r3, r3, #10
 80024d6:	401a      	ands	r2, r3
 80024d8:	23c0      	movs	r3, #192	@ 0xc0
 80024da:	029b      	lsls	r3, r3, #10
 80024dc:	429a      	cmp	r2, r3
 80024de:	d10c      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80024e0:	4b5a      	ldr	r3, [pc, #360]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a5e      	ldr	r2, [pc, #376]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	23c0      	movs	r3, #192	@ 0xc0
 80024f0:	039b      	lsls	r3, r3, #14
 80024f2:	401a      	ands	r2, r3
 80024f4:	4b55      	ldr	r3, [pc, #340]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80024f6:	430a      	orrs	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	4b54      	ldr	r3, [pc, #336]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80024fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	23c0      	movs	r3, #192	@ 0xc0
 8002504:	029b      	lsls	r3, r3, #10
 8002506:	401a      	ands	r2, r3
 8002508:	4b50      	ldr	r3, [pc, #320]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800250a:	430a      	orrs	r2, r1
 800250c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2220      	movs	r2, #32
 8002514:	4013      	ands	r3, r2
 8002516:	d01f      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	23c0      	movs	r3, #192	@ 0xc0
 800251e:	029b      	lsls	r3, r3, #10
 8002520:	401a      	ands	r2, r3
 8002522:	23c0      	movs	r3, #192	@ 0xc0
 8002524:	029b      	lsls	r3, r3, #10
 8002526:	429a      	cmp	r2, r3
 8002528:	d10c      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800252a:	4b48      	ldr	r3, [pc, #288]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a4c      	ldr	r2, [pc, #304]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	23c0      	movs	r3, #192	@ 0xc0
 800253a:	039b      	lsls	r3, r3, #14
 800253c:	401a      	ands	r2, r3
 800253e:	4b43      	ldr	r3, [pc, #268]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	4b41      	ldr	r3, [pc, #260]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002546:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	23c0      	movs	r3, #192	@ 0xc0
 800254e:	029b      	lsls	r3, r3, #10
 8002550:	401a      	ands	r2, r3
 8002552:	4b3e      	ldr	r3, [pc, #248]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002554:	430a      	orrs	r2, r1
 8002556:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002558:	2317      	movs	r3, #23
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002562:	4b3a      	ldr	r3, [pc, #232]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002566:	4b39      	ldr	r3, [pc, #228]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002568:	493e      	ldr	r1, [pc, #248]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800256a:	400a      	ands	r2, r1
 800256c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2201      	movs	r2, #1
 8002574:	4013      	ands	r3, r2
 8002576:	d009      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002578:	4b34      	ldr	r3, [pc, #208]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800257a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257c:	2203      	movs	r2, #3
 800257e:	4393      	bics	r3, r2
 8002580:	0019      	movs	r1, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	4b31      	ldr	r3, [pc, #196]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002588:	430a      	orrs	r2, r1
 800258a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2202      	movs	r2, #2
 8002592:	4013      	ands	r3, r2
 8002594:	d009      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002596:	4b2d      	ldr	r3, [pc, #180]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	220c      	movs	r2, #12
 800259c:	4393      	bics	r3, r2
 800259e:	0019      	movs	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	4b29      	ldr	r3, [pc, #164]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025a6:	430a      	orrs	r2, r1
 80025a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2204      	movs	r2, #4
 80025b0:	4013      	ands	r3, r2
 80025b2:	d009      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b4:	4b25      	ldr	r3, [pc, #148]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002668 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	4b22      	ldr	r3, [pc, #136]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025c4:	430a      	orrs	r2, r1
 80025c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2208      	movs	r2, #8
 80025ce:	4013      	ands	r3, r2
 80025d0:	d009      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d2:	4b1e      	ldr	r3, [pc, #120]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	4a25      	ldr	r2, [pc, #148]	@ (800266c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699a      	ldr	r2, [r3, #24]
 80025e0:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	2380      	movs	r3, #128	@ 0x80
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4013      	ands	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025f2:	4b16      	ldr	r3, [pc, #88]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f6:	4a17      	ldr	r2, [pc, #92]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	0019      	movs	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	4b12      	ldr	r3, [pc, #72]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002602:	430a      	orrs	r2, r1
 8002604:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2240      	movs	r2, #64	@ 0x40
 800260c:	4013      	ands	r3, r2
 800260e:	d009      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002610:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002614:	4a16      	ldr	r2, [pc, #88]	@ (8002670 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002616:	4013      	ands	r3, r2
 8002618:	0019      	movs	r1, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800261e:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002620:	430a      	orrs	r2, r1
 8002622:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2280      	movs	r2, #128	@ 0x80
 800262a:	4013      	ands	r3, r2
 800262c:	d009      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800262e:	4b07      	ldr	r3, [pc, #28]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002632:	4a10      	ldr	r2, [pc, #64]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002634:	4013      	ands	r3, r2
 8002636:	0019      	movs	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1a      	ldr	r2, [r3, #32]
 800263c:	4b03      	ldr	r3, [pc, #12]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800263e:	430a      	orrs	r2, r1
 8002640:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b006      	add	sp, #24
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	40007000 	.word	0x40007000
 8002654:	fffcffff 	.word	0xfffcffff
 8002658:	fff7ffff 	.word	0xfff7ffff
 800265c:	00001388 	.word	0x00001388
 8002660:	ffcfffff 	.word	0xffcfffff
 8002664:	efffffff 	.word	0xefffffff
 8002668:	fffff3ff 	.word	0xfffff3ff
 800266c:	ffffcfff 	.word	0xffffcfff
 8002670:	fbffffff 	.word	0xfbffffff
 8002674:	fff3ffff 	.word	0xfff3ffff

08002678 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8002680:	4b1c      	ldr	r3, [pc, #112]	@ (80026f4 <HAL_RCCEx_CRSConfig+0x7c>)
 8002682:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002684:	4b1b      	ldr	r3, [pc, #108]	@ (80026f4 <HAL_RCCEx_CRSConfig+0x7c>)
 8002686:	2180      	movs	r1, #128	@ 0x80
 8002688:	0509      	lsls	r1, r1, #20
 800268a:	430a      	orrs	r2, r1
 800268c:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_CRS_RELEASE_RESET();
 800268e:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <HAL_RCCEx_CRSConfig+0x7c>)
 8002690:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002692:	4b18      	ldr	r3, [pc, #96]	@ (80026f4 <HAL_RCCEx_CRSConfig+0x7c>)
 8002694:	4918      	ldr	r1, [pc, #96]	@ (80026f8 <HAL_RCCEx_CRSConfig+0x80>)
 8002696:	400a      	ands	r2, r1
 8002698:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	041b      	lsls	r3, r3, #16
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80026c2:	4b0e      	ldr	r3, [pc, #56]	@ (80026fc <HAL_RCCEx_CRSConfig+0x84>)
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80026c8:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <HAL_RCCEx_CRSConfig+0x84>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002700 <HAL_RCCEx_CRSConfig+0x88>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	021a      	lsls	r2, r3, #8
 80026d8:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <HAL_RCCEx_CRSConfig+0x84>)
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80026de:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <HAL_RCCEx_CRSConfig+0x84>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_RCCEx_CRSConfig+0x84>)
 80026e4:	2160      	movs	r1, #96	@ 0x60
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]
}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b004      	add	sp, #16
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	40021000 	.word	0x40021000
 80026f8:	f7ffffff 	.word	0xf7ffffff
 80026fc:	40006c00 	.word	0x40006c00
 8002700:	ffffc0ff 	.word	0xffffc0ff

08002704 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002704:	b5b0      	push	{r4, r5, r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800270c:	230f      	movs	r3, #15
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e088      	b.n	8002830 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2221      	movs	r2, #33	@ 0x21
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d107      	bne.n	800273a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2220      	movs	r2, #32
 800272e:	2100      	movs	r1, #0
 8002730:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	0018      	movs	r0, r3
 8002736:	f7fe fb7d 	bl	8000e34 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2221      	movs	r2, #33	@ 0x21
 800273e:	2102      	movs	r1, #2
 8002740:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2210      	movs	r2, #16
 800274a:	4013      	ands	r3, r2
 800274c:	2b10      	cmp	r3, #16
 800274e:	d05f      	beq.n	8002810 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	22ca      	movs	r2, #202	@ 0xca
 8002756:	625a      	str	r2, [r3, #36]	@ 0x24
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2253      	movs	r2, #83	@ 0x53
 800275e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002760:	250f      	movs	r5, #15
 8002762:	197c      	adds	r4, r7, r5
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	0018      	movs	r0, r3
 8002768:	f000 f890 	bl	800288c <RTC_EnterInitMode>
 800276c:	0003      	movs	r3, r0
 800276e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002770:	0028      	movs	r0, r5
 8002772:	183b      	adds	r3, r7, r0
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d12c      	bne.n	80027d4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	492c      	ldr	r1, [pc, #176]	@ (8002838 <HAL_RTC_Init+0x134>)
 8002786:	400a      	ands	r2, r1
 8002788:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6899      	ldr	r1, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	68d2      	ldr	r2, [r2, #12]
 80027b0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6919      	ldr	r1, [r3, #16]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	041a      	lsls	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80027c6:	183c      	adds	r4, r7, r0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	0018      	movs	r0, r3
 80027cc:	f000 f8a2 	bl	8002914 <RTC_ExitInitMode>
 80027d0:	0003      	movs	r3, r0
 80027d2:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80027d4:	230f      	movs	r3, #15
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d113      	bne.n	8002806 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2103      	movs	r1, #3
 80027ea:	438a      	bics	r2, r1
 80027ec:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	22ff      	movs	r2, #255	@ 0xff
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24
 800280e:	e003      	b.n	8002818 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002810:	230f      	movs	r3, #15
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002818:	230f      	movs	r3, #15
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d103      	bne.n	800282a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2221      	movs	r2, #33	@ 0x21
 8002826:	2101      	movs	r1, #1
 8002828:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800282a:	230f      	movs	r3, #15
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	781b      	ldrb	r3, [r3, #0]
}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	b004      	add	sp, #16
 8002836:	bdb0      	pop	{r4, r5, r7, pc}
 8002838:	ff8fffbf 	.word	0xff8fffbf

0800283c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0e      	ldr	r2, [pc, #56]	@ (8002888 <HAL_RTC_WaitForSynchro+0x4c>)
 800284e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002850:	f7fe fc42 	bl	80010d8 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002858:	e00a      	b.n	8002870 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800285a:	f7fe fc3d 	bl	80010d8 <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1ad2      	subs	r2, r2, r3
 8002864:	23fa      	movs	r3, #250	@ 0xfa
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	429a      	cmp	r2, r3
 800286a:	d901      	bls.n	8002870 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e006      	b.n	800287e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	4013      	ands	r3, r2
 800287a:	d0ee      	beq.n	800285a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	0018      	movs	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	b004      	add	sp, #16
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	0001ff5f 	.word	0x0001ff5f

0800288c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002898:	230f      	movs	r3, #15
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2240      	movs	r2, #64	@ 0x40
 80028a8:	4013      	ands	r3, r2
 80028aa:	d12c      	bne.n	8002906 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2180      	movs	r1, #128	@ 0x80
 80028b8:	430a      	orrs	r2, r1
 80028ba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028bc:	f7fe fc0c 	bl	80010d8 <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80028c4:	e014      	b.n	80028f0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80028c6:	f7fe fc07 	bl	80010d8 <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	1ad2      	subs	r2, r2, r3
 80028d0:	200f      	movs	r0, #15
 80028d2:	183b      	adds	r3, r7, r0
 80028d4:	1839      	adds	r1, r7, r0
 80028d6:	7809      	ldrb	r1, [r1, #0]
 80028d8:	7019      	strb	r1, [r3, #0]
 80028da:	23fa      	movs	r3, #250	@ 0xfa
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	429a      	cmp	r2, r3
 80028e0:	d906      	bls.n	80028f0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2221      	movs	r2, #33	@ 0x21
 80028e6:	2104      	movs	r1, #4
 80028e8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80028ea:	183b      	adds	r3, r7, r0
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2240      	movs	r2, #64	@ 0x40
 80028f8:	4013      	ands	r3, r2
 80028fa:	d104      	bne.n	8002906 <RTC_EnterInitMode+0x7a>
 80028fc:	230f      	movs	r3, #15
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d1df      	bne.n	80028c6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002906:	230f      	movs	r3, #15
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	781b      	ldrb	r3, [r3, #0]
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b004      	add	sp, #16
 8002912:	bd80      	pop	{r7, pc}

08002914 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800291c:	240f      	movs	r4, #15
 800291e:	193b      	adds	r3, r7, r4
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2180      	movs	r1, #128	@ 0x80
 8002930:	438a      	bics	r2, r1
 8002932:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2220      	movs	r2, #32
 800293c:	4013      	ands	r3, r2
 800293e:	d10c      	bne.n	800295a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	0018      	movs	r0, r3
 8002944:	f7ff ff7a 	bl	800283c <HAL_RTC_WaitForSynchro>
 8002948:	1e03      	subs	r3, r0, #0
 800294a:	d006      	beq.n	800295a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2221      	movs	r2, #33	@ 0x21
 8002950:	2104      	movs	r1, #4
 8002952:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002954:	193b      	adds	r3, r7, r4
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800295a:	230f      	movs	r3, #15
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	781b      	ldrb	r3, [r3, #0]
}
 8002960:	0018      	movs	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	b005      	add	sp, #20
 8002966:	bd90      	pop	{r4, r7, pc}

08002968 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002974:	4b64      	ldr	r3, [pc, #400]	@ (8002b08 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	22fa      	movs	r2, #250	@ 0xfa
 800297a:	01d1      	lsls	r1, r2, #7
 800297c:	0018      	movs	r0, r3
 800297e:	f7fd fbcb 	bl	8000118 <__udivsi3>
 8002982:	0003      	movs	r3, r0
 8002984:	001a      	movs	r2, r3
 8002986:	0013      	movs	r3, r2
 8002988:	015b      	lsls	r3, r3, #5
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	189b      	adds	r3, r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	5c9b      	ldrb	r3, [r3, r2]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 800299e:	2302      	movs	r3, #2
 80029a0:	e0ad      	b.n	8002afe <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	2101      	movs	r1, #1
 80029a8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2221      	movs	r2, #33	@ 0x21
 80029ae:	2102      	movs	r1, #2
 80029b0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	22ca      	movs	r2, #202	@ 0xca
 80029b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2253      	movs	r2, #83	@ 0x53
 80029c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4013      	ands	r3, r2
 80029ce:	d019      	beq.n	8002a04 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10d      	bne.n	80029f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	22ff      	movs	r2, #255	@ 0xff
 80029e2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2221      	movs	r2, #33	@ 0x21
 80029e8:	2103      	movs	r1, #3
 80029ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	2100      	movs	r1, #0
 80029f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e082      	b.n	8002afe <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	2204      	movs	r2, #4
 8002a00:	4013      	ands	r3, r2
 8002a02:	d1e5      	bne.n	80029d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	493f      	ldr	r1, [pc, #252]	@ (8002b0c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8002a10:	400a      	ands	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	22ff      	movs	r2, #255	@ 0xff
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	493b      	ldr	r1, [pc, #236]	@ (8002b10 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8002a24:	430a      	orrs	r2, r1
 8002a26:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002a28:	4b37      	ldr	r3, [pc, #220]	@ (8002b08 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	22fa      	movs	r2, #250	@ 0xfa
 8002a2e:	01d1      	lsls	r1, r2, #7
 8002a30:	0018      	movs	r0, r3
 8002a32:	f7fd fb71 	bl	8000118 <__udivsi3>
 8002a36:	0003      	movs	r3, r0
 8002a38:	001a      	movs	r2, r3
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	015b      	lsls	r3, r3, #5
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10d      	bne.n	8002a70 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	22ff      	movs	r2, #255	@ 0xff
 8002a5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2221      	movs	r2, #33	@ 0x21
 8002a60:	2103      	movs	r1, #3
 8002a62:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	2100      	movs	r1, #0
 8002a6a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e046      	b.n	8002afe <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2204      	movs	r2, #4
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d0e5      	beq.n	8002a48 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2107      	movs	r1, #7
 8002a88:	438a      	bics	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6899      	ldr	r1, [r3, #8]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b14 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002aaa:	2180      	movs	r1, #128	@ 0x80
 8002aac:	0349      	lsls	r1, r1, #13
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002ab2:	4b18      	ldr	r3, [pc, #96]	@ (8002b14 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	4b17      	ldr	r3, [pc, #92]	@ (8002b14 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002ab8:	2180      	movs	r1, #128	@ 0x80
 8002aba:	0349      	lsls	r1, r1, #13
 8002abc:	430a      	orrs	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2180      	movs	r1, #128	@ 0x80
 8002acc:	01c9      	lsls	r1, r1, #7
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2180      	movs	r1, #128	@ 0x80
 8002ade:	00c9      	lsls	r1, r1, #3
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	22ff      	movs	r2, #255	@ 0xff
 8002aea:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2221      	movs	r2, #33	@ 0x21
 8002af0:	2101      	movs	r1, #1
 8002af2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	2100      	movs	r1, #0
 8002afa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b006      	add	sp, #24
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	fffffbff 	.word	0xfffffbff
 8002b10:	fffffb7f 	.word	0xfffffb7f
 8002b14:	40010400 	.word	0x40010400

08002b18 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002b20:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8002b22:	2280      	movs	r2, #128	@ 0x80
 8002b24:	0352      	lsls	r2, r2, #13
 8002b26:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	01db      	lsls	r3, r3, #7
 8002b32:	4013      	ands	r3, r2
 8002b34:	d014      	beq.n	8002b60 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	2380      	movs	r3, #128	@ 0x80
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4013      	ands	r3, r2
 8002b42:	d00d      	beq.n	8002b60 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	22ff      	movs	r2, #255	@ 0xff
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4908      	ldr	r1, [pc, #32]	@ (8002b74 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8002b54:	430a      	orrs	r2, r1
 8002b56:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7fe f822 	bl	8000ba4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2221      	movs	r2, #33	@ 0x21
 8002b64:	2101      	movs	r1, #1
 8002b66:	5499      	strb	r1, [r3, r2]
}
 8002b68:	46c0      	nop			@ (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b002      	add	sp, #8
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40010400 	.word	0x40010400
 8002b74:	fffffb7f 	.word	0xfffffb7f

08002b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e044      	b.n	8002c14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d107      	bne.n	8002ba2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2278      	movs	r2, #120	@ 0x78
 8002b96:	2100      	movs	r1, #0
 8002b98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f7fe f969 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2224      	movs	r2, #36	@ 0x24
 8002ba6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	438a      	bics	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 fcfe 	bl	80035c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f000 fa5c 	bl	8003088 <UART_SetConfig>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e01c      	b.n	8002c14 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	490d      	ldr	r1, [pc, #52]	@ (8002c1c <HAL_UART_Init+0xa4>)
 8002be6:	400a      	ands	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	212a      	movs	r1, #42	@ 0x2a
 8002bf6:	438a      	bics	r2, r1
 8002bf8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2101      	movs	r1, #1
 8002c06:	430a      	orrs	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 fd8d 	bl	800372c <UART_CheckIdleState>
 8002c12:	0003      	movs	r3, r0
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	ffffb7ff 	.word	0xffffb7ff

08002c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	@ 0x28
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	1dbb      	adds	r3, r7, #6
 8002c2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d000      	beq.n	8002c3a <HAL_UART_Transmit+0x1a>
 8002c38:	e08c      	b.n	8002d54 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_UART_Transmit+0x28>
 8002c40:	1dbb      	adds	r3, r7, #6
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e084      	b.n	8002d56 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	2380      	movs	r3, #128	@ 0x80
 8002c52:	015b      	lsls	r3, r3, #5
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d109      	bne.n	8002c6c <HAL_UART_Transmit+0x4c>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d105      	bne.n	8002c6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2201      	movs	r2, #1
 8002c64:	4013      	ands	r3, r2
 8002c66:	d001      	beq.n	8002c6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e074      	b.n	8002d56 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2284      	movs	r2, #132	@ 0x84
 8002c70:	2100      	movs	r1, #0
 8002c72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2221      	movs	r2, #33	@ 0x21
 8002c78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c7a:	f7fe fa2d 	bl	80010d8 <HAL_GetTick>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1dba      	adds	r2, r7, #6
 8002c86:	2150      	movs	r1, #80	@ 0x50
 8002c88:	8812      	ldrh	r2, [r2, #0]
 8002c8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1dba      	adds	r2, r7, #6
 8002c90:	2152      	movs	r1, #82	@ 0x52
 8002c92:	8812      	ldrh	r2, [r2, #0]
 8002c94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	2380      	movs	r3, #128	@ 0x80
 8002c9c:	015b      	lsls	r3, r3, #5
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d108      	bne.n	8002cb4 <HAL_UART_Transmit+0x94>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	e003      	b.n	8002cbc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cbc:	e02f      	b.n	8002d1e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	0013      	movs	r3, r2
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2180      	movs	r1, #128	@ 0x80
 8002ccc:	f000 fdd6 	bl	800387c <UART_WaitOnFlagUntilTimeout>
 8002cd0:	1e03      	subs	r3, r0, #0
 8002cd2:	d004      	beq.n	8002cde <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e03b      	b.n	8002d56 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10b      	bne.n	8002cfc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	001a      	movs	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	05d2      	lsls	r2, r2, #23
 8002cf0:	0dd2      	lsrs	r2, r2, #23
 8002cf2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	e007      	b.n	8002d0c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2252      	movs	r2, #82	@ 0x52
 8002d10:	5a9b      	ldrh	r3, [r3, r2]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b299      	uxth	r1, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2252      	movs	r2, #82	@ 0x52
 8002d1c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2252      	movs	r2, #82	@ 0x52
 8002d22:	5a9b      	ldrh	r3, [r3, r2]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1c9      	bne.n	8002cbe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	0013      	movs	r3, r2
 8002d34:	2200      	movs	r2, #0
 8002d36:	2140      	movs	r1, #64	@ 0x40
 8002d38:	f000 fda0 	bl	800387c <UART_WaitOnFlagUntilTimeout>
 8002d3c:	1e03      	subs	r3, r0, #0
 8002d3e:	d004      	beq.n	8002d4a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e005      	b.n	8002d56 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e000      	b.n	8002d56 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b008      	add	sp, #32
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	@ 0x28
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	1dbb      	adds	r3, r7, #6
 8002d6e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2280      	movs	r2, #128	@ 0x80
 8002d74:	589b      	ldr	r3, [r3, r2]
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d000      	beq.n	8002d7c <HAL_UART_Receive+0x1c>
 8002d7a:	e0d0      	b.n	8002f1e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_UART_Receive+0x2a>
 8002d82:	1dbb      	adds	r3, r7, #6
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0c8      	b.n	8002f20 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	015b      	lsls	r3, r3, #5
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d109      	bne.n	8002dae <HAL_UART_Receive+0x4e>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2201      	movs	r2, #1
 8002da6:	4013      	ands	r3, r2
 8002da8:	d001      	beq.n	8002dae <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e0b8      	b.n	8002f20 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2284      	movs	r2, #132	@ 0x84
 8002db2:	2100      	movs	r1, #0
 8002db4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2280      	movs	r2, #128	@ 0x80
 8002dba:	2122      	movs	r1, #34	@ 0x22
 8002dbc:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dc4:	f7fe f988 	bl	80010d8 <HAL_GetTick>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1dba      	adds	r2, r7, #6
 8002dd0:	2158      	movs	r1, #88	@ 0x58
 8002dd2:	8812      	ldrh	r2, [r2, #0]
 8002dd4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1dba      	adds	r2, r7, #6
 8002dda:	215a      	movs	r1, #90	@ 0x5a
 8002ddc:	8812      	ldrh	r2, [r2, #0]
 8002dde:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	2380      	movs	r3, #128	@ 0x80
 8002de6:	015b      	lsls	r3, r3, #5
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d10d      	bne.n	8002e08 <HAL_UART_Receive+0xa8>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d104      	bne.n	8002dfe <HAL_UART_Receive+0x9e>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	225c      	movs	r2, #92	@ 0x5c
 8002df8:	494b      	ldr	r1, [pc, #300]	@ (8002f28 <HAL_UART_Receive+0x1c8>)
 8002dfa:	5299      	strh	r1, [r3, r2]
 8002dfc:	e02e      	b.n	8002e5c <HAL_UART_Receive+0xfc>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	225c      	movs	r2, #92	@ 0x5c
 8002e02:	21ff      	movs	r1, #255	@ 0xff
 8002e04:	5299      	strh	r1, [r3, r2]
 8002e06:	e029      	b.n	8002e5c <HAL_UART_Receive+0xfc>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10d      	bne.n	8002e2c <HAL_UART_Receive+0xcc>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d104      	bne.n	8002e22 <HAL_UART_Receive+0xc2>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	225c      	movs	r2, #92	@ 0x5c
 8002e1c:	21ff      	movs	r1, #255	@ 0xff
 8002e1e:	5299      	strh	r1, [r3, r2]
 8002e20:	e01c      	b.n	8002e5c <HAL_UART_Receive+0xfc>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	225c      	movs	r2, #92	@ 0x5c
 8002e26:	217f      	movs	r1, #127	@ 0x7f
 8002e28:	5299      	strh	r1, [r3, r2]
 8002e2a:	e017      	b.n	8002e5c <HAL_UART_Receive+0xfc>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	055b      	lsls	r3, r3, #21
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d10d      	bne.n	8002e54 <HAL_UART_Receive+0xf4>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d104      	bne.n	8002e4a <HAL_UART_Receive+0xea>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	225c      	movs	r2, #92	@ 0x5c
 8002e44:	217f      	movs	r1, #127	@ 0x7f
 8002e46:	5299      	strh	r1, [r3, r2]
 8002e48:	e008      	b.n	8002e5c <HAL_UART_Receive+0xfc>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	225c      	movs	r2, #92	@ 0x5c
 8002e4e:	213f      	movs	r1, #63	@ 0x3f
 8002e50:	5299      	strh	r1, [r3, r2]
 8002e52:	e003      	b.n	8002e5c <HAL_UART_Receive+0xfc>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	225c      	movs	r2, #92	@ 0x5c
 8002e58:	2100      	movs	r1, #0
 8002e5a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002e5c:	2312      	movs	r3, #18
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	215c      	movs	r1, #92	@ 0x5c
 8002e64:	5a52      	ldrh	r2, [r2, r1]
 8002e66:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	2380      	movs	r3, #128	@ 0x80
 8002e6e:	015b      	lsls	r3, r3, #5
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d108      	bne.n	8002e86 <HAL_UART_Receive+0x126>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d104      	bne.n	8002e86 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	e003      	b.n	8002e8e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002e8e:	e03a      	b.n	8002f06 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	0013      	movs	r3, r2
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2120      	movs	r1, #32
 8002e9e:	f000 fced 	bl	800387c <UART_WaitOnFlagUntilTimeout>
 8002ea2:	1e03      	subs	r3, r0, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2280      	movs	r2, #128	@ 0x80
 8002eaa:	2120      	movs	r1, #32
 8002eac:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e036      	b.n	8002f20 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10e      	bne.n	8002ed6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2212      	movs	r2, #18
 8002ec2:	18ba      	adds	r2, r7, r2
 8002ec4:	8812      	ldrh	r2, [r2, #0]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	e00e      	b.n	8002ef4 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2212      	movs	r2, #18
 8002ee0:	18ba      	adds	r2, r7, r2
 8002ee2:	8812      	ldrh	r2, [r2, #0]
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	225a      	movs	r2, #90	@ 0x5a
 8002ef8:	5a9b      	ldrh	r3, [r3, r2]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b299      	uxth	r1, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	225a      	movs	r2, #90	@ 0x5a
 8002f04:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	225a      	movs	r2, #90	@ 0x5a
 8002f0a:	5a9b      	ldrh	r3, [r3, r2]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1be      	bne.n	8002e90 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2280      	movs	r2, #128	@ 0x80
 8002f16:	2120      	movs	r1, #32
 8002f18:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e000      	b.n	8002f20 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8002f1e:	2302      	movs	r3, #2
  }
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b008      	add	sp, #32
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	000001ff 	.word	0x000001ff

08002f2c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b092      	sub	sp, #72	@ 0x48
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f34:	f3ef 8310 	mrs	r3, PRIMASK
 8002f38:	623b      	str	r3, [r7, #32]
  return(result);
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f3e:	2301      	movs	r3, #1
 8002f40:	627b      	str	r3, [r7, #36]	@ 0x24
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	f383 8810 	msr	PRIMASK, r3
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	494b      	ldr	r1, [pc, #300]	@ (8003084 <HAL_UART_AbortReceive+0x158>)
 8002f56:	400a      	ands	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f60:	f383 8810 	msr	PRIMASK, r3
}
 8002f64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f66:	f3ef 8310 	mrs	r3, PRIMASK
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8002f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f70:	2301      	movs	r3, #1
 8002f72:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f76:	f383 8810 	msr	PRIMASK, r3
}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2101      	movs	r1, #1
 8002f88:	438a      	bics	r2, r1
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f8e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f92:	f383 8810 	msr	PRIMASK, r3
}
 8002f96:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d118      	bne.n	8002fd2 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa4:	617b      	str	r3, [r7, #20]
  return(result);
 8002fa6:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002faa:	2301      	movs	r3, #1
 8002fac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f383 8810 	msr	PRIMASK, r3
}
 8002fb4:	46c0      	nop			@ (mov r8, r8)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2110      	movs	r1, #16
 8002fc2:	438a      	bics	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f383 8810 	msr	PRIMASK, r3
}
 8002fd0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2240      	movs	r2, #64	@ 0x40
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b40      	cmp	r3, #64	@ 0x40
 8002fde:	d135      	bne.n	800304c <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fe6:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fea:	2301      	movs	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f383 8810 	msr	PRIMASK, r3
}
 8002ff4:	46c0      	nop			@ (mov r8, r8)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2140      	movs	r1, #64	@ 0x40
 8003002:	438a      	bics	r2, r1
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003008:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f383 8810 	msr	PRIMASK, r3
}
 8003010:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003016:	2b00      	cmp	r3, #0
 8003018:	d018      	beq.n	800304c <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800301e:	2200      	movs	r2, #0
 8003020:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003026:	0018      	movs	r0, r3
 8003028:	f7fe f97e 	bl	8001328 <HAL_DMA_Abort>
 800302c:	1e03      	subs	r3, r0, #0
 800302e:	d00d      	beq.n	800304c <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003034:	0018      	movs	r0, r3
 8003036:	f7fe f9b7 	bl	80013a8 <HAL_DMA_GetError>
 800303a:	0003      	movs	r3, r0
 800303c:	2b20      	cmp	r3, #32
 800303e:	d105      	bne.n	800304c <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2284      	movs	r2, #132	@ 0x84
 8003044:	2110      	movs	r1, #16
 8003046:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e017      	b.n	800307c <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	225a      	movs	r2, #90	@ 0x5a
 8003050:	2100      	movs	r1, #0
 8003052:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	220f      	movs	r2, #15
 800305a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2108      	movs	r1, #8
 8003068:	430a      	orrs	r2, r1
 800306a:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2280      	movs	r2, #128	@ 0x80
 8003070:	2120      	movs	r1, #32
 8003072:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b012      	add	sp, #72	@ 0x48
 8003082:	bd80      	pop	{r7, pc}
 8003084:	fffffedf 	.word	0xfffffedf

08003088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003088:	b5b0      	push	{r4, r5, r7, lr}
 800308a:	b08e      	sub	sp, #56	@ 0x38
 800308c:	af00      	add	r7, sp, #0
 800308e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003090:	231a      	movs	r3, #26
 8003092:	2218      	movs	r2, #24
 8003094:	189b      	adds	r3, r3, r2
 8003096:	19db      	adds	r3, r3, r7
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4ac3      	ldr	r2, [pc, #780]	@ (80033c8 <UART_SetConfig+0x340>)
 80030bc:	4013      	ands	r3, r2
 80030be:	0019      	movs	r1, r3
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030c6:	430a      	orrs	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4abe      	ldr	r2, [pc, #760]	@ (80033cc <UART_SetConfig+0x344>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	0019      	movs	r1, r3
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4ab8      	ldr	r2, [pc, #736]	@ (80033d0 <UART_SetConfig+0x348>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030f8:	4313      	orrs	r3, r2
 80030fa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	4ab4      	ldr	r2, [pc, #720]	@ (80033d4 <UART_SetConfig+0x34c>)
 8003104:	4013      	ands	r3, r2
 8003106:	0019      	movs	r1, r3
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800310e:	430a      	orrs	r2, r1
 8003110:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4ab0      	ldr	r2, [pc, #704]	@ (80033d8 <UART_SetConfig+0x350>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d131      	bne.n	8003180 <UART_SetConfig+0xf8>
 800311c:	4baf      	ldr	r3, [pc, #700]	@ (80033dc <UART_SetConfig+0x354>)
 800311e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003120:	2203      	movs	r2, #3
 8003122:	4013      	ands	r3, r2
 8003124:	2b03      	cmp	r3, #3
 8003126:	d01d      	beq.n	8003164 <UART_SetConfig+0xdc>
 8003128:	d823      	bhi.n	8003172 <UART_SetConfig+0xea>
 800312a:	2b02      	cmp	r3, #2
 800312c:	d00c      	beq.n	8003148 <UART_SetConfig+0xc0>
 800312e:	d820      	bhi.n	8003172 <UART_SetConfig+0xea>
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <UART_SetConfig+0xb2>
 8003134:	2b01      	cmp	r3, #1
 8003136:	d00e      	beq.n	8003156 <UART_SetConfig+0xce>
 8003138:	e01b      	b.n	8003172 <UART_SetConfig+0xea>
 800313a:	231b      	movs	r3, #27
 800313c:	2218      	movs	r2, #24
 800313e:	189b      	adds	r3, r3, r2
 8003140:	19db      	adds	r3, r3, r7
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e0b4      	b.n	80032b2 <UART_SetConfig+0x22a>
 8003148:	231b      	movs	r3, #27
 800314a:	2218      	movs	r2, #24
 800314c:	189b      	adds	r3, r3, r2
 800314e:	19db      	adds	r3, r3, r7
 8003150:	2202      	movs	r2, #2
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	e0ad      	b.n	80032b2 <UART_SetConfig+0x22a>
 8003156:	231b      	movs	r3, #27
 8003158:	2218      	movs	r2, #24
 800315a:	189b      	adds	r3, r3, r2
 800315c:	19db      	adds	r3, r3, r7
 800315e:	2204      	movs	r2, #4
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e0a6      	b.n	80032b2 <UART_SetConfig+0x22a>
 8003164:	231b      	movs	r3, #27
 8003166:	2218      	movs	r2, #24
 8003168:	189b      	adds	r3, r3, r2
 800316a:	19db      	adds	r3, r3, r7
 800316c:	2208      	movs	r2, #8
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	e09f      	b.n	80032b2 <UART_SetConfig+0x22a>
 8003172:	231b      	movs	r3, #27
 8003174:	2218      	movs	r2, #24
 8003176:	189b      	adds	r3, r3, r2
 8003178:	19db      	adds	r3, r3, r7
 800317a:	2210      	movs	r2, #16
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	e098      	b.n	80032b2 <UART_SetConfig+0x22a>
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a96      	ldr	r2, [pc, #600]	@ (80033e0 <UART_SetConfig+0x358>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d131      	bne.n	80031ee <UART_SetConfig+0x166>
 800318a:	4b94      	ldr	r3, [pc, #592]	@ (80033dc <UART_SetConfig+0x354>)
 800318c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318e:	220c      	movs	r2, #12
 8003190:	4013      	ands	r3, r2
 8003192:	2b0c      	cmp	r3, #12
 8003194:	d01d      	beq.n	80031d2 <UART_SetConfig+0x14a>
 8003196:	d823      	bhi.n	80031e0 <UART_SetConfig+0x158>
 8003198:	2b08      	cmp	r3, #8
 800319a:	d00c      	beq.n	80031b6 <UART_SetConfig+0x12e>
 800319c:	d820      	bhi.n	80031e0 <UART_SetConfig+0x158>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <UART_SetConfig+0x120>
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d00e      	beq.n	80031c4 <UART_SetConfig+0x13c>
 80031a6:	e01b      	b.n	80031e0 <UART_SetConfig+0x158>
 80031a8:	231b      	movs	r3, #27
 80031aa:	2218      	movs	r2, #24
 80031ac:	189b      	adds	r3, r3, r2
 80031ae:	19db      	adds	r3, r3, r7
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
 80031b4:	e07d      	b.n	80032b2 <UART_SetConfig+0x22a>
 80031b6:	231b      	movs	r3, #27
 80031b8:	2218      	movs	r2, #24
 80031ba:	189b      	adds	r3, r3, r2
 80031bc:	19db      	adds	r3, r3, r7
 80031be:	2202      	movs	r2, #2
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	e076      	b.n	80032b2 <UART_SetConfig+0x22a>
 80031c4:	231b      	movs	r3, #27
 80031c6:	2218      	movs	r2, #24
 80031c8:	189b      	adds	r3, r3, r2
 80031ca:	19db      	adds	r3, r3, r7
 80031cc:	2204      	movs	r2, #4
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e06f      	b.n	80032b2 <UART_SetConfig+0x22a>
 80031d2:	231b      	movs	r3, #27
 80031d4:	2218      	movs	r2, #24
 80031d6:	189b      	adds	r3, r3, r2
 80031d8:	19db      	adds	r3, r3, r7
 80031da:	2208      	movs	r2, #8
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e068      	b.n	80032b2 <UART_SetConfig+0x22a>
 80031e0:	231b      	movs	r3, #27
 80031e2:	2218      	movs	r2, #24
 80031e4:	189b      	adds	r3, r3, r2
 80031e6:	19db      	adds	r3, r3, r7
 80031e8:	2210      	movs	r2, #16
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	e061      	b.n	80032b2 <UART_SetConfig+0x22a>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a7c      	ldr	r2, [pc, #496]	@ (80033e4 <UART_SetConfig+0x35c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d106      	bne.n	8003206 <UART_SetConfig+0x17e>
 80031f8:	231b      	movs	r3, #27
 80031fa:	2218      	movs	r2, #24
 80031fc:	189b      	adds	r3, r3, r2
 80031fe:	19db      	adds	r3, r3, r7
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
 8003204:	e055      	b.n	80032b2 <UART_SetConfig+0x22a>
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a77      	ldr	r2, [pc, #476]	@ (80033e8 <UART_SetConfig+0x360>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d106      	bne.n	800321e <UART_SetConfig+0x196>
 8003210:	231b      	movs	r3, #27
 8003212:	2218      	movs	r2, #24
 8003214:	189b      	adds	r3, r3, r2
 8003216:	19db      	adds	r3, r3, r7
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e049      	b.n	80032b2 <UART_SetConfig+0x22a>
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a6b      	ldr	r2, [pc, #428]	@ (80033d0 <UART_SetConfig+0x348>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d13e      	bne.n	80032a6 <UART_SetConfig+0x21e>
 8003228:	4b6c      	ldr	r3, [pc, #432]	@ (80033dc <UART_SetConfig+0x354>)
 800322a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800322c:	23c0      	movs	r3, #192	@ 0xc0
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	4013      	ands	r3, r2
 8003232:	22c0      	movs	r2, #192	@ 0xc0
 8003234:	0112      	lsls	r2, r2, #4
 8003236:	4293      	cmp	r3, r2
 8003238:	d027      	beq.n	800328a <UART_SetConfig+0x202>
 800323a:	22c0      	movs	r2, #192	@ 0xc0
 800323c:	0112      	lsls	r2, r2, #4
 800323e:	4293      	cmp	r3, r2
 8003240:	d82a      	bhi.n	8003298 <UART_SetConfig+0x210>
 8003242:	2280      	movs	r2, #128	@ 0x80
 8003244:	0112      	lsls	r2, r2, #4
 8003246:	4293      	cmp	r3, r2
 8003248:	d011      	beq.n	800326e <UART_SetConfig+0x1e6>
 800324a:	2280      	movs	r2, #128	@ 0x80
 800324c:	0112      	lsls	r2, r2, #4
 800324e:	4293      	cmp	r3, r2
 8003250:	d822      	bhi.n	8003298 <UART_SetConfig+0x210>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d004      	beq.n	8003260 <UART_SetConfig+0x1d8>
 8003256:	2280      	movs	r2, #128	@ 0x80
 8003258:	00d2      	lsls	r2, r2, #3
 800325a:	4293      	cmp	r3, r2
 800325c:	d00e      	beq.n	800327c <UART_SetConfig+0x1f4>
 800325e:	e01b      	b.n	8003298 <UART_SetConfig+0x210>
 8003260:	231b      	movs	r3, #27
 8003262:	2218      	movs	r2, #24
 8003264:	189b      	adds	r3, r3, r2
 8003266:	19db      	adds	r3, r3, r7
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	e021      	b.n	80032b2 <UART_SetConfig+0x22a>
 800326e:	231b      	movs	r3, #27
 8003270:	2218      	movs	r2, #24
 8003272:	189b      	adds	r3, r3, r2
 8003274:	19db      	adds	r3, r3, r7
 8003276:	2202      	movs	r2, #2
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	e01a      	b.n	80032b2 <UART_SetConfig+0x22a>
 800327c:	231b      	movs	r3, #27
 800327e:	2218      	movs	r2, #24
 8003280:	189b      	adds	r3, r3, r2
 8003282:	19db      	adds	r3, r3, r7
 8003284:	2204      	movs	r2, #4
 8003286:	701a      	strb	r2, [r3, #0]
 8003288:	e013      	b.n	80032b2 <UART_SetConfig+0x22a>
 800328a:	231b      	movs	r3, #27
 800328c:	2218      	movs	r2, #24
 800328e:	189b      	adds	r3, r3, r2
 8003290:	19db      	adds	r3, r3, r7
 8003292:	2208      	movs	r2, #8
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e00c      	b.n	80032b2 <UART_SetConfig+0x22a>
 8003298:	231b      	movs	r3, #27
 800329a:	2218      	movs	r2, #24
 800329c:	189b      	adds	r3, r3, r2
 800329e:	19db      	adds	r3, r3, r7
 80032a0:	2210      	movs	r2, #16
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e005      	b.n	80032b2 <UART_SetConfig+0x22a>
 80032a6:	231b      	movs	r3, #27
 80032a8:	2218      	movs	r2, #24
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	19db      	adds	r3, r3, r7
 80032ae:	2210      	movs	r2, #16
 80032b0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a46      	ldr	r2, [pc, #280]	@ (80033d0 <UART_SetConfig+0x348>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d000      	beq.n	80032be <UART_SetConfig+0x236>
 80032bc:	e09a      	b.n	80033f4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032be:	231b      	movs	r3, #27
 80032c0:	2218      	movs	r2, #24
 80032c2:	189b      	adds	r3, r3, r2
 80032c4:	19db      	adds	r3, r3, r7
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d01d      	beq.n	8003308 <UART_SetConfig+0x280>
 80032cc:	dc20      	bgt.n	8003310 <UART_SetConfig+0x288>
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d015      	beq.n	80032fe <UART_SetConfig+0x276>
 80032d2:	dc1d      	bgt.n	8003310 <UART_SetConfig+0x288>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <UART_SetConfig+0x256>
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d005      	beq.n	80032e8 <UART_SetConfig+0x260>
 80032dc:	e018      	b.n	8003310 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032de:	f7ff f801 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 80032e2:	0003      	movs	r3, r0
 80032e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80032e6:	e01c      	b.n	8003322 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032e8:	4b3c      	ldr	r3, [pc, #240]	@ (80033dc <UART_SetConfig+0x354>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2210      	movs	r2, #16
 80032ee:	4013      	ands	r3, r2
 80032f0:	d002      	beq.n	80032f8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80032f2:	4b3e      	ldr	r3, [pc, #248]	@ (80033ec <UART_SetConfig+0x364>)
 80032f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80032f6:	e014      	b.n	8003322 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80032f8:	4b3d      	ldr	r3, [pc, #244]	@ (80033f0 <UART_SetConfig+0x368>)
 80032fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80032fc:	e011      	b.n	8003322 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fe:	f7fe ff61 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8003302:	0003      	movs	r3, r0
 8003304:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003306:	e00c      	b.n	8003322 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003308:	2380      	movs	r3, #128	@ 0x80
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800330e:	e008      	b.n	8003322 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003314:	231a      	movs	r3, #26
 8003316:	2218      	movs	r2, #24
 8003318:	189b      	adds	r3, r3, r2
 800331a:	19db      	adds	r3, r3, r7
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
        break;
 8003320:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d100      	bne.n	800332a <UART_SetConfig+0x2a2>
 8003328:	e133      	b.n	8003592 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	0013      	movs	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	189b      	adds	r3, r3, r2
 8003334:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003336:	429a      	cmp	r2, r3
 8003338:	d305      	bcc.n	8003346 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003342:	429a      	cmp	r2, r3
 8003344:	d906      	bls.n	8003354 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003346:	231a      	movs	r3, #26
 8003348:	2218      	movs	r2, #24
 800334a:	189b      	adds	r3, r3, r2
 800334c:	19db      	adds	r3, r3, r7
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e11e      	b.n	8003592 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	6939      	ldr	r1, [r7, #16]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	000b      	movs	r3, r1
 8003362:	0e1b      	lsrs	r3, r3, #24
 8003364:	0010      	movs	r0, r2
 8003366:	0205      	lsls	r5, r0, #8
 8003368:	431d      	orrs	r5, r3
 800336a:	000b      	movs	r3, r1
 800336c:	021c      	lsls	r4, r3, #8
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	085b      	lsrs	r3, r3, #1
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68b8      	ldr	r0, [r7, #8]
 800337c:	68f9      	ldr	r1, [r7, #12]
 800337e:	1900      	adds	r0, r0, r4
 8003380:	4169      	adcs	r1, r5
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	2300      	movs	r3, #0
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f7fc ff4e 	bl	8000230 <__aeabi_uldivmod>
 8003394:	0002      	movs	r2, r0
 8003396:	000b      	movs	r3, r1
 8003398:	0013      	movs	r3, r2
 800339a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800339c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800339e:	23c0      	movs	r3, #192	@ 0xc0
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d309      	bcc.n	80033ba <UART_SetConfig+0x332>
 80033a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	035b      	lsls	r3, r3, #13
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d204      	bcs.n	80033ba <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033b6:	60da      	str	r2, [r3, #12]
 80033b8:	e0eb      	b.n	8003592 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80033ba:	231a      	movs	r3, #26
 80033bc:	2218      	movs	r2, #24
 80033be:	189b      	adds	r3, r3, r2
 80033c0:	19db      	adds	r3, r3, r7
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	e0e4      	b.n	8003592 <UART_SetConfig+0x50a>
 80033c8:	efff69f3 	.word	0xefff69f3
 80033cc:	ffffcfff 	.word	0xffffcfff
 80033d0:	40004800 	.word	0x40004800
 80033d4:	fffff4ff 	.word	0xfffff4ff
 80033d8:	40013800 	.word	0x40013800
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40004400 	.word	0x40004400
 80033e4:	40004c00 	.word	0x40004c00
 80033e8:	40005000 	.word	0x40005000
 80033ec:	003d0900 	.word	0x003d0900
 80033f0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	69da      	ldr	r2, [r3, #28]
 80033f8:	2380      	movs	r3, #128	@ 0x80
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d000      	beq.n	8003402 <UART_SetConfig+0x37a>
 8003400:	e070      	b.n	80034e4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8003402:	231b      	movs	r3, #27
 8003404:	2218      	movs	r2, #24
 8003406:	189b      	adds	r3, r3, r2
 8003408:	19db      	adds	r3, r3, r7
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b08      	cmp	r3, #8
 800340e:	d822      	bhi.n	8003456 <UART_SetConfig+0x3ce>
 8003410:	009a      	lsls	r2, r3, #2
 8003412:	4b67      	ldr	r3, [pc, #412]	@ (80035b0 <UART_SetConfig+0x528>)
 8003414:	18d3      	adds	r3, r2, r3
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800341a:	f7fe ff63 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 800341e:	0003      	movs	r3, r0
 8003420:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003422:	e021      	b.n	8003468 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003424:	f7fe ff74 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 8003428:	0003      	movs	r3, r0
 800342a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800342c:	e01c      	b.n	8003468 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800342e:	4b61      	ldr	r3, [pc, #388]	@ (80035b4 <UART_SetConfig+0x52c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2210      	movs	r2, #16
 8003434:	4013      	ands	r3, r2
 8003436:	d002      	beq.n	800343e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003438:	4b5f      	ldr	r3, [pc, #380]	@ (80035b8 <UART_SetConfig+0x530>)
 800343a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800343c:	e014      	b.n	8003468 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800343e:	4b5f      	ldr	r3, [pc, #380]	@ (80035bc <UART_SetConfig+0x534>)
 8003440:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003442:	e011      	b.n	8003468 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003444:	f7fe febe 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8003448:	0003      	movs	r3, r0
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800344c:	e00c      	b.n	8003468 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800344e:	2380      	movs	r3, #128	@ 0x80
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003454:	e008      	b.n	8003468 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800345a:	231a      	movs	r3, #26
 800345c:	2218      	movs	r2, #24
 800345e:	189b      	adds	r3, r3, r2
 8003460:	19db      	adds	r3, r3, r7
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
        break;
 8003466:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d100      	bne.n	8003470 <UART_SetConfig+0x3e8>
 800346e:	e090      	b.n	8003592 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003472:	005a      	lsls	r2, r3, #1
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	18d2      	adds	r2, r2, r3
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0019      	movs	r1, r3
 8003482:	0010      	movs	r0, r2
 8003484:	f7fc fe48 	bl	8000118 <__udivsi3>
 8003488:	0003      	movs	r3, r0
 800348a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800348c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348e:	2b0f      	cmp	r3, #15
 8003490:	d921      	bls.n	80034d6 <UART_SetConfig+0x44e>
 8003492:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	025b      	lsls	r3, r3, #9
 8003498:	429a      	cmp	r2, r3
 800349a:	d21c      	bcs.n	80034d6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800349c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349e:	b29a      	uxth	r2, r3
 80034a0:	200e      	movs	r0, #14
 80034a2:	2418      	movs	r4, #24
 80034a4:	1903      	adds	r3, r0, r4
 80034a6:	19db      	adds	r3, r3, r7
 80034a8:	210f      	movs	r1, #15
 80034aa:	438a      	bics	r2, r1
 80034ac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2207      	movs	r2, #7
 80034b6:	4013      	ands	r3, r2
 80034b8:	b299      	uxth	r1, r3
 80034ba:	1903      	adds	r3, r0, r4
 80034bc:	19db      	adds	r3, r3, r7
 80034be:	1902      	adds	r2, r0, r4
 80034c0:	19d2      	adds	r2, r2, r7
 80034c2:	8812      	ldrh	r2, [r2, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	1902      	adds	r2, r0, r4
 80034ce:	19d2      	adds	r2, r2, r7
 80034d0:	8812      	ldrh	r2, [r2, #0]
 80034d2:	60da      	str	r2, [r3, #12]
 80034d4:	e05d      	b.n	8003592 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80034d6:	231a      	movs	r3, #26
 80034d8:	2218      	movs	r2, #24
 80034da:	189b      	adds	r3, r3, r2
 80034dc:	19db      	adds	r3, r3, r7
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	e056      	b.n	8003592 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034e4:	231b      	movs	r3, #27
 80034e6:	2218      	movs	r2, #24
 80034e8:	189b      	adds	r3, r3, r2
 80034ea:	19db      	adds	r3, r3, r7
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d822      	bhi.n	8003538 <UART_SetConfig+0x4b0>
 80034f2:	009a      	lsls	r2, r3, #2
 80034f4:	4b32      	ldr	r3, [pc, #200]	@ (80035c0 <UART_SetConfig+0x538>)
 80034f6:	18d3      	adds	r3, r2, r3
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034fc:	f7fe fef2 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 8003500:	0003      	movs	r3, r0
 8003502:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003504:	e021      	b.n	800354a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003506:	f7fe ff03 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 800350a:	0003      	movs	r3, r0
 800350c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800350e:	e01c      	b.n	800354a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003510:	4b28      	ldr	r3, [pc, #160]	@ (80035b4 <UART_SetConfig+0x52c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2210      	movs	r2, #16
 8003516:	4013      	ands	r3, r2
 8003518:	d002      	beq.n	8003520 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800351a:	4b27      	ldr	r3, [pc, #156]	@ (80035b8 <UART_SetConfig+0x530>)
 800351c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800351e:	e014      	b.n	800354a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003520:	4b26      	ldr	r3, [pc, #152]	@ (80035bc <UART_SetConfig+0x534>)
 8003522:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003524:	e011      	b.n	800354a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003526:	f7fe fe4d 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 800352a:	0003      	movs	r3, r0
 800352c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800352e:	e00c      	b.n	800354a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003530:	2380      	movs	r3, #128	@ 0x80
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003536:	e008      	b.n	800354a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800353c:	231a      	movs	r3, #26
 800353e:	2218      	movs	r2, #24
 8003540:	189b      	adds	r3, r3, r2
 8003542:	19db      	adds	r3, r3, r7
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
        break;
 8003548:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800354a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	085a      	lsrs	r2, r3, #1
 8003556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003558:	18d2      	adds	r2, r2, r3
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	0019      	movs	r1, r3
 8003560:	0010      	movs	r0, r2
 8003562:	f7fc fdd9 	bl	8000118 <__udivsi3>
 8003566:	0003      	movs	r3, r0
 8003568:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800356a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356c:	2b0f      	cmp	r3, #15
 800356e:	d90a      	bls.n	8003586 <UART_SetConfig+0x4fe>
 8003570:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003572:	2380      	movs	r3, #128	@ 0x80
 8003574:	025b      	lsls	r3, r3, #9
 8003576:	429a      	cmp	r2, r3
 8003578:	d205      	bcs.n	8003586 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357c:	b29a      	uxth	r2, r3
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60da      	str	r2, [r3, #12]
 8003584:	e005      	b.n	8003592 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003586:	231a      	movs	r3, #26
 8003588:	2218      	movs	r2, #24
 800358a:	189b      	adds	r3, r3, r2
 800358c:	19db      	adds	r3, r3, r7
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	2200      	movs	r2, #0
 8003596:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2200      	movs	r2, #0
 800359c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800359e:	231a      	movs	r3, #26
 80035a0:	2218      	movs	r2, #24
 80035a2:	189b      	adds	r3, r3, r2
 80035a4:	19db      	adds	r3, r3, r7
 80035a6:	781b      	ldrb	r3, [r3, #0]
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b00e      	add	sp, #56	@ 0x38
 80035ae:	bdb0      	pop	{r4, r5, r7, pc}
 80035b0:	08003d48 	.word	0x08003d48
 80035b4:	40021000 	.word	0x40021000
 80035b8:	003d0900 	.word	0x003d0900
 80035bc:	00f42400 	.word	0x00f42400
 80035c0:	08003d6c 	.word	0x08003d6c

080035c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	2208      	movs	r2, #8
 80035d2:	4013      	ands	r3, r2
 80035d4:	d00b      	beq.n	80035ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003708 <UART_AdvFeatureConfig+0x144>)
 80035de:	4013      	ands	r3, r2
 80035e0:	0019      	movs	r1, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	2201      	movs	r2, #1
 80035f4:	4013      	ands	r3, r2
 80035f6:	d00b      	beq.n	8003610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4a43      	ldr	r2, [pc, #268]	@ (800370c <UART_AdvFeatureConfig+0x148>)
 8003600:	4013      	ands	r3, r2
 8003602:	0019      	movs	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	2202      	movs	r2, #2
 8003616:	4013      	ands	r3, r2
 8003618:	d00b      	beq.n	8003632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4a3b      	ldr	r2, [pc, #236]	@ (8003710 <UART_AdvFeatureConfig+0x14c>)
 8003622:	4013      	ands	r3, r2
 8003624:	0019      	movs	r1, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	2204      	movs	r2, #4
 8003638:	4013      	ands	r3, r2
 800363a:	d00b      	beq.n	8003654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4a34      	ldr	r2, [pc, #208]	@ (8003714 <UART_AdvFeatureConfig+0x150>)
 8003644:	4013      	ands	r3, r2
 8003646:	0019      	movs	r1, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	2210      	movs	r2, #16
 800365a:	4013      	ands	r3, r2
 800365c:	d00b      	beq.n	8003676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a2c      	ldr	r2, [pc, #176]	@ (8003718 <UART_AdvFeatureConfig+0x154>)
 8003666:	4013      	ands	r3, r2
 8003668:	0019      	movs	r1, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	2220      	movs	r2, #32
 800367c:	4013      	ands	r3, r2
 800367e:	d00b      	beq.n	8003698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	4a25      	ldr	r2, [pc, #148]	@ (800371c <UART_AdvFeatureConfig+0x158>)
 8003688:	4013      	ands	r3, r2
 800368a:	0019      	movs	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369c:	2240      	movs	r2, #64	@ 0x40
 800369e:	4013      	ands	r3, r2
 80036a0:	d01d      	beq.n	80036de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003720 <UART_AdvFeatureConfig+0x15c>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	0019      	movs	r1, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	035b      	lsls	r3, r3, #13
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d10b      	bne.n	80036de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4a15      	ldr	r2, [pc, #84]	@ (8003724 <UART_AdvFeatureConfig+0x160>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	0019      	movs	r1, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	2280      	movs	r2, #128	@ 0x80
 80036e4:	4013      	ands	r3, r2
 80036e6:	d00b      	beq.n	8003700 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003728 <UART_AdvFeatureConfig+0x164>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	0019      	movs	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	605a      	str	r2, [r3, #4]
  }
}
 8003700:	46c0      	nop			@ (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	b002      	add	sp, #8
 8003706:	bd80      	pop	{r7, pc}
 8003708:	ffff7fff 	.word	0xffff7fff
 800370c:	fffdffff 	.word	0xfffdffff
 8003710:	fffeffff 	.word	0xfffeffff
 8003714:	fffbffff 	.word	0xfffbffff
 8003718:	ffffefff 	.word	0xffffefff
 800371c:	ffffdfff 	.word	0xffffdfff
 8003720:	ffefffff 	.word	0xffefffff
 8003724:	ff9fffff 	.word	0xff9fffff
 8003728:	fff7ffff 	.word	0xfff7ffff

0800372c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b092      	sub	sp, #72	@ 0x48
 8003730:	af02      	add	r7, sp, #8
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2284      	movs	r2, #132	@ 0x84
 8003738:	2100      	movs	r1, #0
 800373a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800373c:	f7fd fccc 	bl	80010d8 <HAL_GetTick>
 8003740:	0003      	movs	r3, r0
 8003742:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2208      	movs	r2, #8
 800374c:	4013      	ands	r3, r2
 800374e:	2b08      	cmp	r3, #8
 8003750:	d12c      	bne.n	80037ac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003754:	2280      	movs	r2, #128	@ 0x80
 8003756:	0391      	lsls	r1, r2, #14
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4a46      	ldr	r2, [pc, #280]	@ (8003874 <UART_CheckIdleState+0x148>)
 800375c:	9200      	str	r2, [sp, #0]
 800375e:	2200      	movs	r2, #0
 8003760:	f000 f88c 	bl	800387c <UART_WaitOnFlagUntilTimeout>
 8003764:	1e03      	subs	r3, r0, #0
 8003766:	d021      	beq.n	80037ac <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003768:	f3ef 8310 	mrs	r3, PRIMASK
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003770:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003772:	2301      	movs	r3, #1
 8003774:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003778:	f383 8810 	msr	PRIMASK, r3
}
 800377c:	46c0      	nop			@ (mov r8, r8)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2180      	movs	r1, #128	@ 0x80
 800378a:	438a      	bics	r2, r1
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003790:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003794:	f383 8810 	msr	PRIMASK, r3
}
 8003798:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2278      	movs	r2, #120	@ 0x78
 80037a4:	2100      	movs	r1, #0
 80037a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e05f      	b.n	800386c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2204      	movs	r2, #4
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d146      	bne.n	8003848 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037bc:	2280      	movs	r2, #128	@ 0x80
 80037be:	03d1      	lsls	r1, r2, #15
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003874 <UART_CheckIdleState+0x148>)
 80037c4:	9200      	str	r2, [sp, #0]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f000 f858 	bl	800387c <UART_WaitOnFlagUntilTimeout>
 80037cc:	1e03      	subs	r3, r0, #0
 80037ce:	d03b      	beq.n	8003848 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d0:	f3ef 8310 	mrs	r3, PRIMASK
 80037d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80037d6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037da:	2301      	movs	r3, #1
 80037dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f383 8810 	msr	PRIMASK, r3
}
 80037e4:	46c0      	nop			@ (mov r8, r8)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4921      	ldr	r1, [pc, #132]	@ (8003878 <UART_CheckIdleState+0x14c>)
 80037f2:	400a      	ands	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f383 8810 	msr	PRIMASK, r3
}
 8003800:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003802:	f3ef 8310 	mrs	r3, PRIMASK
 8003806:	61bb      	str	r3, [r7, #24]
  return(result);
 8003808:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380a:	633b      	str	r3, [r7, #48]	@ 0x30
 800380c:	2301      	movs	r3, #1
 800380e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f383 8810 	msr	PRIMASK, r3
}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2101      	movs	r1, #1
 8003824:	438a      	bics	r2, r1
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	f383 8810 	msr	PRIMASK, r3
}
 8003832:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2280      	movs	r2, #128	@ 0x80
 8003838:	2120      	movs	r1, #32
 800383a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2278      	movs	r2, #120	@ 0x78
 8003840:	2100      	movs	r1, #0
 8003842:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e011      	b.n	800386c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2280      	movs	r2, #128	@ 0x80
 8003852:	2120      	movs	r1, #32
 8003854:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2278      	movs	r2, #120	@ 0x78
 8003866:	2100      	movs	r1, #0
 8003868:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b010      	add	sp, #64	@ 0x40
 8003872:	bd80      	pop	{r7, pc}
 8003874:	01ffffff 	.word	0x01ffffff
 8003878:	fffffedf 	.word	0xfffffedf

0800387c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	1dfb      	adds	r3, r7, #7
 800388a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800388c:	e051      	b.n	8003932 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	3301      	adds	r3, #1
 8003892:	d04e      	beq.n	8003932 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003894:	f7fd fc20 	bl	80010d8 <HAL_GetTick>
 8003898:	0002      	movs	r2, r0
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d302      	bcc.n	80038aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e051      	b.n	8003952 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2204      	movs	r2, #4
 80038b6:	4013      	ands	r3, r2
 80038b8:	d03b      	beq.n	8003932 <UART_WaitOnFlagUntilTimeout+0xb6>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b80      	cmp	r3, #128	@ 0x80
 80038be:	d038      	beq.n	8003932 <UART_WaitOnFlagUntilTimeout+0xb6>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b40      	cmp	r3, #64	@ 0x40
 80038c4:	d035      	beq.n	8003932 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	2208      	movs	r2, #8
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d111      	bne.n	80038f8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2208      	movs	r2, #8
 80038da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	0018      	movs	r0, r3
 80038e0:	f000 f83c 	bl	800395c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2284      	movs	r2, #132	@ 0x84
 80038e8:	2108      	movs	r1, #8
 80038ea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2278      	movs	r2, #120	@ 0x78
 80038f0:	2100      	movs	r1, #0
 80038f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e02c      	b.n	8003952 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	2380      	movs	r3, #128	@ 0x80
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	401a      	ands	r2, r3
 8003904:	2380      	movs	r3, #128	@ 0x80
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	429a      	cmp	r2, r3
 800390a:	d112      	bne.n	8003932 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2280      	movs	r2, #128	@ 0x80
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	0018      	movs	r0, r3
 800391a:	f000 f81f 	bl	800395c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2284      	movs	r2, #132	@ 0x84
 8003922:	2120      	movs	r1, #32
 8003924:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2278      	movs	r2, #120	@ 0x78
 800392a:	2100      	movs	r1, #0
 800392c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e00f      	b.n	8003952 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	4013      	ands	r3, r2
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	425a      	negs	r2, r3
 8003942:	4153      	adcs	r3, r2
 8003944:	b2db      	uxtb	r3, r3
 8003946:	001a      	movs	r2, r3
 8003948:	1dfb      	adds	r3, r7, #7
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d09e      	beq.n	800388e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b004      	add	sp, #16
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08e      	sub	sp, #56	@ 0x38
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003964:	f3ef 8310 	mrs	r3, PRIMASK
 8003968:	617b      	str	r3, [r7, #20]
  return(result);
 800396a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396c:	637b      	str	r3, [r7, #52]	@ 0x34
 800396e:	2301      	movs	r3, #1
 8003970:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f383 8810 	msr	PRIMASK, r3
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4926      	ldr	r1, [pc, #152]	@ (8003a20 <UART_EndRxTransfer+0xc4>)
 8003986:	400a      	ands	r2, r1
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f383 8810 	msr	PRIMASK, r3
}
 8003994:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003996:	f3ef 8310 	mrs	r3, PRIMASK
 800399a:	623b      	str	r3, [r7, #32]
  return(result);
 800399c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800399e:	633b      	str	r3, [r7, #48]	@ 0x30
 80039a0:	2301      	movs	r3, #1
 80039a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	f383 8810 	msr	PRIMASK, r3
}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2101      	movs	r1, #1
 80039b8:	438a      	bics	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
 80039bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c2:	f383 8810 	msr	PRIMASK, r3
}
 80039c6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d118      	bne.n	8003a02 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d0:	f3ef 8310 	mrs	r3, PRIMASK
 80039d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80039d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039da:	2301      	movs	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f383 8810 	msr	PRIMASK, r3
}
 80039e4:	46c0      	nop			@ (mov r8, r8)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2110      	movs	r1, #16
 80039f2:	438a      	bics	r2, r1
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f383 8810 	msr	PRIMASK, r3
}
 8003a00:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2280      	movs	r2, #128	@ 0x80
 8003a06:	2120      	movs	r1, #32
 8003a08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b00e      	add	sp, #56	@ 0x38
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	46c0      	nop			@ (mov r8, r8)
 8003a20:	fffffedf 	.word	0xfffffedf

08003a24 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	1dbb      	adds	r3, r7, #6
 8003a32:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2280      	movs	r2, #128	@ 0x80
 8003a38:	589b      	ldr	r3, [r3, r2]
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d000      	beq.n	8003a40 <HAL_UARTEx_ReceiveToIdle+0x1c>
 8003a3e:	e109      	b.n	8003c54 <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_UARTEx_ReceiveToIdle+0x2a>
 8003a46:	1dbb      	adds	r3, r7, #6
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e101      	b.n	8003c56 <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	2380      	movs	r3, #128	@ 0x80
 8003a58:	015b      	lsls	r3, r3, #5
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d109      	bne.n	8003a72 <HAL_UARTEx_ReceiveToIdle+0x4e>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d105      	bne.n	8003a72 <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d001      	beq.n	8003a72 <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0f1      	b.n	8003c56 <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2284      	movs	r2, #132	@ 0x84
 8003a76:	2100      	movs	r1, #0
 8003a78:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2280      	movs	r2, #128	@ 0x80
 8003a7e:	2122      	movs	r1, #34	@ 0x22
 8003a80:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a8e:	f7fd fb23 	bl	80010d8 <HAL_GetTick>
 8003a92:	0003      	movs	r3, r0
 8003a94:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1dba      	adds	r2, r7, #6
 8003a9a:	2158      	movs	r1, #88	@ 0x58
 8003a9c:	8812      	ldrh	r2, [r2, #0]
 8003a9e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1dba      	adds	r2, r7, #6
 8003aa4:	215a      	movs	r1, #90	@ 0x5a
 8003aa6:	8812      	ldrh	r2, [r2, #0]
 8003aa8:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	015b      	lsls	r3, r3, #5
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d10d      	bne.n	8003ad2 <HAL_UARTEx_ReceiveToIdle+0xae>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d104      	bne.n	8003ac8 <HAL_UARTEx_ReceiveToIdle+0xa4>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	225c      	movs	r2, #92	@ 0x5c
 8003ac2:	4967      	ldr	r1, [pc, #412]	@ (8003c60 <HAL_UARTEx_ReceiveToIdle+0x23c>)
 8003ac4:	5299      	strh	r1, [r3, r2]
 8003ac6:	e02e      	b.n	8003b26 <HAL_UARTEx_ReceiveToIdle+0x102>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	225c      	movs	r2, #92	@ 0x5c
 8003acc:	21ff      	movs	r1, #255	@ 0xff
 8003ace:	5299      	strh	r1, [r3, r2]
 8003ad0:	e029      	b.n	8003b26 <HAL_UARTEx_ReceiveToIdle+0x102>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10d      	bne.n	8003af6 <HAL_UARTEx_ReceiveToIdle+0xd2>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d104      	bne.n	8003aec <HAL_UARTEx_ReceiveToIdle+0xc8>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	225c      	movs	r2, #92	@ 0x5c
 8003ae6:	21ff      	movs	r1, #255	@ 0xff
 8003ae8:	5299      	strh	r1, [r3, r2]
 8003aea:	e01c      	b.n	8003b26 <HAL_UARTEx_ReceiveToIdle+0x102>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	225c      	movs	r2, #92	@ 0x5c
 8003af0:	217f      	movs	r1, #127	@ 0x7f
 8003af2:	5299      	strh	r1, [r3, r2]
 8003af4:	e017      	b.n	8003b26 <HAL_UARTEx_ReceiveToIdle+0x102>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	2380      	movs	r3, #128	@ 0x80
 8003afc:	055b      	lsls	r3, r3, #21
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d10d      	bne.n	8003b1e <HAL_UARTEx_ReceiveToIdle+0xfa>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d104      	bne.n	8003b14 <HAL_UARTEx_ReceiveToIdle+0xf0>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	225c      	movs	r2, #92	@ 0x5c
 8003b0e:	217f      	movs	r1, #127	@ 0x7f
 8003b10:	5299      	strh	r1, [r3, r2]
 8003b12:	e008      	b.n	8003b26 <HAL_UARTEx_ReceiveToIdle+0x102>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	225c      	movs	r2, #92	@ 0x5c
 8003b18:	213f      	movs	r1, #63	@ 0x3f
 8003b1a:	5299      	strh	r1, [r3, r2]
 8003b1c:	e003      	b.n	8003b26 <HAL_UARTEx_ReceiveToIdle+0x102>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	225c      	movs	r2, #92	@ 0x5c
 8003b22:	2100      	movs	r1, #0
 8003b24:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003b26:	2312      	movs	r3, #18
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	215c      	movs	r1, #92	@ 0x5c
 8003b2e:	5a52      	ldrh	r2, [r2, r1]
 8003b30:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	2380      	movs	r3, #128	@ 0x80
 8003b38:	015b      	lsls	r3, r3, #5
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d108      	bne.n	8003b50 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d104      	bne.n	8003b50 <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e003      	b.n	8003b58 <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003b5e:	e062      	b.n	8003c26 <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	2210      	movs	r2, #16
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d110      	bne.n	8003b90 <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2210      	movs	r2, #16
 8003b74:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2202      	movs	r2, #2
 8003b82:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2280      	movs	r2, #128	@ 0x80
 8003b88:	2120      	movs	r1, #32
 8003b8a:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e062      	b.n	8003c56 <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	2220      	movs	r2, #32
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d12f      	bne.n	8003bfe <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2212      	movs	r2, #18
 8003bae:	18ba      	adds	r2, r7, r2
 8003bb0:	8812      	ldrh	r2, [r2, #0]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	e00e      	b.n	8003be0 <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2212      	movs	r2, #18
 8003bcc:	18ba      	adds	r2, r7, r2
 8003bce:	8812      	ldrh	r2, [r2, #0]
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	3301      	adds	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	225a      	movs	r2, #90	@ 0x5a
 8003bf0:	5a9b      	ldrh	r3, [r3, r2]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b299      	uxth	r1, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	225a      	movs	r2, #90	@ 0x5a
 8003bfc:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c00:	3301      	adds	r3, #1
 8003c02:	d010      	beq.n	8003c26 <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c04:	f7fd fa68 	bl	80010d8 <HAL_GetTick>
 8003c08:	0002      	movs	r2, r0
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d302      	bcc.n	8003c1a <HAL_UARTEx_ReceiveToIdle+0x1f6>
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d105      	bne.n	8003c26 <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2280      	movs	r2, #128	@ 0x80
 8003c1e:	2120      	movs	r1, #32
 8003c20:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e017      	b.n	8003c56 <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	225a      	movs	r2, #90	@ 0x5a
 8003c2a:	5a9b      	ldrh	r3, [r3, r2]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d196      	bne.n	8003b60 <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2258      	movs	r2, #88	@ 0x58
 8003c36:	5a9a      	ldrh	r2, [r3, r2]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	215a      	movs	r1, #90	@ 0x5a
 8003c3c:	5a5b      	ldrh	r3, [r3, r1]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2280      	movs	r2, #128	@ 0x80
 8003c4c:	2120      	movs	r1, #32
 8003c4e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b008      	add	sp, #32
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	000001ff 	.word	0x000001ff

08003c64 <memset>:
 8003c64:	0003      	movs	r3, r0
 8003c66:	1882      	adds	r2, r0, r2
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d100      	bne.n	8003c6e <memset+0xa>
 8003c6c:	4770      	bx	lr
 8003c6e:	7019      	strb	r1, [r3, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	e7f9      	b.n	8003c68 <memset+0x4>

08003c74 <__libc_init_array>:
 8003c74:	b570      	push	{r4, r5, r6, lr}
 8003c76:	2600      	movs	r6, #0
 8003c78:	4c0c      	ldr	r4, [pc, #48]	@ (8003cac <__libc_init_array+0x38>)
 8003c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8003cb0 <__libc_init_array+0x3c>)
 8003c7c:	1b64      	subs	r4, r4, r5
 8003c7e:	10a4      	asrs	r4, r4, #2
 8003c80:	42a6      	cmp	r6, r4
 8003c82:	d109      	bne.n	8003c98 <__libc_init_array+0x24>
 8003c84:	2600      	movs	r6, #0
 8003c86:	f000 f819 	bl	8003cbc <_init>
 8003c8a:	4c0a      	ldr	r4, [pc, #40]	@ (8003cb4 <__libc_init_array+0x40>)
 8003c8c:	4d0a      	ldr	r5, [pc, #40]	@ (8003cb8 <__libc_init_array+0x44>)
 8003c8e:	1b64      	subs	r4, r4, r5
 8003c90:	10a4      	asrs	r4, r4, #2
 8003c92:	42a6      	cmp	r6, r4
 8003c94:	d105      	bne.n	8003ca2 <__libc_init_array+0x2e>
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
 8003c98:	00b3      	lsls	r3, r6, #2
 8003c9a:	58eb      	ldr	r3, [r5, r3]
 8003c9c:	4798      	blx	r3
 8003c9e:	3601      	adds	r6, #1
 8003ca0:	e7ee      	b.n	8003c80 <__libc_init_array+0xc>
 8003ca2:	00b3      	lsls	r3, r6, #2
 8003ca4:	58eb      	ldr	r3, [r5, r3]
 8003ca6:	4798      	blx	r3
 8003ca8:	3601      	adds	r6, #1
 8003caa:	e7f2      	b.n	8003c92 <__libc_init_array+0x1e>
 8003cac:	08003d98 	.word	0x08003d98
 8003cb0:	08003d98 	.word	0x08003d98
 8003cb4:	08003d9c 	.word	0x08003d9c
 8003cb8:	08003d98 	.word	0x08003d98

08003cbc <_init>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	46c0      	nop			@ (mov r8, r8)
 8003cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc2:	bc08      	pop	{r3}
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	4770      	bx	lr

08003cc8 <_fini>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cce:	bc08      	pop	{r3}
 8003cd0:	469e      	mov	lr, r3
 8003cd2:	4770      	bx	lr
