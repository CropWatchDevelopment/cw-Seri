
seri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005758  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005818  08005818  00006818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058e4  080058e4  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080058e4  080058e4  000068e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058ec  080058ec  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058ec  080058ec  000068ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058f0  080058f0  000068f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080058f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000010  08005904  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08005904  00007430  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121eb  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd7  00000000  00000000  00019223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0001c000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd7  00000000  00000000  0001d088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003956  00000000  00000000  0001dd5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148f1  00000000  00000000  000216b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a60e  00000000  00000000  00035fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c05b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b04  00000000  00000000  000c05f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000c40fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005800 	.word	0x08005800

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005800 	.word	0x08005800

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8d8 	bl	8000434 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8d3 	bl	8000434 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzsi2>:
 80003f8:	211c      	movs	r1, #28
 80003fa:	2301      	movs	r3, #1
 80003fc:	041b      	lsls	r3, r3, #16
 80003fe:	4298      	cmp	r0, r3
 8000400:	d301      	bcc.n	8000406 <__clzsi2+0xe>
 8000402:	0c00      	lsrs	r0, r0, #16
 8000404:	3910      	subs	r1, #16
 8000406:	0a1b      	lsrs	r3, r3, #8
 8000408:	4298      	cmp	r0, r3
 800040a:	d301      	bcc.n	8000410 <__clzsi2+0x18>
 800040c:	0a00      	lsrs	r0, r0, #8
 800040e:	3908      	subs	r1, #8
 8000410:	091b      	lsrs	r3, r3, #4
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0x22>
 8000416:	0900      	lsrs	r0, r0, #4
 8000418:	3904      	subs	r1, #4
 800041a:	a202      	add	r2, pc, #8	@ (adr r2, 8000424 <__clzsi2+0x2c>)
 800041c:	5c10      	ldrb	r0, [r2, r0]
 800041e:	1840      	adds	r0, r0, r1
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	02020304 	.word	0x02020304
 8000428:	01010101 	.word	0x01010101
	...

08000434 <__clzdi2>:
 8000434:	b510      	push	{r4, lr}
 8000436:	2900      	cmp	r1, #0
 8000438:	d103      	bne.n	8000442 <__clzdi2+0xe>
 800043a:	f7ff ffdd 	bl	80003f8 <__clzsi2>
 800043e:	3020      	adds	r0, #32
 8000440:	e002      	b.n	8000448 <__clzdi2+0x14>
 8000442:	0008      	movs	r0, r1
 8000444:	f7ff ffd8 	bl	80003f8 <__clzsi2>
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <find_char_after>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


char find_char_after(const char *str, const char *keyword) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
    if (!str || !keyword) return '\0';
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d002      	beq.n	8000462 <find_char_after+0x16>
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d101      	bne.n	8000466 <find_char_after+0x1a>
 8000462:	2300      	movs	r3, #0
 8000464:	e02a      	b.n	80004bc <find_char_after+0x70>

    // Simple substring search
    const char *p = str;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	617b      	str	r3, [r7, #20]
    const char *k;

    while (*p) {
 800046a:	e022      	b.n	80004b2 <find_char_after+0x66>
        const char *s = p;
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	60fb      	str	r3, [r7, #12]
        k = keyword;
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	613b      	str	r3, [r7, #16]
        while (*s && *k && *s == *k) {
 8000474:	e005      	b.n	8000482 <find_char_after+0x36>
            s++;
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	3301      	adds	r3, #1
 800047a:	60fb      	str	r3, [r7, #12]
            k++;
 800047c:	693b      	ldr	r3, [r7, #16]
 800047e:	3301      	adds	r3, #1
 8000480:	613b      	str	r3, [r7, #16]
        while (*s && *k && *s == *k) {
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d009      	beq.n	800049e <find_char_after+0x52>
 800048a:	693b      	ldr	r3, [r7, #16]
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d005      	beq.n	800049e <find_char_after+0x52>
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	781a      	ldrb	r2, [r3, #0]
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	429a      	cmp	r2, r3
 800049c:	d0eb      	beq.n	8000476 <find_char_after+0x2a>
        }
        if (*k == '\0') {
 800049e:	693b      	ldr	r3, [r7, #16]
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d102      	bne.n	80004ac <find_char_after+0x60>
            // Found full keyword, return next char if available
            return *s ? *s : '\0';
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	e007      	b.n	80004bc <find_char_after+0x70>
        }
        p++;
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	3301      	adds	r3, #1
 80004b0:	617b      	str	r3, [r7, #20]
    while (*p) {
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d1d8      	bne.n	800046c <find_char_after+0x20>
    }
    return '\0'; // Not found
 80004ba:	2300      	movs	r3, #0
}
 80004bc:	0018      	movs	r0, r3
 80004be:	46bd      	mov	sp, r7
 80004c0:	b006      	add	sp, #24
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <join>:
	  }
}


int join(UART_HandleTypeDef *huart)
{
 80004c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c6:	b0c7      	sub	sp, #284	@ 0x11c
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)"AT\r\n", 4, 300);
 80004cc:	2396      	movs	r3, #150	@ 0x96
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	494f      	ldr	r1, [pc, #316]	@ (8000610 <join+0x14c>)
 80004d2:	4850      	ldr	r0, [pc, #320]	@ (8000614 <join+0x150>)
 80004d4:	2204      	movs	r2, #4
 80004d6:	f004 f9f3 	bl	80048c0 <HAL_UART_Transmit>
	HAL_Delay(300); // let OK come back!
 80004da:	2396      	movs	r3, #150	@ 0x96
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 fab6 	bl	8001a50 <HAL_Delay>
	uint16_t total_rcv = 0;
 80004e4:	2385      	movs	r3, #133	@ 0x85
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	2200      	movs	r2, #0
 80004ec:	801a      	strh	r2, [r3, #0]
	int16_t total_expected =11;
 80004ee:	2387      	movs	r3, #135	@ 0x87
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	18fb      	adds	r3, r7, r3
 80004f4:	220b      	movs	r2, #11
 80004f6:	801a      	strh	r2, [r3, #0]
	uint8_t rxbuf[256] = {0};
 80004f8:	4b47      	ldr	r3, [pc, #284]	@ (8000618 <join+0x154>)
 80004fa:	2288      	movs	r2, #136	@ 0x88
 80004fc:	0052      	lsls	r2, r2, #1
 80004fe:	189b      	adds	r3, r3, r2
 8000500:	19db      	adds	r3, r3, r7
 8000502:	0018      	movs	r0, r3
 8000504:	2380      	movs	r3, #128	@ 0x80
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f005 f94c 	bl	80057a8 <memset>
	HAL_UART_Transmit(&huart2, (uint8_t*)"AT+JOIN\r\n", 9, 300);
 8000510:	2396      	movs	r3, #150	@ 0x96
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	4941      	ldr	r1, [pc, #260]	@ (800061c <join+0x158>)
 8000516:	483f      	ldr	r0, [pc, #252]	@ (8000614 <join+0x150>)
 8000518:	2209      	movs	r2, #9
 800051a:	f004 f9d1 	bl	80048c0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rxbuf, 4, 100);
 800051e:	2308      	movs	r3, #8
 8000520:	18f9      	adds	r1, r7, r3
 8000522:	483c      	ldr	r0, [pc, #240]	@ (8000614 <join+0x150>)
 8000524:	2364      	movs	r3, #100	@ 0x64
 8000526:	2204      	movs	r2, #4
 8000528:	f004 fa6a 	bl	8004a00 <HAL_UART_Receive>
	__HAL_UART_FLUSH_DRREGISTER(&huart2);
 800052c:	4b39      	ldr	r3, [pc, #228]	@ (8000614 <join+0x150>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	699a      	ldr	r2, [r3, #24]
 8000532:	4b38      	ldr	r3, [pc, #224]	@ (8000614 <join+0x150>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2108      	movs	r1, #8
 8000538:	430a      	orrs	r2, r1
 800053a:	619a      	str	r2, [r3, #24]
 800053c:	4b35      	ldr	r3, [pc, #212]	@ (8000614 <join+0x150>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	699a      	ldr	r2, [r3, #24]
 8000542:	4b34      	ldr	r3, [pc, #208]	@ (8000614 <join+0x150>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2110      	movs	r1, #16
 8000548:	430a      	orrs	r2, r1
 800054a:	619a      	str	r2, [r3, #24]
	__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800054c:	4b31      	ldr	r3, [pc, #196]	@ (8000614 <join+0x150>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2210      	movs	r2, #16
 8000552:	621a      	str	r2, [r3, #32]

	while (total_expected > 0)
 8000554:	e019      	b.n	800058a <join+0xc6>
	{
		  HAL_UARTEx_ReceiveToIdle(&huart2, rxbuf + total_rcv, 100, &total_rcv, 10000);
 8000556:	2085      	movs	r0, #133	@ 0x85
 8000558:	0040      	lsls	r0, r0, #1
 800055a:	183b      	adds	r3, r7, r0
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	001a      	movs	r2, r3
 8000560:	2308      	movs	r3, #8
 8000562:	18fb      	adds	r3, r7, r3
 8000564:	1899      	adds	r1, r3, r2
 8000566:	0004      	movs	r4, r0
 8000568:	183b      	adds	r3, r7, r0
 800056a:	482a      	ldr	r0, [pc, #168]	@ (8000614 <join+0x150>)
 800056c:	4a2c      	ldr	r2, [pc, #176]	@ (8000620 <join+0x15c>)
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	2264      	movs	r2, #100	@ 0x64
 8000572:	f004 fff9 	bl	8005568 <HAL_UARTEx_ReceiveToIdle>
		  total_expected -= total_rcv;
 8000576:	2187      	movs	r1, #135	@ 0x87
 8000578:	0049      	lsls	r1, r1, #1
 800057a:	187b      	adds	r3, r7, r1
 800057c:	881a      	ldrh	r2, [r3, #0]
 800057e:	193b      	adds	r3, r7, r4
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	b29a      	uxth	r2, r3
 8000586:	187b      	adds	r3, r7, r1
 8000588:	801a      	strh	r2, [r3, #0]
	while (total_expected > 0)
 800058a:	2387      	movs	r3, #135	@ 0x87
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	2200      	movs	r2, #0
 8000592:	5e9b      	ldrsh	r3, [r3, r2]
 8000594:	2b00      	cmp	r3, #0
 8000596:	dcde      	bgt.n	8000556 <join+0x92>
	}

	__HAL_UART_FLUSH_DRREGISTER(&huart2);
 8000598:	4b1e      	ldr	r3, [pc, #120]	@ (8000614 <join+0x150>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	699a      	ldr	r2, [r3, #24]
 800059e:	4b1d      	ldr	r3, [pc, #116]	@ (8000614 <join+0x150>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2108      	movs	r1, #8
 80005a4:	430a      	orrs	r2, r1
 80005a6:	619a      	str	r2, [r3, #24]
 80005a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000614 <join+0x150>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	699a      	ldr	r2, [r3, #24]
 80005ae:	4b19      	ldr	r3, [pc, #100]	@ (8000614 <join+0x150>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2110      	movs	r1, #16
 80005b4:	430a      	orrs	r2, r1
 80005b6:	619a      	str	r2, [r3, #24]
	__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80005b8:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <join+0x150>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2210      	movs	r2, #16
 80005be:	621a      	str	r2, [r3, #32]

	char result = find_char_after(rxbuf, "JOIN: [");
 80005c0:	250e      	movs	r5, #14
 80005c2:	35ff      	adds	r5, #255	@ 0xff
 80005c4:	197c      	adds	r4, r7, r5
 80005c6:	4a17      	ldr	r2, [pc, #92]	@ (8000624 <join+0x160>)
 80005c8:	2608      	movs	r6, #8
 80005ca:	19bb      	adds	r3, r7, r6
 80005cc:	0011      	movs	r1, r2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f7ff ff3c 	bl	800044c <find_char_after>
 80005d4:	0003      	movs	r3, r0
 80005d6:	7023      	strb	r3, [r4, #0]
	char error14 = find_char_after(rxbuf, "\nERROR 1");
 80005d8:	2386      	movs	r3, #134	@ 0x86
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	18fc      	adds	r4, r7, r3
 80005de:	4a12      	ldr	r2, [pc, #72]	@ (8000628 <join+0x164>)
 80005e0:	19bb      	adds	r3, r7, r6
 80005e2:	0011      	movs	r1, r2
 80005e4:	0018      	movs	r0, r3
 80005e6:	f7ff ff31 	bl	800044c <find_char_after>
 80005ea:	0003      	movs	r3, r0
 80005ec:	7023      	strb	r3, [r4, #0]
	if (result == 'O' || error14 == '4')
 80005ee:	197b      	adds	r3, r7, r5
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b4f      	cmp	r3, #79	@ 0x4f
 80005f4:	d005      	beq.n	8000602 <join+0x13e>
 80005f6:	2386      	movs	r3, #134	@ 0x86
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b34      	cmp	r3, #52	@ 0x34
 8000600:	d101      	bne.n	8000606 <join+0x142>
	{
		return 1;
 8000602:	2301      	movs	r3, #1
 8000604:	e000      	b.n	8000608 <join+0x144>
		__NOP(); // success
	}
	else
	{
		return 0;
 8000606:	2300      	movs	r3, #0
		__NOP(); // fail
	}
}
 8000608:	0018      	movs	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	b045      	add	sp, #276	@ 0x114
 800060e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000610:	08005818 	.word	0x08005818
 8000614:	20000188 	.word	0x20000188
 8000618:	fffffef8 	.word	0xfffffef8
 800061c:	0800582c 	.word	0x0800582c
 8000620:	00002710 	.word	0x00002710
 8000624:	08005838 	.word	0x08005838
 8000628:	08005840 	.word	0x08005840

0800062c <LoRaWAN_SendHex>:




void LoRaWAN_SendHex(const uint8_t *payload, size_t length)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	@ 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
    static const char HEX[16] = "0123456789ABCDEF";
    static const char prefix[] = "AT+SEND \"";
    static const char suffix[] = "\"\r\n";

    if (!payload || length == 0) return;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d100      	bne.n	800063e <LoRaWAN_SendHex+0x12>
 800063c:	e078      	b.n	8000730 <LoRaWAN_SendHex+0x104>
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d100      	bne.n	8000646 <LoRaWAN_SendHex+0x1a>
 8000644:	e074      	b.n	8000730 <LoRaWAN_SendHex+0x104>

    // Max wire size = len*2 hex + 8(prefix) + 3(suffix)
    // 242B -> 484 + 11 = 495 bytes fits in 512
    static uint8_t txbuf[512];

    const size_t prefix_len = sizeof(prefix) - 1;
 8000646:	2309      	movs	r3, #9
 8000648:	617b      	str	r3, [r7, #20]
    const size_t suffix_len = sizeof(suffix) - 1;
 800064a:	2303      	movs	r3, #3
 800064c:	613b      	str	r3, [r7, #16]
    const size_t need = prefix_len + (length * 2u) + suffix_len;
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	005a      	lsls	r2, r3, #1
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	18d3      	adds	r3, r2, r3
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	18d3      	adds	r3, r2, r3
 800065a:	60fb      	str	r3, [r7, #12]

    if (need > sizeof(txbuf)) {
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	2380      	movs	r3, #128	@ 0x80
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	429a      	cmp	r2, r3
 8000664:	d866      	bhi.n	8000734 <LoRaWAN_SendHex+0x108>
        // Payload too large for our static buffer; don't send a truncated command
        return;
    }

    size_t idx = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24

    // Copy prefix
    for (size_t i = 0; i < prefix_len; ++i) txbuf[idx++] = (uint8_t)prefix[i];
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
 800066e:	e00b      	b.n	8000688 <LoRaWAN_SendHex+0x5c>
 8000670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	627a      	str	r2, [r7, #36]	@ 0x24
 8000676:	4931      	ldr	r1, [pc, #196]	@ (800073c <LoRaWAN_SendHex+0x110>)
 8000678:	6a3a      	ldr	r2, [r7, #32]
 800067a:	188a      	adds	r2, r1, r2
 800067c:	7811      	ldrb	r1, [r2, #0]
 800067e:	4a30      	ldr	r2, [pc, #192]	@ (8000740 <LoRaWAN_SendHex+0x114>)
 8000680:	54d1      	strb	r1, [r2, r3]
 8000682:	6a3b      	ldr	r3, [r7, #32]
 8000684:	3301      	adds	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
 8000688:	6a3a      	ldr	r2, [r7, #32]
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	429a      	cmp	r2, r3
 800068e:	d3ef      	bcc.n	8000670 <LoRaWAN_SendHex+0x44>

    // Hex-encode payload
    for (size_t i = 0; i < length; ++i) {
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
 8000694:	e020      	b.n	80006d8 <LoRaWAN_SendHex+0xac>
        uint8_t b = payload[i];
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	18d2      	adds	r2, r2, r3
 800069c:	200b      	movs	r0, #11
 800069e:	183b      	adds	r3, r7, r0
 80006a0:	7812      	ldrb	r2, [r2, #0]
 80006a2:	701a      	strb	r2, [r3, #0]
        txbuf[idx++] = (uint8_t)HEX[b >> 4];
 80006a4:	183b      	adds	r3, r7, r0
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	091b      	lsrs	r3, r3, #4
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	0019      	movs	r1, r3
 80006ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80006b4:	4a23      	ldr	r2, [pc, #140]	@ (8000744 <LoRaWAN_SendHex+0x118>)
 80006b6:	5c51      	ldrb	r1, [r2, r1]
 80006b8:	4a21      	ldr	r2, [pc, #132]	@ (8000740 <LoRaWAN_SendHex+0x114>)
 80006ba:	54d1      	strb	r1, [r2, r3]
        txbuf[idx++] = (uint8_t)HEX[b & 0x0F];
 80006bc:	183b      	adds	r3, r7, r0
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	220f      	movs	r2, #15
 80006c2:	401a      	ands	r2, r3
 80006c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c6:	1c59      	adds	r1, r3, #1
 80006c8:	6279      	str	r1, [r7, #36]	@ 0x24
 80006ca:	491e      	ldr	r1, [pc, #120]	@ (8000744 <LoRaWAN_SendHex+0x118>)
 80006cc:	5c89      	ldrb	r1, [r1, r2]
 80006ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000740 <LoRaWAN_SendHex+0x114>)
 80006d0:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < length; ++i) {
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3301      	adds	r3, #1
 80006d6:	61fb      	str	r3, [r7, #28]
 80006d8:	69fa      	ldr	r2, [r7, #28]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d3da      	bcc.n	8000696 <LoRaWAN_SendHex+0x6a>
    }

    // Copy suffix
    for (size_t i = 0; i < suffix_len; ++i) txbuf[idx++] = (uint8_t)suffix[i];
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	e00b      	b.n	80006fe <LoRaWAN_SendHex+0xd2>
 80006e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80006ec:	4916      	ldr	r1, [pc, #88]	@ (8000748 <LoRaWAN_SendHex+0x11c>)
 80006ee:	69ba      	ldr	r2, [r7, #24]
 80006f0:	188a      	adds	r2, r1, r2
 80006f2:	7811      	ldrb	r1, [r2, #0]
 80006f4:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <LoRaWAN_SendHex+0x114>)
 80006f6:	54d1      	strb	r1, [r2, r3]
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	3301      	adds	r3, #1
 80006fc:	61bb      	str	r3, [r7, #24]
 80006fe:	69ba      	ldr	r2, [r7, #24]
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	429a      	cmp	r2, r3
 8000704:	d3ef      	bcc.n	80006e6 <LoRaWAN_SendHex+0xba>

    HAL_UART_Transmit(&huart2, (uint8_t*)"AT\r\n", 4, 300);
 8000706:	2396      	movs	r3, #150	@ 0x96
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4910      	ldr	r1, [pc, #64]	@ (800074c <LoRaWAN_SendHex+0x120>)
 800070c:	4810      	ldr	r0, [pc, #64]	@ (8000750 <LoRaWAN_SendHex+0x124>)
 800070e:	2204      	movs	r2, #4
 8000710:	f004 f8d6 	bl	80048c0 <HAL_UART_Transmit>
    HAL_Delay(300);
 8000714:	2396      	movs	r3, #150	@ 0x96
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	0018      	movs	r0, r3
 800071a:	f001 f999 	bl	8001a50 <HAL_Delay>
    // Exactly one TX
    HAL_UART_Transmit(&huart2, txbuf, (uint16_t)idx, 300);
 800071e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000720:	b29a      	uxth	r2, r3
 8000722:	2396      	movs	r3, #150	@ 0x96
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	4906      	ldr	r1, [pc, #24]	@ (8000740 <LoRaWAN_SendHex+0x114>)
 8000728:	4809      	ldr	r0, [pc, #36]	@ (8000750 <LoRaWAN_SendHex+0x124>)
 800072a:	f004 f8c9 	bl	80048c0 <HAL_UART_Transmit>
 800072e:	e002      	b.n	8000736 <LoRaWAN_SendHex+0x10a>
    if (!payload || length == 0) return;
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	e000      	b.n	8000736 <LoRaWAN_SendHex+0x10a>
        return;
 8000734:	46c0      	nop			@ (mov r8, r8)
}
 8000736:	46bd      	mov	sp, r7
 8000738:	b00a      	add	sp, #40	@ 0x28
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08005858 	.word	0x08005858
 8000740:	20000214 	.word	0x20000214
 8000744:	08005864 	.word	0x08005864
 8000748:	08005874 	.word	0x08005874
 800074c:	08005818 	.word	0x08005818
 8000750:	20000188 	.word	0x20000188

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f001 f909 	bl	8001970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f865 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 fa25 	bl	8000bb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000766:	f000 f9f3 	bl	8000b50 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800076a:	f000 f9bd 	bl	8000ae8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800076e:	f000 f987 	bl	8000a80 <MX_RTC_Init>
  MX_I2C1_Init();
 8000772:	f000 f945 	bl	8000a00 <MX_I2C1_Init>
  MX_ADC_Init();
 8000776:	f000 f8df 	bl	8000938 <MX_ADC_Init>





  HAL_GPIO_WritePin(DBG_LED_GPIO_Port, DBG_LED_Pin, GPIO_PIN_SET);
 800077a:	23a0      	movs	r3, #160	@ 0xa0
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	2201      	movs	r2, #1
 8000780:	2120      	movs	r1, #32
 8000782:	0018      	movs	r0, r3
 8000784:	f001 fe52 	bl	800242c <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */
	// Check if it's time for LoRaWAN transmission
	// Transmit on first run, then every WAKEUPS_PER_CYCLE wake-ups
	// With SLEEP_TIME_MINUTES=2, WAKEUPS_PER_CYCLE=8, so we transmit every 8 wake-ups
	if (first_run || wakeup_counter >= WAKEUPS_PER_CYCLE)
 8000788:	4b22      	ldr	r3, [pc, #136]	@ (8000814 <main+0xc0>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d104      	bne.n	800079a <main+0x46>
 8000790:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <main+0xc4>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2201      	movs	r2, #1
 8000796:	4293      	cmp	r3, r2
 8000798:	d3f6      	bcc.n	8000788 <main+0x34>
	{
		// Reset counter for next cycle
		wakeup_counter = 0;
 800079a:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <main+0xc4>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
		

		if (first_run)
 80007a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <main+0xc0>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d031      	beq.n	800080c <main+0xb8>
		{
			first_run = false;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <main+0xc0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
			// Perform LoRaWAN operations
			join(&huart2);
 80007ae:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <main+0xc8>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fe87 	bl	80004c4 <join>
			HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 80007b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <main+0xcc>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	2120      	movs	r1, #32
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fe35 	bl	800242c <HAL_GPIO_WritePin>
			HAL_Delay(1000); // Increased delay for sensor power-up and stabilization
 80007c2:	23fa      	movs	r3, #250	@ 0xfa
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 f942 	bl	8001a50 <HAL_Delay>
			scan_i2c_bus();
 80007cc:	f000 fd32 	bl	8001234 <scan_i2c_bus>
			bool i2c_success = sensor_init_and_read();
 80007d0:	1dfc      	adds	r4, r7, #7
 80007d2:	f000 fd57 	bl	8001284 <sensor_init_and_read>
 80007d6:	0003      	movs	r3, r0
 80007d8:	7023      	strb	r3, [r4, #0]
			if (i2c_success)
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d014      	beq.n	800080c <main+0xb8>
			{
				uint8_t payload[5];
				payload[0] = (uint8_t)(calculated_temp >> 8);     // high byte
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <main+0xd0>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	0a1b      	lsrs	r3, r3, #8
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	003b      	movs	r3, r7
 80007ee:	701a      	strb	r2, [r3, #0]
				payload[1] = (uint8_t)(calculated_temp & 0xFF);   // low byte
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <main+0xd0>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	003b      	movs	r3, r7
 80007f8:	705a      	strb	r2, [r3, #1]
				payload[2] = calculated_hum;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <main+0xd4>)
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	003b      	movs	r3, r7
 8000800:	709a      	strb	r2, [r3, #2]
				LoRaWAN_SendHex(payload, 3);
 8000802:	003b      	movs	r3, r7
 8000804:	2103      	movs	r1, #3
 8000806:	0018      	movs	r0, r3
 8000808:	f7ff ff10 	bl	800062c <LoRaWAN_SendHex>
			}

		}
//		configWakeupTime();
		EnterDeepSleepMode();
 800080c:	f000 fb08 	bl	8000e20 <EnterDeepSleepMode>
	if (first_run || wakeup_counter >= WAKEUPS_PER_CYCLE)
 8000810:	e7ba      	b.n	8000788 <main+0x34>
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	20000000 	.word	0x20000000
 8000818:	20000210 	.word	0x20000210
 800081c:	20000188 	.word	0x20000188
 8000820:	50000400 	.word	0x50000400
 8000824:	2000041e 	.word	0x2000041e
 8000828:	20000420 	.word	0x20000420

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b09f      	sub	sp, #124	@ 0x7c
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	2440      	movs	r4, #64	@ 0x40
 8000834:	193b      	adds	r3, r7, r4
 8000836:	0018      	movs	r0, r3
 8000838:	2338      	movs	r3, #56	@ 0x38
 800083a:	001a      	movs	r2, r3
 800083c:	2100      	movs	r1, #0
 800083e:	f004 ffb3 	bl	80057a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000842:	232c      	movs	r3, #44	@ 0x2c
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	0018      	movs	r0, r3
 8000848:	2314      	movs	r3, #20
 800084a:	001a      	movs	r2, r3
 800084c:	2100      	movs	r1, #0
 800084e:	f004 ffab 	bl	80057a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	0018      	movs	r0, r3
 8000856:	2328      	movs	r3, #40	@ 0x28
 8000858:	001a      	movs	r2, r3
 800085a:	2100      	movs	r1, #0
 800085c:	f004 ffa4 	bl	80057a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	4b32      	ldr	r3, [pc, #200]	@ (800092c <SystemClock_Config+0x100>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a32      	ldr	r2, [pc, #200]	@ (8000930 <SystemClock_Config+0x104>)
 8000866:	401a      	ands	r2, r3
 8000868:	4b30      	ldr	r3, [pc, #192]	@ (800092c <SystemClock_Config+0x100>)
 800086a:	2180      	movs	r1, #128	@ 0x80
 800086c:	0109      	lsls	r1, r1, #4
 800086e:	430a      	orrs	r2, r1
 8000870:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000872:	f002 fd39 	bl	80032e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000876:	4b2f      	ldr	r3, [pc, #188]	@ (8000934 <SystemClock_Config+0x108>)
 8000878:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800087a:	4b2e      	ldr	r3, [pc, #184]	@ (8000934 <SystemClock_Config+0x108>)
 800087c:	492c      	ldr	r1, [pc, #176]	@ (8000930 <SystemClock_Config+0x104>)
 800087e:	400a      	ands	r2, r1
 8000880:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2214      	movs	r2, #20
 8000886:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	2280      	movs	r2, #128	@ 0x80
 800088c:	0052      	lsls	r2, r2, #1
 800088e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000890:	0021      	movs	r1, r4
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2201      	movs	r2, #1
 8000896:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	22a0      	movs	r2, #160	@ 0xa0
 80008a2:	0212      	lsls	r2, r2, #8
 80008a4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	0018      	movs	r0, r3
 80008b0:	f002 fdf4 	bl	800349c <HAL_RCC_OscConfig>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80008b8:	f000 fb46 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	212c      	movs	r1, #44	@ 0x2c
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	220f      	movs	r2, #15
 80008c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2100      	movs	r1, #0
 80008e0:	0018      	movs	r0, r3
 80008e2:	f003 f9af 	bl	8003c44 <HAL_RCC_ClockConfig>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ea:	f000 fb2d 	bl	8000f48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	222b      	movs	r2, #43	@ 0x2b
 80008f2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2280      	movs	r2, #128	@ 0x80
 800090a:	0252      	lsls	r2, r2, #9
 800090c:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	0018      	movs	r0, r3
 8000912:	f003 fb9b 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800091a:	f000 fb15 	bl	8000f48 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 800091e:	f003 fd33 	bl	8004388 <HAL_RCCEx_EnableLSECSS>
}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b01f      	add	sp, #124	@ 0x7c
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	40007000 	.word	0x40007000
 8000930:	ffffe7ff 	.word	0xffffe7ff
 8000934:	40021000 	.word	0x40021000

08000938 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093e:	003b      	movs	r3, r7
 8000940:	0018      	movs	r0, r3
 8000942:	2308      	movs	r3, #8
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f004 ff2e 	bl	80057a8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800094c:	4b2a      	ldr	r3, [pc, #168]	@ (80009f8 <MX_ADC_Init+0xc0>)
 800094e:	4a2b      	ldr	r2, [pc, #172]	@ (80009fc <MX_ADC_Init+0xc4>)
 8000950:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000952:	4b29      	ldr	r3, [pc, #164]	@ (80009f8 <MX_ADC_Init+0xc0>)
 8000954:	2200      	movs	r2, #0
 8000956:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000958:	4b27      	ldr	r3, [pc, #156]	@ (80009f8 <MX_ADC_Init+0xc0>)
 800095a:	22c0      	movs	r2, #192	@ 0xc0
 800095c:	0612      	lsls	r2, r2, #24
 800095e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000960:	4b25      	ldr	r3, [pc, #148]	@ (80009f8 <MX_ADC_Init+0xc0>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000966:	4b24      	ldr	r3, [pc, #144]	@ (80009f8 <MX_ADC_Init+0xc0>)
 8000968:	2200      	movs	r2, #0
 800096a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800096c:	4b22      	ldr	r3, [pc, #136]	@ (80009f8 <MX_ADC_Init+0xc0>)
 800096e:	2201      	movs	r2, #1
 8000970:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000972:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <MX_ADC_Init+0xc0>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000978:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <MX_ADC_Init+0xc0>)
 800097a:	2220      	movs	r2, #32
 800097c:	2100      	movs	r1, #0
 800097e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000980:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <MX_ADC_Init+0xc0>)
 8000982:	2221      	movs	r2, #33	@ 0x21
 8000984:	2100      	movs	r1, #0
 8000986:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_ADC_Init+0xc0>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_ADC_Init+0xc0>)
 8000990:	22c2      	movs	r2, #194	@ 0xc2
 8000992:	32ff      	adds	r2, #255	@ 0xff
 8000994:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000996:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <MX_ADC_Init+0xc0>)
 8000998:	222c      	movs	r2, #44	@ 0x2c
 800099a:	2100      	movs	r1, #0
 800099c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800099e:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <MX_ADC_Init+0xc0>)
 80009a0:	2204      	movs	r2, #4
 80009a2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_ADC_Init+0xc0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80009aa:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <MX_ADC_Init+0xc0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_ADC_Init+0xc0>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <MX_ADC_Init+0xc0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80009bc:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_ADC_Init+0xc0>)
 80009be:	0018      	movs	r0, r3
 80009c0:	f001 f88e 	bl	8001ae0 <HAL_ADC_Init>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80009c8:	f000 fabe 	bl	8000f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009cc:	003b      	movs	r3, r7
 80009ce:	2201      	movs	r2, #1
 80009d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009d2:	003b      	movs	r3, r7
 80009d4:	2280      	movs	r2, #128	@ 0x80
 80009d6:	0152      	lsls	r2, r2, #5
 80009d8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009da:	003a      	movs	r2, r7
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_ADC_Init+0xc0>)
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f001 f9f1 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80009ea:	f000 faad 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b002      	add	sp, #8
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	2000002c 	.word	0x2000002c
 80009fc:	40012400 	.word	0x40012400

08000a00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <MX_I2C1_Init+0x78>)
 8000a06:	4a1d      	ldr	r2, [pc, #116]	@ (8000a7c <MX_I2C1_Init+0x7c>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <MX_I2C1_Init+0x78>)
 8000a0c:	22c1      	movs	r2, #193	@ 0xc1
 8000a0e:	00d2      	lsls	r2, r2, #3
 8000a10:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <MX_I2C1_Init+0x78>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a18:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_I2C1_Init+0x78>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <MX_I2C1_Init+0x78>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_I2C1_Init+0x78>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <MX_I2C1_Init+0x78>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_I2C1_Init+0x78>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <MX_I2C1_Init+0x78>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_I2C1_Init+0x78>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 fd12 	bl	8002468 <HAL_I2C_Init>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a48:	f000 fa7e 	bl	8000f48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <MX_I2C1_Init+0x78>)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	0018      	movs	r0, r3
 8000a52:	f002 fbb1 	bl	80031b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a5a:	f000 fa75 	bl	8000f48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_I2C1_Init+0x78>)
 8000a60:	2100      	movs	r1, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f002 fbf4 	bl	8003250 <HAL_I2CEx_ConfigDigitalFilter>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a6c:	f000 fa6c 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	20000088 	.word	0x20000088
 8000a7c:	40005400 	.word	0x40005400

08000a80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a84:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <MX_RTC_Init+0x60>)
 8000a86:	4a17      	ldr	r2, [pc, #92]	@ (8000ae4 <MX_RTC_Init+0x64>)
 8000a88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <MX_RTC_Init+0x60>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a90:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <MX_RTC_Init+0x60>)
 8000a92:	227f      	movs	r2, #127	@ 0x7f
 8000a94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a96:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <MX_RTC_Init+0x60>)
 8000a98:	22ff      	movs	r2, #255	@ 0xff
 8000a9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <MX_RTC_Init+0x60>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <MX_RTC_Init+0x60>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <MX_RTC_Init+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_RTC_Init+0x60>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <MX_RTC_Init+0x60>)
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f003 fc74 	bl	80043a4 <HAL_RTC_Init>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000ac0:	f000 fa42 	bl	8000f48 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_RTC_Init+0x60>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f003 fd9c 	bl	8004608 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 fa38 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	200000dc 	.word	0x200000dc
 8000ae4:	40002800 	.word	0x40002800

08000ae8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aec:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <MX_USART1_UART_Init+0x60>)
 8000aee:	4a17      	ldr	r2, [pc, #92]	@ (8000b4c <MX_USART1_UART_Init+0x64>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_USART1_UART_Init+0x60>)
 8000af4:	22e1      	movs	r2, #225	@ 0xe1
 8000af6:	0252      	lsls	r2, r2, #9
 8000af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <MX_USART1_UART_Init+0x60>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_USART1_UART_Init+0x60>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <MX_USART1_UART_Init+0x60>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_USART1_UART_Init+0x60>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <MX_USART1_UART_Init+0x60>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <MX_USART1_UART_Init+0x60>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <MX_USART1_UART_Init+0x60>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <MX_USART1_UART_Init+0x60>)
 8000b26:	2220      	movs	r2, #32
 8000b28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000b2a:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <MX_USART1_UART_Init+0x60>)
 8000b2c:	2280      	movs	r2, #128	@ 0x80
 8000b2e:	0192      	lsls	r2, r2, #6
 8000b30:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b32:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <MX_USART1_UART_Init+0x60>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f003 fe6f 	bl	8004818 <HAL_UART_Init>
 8000b3a:	1e03      	subs	r3, r0, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000b3e:	f000 fa03 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000100 	.word	0x20000100
 8000b4c:	40013800 	.word	0x40013800

08000b50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b54:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b56:	4a15      	ldr	r2, [pc, #84]	@ (8000bac <MX_USART2_UART_Init+0x5c>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b5c:	2296      	movs	r2, #150	@ 0x96
 8000b5e:	0192      	lsls	r2, r2, #6
 8000b60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b86:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b92:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <MX_USART2_UART_Init+0x58>)
 8000b94:	0018      	movs	r0, r3
 8000b96:	f003 fe3f 	bl	8004818 <HAL_UART_Init>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b9e:	f000 f9d3 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000188 	.word	0x20000188
 8000bac:	40004400 	.word	0x40004400

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b089      	sub	sp, #36	@ 0x24
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	240c      	movs	r4, #12
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	0018      	movs	r0, r3
 8000bbc:	2314      	movs	r3, #20
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f004 fdf1 	bl	80057a8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c7c <MX_GPIO_Init+0xcc>)
 8000bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bca:	4b2c      	ldr	r3, [pc, #176]	@ (8000c7c <MX_GPIO_Init+0xcc>)
 8000bcc:	2104      	movs	r1, #4
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c7c <MX_GPIO_Init+0xcc>)
 8000bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b27      	ldr	r3, [pc, #156]	@ (8000c7c <MX_GPIO_Init+0xcc>)
 8000be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000be2:	4b26      	ldr	r3, [pc, #152]	@ (8000c7c <MX_GPIO_Init+0xcc>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	430a      	orrs	r2, r1
 8000be8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bea:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <MX_GPIO_Init+0xcc>)
 8000bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_GPIO_Init+0xcc>)
 8000bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bfa:	4b20      	ldr	r3, [pc, #128]	@ (8000c7c <MX_GPIO_Init+0xcc>)
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_GPIO_Init+0xcc>)
 8000c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c06:	2202      	movs	r2, #2
 8000c08:	4013      	ands	r3, r2
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_LED_GPIO_Port, DBG_LED_Pin, GPIO_PIN_RESET);
 8000c0e:	23a0      	movs	r3, #160	@ 0xa0
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	2200      	movs	r2, #0
 8000c14:	2120      	movs	r1, #32
 8000c16:	0018      	movs	r0, r3
 8000c18:	f001 fc08 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8000c1c:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <MX_GPIO_Init+0xd0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2121      	movs	r1, #33	@ 0x21
 8000c22:	0018      	movs	r0, r3
 8000c24:	f001 fc02 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DBG_LED_Pin */
  GPIO_InitStruct.Pin = DBG_LED_Pin;
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	2201      	movs	r2, #1
 8000c32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DBG_LED_GPIO_Port, &GPIO_InitStruct);
 8000c40:	193a      	adds	r2, r7, r4
 8000c42:	23a0      	movs	r3, #160	@ 0xa0
 8000c44:	05db      	lsls	r3, r3, #23
 8000c46:	0011      	movs	r1, r2
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f001 fa71 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pins : VBAT_MEAS_EN_Pin I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin;
 8000c4e:	0021      	movs	r1, r4
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2221      	movs	r2, #33	@ 0x21
 8000c54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2201      	movs	r2, #1
 8000c5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <MX_GPIO_Init+0xd0>)
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	0010      	movs	r0, r2
 8000c70:	f001 fa5e 	bl	8002130 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b009      	add	sp, #36	@ 0x24
 8000c7a:	bd90      	pop	{r4, r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	50000400 	.word	0x50000400

08000c84 <configWakeupTime>:

/* USER CODE BEGIN 4 */

void configWakeupTime()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DBG_LED_GPIO_Port, DBG_LED_Pin, GPIO_PIN_SET);
 8000c8a:	23a0      	movs	r3, #160	@ 0xa0
 8000c8c:	05db      	lsls	r3, r3, #23
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2120      	movs	r1, #32
 8000c92:	0018      	movs	r0, r3
 8000c94:	f001 fbca 	bl	800242c <HAL_GPIO_WritePin>
	uint32_t wakeup_timer_value = 32 * 2048 - 1;  // 32 seconds
 8000c98:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <configWakeupTime+0x2c>)
 8000c9a:	607b      	str	r3, [r7, #4]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_timer_value, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <configWakeupTime+0x30>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f003 fcb0 	bl	8004608 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b002      	add	sp, #8
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	0000ffff 	.word	0x0000ffff
 8000cb4:	200000dc 	.word	0x200000dc

08000cb8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Wake up from deep sleep every 15 seconds */
  /* Increment counter - process LoRaWAN based on SLEEP_TIME_MINUTES setting */

  wakeup_counter++;
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <HAL_RTCEx_WakeUpTimerEventCallback+0x40>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <HAL_RTCEx_WakeUpTimerEventCallback+0x40>)
 8000cca:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(DBG_LED_GPIO_Port, DBG_LED_Pin, GPIO_PIN_RESET);
 8000ccc:	23a0      	movs	r3, #160	@ 0xa0
 8000cce:	05db      	lsls	r3, r3, #23
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f001 fba9 	bl	800242c <HAL_GPIO_WritePin>
  /* For debugging: you can add LED toggle here to see wake-ups every 15 seconds */
  /* If you have an LED, uncomment next line to see it blink every 15 seconds */
  /* HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); */
  
  /* Clear the wake-up timer flag to acknowledge the interrupt */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	22ff      	movs	r2, #255	@ 0xff
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4904      	ldr	r1, [pc, #16]	@ (8000cfc <HAL_RTCEx_WakeUpTimerEventCallback+0x44>)
 8000cea:	430a      	orrs	r2, r1
 8000cec:	60da      	str	r2, [r3, #12]
}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	20000210 	.word	0x20000210
 8000cfc:	fffffb7f 	.word	0xfffffb7f

08000d00 <ConfigureGPIOForLowPower>:
/**
  * @brief  Configure GPIOs for ultra-low power consumption
  * @retval None
  */
void ConfigureGPIOForLowPower(void)
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b08b      	sub	sp, #44	@ 0x2c
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	2414      	movs	r4, #20
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	2314      	movs	r3, #20
 8000d0e:	001a      	movs	r2, r3
 8000d10:	2100      	movs	r1, #0
 8000d12:	f004 fd49 	bl	80057a8 <memset>
  
  /* Enable all GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b3a      	ldr	r3, [pc, #232]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d1a:	4b39      	ldr	r3, [pc, #228]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d22:	4b37      	ldr	r3, [pc, #220]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d26:	2201      	movs	r2, #1
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	4b34      	ldr	r3, [pc, #208]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d32:	4b33      	ldr	r3, [pc, #204]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d34:	2102      	movs	r1, #2
 8000d36:	430a      	orrs	r2, r1
 8000d38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d3a:	4b31      	ldr	r3, [pc, #196]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d3e:	2202      	movs	r2, #2
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	4b2e      	ldr	r3, [pc, #184]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d52:	4b2b      	ldr	r3, [pc, #172]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d56:	2204      	movs	r2, #4
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5e:	4b28      	ldr	r3, [pc, #160]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d62:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d64:	2108      	movs	r1, #8
 8000d66:	430a      	orrs	r2, r1
 8000d68:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d6a:	4b25      	ldr	r3, [pc, #148]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d6e:	2208      	movs	r2, #8
 8000d70:	4013      	ands	r3, r2
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d76:	4b22      	ldr	r3, [pc, #136]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d7a:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d7c:	2180      	movs	r1, #128	@ 0x80
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d82:	4b1f      	ldr	r3, [pc, #124]	@ (8000e00 <ConfigureGPIOForLowPower+0x100>)
 8000d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d86:	2280      	movs	r2, #128	@ 0x80
 8000d88:	4013      	ands	r3, r2
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
  
  /* Configure all GPIO pins as analog to reduce power consumption */
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2203      	movs	r2, #3
 8000d92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  
  /* Configure GPIOA pins (except UART pins PA2, PA3 and PA9, PA10) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | 
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	4a19      	ldr	r2, [pc, #100]	@ (8000e04 <ConfigureGPIOForLowPower+0x104>)
 8000d9e:	601a      	str	r2, [r3, #0]
                        GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | 
                        GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	193a      	adds	r2, r7, r4
 8000da2:	23a0      	movs	r3, #160	@ 0xa0
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f001 f9c1 	bl	8002130 <HAL_GPIO_Init>
  
  /* Configure all GPIOB pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	4a15      	ldr	r2, [pc, #84]	@ (8000e08 <ConfigureGPIOForLowPower+0x108>)
 8000db2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	4a15      	ldr	r2, [pc, #84]	@ (8000e0c <ConfigureGPIOForLowPower+0x10c>)
 8000db8:	0019      	movs	r1, r3
 8000dba:	0010      	movs	r0, r2
 8000dbc:	f001 f9b8 	bl	8002130 <HAL_GPIO_Init>
  
  /* Configure GPIOC pins (except PC14, PC15 for LSE crystal) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | 
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	4a13      	ldr	r2, [pc, #76]	@ (8000e10 <ConfigureGPIOForLowPower+0x110>)
 8000dc4:	601a      	str	r2, [r3, #0]
                        GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | 
                        GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | 
                        GPIO_PIN_12 | GPIO_PIN_13;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <ConfigureGPIOForLowPower+0x114>)
 8000dca:	0019      	movs	r1, r3
 8000dcc:	0010      	movs	r0, r2
 8000dce:	f001 f9af 	bl	8002130 <HAL_GPIO_Init>
  
  /* Configure all GPIOD pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e08 <ConfigureGPIOForLowPower+0x108>)
 8000dd6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd8:	193b      	adds	r3, r7, r4
 8000dda:	4a0f      	ldr	r2, [pc, #60]	@ (8000e18 <ConfigureGPIOForLowPower+0x118>)
 8000ddc:	0019      	movs	r1, r3
 8000dde:	0010      	movs	r0, r2
 8000de0:	f001 f9a6 	bl	8002130 <HAL_GPIO_Init>
  
  /* Configure all GPIOH pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000de4:	0021      	movs	r1, r4
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	4a07      	ldr	r2, [pc, #28]	@ (8000e08 <ConfigureGPIOForLowPower+0x108>)
 8000dea:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	4a0b      	ldr	r2, [pc, #44]	@ (8000e1c <ConfigureGPIOForLowPower+0x11c>)
 8000df0:	0019      	movs	r1, r3
 8000df2:	0010      	movs	r0, r2
 8000df4:	f001 f99c 	bl	8002130 <HAL_GPIO_Init>
}
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b00b      	add	sp, #44	@ 0x2c
 8000dfe:	bd90      	pop	{r4, r7, pc}
 8000e00:	40021000 	.word	0x40021000
 8000e04:	0000f9f3 	.word	0x0000f9f3
 8000e08:	0000ffff 	.word	0x0000ffff
 8000e0c:	50000400 	.word	0x50000400
 8000e10:	00003fff 	.word	0x00003fff
 8000e14:	50000800 	.word	0x50000800
 8000e18:	50000c00 	.word	0x50000c00
 8000e1c:	50001c00 	.word	0x50001c00

08000e20 <EnterDeepSleepMode>:
/**
  * @brief  Enter Deep Sleep Mode using STOP mode with RTC wake-up
  * @retval None
  */
void EnterDeepSleepMode(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  /* Configure all GPIOs for ultra-low power */
  ConfigureGPIOForLowPower();
 8000e26:	f7ff ff6b 	bl	8000d00 <ConfigureGPIOForLowPower>
  
  /* Disable unnecessary peripheral clocks */
  __HAL_RCC_I2C1_CLK_DISABLE();
 8000e2a:	4b40      	ldr	r3, [pc, #256]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000e2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000e30:	493f      	ldr	r1, [pc, #252]	@ (8000f30 <EnterDeepSleepMode+0x110>)
 8000e32:	400a      	ands	r2, r1
 8000e34:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_USART1_CLK_DISABLE();
 8000e36:	4b3d      	ldr	r3, [pc, #244]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e3a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000e3c:	493d      	ldr	r1, [pc, #244]	@ (8000f34 <EnterDeepSleepMode+0x114>)
 8000e3e:	400a      	ands	r2, r1
 8000e40:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_USART2_CLK_DISABLE();
 8000e42:	4b3a      	ldr	r3, [pc, #232]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e46:	4b39      	ldr	r3, [pc, #228]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000e48:	493b      	ldr	r1, [pc, #236]	@ (8000f38 <EnterDeepSleepMode+0x118>)
 8000e4a:	400a      	ands	r2, r1
 8000e4c:	639a      	str	r2, [r3, #56]	@ 0x38
//  __HAL_RCC_GPIOA_CLK_DISABLE();
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000e4e:	4b37      	ldr	r3, [pc, #220]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e52:	4b36      	ldr	r3, [pc, #216]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000e54:	2102      	movs	r1, #2
 8000e56:	438a      	bics	r2, r1
 8000e58:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8000e5a:	4b34      	ldr	r3, [pc, #208]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e5e:	4b33      	ldr	r3, [pc, #204]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000e60:	2104      	movs	r1, #4
 8000e62:	438a      	bics	r2, r1
 8000e64:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOD_CLK_DISABLE();
 8000e66:	4b31      	ldr	r3, [pc, #196]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e6a:	4b30      	ldr	r3, [pc, #192]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	438a      	bics	r2, r1
 8000e70:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8000e72:	4b2e      	ldr	r3, [pc, #184]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e76:	4b2d      	ldr	r3, [pc, #180]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000e78:	2180      	movs	r1, #128	@ 0x80
 8000e7a:	438a      	bics	r2, r1
 8000e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Suspend SysTick to avoid wake-up from SysTick interrupt */
  HAL_SuspendTick();
 8000e7e:	f000 fe0b 	bl	8001a98 <HAL_SuspendTick>
  
  /* Clear any pending wake-up flags before sleeping */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000e82:	4b2e      	ldr	r3, [pc, #184]	@ (8000f3c <EnterDeepSleepMode+0x11c>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b2d      	ldr	r3, [pc, #180]	@ (8000f3c <EnterDeepSleepMode+0x11c>)
 8000e88:	2104      	movs	r1, #4
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f40 <EnterDeepSleepMode+0x120>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	22ff      	movs	r2, #255	@ 0xff
 8000e96:	401a      	ands	r2, r3
 8000e98:	4b29      	ldr	r3, [pc, #164]	@ (8000f40 <EnterDeepSleepMode+0x120>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4929      	ldr	r1, [pc, #164]	@ (8000f44 <EnterDeepSleepMode+0x124>)
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	60da      	str	r2, [r3, #12]
  
  /* Restart the RTC wake-up timer for next wake-up */
  configWakeupTime();
 8000ea2:	f7ff feef 	bl	8000c84 <configWakeupTime>
  
  /* Enter STOP Mode with Low Power Regulator */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f002 fa9b 	bl	80033e4 <HAL_PWR_EnterSTOPMode>
  
  /* === DEVICE IS NOW IN DEEP SLEEP === */
  /* === WAKE UP OCCURS HERE === */
  
  /* Upon wake-up, the system clock needs to be reconfigured */
  SystemClock_Config();
 8000eae:	f7ff fcbd 	bl	800082c <SystemClock_Config>
  
  /* Re-enable peripheral clocks */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000eb8:	2180      	movs	r1, #128	@ 0x80
 8000eba:	0389      	lsls	r1, r1, #14
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	639a      	str	r2, [r3, #56]	@ 0x38
//  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ec4:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ecc:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000edc:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000ede:	2104      	movs	r1, #4
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee8:	2204      	movs	r2, #4
 8000eea:	4013      	ands	r3, r2
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_USART1_CLK_ENABLE();
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000ef2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000ef6:	2180      	movs	r1, #128	@ 0x80
 8000ef8:	01c9      	lsls	r1, r1, #7
 8000efa:	430a      	orrs	r2, r1
 8000efc:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_USART2_CLK_ENABLE();
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <EnterDeepSleepMode+0x10c>)
 8000f04:	2180      	movs	r1, #128	@ 0x80
 8000f06:	0289      	lsls	r1, r1, #10
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Restore GPIO configuration for normal operation */
//  RestoreGPIOAfterWakeup();
  
  /* Re-initialize I2C and UARTs */
  MX_I2C1_Init();
 8000f0c:	f7ff fd78 	bl	8000a00 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f10:	f7ff fdea 	bl	8000ae8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f14:	f7ff fe1c 	bl	8000b50 <MX_USART2_UART_Init>
  
  /* Resume SysTick */
  HAL_ResumeTick();
 8000f18:	f000 fdcc 	bl	8001ab4 <HAL_ResumeTick>
  
  /* Small delay to ensure system is stable after wake-up */
  HAL_Delay(10);
 8000f1c:	200a      	movs	r0, #10
 8000f1e:	f000 fd97 	bl	8001a50 <HAL_Delay>
}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b002      	add	sp, #8
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	ffdfffff 	.word	0xffdfffff
 8000f34:	ffffbfff 	.word	0xffffbfff
 8000f38:	fffdffff 	.word	0xfffdffff
 8000f3c:	40007000 	.word	0x40007000
 8000f40:	200000dc 	.word	0x200000dc
 8000f44:	fffffb7f 	.word	0xfffffb7f

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
//  while (1)
//  {
//  }
  HAL_NVIC_SystemReset();
 8000f50:	f001 f8dd 	bl	800210e <HAL_NVIC_SystemReset>
  /* USER CODE END Error_Handler_Debug */
}
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000f62:	003b      	movs	r3, r7
 8000f64:	0018      	movs	r0, r3
 8000f66:	2308      	movs	r3, #8
 8000f68:	001a      	movs	r2, r3
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	f004 fc1c 	bl	80057a8 <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f70:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <HAL_MspInit+0x50>)
 8000f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f74:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <HAL_MspInit+0x50>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <HAL_MspInit+0x50>)
 8000f7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f80:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_MspInit+0x50>)
 8000f82:	2180      	movs	r1, #128	@ 0x80
 8000f84:	0549      	lsls	r1, r1, #21
 8000f86:	430a      	orrs	r2, r1
 8000f88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000f8a:	003b      	movs	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000f90:	003b      	movs	r3, r7
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000f96:	003b      	movs	r3, r7
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f002 f9b3 	bl	8003304 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000f9e:	f002 fa13 	bl	80033c8 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b089      	sub	sp, #36	@ 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	240c      	movs	r4, #12
 8000fba:	193b      	adds	r3, r7, r4
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	2314      	movs	r3, #20
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	f004 fbf0 	bl	80057a8 <memset>
  if(hadc->Instance==ADC1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a14      	ldr	r2, [pc, #80]	@ (8001020 <HAL_ADC_MspInit+0x70>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d122      	bne.n	8001018 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <HAL_ADC_MspInit+0x74>)
 8000fd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fd6:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <HAL_ADC_MspInit+0x74>)
 8000fd8:	2180      	movs	r1, #128	@ 0x80
 8000fda:	0089      	lsls	r1, r1, #2
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <HAL_ADC_MspInit+0x74>)
 8000fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_ADC_MspInit+0x74>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fec:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <HAL_ADC_MspInit+0x74>)
 8000fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC_IN0_Pin;
 8000ff8:	193b      	adds	r3, r7, r4
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffe:	193b      	adds	r3, r7, r4
 8001000:	2203      	movs	r2, #3
 8001002:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	193b      	adds	r3, r7, r4
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_IN0_GPIO_Port, &GPIO_InitStruct);
 800100a:	193a      	adds	r2, r7, r4
 800100c:	23a0      	movs	r3, #160	@ 0xa0
 800100e:	05db      	lsls	r3, r3, #23
 8001010:	0011      	movs	r1, r2
 8001012:	0018      	movs	r0, r3
 8001014:	f001 f88c 	bl	8002130 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001018:	46c0      	nop			@ (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b009      	add	sp, #36	@ 0x24
 800101e:	bd90      	pop	{r4, r7, pc}
 8001020:	40012400 	.word	0x40012400
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b089      	sub	sp, #36	@ 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	240c      	movs	r4, #12
 8001032:	193b      	adds	r3, r7, r4
 8001034:	0018      	movs	r0, r3
 8001036:	2314      	movs	r3, #20
 8001038:	001a      	movs	r2, r3
 800103a:	2100      	movs	r1, #0
 800103c:	f004 fbb4 	bl	80057a8 <memset>
  if(hi2c->Instance==I2C1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a17      	ldr	r2, [pc, #92]	@ (80010a4 <HAL_I2C_MspInit+0x7c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d128      	bne.n	800109c <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <HAL_I2C_MspInit+0x80>)
 800104c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <HAL_I2C_MspInit+0x80>)
 8001050:	2102      	movs	r1, #2
 8001052:	430a      	orrs	r2, r1
 8001054:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <HAL_I2C_MspInit+0x80>)
 8001058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105a:	2202      	movs	r2, #2
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001062:	0021      	movs	r1, r4
 8001064:	187b      	adds	r3, r7, r1
 8001066:	22c0      	movs	r2, #192	@ 0xc0
 8001068:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106a:	187b      	adds	r3, r7, r1
 800106c:	2212      	movs	r2, #18
 800106e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	187b      	adds	r3, r7, r1
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	187b      	adds	r3, r7, r1
 8001078:	2203      	movs	r2, #3
 800107a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2201      	movs	r2, #1
 8001080:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	187b      	adds	r3, r7, r1
 8001084:	4a09      	ldr	r2, [pc, #36]	@ (80010ac <HAL_I2C_MspInit+0x84>)
 8001086:	0019      	movs	r1, r3
 8001088:	0010      	movs	r0, r2
 800108a:	f001 f851 	bl	8002130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_I2C_MspInit+0x80>)
 8001090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001092:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_I2C_MspInit+0x80>)
 8001094:	2180      	movs	r1, #128	@ 0x80
 8001096:	0389      	lsls	r1, r1, #14
 8001098:	430a      	orrs	r2, r1
 800109a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800109c:	46c0      	nop			@ (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b009      	add	sp, #36	@ 0x24
 80010a2:	bd90      	pop	{r4, r7, pc}
 80010a4:	40005400 	.word	0x40005400
 80010a8:	40021000 	.word	0x40021000
 80010ac:	50000400 	.word	0x50000400

080010b0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <HAL_RTC_MspInit+0x38>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d10e      	bne.n	80010e0 <HAL_RTC_MspInit+0x30>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_RTC_MspInit+0x3c>)
 80010c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010c6:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <HAL_RTC_MspInit+0x3c>)
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	02c9      	lsls	r1, r1, #11
 80010cc:	430a      	orrs	r2, r1
 80010ce:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	2002      	movs	r0, #2
 80010d6:	f000 fff5 	bl	80020c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80010da:	2002      	movs	r0, #2
 80010dc:	f001 f807 	bl	80020ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40002800 	.word	0x40002800
 80010ec:	40021000 	.word	0x40021000

080010f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b08b      	sub	sp, #44	@ 0x2c
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	2414      	movs	r4, #20
 80010fa:	193b      	adds	r3, r7, r4
 80010fc:	0018      	movs	r0, r3
 80010fe:	2314      	movs	r3, #20
 8001100:	001a      	movs	r2, r3
 8001102:	2100      	movs	r1, #0
 8001104:	f004 fb50 	bl	80057a8 <memset>
  if(huart->Instance==USART1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a30      	ldr	r2, [pc, #192]	@ (80011d0 <HAL_UART_MspInit+0xe0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d12b      	bne.n	800116a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001112:	4b30      	ldr	r3, [pc, #192]	@ (80011d4 <HAL_UART_MspInit+0xe4>)
 8001114:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001116:	4b2f      	ldr	r3, [pc, #188]	@ (80011d4 <HAL_UART_MspInit+0xe4>)
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	01c9      	lsls	r1, r1, #7
 800111c:	430a      	orrs	r2, r1
 800111e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b2c      	ldr	r3, [pc, #176]	@ (80011d4 <HAL_UART_MspInit+0xe4>)
 8001122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001124:	4b2b      	ldr	r3, [pc, #172]	@ (80011d4 <HAL_UART_MspInit+0xe4>)
 8001126:	2101      	movs	r1, #1
 8001128:	430a      	orrs	r2, r1
 800112a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800112c:	4b29      	ldr	r3, [pc, #164]	@ (80011d4 <HAL_UART_MspInit+0xe4>)
 800112e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001130:	2201      	movs	r2, #1
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001138:	193b      	adds	r3, r7, r4
 800113a:	22c0      	movs	r2, #192	@ 0xc0
 800113c:	00d2      	lsls	r2, r2, #3
 800113e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	0021      	movs	r1, r4
 8001142:	187b      	adds	r3, r7, r1
 8001144:	2202      	movs	r2, #2
 8001146:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	187b      	adds	r3, r7, r1
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	187b      	adds	r3, r7, r1
 8001150:	2203      	movs	r2, #3
 8001152:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2204      	movs	r2, #4
 8001158:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	187a      	adds	r2, r7, r1
 800115c:	23a0      	movs	r3, #160	@ 0xa0
 800115e:	05db      	lsls	r3, r3, #23
 8001160:	0011      	movs	r1, r2
 8001162:	0018      	movs	r0, r3
 8001164:	f000 ffe4 	bl	8002130 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001168:	e02e      	b.n	80011c8 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a1a      	ldr	r2, [pc, #104]	@ (80011d8 <HAL_UART_MspInit+0xe8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d129      	bne.n	80011c8 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_UART_MspInit+0xe4>)
 8001176:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <HAL_UART_MspInit+0xe4>)
 800117a:	2180      	movs	r1, #128	@ 0x80
 800117c:	0289      	lsls	r1, r1, #10
 800117e:	430a      	orrs	r2, r1
 8001180:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <HAL_UART_MspInit+0xe4>)
 8001184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001186:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <HAL_UART_MspInit+0xe4>)
 8001188:	2101      	movs	r1, #1
 800118a:	430a      	orrs	r2, r1
 800118c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <HAL_UART_MspInit+0xe4>)
 8001190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001192:	2201      	movs	r2, #1
 8001194:	4013      	ands	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800119a:	2114      	movs	r1, #20
 800119c:	187b      	adds	r3, r7, r1
 800119e:	220c      	movs	r2, #12
 80011a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2202      	movs	r2, #2
 80011a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2203      	movs	r2, #3
 80011b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2204      	movs	r2, #4
 80011b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	187a      	adds	r2, r7, r1
 80011bc:	23a0      	movs	r3, #160	@ 0xa0
 80011be:	05db      	lsls	r3, r3, #23
 80011c0:	0011      	movs	r1, r2
 80011c2:	0018      	movs	r0, r3
 80011c4:	f000 ffb4 	bl	8002130 <HAL_GPIO_Init>
}
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b00b      	add	sp, #44	@ 0x2c
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	40013800 	.word	0x40013800
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40004400 	.word	0x40004400

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e0:	46c0      	nop			@ (mov r8, r8)
 80011e2:	e7fd      	b.n	80011e0 <NMI_Handler+0x4>

080011e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	e7fd      	b.n	80011e8 <HardFault_Handler+0x4>

080011ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011f0:	46c0      	nop			@ (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001204:	f000 fc08 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001208:	46c0      	nop			@ (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001214:	4b03      	ldr	r3, [pc, #12]	@ (8001224 <RTC_IRQHandler+0x14>)
 8001216:	0018      	movs	r0, r3
 8001218:	f003 face 	bl	80047b8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800121c:	46c0      	nop			@ (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	200000dc 	.word	0x200000dc

08001228 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800122c:	46c0      	nop			@ (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <scan_i2c_bus>:
uint16_t calculated_temp;
uint8_t  calculated_hum;
int16_t i2c_error_code = 0;

void scan_i2c_bus(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	// we re-set these to false because we want to check this every time for safety
    has_sensor_1 = false;
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <scan_i2c_bus+0x44>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
    has_sensor_2 = false;
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <scan_i2c_bus+0x48>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]

    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x44 << 1, 1, 10) == HAL_OK) has_sensor_1 = true;
 8001244:	480e      	ldr	r0, [pc, #56]	@ (8001280 <scan_i2c_bus+0x4c>)
 8001246:	230a      	movs	r3, #10
 8001248:	2201      	movs	r2, #1
 800124a:	2188      	movs	r1, #136	@ 0x88
 800124c:	f001 fbe4 	bl	8002a18 <HAL_I2C_IsDeviceReady>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d102      	bne.n	800125a <scan_i2c_bus+0x26>
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <scan_i2c_bus+0x44>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x46 << 1, 1, 10) == HAL_OK) has_sensor_2 = true;
 800125a:	4809      	ldr	r0, [pc, #36]	@ (8001280 <scan_i2c_bus+0x4c>)
 800125c:	230a      	movs	r3, #10
 800125e:	2201      	movs	r2, #1
 8001260:	218c      	movs	r1, #140	@ 0x8c
 8001262:	f001 fbd9 	bl	8002a18 <HAL_I2C_IsDeviceReady>
 8001266:	1e03      	subs	r3, r0, #0
 8001268:	d102      	bne.n	8001270 <scan_i2c_bus+0x3c>
 800126a:	4b04      	ldr	r3, [pc, #16]	@ (800127c <scan_i2c_bus+0x48>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
}
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	20000414 	.word	0x20000414
 800127c:	20000415 	.word	0x20000415
 8001280:	20000088 	.word	0x20000088

08001284 <sensor_init_and_read>:

bool sensor_init_and_read(void)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
    if (!has_sensor_1 && !has_sensor_2) {
 800128a:	4b56      	ldr	r3, [pc, #344]	@ (80013e4 <sensor_init_and_read+0x160>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2201      	movs	r2, #1
 8001290:	4053      	eors	r3, r2
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00b      	beq.n	80012b0 <sensor_init_and_read+0x2c>
 8001298:	4b53      	ldr	r3, [pc, #332]	@ (80013e8 <sensor_init_and_read+0x164>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	4053      	eors	r3, r2
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d004      	beq.n	80012b0 <sensor_init_and_read+0x2c>
    	i2c_error_code = NO_SENSORS_FOUND;
 80012a6:	4b51      	ldr	r3, [pc, #324]	@ (80013ec <sensor_init_and_read+0x168>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	801a      	strh	r2, [r3, #0]
        return false;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e095      	b.n	80013dc <sensor_init_and_read+0x158>
    }

    i2c_error_code = NO_ERROR;
 80012b0:	4b4e      	ldr	r3, [pc, #312]	@ (80013ec <sensor_init_and_read+0x168>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	801a      	strh	r2, [r3, #0]
    HAL_Delay(100);
 80012b6:	2064      	movs	r0, #100	@ 0x64
 80012b8:	f000 fbca 	bl	8001a50 <HAL_Delay>

    if (has_sensor_1) {
 80012bc:	4b49      	ldr	r3, [pc, #292]	@ (80013e4 <sensor_init_and_read+0x160>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d015      	beq.n	80012f0 <sensor_init_and_read+0x6c>
        sht4x_init(SHT43_I2C_ADDR_44);
 80012c4:	2044      	movs	r0, #68	@ 0x44
 80012c6:	f000 fa79 	bl	80017bc <sht4x_init>
        sht4x_soft_reset();
 80012ca:	f000 faeb 	bl	80018a4 <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 80012ce:	4b48      	ldr	r3, [pc, #288]	@ (80013f0 <sensor_init_and_read+0x16c>)
 80012d0:	0018      	movs	r0, r3
 80012d2:	f000 fa49 	bl	8001768 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT43_I2C_ADDR_44);
 80012d6:	2044      	movs	r0, #68	@ 0x44
 80012d8:	f000 fa70 	bl	80017bc <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 80012dc:	4a45      	ldr	r2, [pc, #276]	@ (80013f4 <sensor_init_and_read+0x170>)
 80012de:	4b46      	ldr	r3, [pc, #280]	@ (80013f8 <sensor_init_and_read+0x174>)
 80012e0:	0011      	movs	r1, r2
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 fa7a 	bl	80017dc <sht4x_measure_high_precision_ticks>
 80012e8:	0003      	movs	r3, r0
 80012ea:	001a      	movs	r2, r3
 80012ec:	4b3f      	ldr	r3, [pc, #252]	@ (80013ec <sensor_init_and_read+0x168>)
 80012ee:	801a      	strh	r2, [r3, #0]
    }

    if (has_sensor_2) {
 80012f0:	4b3d      	ldr	r3, [pc, #244]	@ (80013e8 <sensor_init_and_read+0x164>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d015      	beq.n	8001324 <sensor_init_and_read+0xa0>
        sht4x_init(SHT40_I2C_ADDR_46);
 80012f8:	2046      	movs	r0, #70	@ 0x46
 80012fa:	f000 fa5f 	bl	80017bc <sht4x_init>
        sht4x_soft_reset();
 80012fe:	f000 fad1 	bl	80018a4 <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 8001302:	4b3b      	ldr	r3, [pc, #236]	@ (80013f0 <sensor_init_and_read+0x16c>)
 8001304:	0018      	movs	r0, r3
 8001306:	f000 fa2f 	bl	8001768 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT40_I2C_ADDR_46);
 800130a:	2046      	movs	r0, #70	@ 0x46
 800130c:	f000 fa56 	bl	80017bc <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 8001310:	4a3a      	ldr	r2, [pc, #232]	@ (80013fc <sensor_init_and_read+0x178>)
 8001312:	4b3b      	ldr	r3, [pc, #236]	@ (8001400 <sensor_init_and_read+0x17c>)
 8001314:	0011      	movs	r1, r2
 8001316:	0018      	movs	r0, r3
 8001318:	f000 fa60 	bl	80017dc <sht4x_measure_high_precision_ticks>
 800131c:	0003      	movs	r3, r0
 800131e:	001a      	movs	r2, r3
 8001320:	4b32      	ldr	r3, [pc, #200]	@ (80013ec <sensor_init_and_read+0x168>)
 8001322:	801a      	strh	r2, [r3, #0]
    }

    calculated_temp            = (temp_ticks_1 / 100U) + 55U;
 8001324:	4b34      	ldr	r3, [pc, #208]	@ (80013f8 <sensor_init_and_read+0x174>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	2164      	movs	r1, #100	@ 0x64
 800132a:	0018      	movs	r0, r3
 800132c:	f7fe feec 	bl	8000108 <__udivsi3>
 8001330:	0003      	movs	r3, r0
 8001332:	b29b      	uxth	r3, r3
 8001334:	3337      	adds	r3, #55	@ 0x37
 8001336:	b29a      	uxth	r2, r3
 8001338:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <sensor_init_and_read+0x180>)
 800133a:	801a      	strh	r2, [r3, #0]
    uint16_t calculated_temp_2 = (temp_ticks_2 / 100U) + 55U;
 800133c:	4b30      	ldr	r3, [pc, #192]	@ (8001400 <sensor_init_and_read+0x17c>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	2164      	movs	r1, #100	@ 0x64
 8001342:	0018      	movs	r0, r3
 8001344:	f7fe fee0 	bl	8000108 <__udivsi3>
 8001348:	0003      	movs	r3, r0
 800134a:	b29a      	uxth	r2, r3
 800134c:	240e      	movs	r4, #14
 800134e:	193b      	adds	r3, r7, r4
 8001350:	3237      	adds	r2, #55	@ 0x37
 8001352:	801a      	strh	r2, [r3, #0]
    calculated_hum             = (hum_ticks_1 / 100U);
 8001354:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <sensor_init_and_read+0x170>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	2164      	movs	r1, #100	@ 0x64
 800135a:	0018      	movs	r0, r3
 800135c:	f7fe fed4 	bl	8000108 <__udivsi3>
 8001360:	0003      	movs	r3, r0
 8001362:	b29b      	uxth	r3, r3
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b28      	ldr	r3, [pc, #160]	@ (8001408 <sensor_init_and_read+0x184>)
 8001368:	701a      	strb	r2, [r3, #0]
    uint8_t  calculated_hum_2  = (hum_ticks_2 / 100U);
 800136a:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <sensor_init_and_read+0x178>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	2164      	movs	r1, #100	@ 0x64
 8001370:	0018      	movs	r0, r3
 8001372:	f7fe fec9 	bl	8000108 <__udivsi3>
 8001376:	0003      	movs	r3, r0
 8001378:	b29a      	uxth	r2, r3
 800137a:	210d      	movs	r1, #13
 800137c:	187b      	adds	r3, r7, r1
 800137e:	701a      	strb	r2, [r3, #0]

    // compute raw differences (signed)
    int16_t temp_diff = (int16_t)calculated_temp - (int16_t)calculated_temp_2;
 8001380:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <sensor_init_and_read+0x180>)
 8001382:	881a      	ldrh	r2, [r3, #0]
 8001384:	193b      	adds	r3, r7, r4
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b29a      	uxth	r2, r3
 800138c:	200a      	movs	r0, #10
 800138e:	183b      	adds	r3, r7, r0
 8001390:	801a      	strh	r2, [r3, #0]
    int16_t hum_diff  = (int16_t)calculated_hum - (int16_t)calculated_hum_2;
 8001392:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <sensor_init_and_read+0x184>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	001a      	movs	r2, r3
 8001398:	187b      	adds	r3, r7, r1
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	2108      	movs	r1, #8
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	801a      	strh	r2, [r3, #0]

    // convert to absolute unsigned values
    uint8_t temp_delta = (uint8_t)abs(temp_diff);
 80013a8:	183b      	adds	r3, r7, r0
 80013aa:	2200      	movs	r2, #0
 80013ac:	5e9b      	ldrsh	r3, [r3, r2]
 80013ae:	17da      	asrs	r2, r3, #31
 80013b0:	189b      	adds	r3, r3, r2
 80013b2:	4053      	eors	r3, r2
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	701a      	strb	r2, [r3, #0]
    uint8_t hum_delta  = (uint8_t)abs(hum_diff);
 80013ba:	187b      	adds	r3, r7, r1
 80013bc:	2200      	movs	r2, #0
 80013be:	5e9b      	ldrsh	r3, [r3, r2]
 80013c0:	17da      	asrs	r2, r3, #31
 80013c2:	189b      	adds	r3, r3, r2
 80013c4:	4053      	eors	r3, r2
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	1dbb      	adds	r3, r7, #6
 80013ca:	701a      	strb	r2, [r3, #0]

    if (i2c_error_code) {
 80013cc:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <sensor_init_and_read+0x168>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	5e9b      	ldrsh	r3, [r3, r2]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <sensor_init_and_read+0x156>
        return false;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <sensor_init_and_read+0x158>
    }
    return true;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	b005      	add	sp, #20
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	20000414 	.word	0x20000414
 80013e8:	20000415 	.word	0x20000415
 80013ec:	20000422 	.word	0x20000422
 80013f0:	00002710 	.word	0x00002710
 80013f4:	20000418 	.word	0x20000418
 80013f8:	20000416 	.word	0x20000416
 80013fc:	2000041c 	.word	0x2000041c
 8001400:	2000041a 	.word	0x2000041a
 8001404:	2000041e 	.word	0x2000041e
 8001408:	20000420 	.word	0x20000420

0800140c <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b21b      	sxth	r3, r3
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3301      	adds	r3, #1
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b21b      	sxth	r3, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	b21b      	sxth	r3, r3
 800142a:	b29b      	uxth	r3, r3
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	b002      	add	sp, #8
 8001432:	bd80      	pop	{r7, pc}

08001434 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	000a      	movs	r2, r1
 800143e:	1cbb      	adds	r3, r7, #2
 8001440:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8001442:	230d      	movs	r3, #13
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	22ff      	movs	r2, #255	@ 0xff
 8001448:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800144a:	230e      	movs	r3, #14
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	2200      	movs	r2, #0
 8001450:	801a      	strh	r2, [r3, #0]
 8001452:	e038      	b.n	80014c6 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8001454:	230e      	movs	r3, #14
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	18d3      	adds	r3, r2, r3
 800145e:	7819      	ldrb	r1, [r3, #0]
 8001460:	220d      	movs	r2, #13
 8001462:	18bb      	adds	r3, r7, r2
 8001464:	18ba      	adds	r2, r7, r2
 8001466:	7812      	ldrb	r2, [r2, #0]
 8001468:	404a      	eors	r2, r1
 800146a:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800146c:	230c      	movs	r3, #12
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	2208      	movs	r2, #8
 8001472:	701a      	strb	r2, [r3, #0]
 8001474:	e01c      	b.n	80014b0 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 8001476:	210d      	movs	r1, #13
 8001478:	187b      	adds	r3, r7, r1
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b25b      	sxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	da0a      	bge.n	8001498 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8001482:	187b      	adds	r3, r7, r1
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b25b      	sxtb	r3, r3
 8001488:	18db      	adds	r3, r3, r3
 800148a:	b25b      	sxtb	r3, r3
 800148c:	2231      	movs	r2, #49	@ 0x31
 800148e:	4053      	eors	r3, r2
 8001490:	b25a      	sxtb	r2, r3
 8001492:	187b      	adds	r3, r7, r1
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	e005      	b.n	80014a4 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8001498:	230d      	movs	r3, #13
 800149a:	18fa      	adds	r2, r7, r3
 800149c:	18fb      	adds	r3, r7, r3
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	18db      	adds	r3, r3, r3
 80014a2:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80014a4:	220c      	movs	r2, #12
 80014a6:	18bb      	adds	r3, r7, r2
 80014a8:	18ba      	adds	r2, r7, r2
 80014aa:	7812      	ldrb	r2, [r2, #0]
 80014ac:	3a01      	subs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	230c      	movs	r3, #12
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1dd      	bne.n	8001476 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80014ba:	220e      	movs	r2, #14
 80014bc:	18bb      	adds	r3, r7, r2
 80014be:	18ba      	adds	r2, r7, r2
 80014c0:	8812      	ldrh	r2, [r2, #0]
 80014c2:	3201      	adds	r2, #1
 80014c4:	801a      	strh	r2, [r3, #0]
 80014c6:	230e      	movs	r3, #14
 80014c8:	18fa      	adds	r2, r7, r3
 80014ca:	1cbb      	adds	r3, r7, #2
 80014cc:	8812      	ldrh	r2, [r2, #0]
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d3bf      	bcc.n	8001454 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 80014d4:	230d      	movs	r3, #13
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	781b      	ldrb	r3, [r3, #0]
}
 80014da:	0018      	movs	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	b004      	add	sp, #16
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	0008      	movs	r0, r1
 80014ec:	0011      	movs	r1, r2
 80014ee:	1cbb      	adds	r3, r7, #2
 80014f0:	1c02      	adds	r2, r0, #0
 80014f2:	801a      	strh	r2, [r3, #0]
 80014f4:	1c7b      	adds	r3, r7, #1
 80014f6:	1c0a      	adds	r2, r1, #0
 80014f8:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 80014fa:	1cbb      	adds	r3, r7, #2
 80014fc:	881a      	ldrh	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	0011      	movs	r1, r2
 8001502:	0018      	movs	r0, r3
 8001504:	f7ff ff96 	bl	8001434 <sensirion_i2c_generate_crc>
 8001508:	0003      	movs	r3, r0
 800150a:	001a      	movs	r2, r3
 800150c:	1c7b      	adds	r3, r7, #1
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4293      	cmp	r3, r2
 8001512:	d001      	beq.n	8001518 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8001518:	2300      	movs	r3, #0
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}

08001522 <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	0008      	movs	r0, r1
 800152c:	0011      	movs	r1, r2
 800152e:	1cbb      	adds	r3, r7, #2
 8001530:	1c02      	adds	r2, r0, #0
 8001532:	801a      	strh	r2, [r3, #0]
 8001534:	1c7b      	adds	r3, r7, #1
 8001536:	1c0a      	adds	r2, r1, #0
 8001538:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 800153a:	1cbb      	adds	r3, r7, #2
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	1cba      	adds	r2, r7, #2
 8001540:	1c59      	adds	r1, r3, #1
 8001542:	8011      	strh	r1, [r2, #0]
 8001544:	001a      	movs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	189b      	adds	r3, r3, r2
 800154a:	1c7a      	adds	r2, r7, #1
 800154c:	7812      	ldrb	r2, [r2, #0]
 800154e:	701a      	strb	r2, [r3, #0]
    return offset;
 8001550:	1cbb      	adds	r3, r7, #2
 8001552:	881b      	ldrh	r3, [r3, #0]
}
 8001554:	0018      	movs	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	b002      	add	sp, #8
 800155a:	bd80      	pop	{r7, pc}

0800155c <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6039      	str	r1, [r7, #0]
 8001564:	0011      	movs	r1, r2
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	1c02      	adds	r2, r0, #0
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	1c0a      	adds	r2, r1, #0
 8001570:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	6839      	ldr	r1, [r7, #0]
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	0018      	movs	r0, r3
 8001580:	f000 f8c4 	bl	800170c <sensirion_i2c_hal_write>
 8001584:	0003      	movs	r3, r0
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b002      	add	sp, #8
 800158c:	bd80      	pop	{r7, pc}

0800158e <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800158e:	b5b0      	push	{r4, r5, r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	0011      	movs	r1, r2
 8001598:	1dfb      	adds	r3, r7, #7
 800159a:	1c02      	adds	r2, r0, #0
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	1c0a      	adds	r2, r1, #0
 80015a2:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	220a      	movs	r2, #10
 80015ae:	18ba      	adds	r2, r7, r2
 80015b0:	1c19      	adds	r1, r3, #0
 80015b2:	1c0b      	adds	r3, r1, #0
 80015b4:	18db      	adds	r3, r3, r3
 80015b6:	185b      	adds	r3, r3, r1
 80015b8:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	2201      	movs	r2, #1
 80015c0:	4013      	ands	r3, r2
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 80015c8:	2304      	movs	r3, #4
 80015ca:	e06c      	b.n	80016a6 <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 80015cc:	230a      	movs	r3, #10
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	6839      	ldr	r1, [r7, #0]
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	0018      	movs	r0, r3
 80015dc:	f000 f868 	bl	80016b0 <sensirion_i2c_hal_read>
 80015e0:	0003      	movs	r3, r0
 80015e2:	001a      	movs	r2, r3
 80015e4:	2108      	movs	r1, #8
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	801a      	strh	r2, [r3, #0]
    if (error) {
 80015ea:	000a      	movs	r2, r1
 80015ec:	18bb      	adds	r3, r7, r2
 80015ee:	2100      	movs	r1, #0
 80015f0:	5e5b      	ldrsh	r3, [r3, r1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <sensirion_i2c_read_data_inplace+0x70>
        return error;
 80015f6:	18bb      	adds	r3, r7, r2
 80015f8:	2200      	movs	r2, #0
 80015fa:	5e9b      	ldrsh	r3, [r3, r2]
 80015fc:	e053      	b.n	80016a6 <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80015fe:	230e      	movs	r3, #14
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	2200      	movs	r2, #0
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	230c      	movs	r3, #12
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	2200      	movs	r2, #0
 800160c:	801a      	strh	r2, [r3, #0]
 800160e:	e041      	b.n	8001694 <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001610:	210e      	movs	r1, #14
 8001612:	187b      	adds	r3, r7, r1
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800161a:	187b      	adds	r3, r7, r1
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	3302      	adds	r3, #2
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	001a      	movs	r2, r3
 8001628:	2102      	movs	r1, #2
 800162a:	f7ff ff5a 	bl	80014e2 <sensirion_i2c_check_crc>
 800162e:	0003      	movs	r3, r0
 8001630:	001a      	movs	r2, r3
 8001632:	2108      	movs	r1, #8
 8001634:	187b      	adds	r3, r7, r1
 8001636:	801a      	strh	r2, [r3, #0]
        if (error) {
 8001638:	000a      	movs	r2, r1
 800163a:	18bb      	adds	r3, r7, r2
 800163c:	2100      	movs	r1, #0
 800163e:	5e5b      	ldrsh	r3, [r3, r1]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 8001644:	18bb      	adds	r3, r7, r2
 8001646:	2200      	movs	r2, #0
 8001648:	5e9b      	ldrsh	r3, [r3, r2]
 800164a:	e02c      	b.n	80016a6 <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 800164c:	240e      	movs	r4, #14
 800164e:	193b      	adds	r3, r7, r4
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	18d2      	adds	r2, r2, r3
 8001656:	250c      	movs	r5, #12
 8001658:	197b      	adds	r3, r7, r5
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	1979      	adds	r1, r7, r5
 800165e:	1c58      	adds	r0, r3, #1
 8001660:	8008      	strh	r0, [r1, #0]
 8001662:	0019      	movs	r1, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	185b      	adds	r3, r3, r1
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800166c:	193b      	adds	r3, r7, r4
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	18d2      	adds	r2, r2, r3
 8001676:	197b      	adds	r3, r7, r5
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	1979      	adds	r1, r7, r5
 800167c:	1c58      	adds	r0, r3, #1
 800167e:	8008      	strh	r0, [r1, #0]
 8001680:	0019      	movs	r1, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	185b      	adds	r3, r3, r1
 8001686:	7812      	ldrb	r2, [r2, #0]
 8001688:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800168a:	193b      	adds	r3, r7, r4
 800168c:	193a      	adds	r2, r7, r4
 800168e:	8812      	ldrh	r2, [r2, #0]
 8001690:	3203      	adds	r2, #3
 8001692:	801a      	strh	r2, [r3, #0]
 8001694:	230e      	movs	r3, #14
 8001696:	18fa      	adds	r2, r7, r3
 8001698:	230a      	movs	r3, #10
 800169a:	18fb      	adds	r3, r7, r3
 800169c:	8812      	ldrh	r2, [r2, #0]
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d3b5      	bcc.n	8001610 <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	0018      	movs	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b004      	add	sp, #16
 80016ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080016b0 <sensirion_i2c_hal_read>:

void sensirion_i2c_hal_free(void) {
    /* nothing to free */
}

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 80016b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	6039      	str	r1, [r7, #0]
 80016b8:	0011      	movs	r1, r2
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	1c02      	adds	r2, r0, #0
 80016be:	701a      	strb	r2, [r3, #0]
 80016c0:	1dbb      	adds	r3, r7, #6
 80016c2:	1c0a      	adds	r2, r1, #0
 80016c4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1), data, count, 1000);
 80016c6:	1dfb      	adds	r3, r7, #7
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	18db      	adds	r3, r3, r3
 80016ce:	b299      	uxth	r1, r3
 80016d0:	1dbb      	adds	r3, r7, #6
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b29d      	uxth	r5, r3
 80016d6:	260f      	movs	r6, #15
 80016d8:	19bc      	adds	r4, r7, r6
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	480a      	ldr	r0, [pc, #40]	@ (8001708 <sensirion_i2c_hal_read+0x58>)
 80016de:	23fa      	movs	r3, #250	@ 0xfa
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	002b      	movs	r3, r5
 80016e6:	f001 f88f 	bl	8002808 <HAL_I2C_Master_Receive>
 80016ea:	0003      	movs	r3, r0
 80016ec:	7023      	strb	r3, [r4, #0]
    return (status == HAL_OK) ? 0 : -1;
 80016ee:	19bb      	adds	r3, r7, r6
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <sensirion_i2c_hal_read+0x4a>
 80016f6:	2300      	movs	r3, #0
 80016f8:	e001      	b.n	80016fe <sensirion_i2c_hal_read+0x4e>
 80016fa:	2301      	movs	r3, #1
 80016fc:	425b      	negs	r3, r3
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	b005      	add	sp, #20
 8001704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	20000088 	.word	0x20000088

0800170c <sensirion_i2c_hal_write>:

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint8_t count) {
 800170c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170e:	b087      	sub	sp, #28
 8001710:	af02      	add	r7, sp, #8
 8001712:	6039      	str	r1, [r7, #0]
 8001714:	0011      	movs	r1, r2
 8001716:	1dfb      	adds	r3, r7, #7
 8001718:	1c02      	adds	r2, r0, #0
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	1dbb      	adds	r3, r7, #6
 800171e:	1c0a      	adds	r2, r1, #0
 8001720:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1), (uint8_t*)data, count, 1000);
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	18db      	adds	r3, r3, r3
 800172a:	b299      	uxth	r1, r3
 800172c:	1dbb      	adds	r3, r7, #6
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b29d      	uxth	r5, r3
 8001732:	260f      	movs	r6, #15
 8001734:	19bc      	adds	r4, r7, r6
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	480a      	ldr	r0, [pc, #40]	@ (8001764 <sensirion_i2c_hal_write+0x58>)
 800173a:	23fa      	movs	r3, #250	@ 0xfa
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	002b      	movs	r3, r5
 8001742:	f000 ff37 	bl	80025b4 <HAL_I2C_Master_Transmit>
 8001746:	0003      	movs	r3, r0
 8001748:	7023      	strb	r3, [r4, #0]
    return (status == HAL_OK) ? 0 : -1;
 800174a:	19bb      	adds	r3, r7, r6
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <sensirion_i2c_hal_write+0x4a>
 8001752:	2300      	movs	r3, #0
 8001754:	e001      	b.n	800175a <sensirion_i2c_hal_write+0x4e>
 8001756:	2301      	movs	r3, #1
 8001758:	425b      	negs	r3, r3
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b005      	add	sp, #20
 8001760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	20000088 	.word	0x20000088

08001768 <sensirion_i2c_hal_sleep_usec>:

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	22fa      	movs	r2, #250	@ 0xfa
 8001774:	0091      	lsls	r1, r2, #2
 8001776:	0018      	movs	r0, r3
 8001778:	f7fe fcc6 	bl	8000108 <__udivsi3>
 800177c:	0003      	movs	r3, r0
 800177e:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	22fa      	movs	r2, #250	@ 0xfa
 8001784:	0091      	lsls	r1, r2, #2
 8001786:	0018      	movs	r0, r3
 8001788:	f7fe fd44 	bl	8000214 <__aeabi_uidivmod>
 800178c:	1e0b      	subs	r3, r1, #0
 800178e:	d002      	beq.n	8001796 <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3301      	adds	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_GetHalVersion() < 0x01010100) {
 8001796:	f000 f99b 	bl	8001ad0 <HAL_GetHalVersion>
 800179a:	0003      	movs	r3, r0
 800179c:	4a06      	ldr	r2, [pc, #24]	@ (80017b8 <sensirion_i2c_hal_sleep_usec+0x50>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d802      	bhi.n	80017a8 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3301      	adds	r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	0018      	movs	r0, r3
 80017ac:	f000 f950 	bl	8001a50 <HAL_Delay>
}
 80017b0:	46c0      	nop			@ (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b004      	add	sp, #16
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	010100ff 	.word	0x010100ff

080017bc <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	0002      	movs	r2, r0
 80017c4:	1dfb      	adds	r3, r7, #7
 80017c6:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <sht4x_init+0x1c>)
 80017ca:	1dfa      	adds	r2, r7, #7
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	701a      	strb	r2, [r3, #0]
}
 80017d0:	46c0      	nop			@ (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b002      	add	sp, #8
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000042a 	.word	0x2000042a

080017dc <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 80017dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 80017e6:	2516      	movs	r5, #22
 80017e8:	197b      	adds	r3, r7, r5
 80017ea:	2200      	movs	r2, #0
 80017ec:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 80017ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001898 <sht4x_measure_high_precision_ticks+0xbc>)
 80017f0:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 80017f2:	260e      	movs	r6, #14
 80017f4:	19bb      	adds	r3, r7, r6
 80017f6:	2200      	movs	r2, #0
 80017f8:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 80017fa:	19bc      	adds	r4, r7, r6
 80017fc:	19bb      	adds	r3, r7, r6
 80017fe:	8819      	ldrh	r1, [r3, #0]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	22fd      	movs	r2, #253	@ 0xfd
 8001804:	0018      	movs	r0, r3
 8001806:	f7ff fe8c 	bl	8001522 <sensirion_i2c_add_command8_to_buffer>
 800180a:	0003      	movs	r3, r0
 800180c:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 800180e:	4b23      	ldr	r3, [pc, #140]	@ (800189c <sht4x_measure_high_precision_ticks+0xc0>)
 8001810:	7818      	ldrb	r0, [r3, #0]
 8001812:	197c      	adds	r4, r7, r5
 8001814:	19bb      	adds	r3, r7, r6
 8001816:	881a      	ldrh	r2, [r3, #0]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	0019      	movs	r1, r3
 800181c:	f7ff fe9e 	bl	800155c <sensirion_i2c_write_data>
 8001820:	0003      	movs	r3, r0
 8001822:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001824:	197b      	adds	r3, r7, r5
 8001826:	2200      	movs	r2, #0
 8001828:	5e9b      	ldrsh	r3, [r3, r2]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 800182e:	197b      	adds	r3, r7, r5
 8001830:	2200      	movs	r2, #0
 8001832:	5e9b      	ldrsh	r3, [r3, r2]
 8001834:	e02c      	b.n	8001890 <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8001836:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <sht4x_measure_high_precision_ticks+0xc4>)
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff ff95 	bl	8001768 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 800183e:	4b17      	ldr	r3, [pc, #92]	@ (800189c <sht4x_measure_high_precision_ticks+0xc0>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2516      	movs	r5, #22
 8001844:	197c      	adds	r4, r7, r5
 8001846:	6939      	ldr	r1, [r7, #16]
 8001848:	2204      	movs	r2, #4
 800184a:	0018      	movs	r0, r3
 800184c:	f7ff fe9f 	bl	800158e <sensirion_i2c_read_data_inplace>
 8001850:	0003      	movs	r3, r0
 8001852:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001854:	197b      	adds	r3, r7, r5
 8001856:	2200      	movs	r2, #0
 8001858:	5e9b      	ldrsh	r3, [r3, r2]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 800185e:	197b      	adds	r3, r7, r5
 8001860:	2200      	movs	r2, #0
 8001862:	5e9b      	ldrsh	r3, [r3, r2]
 8001864:	e014      	b.n	8001890 <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff fdcf 	bl	800140c <sensirion_common_bytes_to_uint16_t>
 800186e:	0003      	movs	r3, r0
 8001870:	001a      	movs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	3302      	adds	r3, #2
 800187a:	0018      	movs	r0, r3
 800187c:	f7ff fdc6 	bl	800140c <sensirion_common_bytes_to_uint16_t>
 8001880:	0003      	movs	r3, r0
 8001882:	001a      	movs	r2, r3
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	801a      	strh	r2, [r3, #0]
    return local_error;
 8001888:	2316      	movs	r3, #22
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	2200      	movs	r2, #0
 800188e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	b007      	add	sp, #28
 8001896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001898:	20000424 	.word	0x20000424
 800189c:	2000042a 	.word	0x2000042a
 80018a0:	00002710 	.word	0x00002710

080018a4 <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 80018aa:	250e      	movs	r5, #14
 80018ac:	197b      	adds	r3, r7, r5
 80018ae:	2200      	movs	r2, #0
 80018b0:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 80018b2:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <sht4x_soft_reset+0x6c>)
 80018b4:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 80018b6:	1dbb      	adds	r3, r7, #6
 80018b8:	2200      	movs	r2, #0
 80018ba:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 80018bc:	1dbc      	adds	r4, r7, #6
 80018be:	1dbb      	adds	r3, r7, #6
 80018c0:	8819      	ldrh	r1, [r3, #0]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2294      	movs	r2, #148	@ 0x94
 80018c6:	0018      	movs	r0, r3
 80018c8:	f7ff fe2b 	bl	8001522 <sensirion_i2c_add_command8_to_buffer>
 80018cc:	0003      	movs	r3, r0
 80018ce:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 80018d0:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <sht4x_soft_reset+0x70>)
 80018d2:	7818      	ldrb	r0, [r3, #0]
 80018d4:	197c      	adds	r4, r7, r5
 80018d6:	1dbb      	adds	r3, r7, #6
 80018d8:	881a      	ldrh	r2, [r3, #0]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	0019      	movs	r1, r3
 80018de:	f7ff fe3d 	bl	800155c <sensirion_i2c_write_data>
 80018e2:	0003      	movs	r3, r0
 80018e4:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 80018e6:	197b      	adds	r3, r7, r5
 80018e8:	2200      	movs	r2, #0
 80018ea:	5e9b      	ldrsh	r3, [r3, r2]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <sht4x_soft_reset+0x54>
        return local_error;
 80018f0:	197b      	adds	r3, r7, r5
 80018f2:	2200      	movs	r2, #0
 80018f4:	5e9b      	ldrsh	r3, [r3, r2]
 80018f6:	e007      	b.n	8001908 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80018f8:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <sht4x_soft_reset+0x74>)
 80018fa:	0018      	movs	r0, r3
 80018fc:	f7ff ff34 	bl	8001768 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8001900:	230e      	movs	r3, #14
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	2200      	movs	r2, #0
 8001906:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	b004      	add	sp, #16
 800190e:	bdb0      	pop	{r4, r5, r7, pc}
 8001910:	20000424 	.word	0x20000424
 8001914:	2000042a 	.word	0x2000042a
 8001918:	00002710 	.word	0x00002710

0800191c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800191c:	480d      	ldr	r0, [pc, #52]	@ (8001954 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800191e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001920:	f7ff fc82 	bl	8001228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001924:	480c      	ldr	r0, [pc, #48]	@ (8001958 <LoopForever+0x6>)
  ldr r1, =_edata
 8001926:	490d      	ldr	r1, [pc, #52]	@ (800195c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001928:	4a0d      	ldr	r2, [pc, #52]	@ (8001960 <LoopForever+0xe>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800192c:	e002      	b.n	8001934 <LoopCopyDataInit>

0800192e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001932:	3304      	adds	r3, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001938:	d3f9      	bcc.n	800192e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193a:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800193c:	4c0a      	ldr	r4, [pc, #40]	@ (8001968 <LoopForever+0x16>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001940:	e001      	b.n	8001946 <LoopFillZerobss>

08001942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001944:	3204      	adds	r2, #4

08001946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800194a:	f003 ff35 	bl	80057b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194e:	f7fe ff01 	bl	8000754 <main>

08001952 <LoopForever>:

LoopForever:
    b LoopForever
 8001952:	e7fe      	b.n	8001952 <LoopForever>
   ldr   r0, =_estack
 8001954:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001960:	080058f4 	.word	0x080058f4
  ldr r2, =_sbss
 8001964:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001968:	20000430 	.word	0x20000430

0800196c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC1_COMP_IRQHandler>
	...

08001970 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001976:	1dfb      	adds	r3, r7, #7
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_Init+0x3c>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <HAL_Init+0x3c>)
 8001982:	2140      	movs	r1, #64	@ 0x40
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001988:	2003      	movs	r0, #3
 800198a:	f000 f811 	bl	80019b0 <HAL_InitTick>
 800198e:	1e03      	subs	r3, r0, #0
 8001990:	d003      	beq.n	800199a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	e001      	b.n	800199e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800199a:	f7ff fadf 	bl	8000f5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	781b      	ldrb	r3, [r3, #0]
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b002      	add	sp, #8
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			@ (mov r8, r8)
 80019ac:	40022000 	.word	0x40022000

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <HAL_InitTick+0x5c>)
 80019ba:	681c      	ldr	r4, [r3, #0]
 80019bc:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <HAL_InitTick+0x60>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	0019      	movs	r1, r3
 80019c2:	23fa      	movs	r3, #250	@ 0xfa
 80019c4:	0098      	lsls	r0, r3, #2
 80019c6:	f7fe fb9f 	bl	8000108 <__udivsi3>
 80019ca:	0003      	movs	r3, r0
 80019cc:	0019      	movs	r1, r3
 80019ce:	0020      	movs	r0, r4
 80019d0:	f7fe fb9a 	bl	8000108 <__udivsi3>
 80019d4:	0003      	movs	r3, r0
 80019d6:	0018      	movs	r0, r3
 80019d8:	f000 fb9d 	bl	8002116 <HAL_SYSTICK_Config>
 80019dc:	1e03      	subs	r3, r0, #0
 80019de:	d001      	beq.n	80019e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e00f      	b.n	8001a04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d80b      	bhi.n	8001a02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	2301      	movs	r3, #1
 80019ee:	425b      	negs	r3, r3
 80019f0:	2200      	movs	r2, #0
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 fb66 	bl	80020c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <HAL_InitTick+0x64>)
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	0018      	movs	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b003      	add	sp, #12
 8001a0a:	bd90      	pop	{r4, r7, pc}
 8001a0c:	20000004 	.word	0x20000004
 8001a10:	2000000c 	.word	0x2000000c
 8001a14:	20000008 	.word	0x20000008

08001a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_IncTick+0x1c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	001a      	movs	r2, r3
 8001a22:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <HAL_IncTick+0x20>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	18d2      	adds	r2, r2, r3
 8001a28:	4b03      	ldr	r3, [pc, #12]	@ (8001a38 <HAL_IncTick+0x20>)
 8001a2a:	601a      	str	r2, [r3, #0]
}
 8001a2c:	46c0      	nop			@ (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	2000000c 	.word	0x2000000c
 8001a38:	2000042c 	.word	0x2000042c

08001a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a40:	4b02      	ldr	r3, [pc, #8]	@ (8001a4c <HAL_GetTick+0x10>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	2000042c 	.word	0x2000042c

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff fff0 	bl	8001a3c <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3301      	adds	r3, #1
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_Delay+0x44>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	001a      	movs	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	189b      	adds	r3, r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a76:	46c0      	nop			@ (mov r8, r8)
 8001a78:	f7ff ffe0 	bl	8001a3c <HAL_GetTick>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	46c0      	nop			@ (mov r8, r8)
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b004      	add	sp, #16
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	2000000c 	.word	0x2000000c

08001a98 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <HAL_SuspendTick+0x18>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <HAL_SuspendTick+0x18>)
 8001aa2:	2102      	movs	r1, #2
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	46c0      	nop			@ (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	e000e010 	.word	0xe000e010

08001ab4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <HAL_ResumeTick+0x18>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b03      	ldr	r3, [pc, #12]	@ (8001acc <HAL_ResumeTick+0x18>)
 8001abe:	2102      	movs	r1, #2
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	46c0      	nop			@ (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	e000e010 	.word	0xe000e010

08001ad0 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8001ad4:	4b01      	ldr	r3, [pc, #4]	@ (8001adc <HAL_GetHalVersion+0xc>)
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	010a0700 	.word	0x010a0700

08001ae0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e159      	b.n	8001da6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10a      	bne.n	8001b10 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2250      	movs	r2, #80	@ 0x50
 8001b04:	2100      	movs	r1, #0
 8001b06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f7ff fa50 	bl	8000fb0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b14:	2210      	movs	r2, #16
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b10      	cmp	r3, #16
 8001b1a:	d005      	beq.n	8001b28 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2204      	movs	r2, #4
 8001b24:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001b26:	d00b      	beq.n	8001b40 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2250      	movs	r2, #80	@ 0x50
 8001b38:	2100      	movs	r1, #0
 8001b3a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e132      	b.n	8001da6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b44:	4a9a      	ldr	r2, [pc, #616]	@ (8001db0 <HAL_ADC_Init+0x2d0>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	2202      	movs	r2, #2
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2203      	movs	r2, #3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_ADC_Init+0x90>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_Init+0x90>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_ADC_Init+0x92>
 8001b70:	2300      	movs	r3, #0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d149      	bne.n	8001c0a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	23c0      	movs	r3, #192	@ 0xc0
 8001b7c:	061b      	lsls	r3, r3, #24
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d00b      	beq.n	8001b9a <HAL_ADC_Init+0xba>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	2380      	movs	r3, #128	@ 0x80
 8001b88:	05db      	lsls	r3, r3, #23
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d005      	beq.n	8001b9a <HAL_ADC_Init+0xba>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	2380      	movs	r3, #128	@ 0x80
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d111      	bne.n	8001bbe <HAL_ADC_Init+0xde>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	0892      	lsrs	r2, r2, #2
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6919      	ldr	r1, [r3, #16]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	611a      	str	r2, [r3, #16]
 8001bbc:	e014      	b.n	8001be8 <HAL_ADC_Init+0x108>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0092      	lsls	r2, r2, #2
 8001bca:	0892      	lsrs	r2, r2, #2
 8001bcc:	611a      	str	r2, [r3, #16]
 8001bce:	4b79      	ldr	r3, [pc, #484]	@ (8001db4 <HAL_ADC_Init+0x2d4>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b78      	ldr	r3, [pc, #480]	@ (8001db4 <HAL_ADC_Init+0x2d4>)
 8001bd4:	4978      	ldr	r1, [pc, #480]	@ (8001db8 <HAL_ADC_Init+0x2d8>)
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	4b76      	ldr	r3, [pc, #472]	@ (8001db4 <HAL_ADC_Init+0x2d4>)
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4b74      	ldr	r3, [pc, #464]	@ (8001db4 <HAL_ADC_Init+0x2d4>)
 8001be4:	430a      	orrs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68da      	ldr	r2, [r3, #12]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2118      	movs	r1, #24
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68d9      	ldr	r1, [r3, #12]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001db4 <HAL_ADC_Init+0x2d4>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b69      	ldr	r3, [pc, #420]	@ (8001db4 <HAL_ADC_Init+0x2d4>)
 8001c10:	496a      	ldr	r1, [pc, #424]	@ (8001dbc <HAL_ADC_Init+0x2dc>)
 8001c12:	400a      	ands	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001c16:	4b67      	ldr	r3, [pc, #412]	@ (8001db4 <HAL_ADC_Init+0x2d4>)
 8001c18:	6819      	ldr	r1, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c1e:	065a      	lsls	r2, r3, #25
 8001c20:	4b64      	ldr	r3, [pc, #400]	@ (8001db4 <HAL_ADC_Init+0x2d4>)
 8001c22:	430a      	orrs	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	055b      	lsls	r3, r3, #21
 8001c30:	4013      	ands	r3, r2
 8001c32:	d108      	bne.n	8001c46 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2180      	movs	r1, #128	@ 0x80
 8001c40:	0549      	lsls	r1, r1, #21
 8001c42:	430a      	orrs	r2, r1
 8001c44:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	495b      	ldr	r1, [pc, #364]	@ (8001dc0 <HAL_ADC_Init+0x2e0>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68d9      	ldr	r1, [r3, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_Init+0x18c>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	e000      	b.n	8001c6e <HAL_ADC_Init+0x18e>
 8001c6c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c6e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2020      	movs	r0, #32
 8001c74:	5c1b      	ldrb	r3, [r3, r0]
 8001c76:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c78:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	202c      	movs	r0, #44	@ 0x2c
 8001c7e:	5c1b      	ldrb	r3, [r3, r0]
 8001c80:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c82:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c88:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001c90:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c98:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ca6:	23c2      	movs	r3, #194	@ 0xc2
 8001ca8:	33ff      	adds	r3, #255	@ 0xff
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d00b      	beq.n	8001cc6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68d9      	ldr	r1, [r3, #12]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2221      	movs	r2, #33	@ 0x21
 8001cca:	5c9b      	ldrb	r3, [r3, r2]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d11a      	bne.n	8001d06 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	5c9b      	ldrb	r3, [r3, r2]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2180      	movs	r1, #128	@ 0x80
 8001ce6:	0249      	lsls	r1, r1, #9
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	e00b      	b.n	8001d06 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfe:	2201      	movs	r2, #1
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d11f      	bne.n	8001d4e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	492a      	ldr	r1, [pc, #168]	@ (8001dc4 <HAL_ADC_Init+0x2e4>)
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6919      	ldr	r1, [r3, #16]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001d2c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001d32:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2101      	movs	r1, #1
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	611a      	str	r2, [r3, #16]
 8001d4c:	e00e      	b.n	8001d6c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2201      	movs	r2, #1
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d107      	bne.n	8001d6c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2101      	movs	r1, #1
 8001d68:	438a      	bics	r2, r1
 8001d6a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2107      	movs	r1, #7
 8001d78:	438a      	bics	r2, r1
 8001d7a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6959      	ldr	r1, [r3, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d98:	2203      	movs	r2, #3
 8001d9a:	4393      	bics	r3, r2
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	0018      	movs	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b002      	add	sp, #8
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	fffffefd 	.word	0xfffffefd
 8001db4:	40012708 	.word	0x40012708
 8001db8:	ffc3ffff 	.word	0xffc3ffff
 8001dbc:	fdffffff 	.word	0xfdffffff
 8001dc0:	fffe0219 	.word	0xfffe0219
 8001dc4:	fffffc03 	.word	0xfffffc03

08001dc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2250      	movs	r2, #80	@ 0x50
 8001dd6:	5c9b      	ldrb	r3, [r3, r2]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x18>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e085      	b.n	8001eec <HAL_ADC_ConfigChannel+0x124>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2250      	movs	r2, #80	@ 0x50
 8001de4:	2101      	movs	r1, #1
 8001de6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2204      	movs	r2, #4
 8001df0:	4013      	ands	r3, r2
 8001df2:	d00b      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df8:	2220      	movs	r2, #32
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2250      	movs	r2, #80	@ 0x50
 8001e04:	2100      	movs	r1, #0
 8001e06:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e06f      	b.n	8001eec <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4a38      	ldr	r2, [pc, #224]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x12c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d035      	beq.n	8001e82 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	035b      	lsls	r3, r3, #13
 8001e22:	0b5a      	lsrs	r2, r3, #13
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	02db      	lsls	r3, r3, #11
 8001e34:	4013      	ands	r3, r2
 8001e36:	d009      	beq.n	8001e4c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001e38:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x130>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x130>)
 8001e3e:	2180      	movs	r1, #128	@ 0x80
 8001e40:	0409      	lsls	r1, r1, #16
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001e46:	200a      	movs	r0, #10
 8001e48:	f000 f85e 	bl	8001f08 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2380      	movs	r3, #128	@ 0x80
 8001e52:	029b      	lsls	r3, r3, #10
 8001e54:	4013      	ands	r3, r2
 8001e56:	d006      	beq.n	8001e66 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001e58:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x130>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b26      	ldr	r3, [pc, #152]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x130>)
 8001e5e:	2180      	movs	r1, #128	@ 0x80
 8001e60:	03c9      	lsls	r1, r1, #15
 8001e62:	430a      	orrs	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2380      	movs	r3, #128	@ 0x80
 8001e6c:	025b      	lsls	r3, r3, #9
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d037      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8001e72:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x130>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x130>)
 8001e78:	2180      	movs	r1, #128	@ 0x80
 8001e7a:	0449      	lsls	r1, r1, #17
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e02f      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	035b      	lsls	r3, r3, #13
 8001e8e:	0b5b      	lsrs	r3, r3, #13
 8001e90:	43d9      	mvns	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	400a      	ands	r2, r1
 8001e98:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2380      	movs	r3, #128	@ 0x80
 8001ea0:	02db      	lsls	r3, r3, #11
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d005      	beq.n	8001eb2 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x130>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x130>)
 8001eac:	4913      	ldr	r1, [pc, #76]	@ (8001efc <HAL_ADC_ConfigChannel+0x134>)
 8001eae:	400a      	ands	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	2380      	movs	r3, #128	@ 0x80
 8001eb8:	029b      	lsls	r3, r3, #10
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d005      	beq.n	8001eca <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x130>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x130>)
 8001ec4:	490e      	ldr	r1, [pc, #56]	@ (8001f00 <HAL_ADC_ConfigChannel+0x138>)
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	@ 0x80
 8001ed0:	025b      	lsls	r3, r3, #9
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d005      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x130>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b07      	ldr	r3, [pc, #28]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x130>)
 8001edc:	4909      	ldr	r1, [pc, #36]	@ (8001f04 <HAL_ADC_ConfigChannel+0x13c>)
 8001ede:	400a      	ands	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2250      	movs	r2, #80	@ 0x50
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b002      	add	sp, #8
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	00001001 	.word	0x00001001
 8001ef8:	40012708 	.word	0x40012708
 8001efc:	ff7fffff 	.word	0xff7fffff
 8001f00:	ffbfffff 	.word	0xffbfffff
 8001f04:	feffffff 	.word	0xfeffffff

08001f08 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001f10:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <ADC_DelayMicroSecond+0x38>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	490b      	ldr	r1, [pc, #44]	@ (8001f44 <ADC_DelayMicroSecond+0x3c>)
 8001f16:	0018      	movs	r0, r3
 8001f18:	f7fe f8f6 	bl	8000108 <__udivsi3>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	001a      	movs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4353      	muls	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001f26:	e002      	b.n	8001f2e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f9      	bne.n	8001f28 <ADC_DelayMicroSecond+0x20>
  }
}
 8001f34:	46c0      	nop			@ (mov r8, r8)
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b004      	add	sp, #16
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	20000004 	.word	0x20000004
 8001f44:	000f4240 	.word	0x000f4240

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	0002      	movs	r2, r0
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	1dfb      	adds	r3, r7, #7
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f5a:	d809      	bhi.n	8001f70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5c:	1dfb      	adds	r3, r7, #7
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	001a      	movs	r2, r3
 8001f62:	231f      	movs	r3, #31
 8001f64:	401a      	ands	r2, r3
 8001f66:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <__NVIC_EnableIRQ+0x30>)
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4091      	lsls	r1, r2
 8001f6c:	000a      	movs	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
  }
}
 8001f70:	46c0      	nop			@ (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	0002      	movs	r2, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	1dfb      	adds	r3, r7, #7
 8001f88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f90:	d828      	bhi.n	8001fe4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f92:	4a2f      	ldr	r2, [pc, #188]	@ (8002050 <__NVIC_SetPriority+0xd4>)
 8001f94:	1dfb      	adds	r3, r7, #7
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	33c0      	adds	r3, #192	@ 0xc0
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	589b      	ldr	r3, [r3, r2]
 8001fa2:	1dfa      	adds	r2, r7, #7
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	0011      	movs	r1, r2
 8001fa8:	2203      	movs	r2, #3
 8001faa:	400a      	ands	r2, r1
 8001fac:	00d2      	lsls	r2, r2, #3
 8001fae:	21ff      	movs	r1, #255	@ 0xff
 8001fb0:	4091      	lsls	r1, r2
 8001fb2:	000a      	movs	r2, r1
 8001fb4:	43d2      	mvns	r2, r2
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	019b      	lsls	r3, r3, #6
 8001fbe:	22ff      	movs	r2, #255	@ 0xff
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	2303      	movs	r3, #3
 8001fca:	4003      	ands	r3, r0
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd0:	481f      	ldr	r0, [pc, #124]	@ (8002050 <__NVIC_SetPriority+0xd4>)
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b25b      	sxtb	r3, r3
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	33c0      	adds	r3, #192	@ 0xc0
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fe2:	e031      	b.n	8002048 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8002054 <__NVIC_SetPriority+0xd8>)
 8001fe6:	1dfb      	adds	r3, r7, #7
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	0019      	movs	r1, r3
 8001fec:	230f      	movs	r3, #15
 8001fee:	400b      	ands	r3, r1
 8001ff0:	3b08      	subs	r3, #8
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3306      	adds	r3, #6
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	18d3      	adds	r3, r2, r3
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	1dfa      	adds	r2, r7, #7
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	0011      	movs	r1, r2
 8002004:	2203      	movs	r2, #3
 8002006:	400a      	ands	r2, r1
 8002008:	00d2      	lsls	r2, r2, #3
 800200a:	21ff      	movs	r1, #255	@ 0xff
 800200c:	4091      	lsls	r1, r2
 800200e:	000a      	movs	r2, r1
 8002010:	43d2      	mvns	r2, r2
 8002012:	401a      	ands	r2, r3
 8002014:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	22ff      	movs	r2, #255	@ 0xff
 800201c:	401a      	ands	r2, r3
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	0018      	movs	r0, r3
 8002024:	2303      	movs	r3, #3
 8002026:	4003      	ands	r3, r0
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800202c:	4809      	ldr	r0, [pc, #36]	@ (8002054 <__NVIC_SetPriority+0xd8>)
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	001c      	movs	r4, r3
 8002034:	230f      	movs	r3, #15
 8002036:	4023      	ands	r3, r4
 8002038:	3b08      	subs	r3, #8
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	430a      	orrs	r2, r1
 800203e:	3306      	adds	r3, #6
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	18c3      	adds	r3, r0, r3
 8002044:	3304      	adds	r3, #4
 8002046:	601a      	str	r2, [r3, #0]
}
 8002048:	46c0      	nop			@ (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b003      	add	sp, #12
 800204e:	bd90      	pop	{r4, r7, pc}
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800205c:	f3bf 8f4f 	dsb	sy
}
 8002060:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002062:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <__NVIC_SystemReset+0x1c>)
 8002064:	4a04      	ldr	r2, [pc, #16]	@ (8002078 <__NVIC_SystemReset+0x20>)
 8002066:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002068:	f3bf 8f4f 	dsb	sy
}
 800206c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	e7fd      	b.n	800206e <__NVIC_SystemReset+0x16>
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	e000ed00 	.word	0xe000ed00
 8002078:	05fa0004 	.word	0x05fa0004

0800207c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	1e5a      	subs	r2, r3, #1
 8002088:	2380      	movs	r3, #128	@ 0x80
 800208a:	045b      	lsls	r3, r3, #17
 800208c:	429a      	cmp	r2, r3
 800208e:	d301      	bcc.n	8002094 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002090:	2301      	movs	r3, #1
 8002092:	e010      	b.n	80020b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002094:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <SysTick_Config+0x44>)
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	3a01      	subs	r2, #1
 800209a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209c:	2301      	movs	r3, #1
 800209e:	425b      	negs	r3, r3
 80020a0:	2103      	movs	r1, #3
 80020a2:	0018      	movs	r0, r3
 80020a4:	f7ff ff6a 	bl	8001f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <SysTick_Config+0x44>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ae:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <SysTick_Config+0x44>)
 80020b0:	2207      	movs	r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	0018      	movs	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	e000e010 	.word	0xe000e010

080020c4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	210f      	movs	r1, #15
 80020d0:	187b      	adds	r3, r7, r1
 80020d2:	1c02      	adds	r2, r0, #0
 80020d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	187b      	adds	r3, r7, r1
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	0011      	movs	r1, r2
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7ff ff4b 	bl	8001f7c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b004      	add	sp, #16
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	0002      	movs	r2, r0
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fa:	1dfb      	adds	r3, r7, #7
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	b25b      	sxtb	r3, r3
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff ff21 	bl	8001f48 <__NVIC_EnableIRQ>
}
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b002      	add	sp, #8
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002112:	f7ff ffa1 	bl	8002058 <__NVIC_SystemReset>

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	0018      	movs	r0, r3
 8002122:	f7ff ffab 	bl	800207c <SysTick_Config>
 8002126:	0003      	movs	r3, r0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b002      	add	sp, #8
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002146:	e155      	b.n	80023f4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2101      	movs	r1, #1
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4091      	lsls	r1, r2
 8002152:	000a      	movs	r2, r1
 8002154:	4013      	ands	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d100      	bne.n	8002160 <HAL_GPIO_Init+0x30>
 800215e:	e146      	b.n	80023ee <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2203      	movs	r2, #3
 8002166:	4013      	ands	r3, r2
 8002168:	2b01      	cmp	r3, #1
 800216a:	d005      	beq.n	8002178 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2203      	movs	r2, #3
 8002172:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002174:	2b02      	cmp	r3, #2
 8002176:	d130      	bne.n	80021da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2203      	movs	r2, #3
 8002184:	409a      	lsls	r2, r3
 8002186:	0013      	movs	r3, r2
 8002188:	43da      	mvns	r2, r3
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	409a      	lsls	r2, r3
 800219a:	0013      	movs	r3, r2
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ae:	2201      	movs	r2, #1
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
 80021b4:	0013      	movs	r3, r2
 80021b6:	43da      	mvns	r2, r3
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4013      	ands	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	2201      	movs	r2, #1
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
 80021cc:	0013      	movs	r3, r2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2203      	movs	r2, #3
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d017      	beq.n	8002216 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	2203      	movs	r2, #3
 80021f2:	409a      	lsls	r2, r3
 80021f4:	0013      	movs	r3, r2
 80021f6:	43da      	mvns	r2, r3
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	409a      	lsls	r2, r3
 8002208:	0013      	movs	r3, r2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2203      	movs	r2, #3
 800221c:	4013      	ands	r3, r2
 800221e:	2b02      	cmp	r3, #2
 8002220:	d123      	bne.n	800226a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	08da      	lsrs	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3208      	adds	r2, #8
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	58d3      	ldr	r3, [r2, r3]
 800222e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2207      	movs	r2, #7
 8002234:	4013      	ands	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	220f      	movs	r2, #15
 800223a:	409a      	lsls	r2, r3
 800223c:	0013      	movs	r3, r2
 800223e:	43da      	mvns	r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2107      	movs	r1, #7
 800224e:	400b      	ands	r3, r1
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	409a      	lsls	r2, r3
 8002254:	0013      	movs	r3, r2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	08da      	lsrs	r2, r3, #3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3208      	adds	r2, #8
 8002264:	0092      	lsls	r2, r2, #2
 8002266:	6939      	ldr	r1, [r7, #16]
 8002268:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	2203      	movs	r2, #3
 8002276:	409a      	lsls	r2, r3
 8002278:	0013      	movs	r3, r2
 800227a:	43da      	mvns	r2, r3
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2203      	movs	r2, #3
 8002288:	401a      	ands	r2, r3
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	409a      	lsls	r2, r3
 8002290:	0013      	movs	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	23c0      	movs	r3, #192	@ 0xc0
 80022a4:	029b      	lsls	r3, r3, #10
 80022a6:	4013      	ands	r3, r2
 80022a8:	d100      	bne.n	80022ac <HAL_GPIO_Init+0x17c>
 80022aa:	e0a0      	b.n	80023ee <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ac:	4b57      	ldr	r3, [pc, #348]	@ (800240c <HAL_GPIO_Init+0x2dc>)
 80022ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022b0:	4b56      	ldr	r3, [pc, #344]	@ (800240c <HAL_GPIO_Init+0x2dc>)
 80022b2:	2101      	movs	r1, #1
 80022b4:	430a      	orrs	r2, r1
 80022b6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b8:	4a55      	ldr	r2, [pc, #340]	@ (8002410 <HAL_GPIO_Init+0x2e0>)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	3302      	adds	r3, #2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	589b      	ldr	r3, [r3, r2]
 80022c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2203      	movs	r2, #3
 80022ca:	4013      	ands	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	220f      	movs	r2, #15
 80022d0:	409a      	lsls	r2, r3
 80022d2:	0013      	movs	r3, r2
 80022d4:	43da      	mvns	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	23a0      	movs	r3, #160	@ 0xa0
 80022e0:	05db      	lsls	r3, r3, #23
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d01f      	beq.n	8002326 <HAL_GPIO_Init+0x1f6>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002414 <HAL_GPIO_Init+0x2e4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d019      	beq.n	8002322 <HAL_GPIO_Init+0x1f2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a49      	ldr	r2, [pc, #292]	@ (8002418 <HAL_GPIO_Init+0x2e8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_GPIO_Init+0x1ee>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a48      	ldr	r2, [pc, #288]	@ (800241c <HAL_GPIO_Init+0x2ec>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00d      	beq.n	800231a <HAL_GPIO_Init+0x1ea>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a47      	ldr	r2, [pc, #284]	@ (8002420 <HAL_GPIO_Init+0x2f0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <HAL_GPIO_Init+0x1e6>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a46      	ldr	r2, [pc, #280]	@ (8002424 <HAL_GPIO_Init+0x2f4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_GPIO_Init+0x1e2>
 800230e:	2305      	movs	r3, #5
 8002310:	e00a      	b.n	8002328 <HAL_GPIO_Init+0x1f8>
 8002312:	2306      	movs	r3, #6
 8002314:	e008      	b.n	8002328 <HAL_GPIO_Init+0x1f8>
 8002316:	2304      	movs	r3, #4
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x1f8>
 800231a:	2303      	movs	r3, #3
 800231c:	e004      	b.n	8002328 <HAL_GPIO_Init+0x1f8>
 800231e:	2302      	movs	r3, #2
 8002320:	e002      	b.n	8002328 <HAL_GPIO_Init+0x1f8>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_GPIO_Init+0x1f8>
 8002326:	2300      	movs	r3, #0
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	2103      	movs	r1, #3
 800232c:	400a      	ands	r2, r1
 800232e:	0092      	lsls	r2, r2, #2
 8002330:	4093      	lsls	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002338:	4935      	ldr	r1, [pc, #212]	@ (8002410 <HAL_GPIO_Init+0x2e0>)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	089b      	lsrs	r3, r3, #2
 800233e:	3302      	adds	r3, #2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002346:	4b38      	ldr	r3, [pc, #224]	@ (8002428 <HAL_GPIO_Init+0x2f8>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	43da      	mvns	r2, r3
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	035b      	lsls	r3, r3, #13
 800235e:	4013      	ands	r3, r2
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800236a:	4b2f      	ldr	r3, [pc, #188]	@ (8002428 <HAL_GPIO_Init+0x2f8>)
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002370:	4b2d      	ldr	r3, [pc, #180]	@ (8002428 <HAL_GPIO_Init+0x2f8>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43da      	mvns	r2, r3
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	2380      	movs	r3, #128	@ 0x80
 8002386:	039b      	lsls	r3, r3, #14
 8002388:	4013      	ands	r3, r2
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002394:	4b24      	ldr	r3, [pc, #144]	@ (8002428 <HAL_GPIO_Init+0x2f8>)
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800239a:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <HAL_GPIO_Init+0x2f8>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	43da      	mvns	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	2380      	movs	r3, #128	@ 0x80
 80023b0:	029b      	lsls	r3, r3, #10
 80023b2:	4013      	ands	r3, r2
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023be:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <HAL_GPIO_Init+0x2f8>)
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c4:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <HAL_GPIO_Init+0x2f8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43da      	mvns	r2, r3
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	025b      	lsls	r3, r3, #9
 80023dc:	4013      	ands	r3, r2
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <HAL_GPIO_Init+0x2f8>)
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3301      	adds	r3, #1
 80023f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	40da      	lsrs	r2, r3
 80023fc:	1e13      	subs	r3, r2, #0
 80023fe:	d000      	beq.n	8002402 <HAL_GPIO_Init+0x2d2>
 8002400:	e6a2      	b.n	8002148 <HAL_GPIO_Init+0x18>
  }
}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	46c0      	nop			@ (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b006      	add	sp, #24
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	40010000 	.word	0x40010000
 8002414:	50000400 	.word	0x50000400
 8002418:	50000800 	.word	0x50000800
 800241c:	50000c00 	.word	0x50000c00
 8002420:	50001000 	.word	0x50001000
 8002424:	50001c00 	.word	0x50001c00
 8002428:	40010400 	.word	0x40010400

0800242c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	0008      	movs	r0, r1
 8002436:	0011      	movs	r1, r2
 8002438:	1cbb      	adds	r3, r7, #2
 800243a:	1c02      	adds	r2, r0, #0
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	1c7b      	adds	r3, r7, #1
 8002440:	1c0a      	adds	r2, r1, #0
 8002442:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002444:	1c7b      	adds	r3, r7, #1
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d004      	beq.n	8002456 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244c:	1cbb      	adds	r3, r7, #2
 800244e:	881a      	ldrh	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002454:	e003      	b.n	800245e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002456:	1cbb      	adds	r3, r7, #2
 8002458:	881a      	ldrh	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b002      	add	sp, #8
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e08f      	b.n	800259a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2241      	movs	r2, #65	@ 0x41
 800247e:	5c9b      	ldrb	r3, [r3, r2]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d107      	bne.n	8002496 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2240      	movs	r2, #64	@ 0x40
 800248a:	2100      	movs	r1, #0
 800248c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	0018      	movs	r0, r3
 8002492:	f7fe fdc9 	bl	8001028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2241      	movs	r2, #65	@ 0x41
 800249a:	2124      	movs	r1, #36	@ 0x24
 800249c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2101      	movs	r1, #1
 80024aa:	438a      	bics	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	493b      	ldr	r1, [pc, #236]	@ (80025a4 <HAL_I2C_Init+0x13c>)
 80024b8:	400a      	ands	r2, r1
 80024ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4938      	ldr	r1, [pc, #224]	@ (80025a8 <HAL_I2C_Init+0x140>)
 80024c8:	400a      	ands	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d108      	bne.n	80024e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2180      	movs	r1, #128	@ 0x80
 80024de:	0209      	lsls	r1, r1, #8
 80024e0:	430a      	orrs	r2, r1
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	e007      	b.n	80024f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2184      	movs	r1, #132	@ 0x84
 80024f0:	0209      	lsls	r1, r1, #8
 80024f2:	430a      	orrs	r2, r1
 80024f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d109      	bne.n	8002512 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2180      	movs	r1, #128	@ 0x80
 800250a:	0109      	lsls	r1, r1, #4
 800250c:	430a      	orrs	r2, r1
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	e007      	b.n	8002522 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4923      	ldr	r1, [pc, #140]	@ (80025ac <HAL_I2C_Init+0x144>)
 800251e:	400a      	ands	r2, r1
 8002520:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4920      	ldr	r1, [pc, #128]	@ (80025b0 <HAL_I2C_Init+0x148>)
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	491a      	ldr	r1, [pc, #104]	@ (80025a8 <HAL_I2C_Init+0x140>)
 800253e:	400a      	ands	r2, r1
 8002540:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	431a      	orrs	r2, r3
 800254c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69d9      	ldr	r1, [r3, #28]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1a      	ldr	r2, [r3, #32]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2101      	movs	r1, #1
 8002578:	430a      	orrs	r2, r1
 800257a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2241      	movs	r2, #65	@ 0x41
 8002586:	2120      	movs	r1, #32
 8002588:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2242      	movs	r2, #66	@ 0x42
 8002594:	2100      	movs	r1, #0
 8002596:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b002      	add	sp, #8
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	f0ffffff 	.word	0xf0ffffff
 80025a8:	ffff7fff 	.word	0xffff7fff
 80025ac:	fffff7ff 	.word	0xfffff7ff
 80025b0:	02008000 	.word	0x02008000

080025b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b089      	sub	sp, #36	@ 0x24
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	0008      	movs	r0, r1
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	0019      	movs	r1, r3
 80025c2:	230a      	movs	r3, #10
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	1c02      	adds	r2, r0, #0
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	2308      	movs	r3, #8
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	1c0a      	adds	r2, r1, #0
 80025d0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2241      	movs	r2, #65	@ 0x41
 80025d6:	5c9b      	ldrb	r3, [r3, r2]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d000      	beq.n	80025e0 <HAL_I2C_Master_Transmit+0x2c>
 80025de:	e10a      	b.n	80027f6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2240      	movs	r2, #64	@ 0x40
 80025e4:	5c9b      	ldrb	r3, [r3, r2]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_I2C_Master_Transmit+0x3a>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e104      	b.n	80027f8 <HAL_I2C_Master_Transmit+0x244>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2240      	movs	r2, #64	@ 0x40
 80025f2:	2101      	movs	r1, #1
 80025f4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025f6:	f7ff fa21 	bl	8001a3c <HAL_GetTick>
 80025fa:	0003      	movs	r3, r0
 80025fc:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025fe:	2380      	movs	r3, #128	@ 0x80
 8002600:	0219      	lsls	r1, r3, #8
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2319      	movs	r3, #25
 800260a:	2201      	movs	r2, #1
 800260c:	f000 fb22 	bl	8002c54 <I2C_WaitOnFlagUntilTimeout>
 8002610:	1e03      	subs	r3, r0, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0ef      	b.n	80027f8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2241      	movs	r2, #65	@ 0x41
 800261c:	2121      	movs	r1, #33	@ 0x21
 800261e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2242      	movs	r2, #66	@ 0x42
 8002624:	2110      	movs	r1, #16
 8002626:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2208      	movs	r2, #8
 8002638:	18ba      	adds	r2, r7, r2
 800263a:	8812      	ldrh	r2, [r2, #0]
 800263c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	2bff      	cmp	r3, #255	@ 0xff
 800264c:	d906      	bls.n	800265c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	22ff      	movs	r2, #255	@ 0xff
 8002652:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	045b      	lsls	r3, r3, #17
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e007      	b.n	800266c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	049b      	lsls	r3, r3, #18
 800266a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	d027      	beq.n	80026c4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	3301      	adds	r3, #1
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	697c      	ldr	r4, [r7, #20]
 80026b0:	230a      	movs	r3, #10
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	8819      	ldrh	r1, [r3, #0]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	4b51      	ldr	r3, [pc, #324]	@ (8002800 <HAL_I2C_Master_Transmit+0x24c>)
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	0023      	movs	r3, r4
 80026be:	f000 fd41 	bl	8003144 <I2C_TransferConfig>
 80026c2:	e06f      	b.n	80027a4 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	697c      	ldr	r4, [r7, #20]
 80026cc:	230a      	movs	r3, #10
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	8819      	ldrh	r1, [r3, #0]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002800 <HAL_I2C_Master_Transmit+0x24c>)
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	0023      	movs	r3, r4
 80026da:	f000 fd33 	bl	8003144 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80026de:	e061      	b.n	80027a4 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 fb0c 	bl	8002d04 <I2C_WaitOnTXISFlagUntilTimeout>
 80026ec:	1e03      	subs	r3, r0, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e081      	b.n	80027f8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d03a      	beq.n	80027a4 <HAL_I2C_Master_Transmit+0x1f0>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002732:	2b00      	cmp	r3, #0
 8002734:	d136      	bne.n	80027a4 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002736:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	0013      	movs	r3, r2
 8002740:	2200      	movs	r2, #0
 8002742:	2180      	movs	r1, #128	@ 0x80
 8002744:	f000 fa86 	bl	8002c54 <I2C_WaitOnFlagUntilTimeout>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d001      	beq.n	8002750 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e053      	b.n	80027f8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	2bff      	cmp	r3, #255	@ 0xff
 8002758:	d911      	bls.n	800277e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	22ff      	movs	r2, #255	@ 0xff
 800275e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002764:	b2da      	uxtb	r2, r3
 8002766:	2380      	movs	r3, #128	@ 0x80
 8002768:	045c      	lsls	r4, r3, #17
 800276a:	230a      	movs	r3, #10
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	8819      	ldrh	r1, [r3, #0]
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	2300      	movs	r3, #0
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	0023      	movs	r3, r4
 8002778:	f000 fce4 	bl	8003144 <I2C_TransferConfig>
 800277c:	e012      	b.n	80027a4 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278c:	b2da      	uxtb	r2, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	049c      	lsls	r4, r3, #18
 8002792:	230a      	movs	r3, #10
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	8819      	ldrh	r1, [r3, #0]
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	2300      	movs	r3, #0
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	0023      	movs	r3, r4
 80027a0:	f000 fcd0 	bl	8003144 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d198      	bne.n	80026e0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f000 faeb 	bl	8002d90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e01a      	b.n	80027f8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2220      	movs	r2, #32
 80027c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	490b      	ldr	r1, [pc, #44]	@ (8002804 <HAL_I2C_Master_Transmit+0x250>)
 80027d6:	400a      	ands	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2241      	movs	r2, #65	@ 0x41
 80027de:	2120      	movs	r1, #32
 80027e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2242      	movs	r2, #66	@ 0x42
 80027e6:	2100      	movs	r1, #0
 80027e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2240      	movs	r2, #64	@ 0x40
 80027ee:	2100      	movs	r1, #0
 80027f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e000      	b.n	80027f8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
  }
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b007      	add	sp, #28
 80027fe:	bd90      	pop	{r4, r7, pc}
 8002800:	80002000 	.word	0x80002000
 8002804:	fe00e800 	.word	0xfe00e800

08002808 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b089      	sub	sp, #36	@ 0x24
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	0008      	movs	r0, r1
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	0019      	movs	r1, r3
 8002816:	230a      	movs	r3, #10
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	1c02      	adds	r2, r0, #0
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	2308      	movs	r3, #8
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	1c0a      	adds	r2, r1, #0
 8002824:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2241      	movs	r2, #65	@ 0x41
 800282a:	5c9b      	ldrb	r3, [r3, r2]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b20      	cmp	r3, #32
 8002830:	d000      	beq.n	8002834 <HAL_I2C_Master_Receive+0x2c>
 8002832:	e0e8      	b.n	8002a06 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2240      	movs	r2, #64	@ 0x40
 8002838:	5c9b      	ldrb	r3, [r3, r2]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_I2C_Master_Receive+0x3a>
 800283e:	2302      	movs	r3, #2
 8002840:	e0e2      	b.n	8002a08 <HAL_I2C_Master_Receive+0x200>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2240      	movs	r2, #64	@ 0x40
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800284a:	f7ff f8f7 	bl	8001a3c <HAL_GetTick>
 800284e:	0003      	movs	r3, r0
 8002850:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002852:	2380      	movs	r3, #128	@ 0x80
 8002854:	0219      	lsls	r1, r3, #8
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2319      	movs	r3, #25
 800285e:	2201      	movs	r2, #1
 8002860:	f000 f9f8 	bl	8002c54 <I2C_WaitOnFlagUntilTimeout>
 8002864:	1e03      	subs	r3, r0, #0
 8002866:	d001      	beq.n	800286c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0cd      	b.n	8002a08 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2241      	movs	r2, #65	@ 0x41
 8002870:	2122      	movs	r1, #34	@ 0x22
 8002872:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2242      	movs	r2, #66	@ 0x42
 8002878:	2110      	movs	r1, #16
 800287a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2208      	movs	r2, #8
 800288c:	18ba      	adds	r2, r7, r2
 800288e:	8812      	ldrh	r2, [r2, #0]
 8002890:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	2bff      	cmp	r3, #255	@ 0xff
 80028a0:	d911      	bls.n	80028c6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	2380      	movs	r3, #128	@ 0x80
 80028b0:	045c      	lsls	r4, r3, #17
 80028b2:	230a      	movs	r3, #10
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	8819      	ldrh	r1, [r3, #0]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	4b55      	ldr	r3, [pc, #340]	@ (8002a10 <HAL_I2C_Master_Receive+0x208>)
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	0023      	movs	r3, r4
 80028c0:	f000 fc40 	bl	8003144 <I2C_TransferConfig>
 80028c4:	e076      	b.n	80029b4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	049c      	lsls	r4, r3, #18
 80028da:	230a      	movs	r3, #10
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	8819      	ldrh	r1, [r3, #0]
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002a10 <HAL_I2C_Master_Receive+0x208>)
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	0023      	movs	r3, r4
 80028e8:	f000 fc2c 	bl	8003144 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80028ec:	e062      	b.n	80029b4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 fa8f 	bl	8002e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028fa:	1e03      	subs	r3, r0, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e082      	b.n	8002a08 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d03a      	beq.n	80029b4 <HAL_I2C_Master_Receive+0x1ac>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	d136      	bne.n	80029b4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002946:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	0013      	movs	r3, r2
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	@ 0x80
 8002954:	f000 f97e 	bl	8002c54 <I2C_WaitOnFlagUntilTimeout>
 8002958:	1e03      	subs	r3, r0, #0
 800295a:	d001      	beq.n	8002960 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e053      	b.n	8002a08 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	2bff      	cmp	r3, #255	@ 0xff
 8002968:	d911      	bls.n	800298e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	22ff      	movs	r2, #255	@ 0xff
 800296e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002974:	b2da      	uxtb	r2, r3
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	045c      	lsls	r4, r3, #17
 800297a:	230a      	movs	r3, #10
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	8819      	ldrh	r1, [r3, #0]
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	2300      	movs	r3, #0
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	0023      	movs	r3, r4
 8002988:	f000 fbdc 	bl	8003144 <I2C_TransferConfig>
 800298c:	e012      	b.n	80029b4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299c:	b2da      	uxtb	r2, r3
 800299e:	2380      	movs	r3, #128	@ 0x80
 80029a0:	049c      	lsls	r4, r3, #18
 80029a2:	230a      	movs	r3, #10
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	8819      	ldrh	r1, [r3, #0]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	2300      	movs	r3, #0
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	0023      	movs	r3, r4
 80029b0:	f000 fbc8 	bl	8003144 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d197      	bne.n	80028ee <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	0018      	movs	r0, r3
 80029c6:	f000 f9e3 	bl	8002d90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029ca:	1e03      	subs	r3, r0, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e01a      	b.n	8002a08 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2220      	movs	r2, #32
 80029d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	490b      	ldr	r1, [pc, #44]	@ (8002a14 <HAL_I2C_Master_Receive+0x20c>)
 80029e6:	400a      	ands	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2241      	movs	r2, #65	@ 0x41
 80029ee:	2120      	movs	r1, #32
 80029f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2242      	movs	r2, #66	@ 0x42
 80029f6:	2100      	movs	r1, #0
 80029f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2240      	movs	r2, #64	@ 0x40
 80029fe:	2100      	movs	r1, #0
 8002a00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e000      	b.n	8002a08 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
  }
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b007      	add	sp, #28
 8002a0e:	bd90      	pop	{r4, r7, pc}
 8002a10:	80002400 	.word	0x80002400
 8002a14:	fe00e800 	.word	0xfe00e800

08002a18 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	@ 0x28
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	230a      	movs	r3, #10
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	1c0a      	adds	r2, r1, #0
 8002a2a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2241      	movs	r2, #65	@ 0x41
 8002a34:	5c9b      	ldrb	r3, [r3, r2]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d000      	beq.n	8002a3e <HAL_I2C_IsDeviceReady+0x26>
 8002a3c:	e0df      	b.n	8002bfe <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	2380      	movs	r3, #128	@ 0x80
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	401a      	ands	r2, r3
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d101      	bne.n	8002a56 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002a52:	2302      	movs	r3, #2
 8002a54:	e0d4      	b.n	8002c00 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2240      	movs	r2, #64	@ 0x40
 8002a5a:	5c9b      	ldrb	r3, [r3, r2]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_I2C_IsDeviceReady+0x4c>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e0cd      	b.n	8002c00 <HAL_I2C_IsDeviceReady+0x1e8>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2240      	movs	r2, #64	@ 0x40
 8002a68:	2101      	movs	r1, #1
 8002a6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2241      	movs	r2, #65	@ 0x41
 8002a70:	2124      	movs	r1, #36	@ 0x24
 8002a72:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <HAL_I2C_IsDeviceReady+0x7a>
 8002a82:	230a      	movs	r3, #10
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	059b      	lsls	r3, r3, #22
 8002a8a:	0d9b      	lsrs	r3, r3, #22
 8002a8c:	4a5e      	ldr	r2, [pc, #376]	@ (8002c08 <HAL_I2C_IsDeviceReady+0x1f0>)
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	e006      	b.n	8002aa0 <HAL_I2C_IsDeviceReady+0x88>
 8002a92:	230a      	movs	r3, #10
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	059b      	lsls	r3, r3, #22
 8002a9a:	0d9b      	lsrs	r3, r3, #22
 8002a9c:	4a5b      	ldr	r2, [pc, #364]	@ (8002c0c <HAL_I2C_IsDeviceReady+0x1f4>)
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002aa6:	f7fe ffc9 	bl	8001a3c <HAL_GetTick>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	3b20      	subs	r3, #32
 8002aba:	425a      	negs	r2, r3
 8002abc:	4153      	adcs	r3, r2
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	231f      	movs	r3, #31
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2210      	movs	r2, #16
 8002ace:	4013      	ands	r3, r2
 8002ad0:	3b10      	subs	r3, #16
 8002ad2:	425a      	negs	r2, r3
 8002ad4:	4153      	adcs	r3, r2
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	231e      	movs	r3, #30
 8002ada:	18fb      	adds	r3, r7, r3
 8002adc:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002ade:	e035      	b.n	8002b4c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	d01a      	beq.n	8002b1c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ae6:	f7fe ffa9 	bl	8001a3c <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d302      	bcc.n	8002afc <HAL_I2C_IsDeviceReady+0xe4>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10f      	bne.n	8002b1c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2241      	movs	r2, #65	@ 0x41
 8002b00:	2120      	movs	r1, #32
 8002b02:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b08:	2220      	movs	r2, #32
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2240      	movs	r2, #64	@ 0x40
 8002b14:	2100      	movs	r1, #0
 8002b16:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e071      	b.n	8002c00 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2220      	movs	r2, #32
 8002b24:	4013      	ands	r3, r2
 8002b26:	3b20      	subs	r3, #32
 8002b28:	425a      	negs	r2, r3
 8002b2a:	4153      	adcs	r3, r2
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	231f      	movs	r3, #31
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2210      	movs	r2, #16
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	3b10      	subs	r3, #16
 8002b40:	425a      	negs	r2, r3
 8002b42:	4153      	adcs	r3, r2
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	231e      	movs	r3, #30
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b4c:	231f      	movs	r3, #31
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d104      	bne.n	8002b60 <HAL_I2C_IsDeviceReady+0x148>
 8002b56:	231e      	movs	r3, #30
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0bf      	beq.n	8002ae0 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2210      	movs	r2, #16
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d01a      	beq.n	8002ba4 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	0013      	movs	r3, r2
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2120      	movs	r1, #32
 8002b7c:	f000 f86a 	bl	8002c54 <I2C_WaitOnFlagUntilTimeout>
 8002b80:	1e03      	subs	r3, r0, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e03b      	b.n	8002c00 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2241      	movs	r2, #65	@ 0x41
 8002b94:	2120      	movs	r1, #32
 8002b96:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2240      	movs	r2, #64	@ 0x40
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e02d      	b.n	8002c00 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	0013      	movs	r3, r2
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2120      	movs	r1, #32
 8002bb2:	f000 f84f 	bl	8002c54 <I2C_WaitOnFlagUntilTimeout>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e020      	b.n	8002c00 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d900      	bls.n	8002bde <HAL_I2C_IsDeviceReady+0x1c6>
 8002bdc:	e74d      	b.n	8002a7a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2241      	movs	r2, #65	@ 0x41
 8002be2:	2120      	movs	r1, #32
 8002be4:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	2220      	movs	r2, #32
 8002bec:	431a      	orrs	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2240      	movs	r2, #64	@ 0x40
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8002bfe:	2302      	movs	r3, #2
  }
}
 8002c00:	0018      	movs	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b008      	add	sp, #32
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	02002000 	.word	0x02002000
 8002c0c:	02002800 	.word	0x02002800

08002c10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d103      	bne.n	8002c2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	2201      	movs	r2, #1
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d007      	beq.n	8002c4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2101      	movs	r1, #1
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	619a      	str	r2, [r3, #24]
  }
}
 8002c4c:	46c0      	nop			@ (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	1dfb      	adds	r3, r7, #7
 8002c62:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c64:	e03a      	b.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	6839      	ldr	r1, [r7, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 f971 	bl	8002f54 <I2C_IsErrorOccurred>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d001      	beq.n	8002c7a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e040      	b.n	8002cfc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	d02d      	beq.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c80:	f7fe fedc 	bl	8001a3c <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d302      	bcc.n	8002c96 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d122      	bne.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	425a      	negs	r2, r3
 8002ca6:	4153      	adcs	r3, r2
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	001a      	movs	r2, r3
 8002cac:	1dfb      	adds	r3, r7, #7
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d113      	bne.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb8:	2220      	movs	r2, #32
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2241      	movs	r2, #65	@ 0x41
 8002cc4:	2120      	movs	r1, #32
 8002cc6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2242      	movs	r2, #66	@ 0x42
 8002ccc:	2100      	movs	r1, #0
 8002cce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2240      	movs	r2, #64	@ 0x40
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e00f      	b.n	8002cfc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	425a      	negs	r2, r3
 8002cec:	4153      	adcs	r3, r2
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	001a      	movs	r2, r3
 8002cf2:	1dfb      	adds	r3, r7, #7
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d0b5      	beq.n	8002c66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b004      	add	sp, #16
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d10:	e032      	b.n	8002d78 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f000 f91b 	bl	8002f54 <I2C_IsErrorOccurred>
 8002d1e:	1e03      	subs	r3, r0, #0
 8002d20:	d001      	beq.n	8002d26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e030      	b.n	8002d88 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	d025      	beq.n	8002d78 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2c:	f7fe fe86 	bl	8001a3c <HAL_GetTick>
 8002d30:	0002      	movs	r2, r0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d302      	bcc.n	8002d42 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d11a      	bne.n	8002d78 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d013      	beq.n	8002d78 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d54:	2220      	movs	r2, #32
 8002d56:	431a      	orrs	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2241      	movs	r2, #65	@ 0x41
 8002d60:	2120      	movs	r1, #32
 8002d62:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2242      	movs	r2, #66	@ 0x42
 8002d68:	2100      	movs	r1, #0
 8002d6a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2240      	movs	r2, #64	@ 0x40
 8002d70:	2100      	movs	r1, #0
 8002d72:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e007      	b.n	8002d88 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d1c5      	bne.n	8002d12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b004      	add	sp, #16
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d9c:	e02f      	b.n	8002dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	0018      	movs	r0, r3
 8002da6:	f000 f8d5 	bl	8002f54 <I2C_IsErrorOccurred>
 8002daa:	1e03      	subs	r3, r0, #0
 8002dac:	d001      	beq.n	8002db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e02d      	b.n	8002e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db2:	f7fe fe43 	bl	8001a3c <HAL_GetTick>
 8002db6:	0002      	movs	r2, r0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d302      	bcc.n	8002dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d11a      	bne.n	8002dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d013      	beq.n	8002dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dda:	2220      	movs	r2, #32
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2241      	movs	r2, #65	@ 0x41
 8002de6:	2120      	movs	r1, #32
 8002de8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2242      	movs	r2, #66	@ 0x42
 8002dee:	2100      	movs	r1, #0
 8002df0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2240      	movs	r2, #64	@ 0x40
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e007      	b.n	8002e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2220      	movs	r2, #32
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d1c8      	bne.n	8002d9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b004      	add	sp, #16
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2317      	movs	r3, #23
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002e2c:	e07b      	b.n	8002f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 f88d 	bl	8002f54 <I2C_IsErrorOccurred>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d003      	beq.n	8002e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002e3e:	2317      	movs	r3, #23
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d140      	bne.n	8002ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002e54:	2117      	movs	r1, #23
 8002e56:	187b      	adds	r3, r7, r1
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d13b      	bne.n	8002ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	2204      	movs	r2, #4
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d106      	bne.n	8002e7a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002e74:	187b      	adds	r3, r7, r1
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2210      	movs	r2, #16
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b10      	cmp	r3, #16
 8002e86:	d123      	bne.n	8002ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2204      	movs	r2, #4
 8002e94:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4929      	ldr	r1, [pc, #164]	@ (8002f50 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8002eaa:	400a      	ands	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2241      	movs	r2, #65	@ 0x41
 8002eb2:	2120      	movs	r1, #32
 8002eb4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2242      	movs	r2, #66	@ 0x42
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2240      	movs	r2, #64	@ 0x40
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002ec6:	2317      	movs	r3, #23
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	e002      	b.n	8002ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002ed6:	f7fe fdb1 	bl	8001a3c <HAL_GetTick>
 8002eda:	0002      	movs	r2, r0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d11c      	bne.n	8002f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002eec:	2017      	movs	r0, #23
 8002eee:	183b      	adds	r3, r7, r0
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d117      	bne.n	8002f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2204      	movs	r2, #4
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d010      	beq.n	8002f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f08:	2220      	movs	r2, #32
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2241      	movs	r2, #65	@ 0x41
 8002f14:	2120      	movs	r1, #32
 8002f16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2240      	movs	r2, #64	@ 0x40
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002f20:	183b      	adds	r3, r7, r0
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d005      	beq.n	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002f34:	2317      	movs	r3, #23
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d100      	bne.n	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002f3e:	e776      	b.n	8002e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002f40:	2317      	movs	r3, #23
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	781b      	ldrb	r3, [r3, #0]
}
 8002f46:	0018      	movs	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b006      	add	sp, #24
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	fe00e800 	.word	0xfe00e800

08002f54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	@ 0x28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f60:	2327      	movs	r3, #39	@ 0x27
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2210      	movs	r2, #16
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d100      	bne.n	8002f82 <I2C_IsErrorOccurred+0x2e>
 8002f80:	e079      	b.n	8003076 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2210      	movs	r2, #16
 8002f88:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f8a:	e057      	b.n	800303c <I2C_IsErrorOccurred+0xe8>
 8002f8c:	2227      	movs	r2, #39	@ 0x27
 8002f8e:	18bb      	adds	r3, r7, r2
 8002f90:	18ba      	adds	r2, r7, r2
 8002f92:	7812      	ldrb	r2, [r2, #0]
 8002f94:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	d04f      	beq.n	800303c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f9c:	f7fe fd4e 	bl	8001a3c <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d302      	bcc.n	8002fb2 <I2C_IsErrorOccurred+0x5e>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d144      	bne.n	800303c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	2380      	movs	r3, #128	@ 0x80
 8002fba:	01db      	lsls	r3, r3, #7
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fc0:	2013      	movs	r0, #19
 8002fc2:	183b      	adds	r3, r7, r0
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	2142      	movs	r1, #66	@ 0x42
 8002fc8:	5c52      	ldrb	r2, [r2, r1]
 8002fca:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	2380      	movs	r3, #128	@ 0x80
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d126      	bne.n	800302e <I2C_IsErrorOccurred+0xda>
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	2380      	movs	r3, #128	@ 0x80
 8002fe4:	01db      	lsls	r3, r3, #7
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d021      	beq.n	800302e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002fea:	183b      	adds	r3, r7, r0
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d01d      	beq.n	800302e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2180      	movs	r1, #128	@ 0x80
 8002ffe:	01c9      	lsls	r1, r1, #7
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003004:	f7fe fd1a 	bl	8001a3c <HAL_GetTick>
 8003008:	0003      	movs	r3, r0
 800300a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800300c:	e00f      	b.n	800302e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800300e:	f7fe fd15 	bl	8001a3c <HAL_GetTick>
 8003012:	0002      	movs	r2, r0
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b19      	cmp	r3, #25
 800301a:	d908      	bls.n	800302e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	2220      	movs	r2, #32
 8003020:	4313      	orrs	r3, r2
 8003022:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003024:	2327      	movs	r3, #39	@ 0x27
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]

              break;
 800302c:	e006      	b.n	800303c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2220      	movs	r2, #32
 8003036:	4013      	ands	r3, r2
 8003038:	2b20      	cmp	r3, #32
 800303a:	d1e8      	bne.n	800300e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2220      	movs	r2, #32
 8003044:	4013      	ands	r3, r2
 8003046:	2b20      	cmp	r3, #32
 8003048:	d004      	beq.n	8003054 <I2C_IsErrorOccurred+0x100>
 800304a:	2327      	movs	r3, #39	@ 0x27
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d09b      	beq.n	8002f8c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003054:	2327      	movs	r3, #39	@ 0x27
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d103      	bne.n	8003066 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2220      	movs	r2, #32
 8003064:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	2204      	movs	r2, #4
 800306a:	4313      	orrs	r3, r2
 800306c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800306e:	2327      	movs	r3, #39	@ 0x27
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	2380      	movs	r3, #128	@ 0x80
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4013      	ands	r3, r2
 8003086:	d00c      	beq.n	80030a2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	2201      	movs	r2, #1
 800308c:	4313      	orrs	r3, r2
 800308e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2280      	movs	r2, #128	@ 0x80
 8003096:	0052      	lsls	r2, r2, #1
 8003098:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800309a:	2327      	movs	r3, #39	@ 0x27
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4013      	ands	r3, r2
 80030aa:	d00c      	beq.n	80030c6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	2208      	movs	r2, #8
 80030b0:	4313      	orrs	r3, r2
 80030b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2280      	movs	r2, #128	@ 0x80
 80030ba:	00d2      	lsls	r2, r2, #3
 80030bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030be:	2327      	movs	r3, #39	@ 0x27
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	2380      	movs	r3, #128	@ 0x80
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4013      	ands	r3, r2
 80030ce:	d00c      	beq.n	80030ea <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	2202      	movs	r2, #2
 80030d4:	4313      	orrs	r3, r2
 80030d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2280      	movs	r2, #128	@ 0x80
 80030de:	0092      	lsls	r2, r2, #2
 80030e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030e2:	2327      	movs	r3, #39	@ 0x27
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80030ea:	2327      	movs	r3, #39	@ 0x27
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01d      	beq.n	8003130 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	0018      	movs	r0, r3
 80030f8:	f7ff fd8a 	bl	8002c10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	490e      	ldr	r1, [pc, #56]	@ (8003140 <I2C_IsErrorOccurred+0x1ec>)
 8003108:	400a      	ands	r2, r1
 800310a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	431a      	orrs	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2241      	movs	r2, #65	@ 0x41
 800311c:	2120      	movs	r1, #32
 800311e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2242      	movs	r2, #66	@ 0x42
 8003124:	2100      	movs	r1, #0
 8003126:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2240      	movs	r2, #64	@ 0x40
 800312c:	2100      	movs	r1, #0
 800312e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003130:	2327      	movs	r3, #39	@ 0x27
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	781b      	ldrb	r3, [r3, #0]
}
 8003136:	0018      	movs	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	b00a      	add	sp, #40	@ 0x28
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			@ (mov r8, r8)
 8003140:	fe00e800 	.word	0xfe00e800

08003144 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	0008      	movs	r0, r1
 800314e:	0011      	movs	r1, r2
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	240a      	movs	r4, #10
 8003154:	193b      	adds	r3, r7, r4
 8003156:	1c02      	adds	r2, r0, #0
 8003158:	801a      	strh	r2, [r3, #0]
 800315a:	2009      	movs	r0, #9
 800315c:	183b      	adds	r3, r7, r0
 800315e:	1c0a      	adds	r2, r1, #0
 8003160:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003162:	193b      	adds	r3, r7, r4
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	059b      	lsls	r3, r3, #22
 8003168:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800316a:	183b      	adds	r3, r7, r0
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	0419      	lsls	r1, r3, #16
 8003170:	23ff      	movs	r3, #255	@ 0xff
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003176:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317e:	4313      	orrs	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800318e:	0d51      	lsrs	r1, r2, #21
 8003190:	2280      	movs	r2, #128	@ 0x80
 8003192:	00d2      	lsls	r2, r2, #3
 8003194:	400a      	ands	r2, r1
 8003196:	4907      	ldr	r1, [pc, #28]	@ (80031b4 <I2C_TransferConfig+0x70>)
 8003198:	430a      	orrs	r2, r1
 800319a:	43d2      	mvns	r2, r2
 800319c:	401a      	ands	r2, r3
 800319e:	0011      	movs	r1, r2
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031aa:	46c0      	nop			@ (mov r8, r8)
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b007      	add	sp, #28
 80031b0:	bd90      	pop	{r4, r7, pc}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	03ff63ff 	.word	0x03ff63ff

080031b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2241      	movs	r2, #65	@ 0x41
 80031c6:	5c9b      	ldrb	r3, [r3, r2]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d138      	bne.n	8003240 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2240      	movs	r2, #64	@ 0x40
 80031d2:	5c9b      	ldrb	r3, [r3, r2]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031d8:	2302      	movs	r3, #2
 80031da:	e032      	b.n	8003242 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2240      	movs	r2, #64	@ 0x40
 80031e0:	2101      	movs	r1, #1
 80031e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2241      	movs	r2, #65	@ 0x41
 80031e8:	2124      	movs	r1, #36	@ 0x24
 80031ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2101      	movs	r1, #1
 80031f8:	438a      	bics	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4911      	ldr	r1, [pc, #68]	@ (800324c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003208:	400a      	ands	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6819      	ldr	r1, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2101      	movs	r1, #1
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2241      	movs	r2, #65	@ 0x41
 8003230:	2120      	movs	r1, #32
 8003232:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2240      	movs	r2, #64	@ 0x40
 8003238:	2100      	movs	r1, #0
 800323a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	e000      	b.n	8003242 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003240:	2302      	movs	r3, #2
  }
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b002      	add	sp, #8
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			@ (mov r8, r8)
 800324c:	ffffefff 	.word	0xffffefff

08003250 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2241      	movs	r2, #65	@ 0x41
 800325e:	5c9b      	ldrb	r3, [r3, r2]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b20      	cmp	r3, #32
 8003264:	d139      	bne.n	80032da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2240      	movs	r2, #64	@ 0x40
 800326a:	5c9b      	ldrb	r3, [r3, r2]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003270:	2302      	movs	r3, #2
 8003272:	e033      	b.n	80032dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2240      	movs	r2, #64	@ 0x40
 8003278:	2101      	movs	r1, #1
 800327a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2241      	movs	r2, #65	@ 0x41
 8003280:	2124      	movs	r1, #36	@ 0x24
 8003282:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2101      	movs	r1, #1
 8003290:	438a      	bics	r2, r1
 8003292:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a11      	ldr	r2, [pc, #68]	@ (80032e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2101      	movs	r1, #1
 80032c2:	430a      	orrs	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2241      	movs	r2, #65	@ 0x41
 80032ca:	2120      	movs	r1, #32
 80032cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2240      	movs	r2, #64	@ 0x40
 80032d2:	2100      	movs	r1, #0
 80032d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032da:	2302      	movs	r3, #2
  }
}
 80032dc:	0018      	movs	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	b004      	add	sp, #16
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	fffff0ff 	.word	0xfffff0ff

080032e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ec:	4b04      	ldr	r3, [pc, #16]	@ (8003300 <HAL_PWR_EnableBkUpAccess+0x18>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b03      	ldr	r3, [pc, #12]	@ (8003300 <HAL_PWR_EnableBkUpAccess+0x18>)
 80032f2:	2180      	movs	r1, #128	@ 0x80
 80032f4:	0049      	lsls	r1, r1, #1
 80032f6:	430a      	orrs	r2, r1
 80032f8:	601a      	str	r2, [r3, #0]
}
 80032fa:	46c0      	nop			@ (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40007000 	.word	0x40007000

08003304 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 800330c:	4b2b      	ldr	r3, [pc, #172]	@ (80033bc <HAL_PWR_ConfigPVD+0xb8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	22e0      	movs	r2, #224	@ 0xe0
 8003312:	4393      	bics	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4b28      	ldr	r3, [pc, #160]	@ (80033bc <HAL_PWR_ConfigPVD+0xb8>)
 800331c:	430a      	orrs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003320:	4b27      	ldr	r3, [pc, #156]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	4b26      	ldr	r3, [pc, #152]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 8003326:	4927      	ldr	r1, [pc, #156]	@ (80033c4 <HAL_PWR_ConfigPVD+0xc0>)
 8003328:	400a      	ands	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800332c:	4b24      	ldr	r3, [pc, #144]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b23      	ldr	r3, [pc, #140]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 8003332:	4924      	ldr	r1, [pc, #144]	@ (80033c4 <HAL_PWR_ConfigPVD+0xc0>)
 8003334:	400a      	ands	r2, r1
 8003336:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8003338:	4b21      	ldr	r3, [pc, #132]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	4b20      	ldr	r3, [pc, #128]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 800333e:	4921      	ldr	r1, [pc, #132]	@ (80033c4 <HAL_PWR_ConfigPVD+0xc0>)
 8003340:	400a      	ands	r2, r1
 8003342:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8003344:	4b1e      	ldr	r3, [pc, #120]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	4b1d      	ldr	r3, [pc, #116]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 800334a:	491e      	ldr	r1, [pc, #120]	@ (80033c4 <HAL_PWR_ConfigPVD+0xc0>)
 800334c:	400a      	ands	r2, r1
 800334e:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	025b      	lsls	r3, r3, #9
 8003358:	4013      	ands	r3, r2
 800335a:	d006      	beq.n	800336a <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800335c:	4b18      	ldr	r3, [pc, #96]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b17      	ldr	r3, [pc, #92]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 8003362:	2180      	movs	r1, #128	@ 0x80
 8003364:	0249      	lsls	r1, r1, #9
 8003366:	430a      	orrs	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	2380      	movs	r3, #128	@ 0x80
 8003370:	029b      	lsls	r3, r3, #10
 8003372:	4013      	ands	r3, r2
 8003374:	d006      	beq.n	8003384 <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8003376:	4b12      	ldr	r3, [pc, #72]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4b11      	ldr	r3, [pc, #68]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 800337c:	2180      	movs	r1, #128	@ 0x80
 800337e:	0249      	lsls	r1, r1, #9
 8003380:	430a      	orrs	r2, r1
 8003382:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	4013      	ands	r3, r2
 800338c:	d006      	beq.n	800339c <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800338e:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	4b0b      	ldr	r3, [pc, #44]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 8003394:	2180      	movs	r1, #128	@ 0x80
 8003396:	0249      	lsls	r1, r1, #9
 8003398:	430a      	orrs	r2, r1
 800339a:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	4013      	ands	r3, r2
 80033a4:	d006      	beq.n	80033b4 <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80033a6:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <HAL_PWR_ConfigPVD+0xbc>)
 80033ac:	2180      	movs	r1, #128	@ 0x80
 80033ae:	0249      	lsls	r1, r1, #9
 80033b0:	430a      	orrs	r2, r1
 80033b2:	60da      	str	r2, [r3, #12]
  }
}
 80033b4:	46c0      	nop			@ (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b002      	add	sp, #8
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40007000 	.word	0x40007000
 80033c0:	40010400 	.word	0x40010400
 80033c4:	fffeffff 	.word	0xfffeffff

080033c8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 80033cc:	4b04      	ldr	r3, [pc, #16]	@ (80033e0 <HAL_PWR_EnablePVD+0x18>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b03      	ldr	r3, [pc, #12]	@ (80033e0 <HAL_PWR_EnablePVD+0x18>)
 80033d2:	2110      	movs	r1, #16
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
}
 80033d8:	46c0      	nop			@ (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	46c0      	nop			@ (mov r8, r8)
 80033e0:	40007000 	.word	0x40007000

080033e4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	000a      	movs	r2, r1
 80033ee:	1cfb      	adds	r3, r7, #3
 80033f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80033f6:	4b25      	ldr	r3, [pc, #148]	@ (800348c <HAL_PWR_EnterSTOPMode+0xa8>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003402:	4b23      	ldr	r3, [pc, #140]	@ (8003490 <HAL_PWR_EnterSTOPMode+0xac>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	2201      	movs	r2, #1
 8003408:	4013      	ands	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_PWR_EnterSTOPMode+0x40>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003418:	4b1c      	ldr	r3, [pc, #112]	@ (800348c <HAL_PWR_EnterSTOPMode+0xa8>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4b1b      	ldr	r3, [pc, #108]	@ (800348c <HAL_PWR_EnterSTOPMode+0xa8>)
 800341e:	491d      	ldr	r1, [pc, #116]	@ (8003494 <HAL_PWR_EnterSTOPMode+0xb0>)
 8003420:	400a      	ands	r2, r1
 8003422:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003424:	4b19      	ldr	r3, [pc, #100]	@ (800348c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2203      	movs	r2, #3
 800342e:	4393      	bics	r3, r2
 8003430:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800343a:	4b14      	ldr	r3, [pc, #80]	@ (800348c <HAL_PWR_EnterSTOPMode+0xa8>)
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003440:	4b15      	ldr	r3, [pc, #84]	@ (8003498 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	4b14      	ldr	r3, [pc, #80]	@ (8003498 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003446:	2104      	movs	r1, #4
 8003448:	430a      	orrs	r2, r1
 800344a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800344c:	1cfb      	adds	r3, r7, #3
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003454:	bf30      	wfi
 8003456:	e002      	b.n	800345e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003458:	bf40      	sev
    __WFE();
 800345a:	bf20      	wfe
    __WFE();
 800345c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800345e:	4b0e      	ldr	r3, [pc, #56]	@ (8003498 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	4b0d      	ldr	r3, [pc, #52]	@ (8003498 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003464:	2104      	movs	r1, #4
 8003466:	438a      	bics	r2, r1
 8003468:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_PWR_EnterSTOPMode+0xa0>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d006      	beq.n	8003484 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003476:	4b05      	ldr	r3, [pc, #20]	@ (800348c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4b04      	ldr	r3, [pc, #16]	@ (800348c <HAL_PWR_EnterSTOPMode+0xa8>)
 800347c:	2180      	movs	r1, #128	@ 0x80
 800347e:	0089      	lsls	r1, r1, #2
 8003480:	430a      	orrs	r2, r1
 8003482:	601a      	str	r2, [r3, #0]
  }
}
 8003484:	46c0      	nop			@ (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b006      	add	sp, #24
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40007000 	.word	0x40007000
 8003490:	40010000 	.word	0x40010000
 8003494:	fffffdff 	.word	0xfffffdff
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800349c:	b5b0      	push	{r4, r5, r7, lr}
 800349e:	b08a      	sub	sp, #40	@ 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f000 fbbf 	bl	8003c2e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b0:	4bc9      	ldr	r3, [pc, #804]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	220c      	movs	r2, #12
 80034b6:	4013      	ands	r3, r2
 80034b8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034ba:	4bc7      	ldr	r3, [pc, #796]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	2380      	movs	r3, #128	@ 0x80
 80034c0:	025b      	lsls	r3, r3, #9
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2201      	movs	r2, #1
 80034cc:	4013      	ands	r3, r2
 80034ce:	d100      	bne.n	80034d2 <HAL_RCC_OscConfig+0x36>
 80034d0:	e07e      	b.n	80035d0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d007      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	d112      	bne.n	8003504 <HAL_RCC_OscConfig+0x68>
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	2380      	movs	r3, #128	@ 0x80
 80034e2:	025b      	lsls	r3, r3, #9
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d10d      	bne.n	8003504 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e8:	4bbb      	ldr	r3, [pc, #748]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	2380      	movs	r3, #128	@ 0x80
 80034ee:	029b      	lsls	r3, r3, #10
 80034f0:	4013      	ands	r3, r2
 80034f2:	d100      	bne.n	80034f6 <HAL_RCC_OscConfig+0x5a>
 80034f4:	e06b      	b.n	80035ce <HAL_RCC_OscConfig+0x132>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d167      	bne.n	80035ce <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f000 fb95 	bl	8003c2e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	2380      	movs	r3, #128	@ 0x80
 800350a:	025b      	lsls	r3, r3, #9
 800350c:	429a      	cmp	r2, r3
 800350e:	d107      	bne.n	8003520 <HAL_RCC_OscConfig+0x84>
 8003510:	4bb1      	ldr	r3, [pc, #708]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4bb0      	ldr	r3, [pc, #704]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003516:	2180      	movs	r1, #128	@ 0x80
 8003518:	0249      	lsls	r1, r1, #9
 800351a:	430a      	orrs	r2, r1
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e027      	b.n	8003570 <HAL_RCC_OscConfig+0xd4>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	23a0      	movs	r3, #160	@ 0xa0
 8003526:	02db      	lsls	r3, r3, #11
 8003528:	429a      	cmp	r2, r3
 800352a:	d10e      	bne.n	800354a <HAL_RCC_OscConfig+0xae>
 800352c:	4baa      	ldr	r3, [pc, #680]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4ba9      	ldr	r3, [pc, #676]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003532:	2180      	movs	r1, #128	@ 0x80
 8003534:	02c9      	lsls	r1, r1, #11
 8003536:	430a      	orrs	r2, r1
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	4ba7      	ldr	r3, [pc, #668]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4ba6      	ldr	r3, [pc, #664]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003540:	2180      	movs	r1, #128	@ 0x80
 8003542:	0249      	lsls	r1, r1, #9
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	e012      	b.n	8003570 <HAL_RCC_OscConfig+0xd4>
 800354a:	4ba3      	ldr	r3, [pc, #652]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4ba2      	ldr	r3, [pc, #648]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003550:	49a2      	ldr	r1, [pc, #648]	@ (80037dc <HAL_RCC_OscConfig+0x340>)
 8003552:	400a      	ands	r2, r1
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	4ba0      	ldr	r3, [pc, #640]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	2380      	movs	r3, #128	@ 0x80
 800355c:	025b      	lsls	r3, r3, #9
 800355e:	4013      	ands	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4b9c      	ldr	r3, [pc, #624]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b9b      	ldr	r3, [pc, #620]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 800356a:	499d      	ldr	r1, [pc, #628]	@ (80037e0 <HAL_RCC_OscConfig+0x344>)
 800356c:	400a      	ands	r2, r1
 800356e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d015      	beq.n	80035a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe fa60 	bl	8001a3c <HAL_GetTick>
 800357c:	0003      	movs	r3, r0
 800357e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003580:	e009      	b.n	8003596 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003582:	f7fe fa5b 	bl	8001a3c <HAL_GetTick>
 8003586:	0002      	movs	r2, r0
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b64      	cmp	r3, #100	@ 0x64
 800358e:	d902      	bls.n	8003596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	f000 fb4c 	bl	8003c2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003596:	4b90      	ldr	r3, [pc, #576]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	2380      	movs	r3, #128	@ 0x80
 800359c:	029b      	lsls	r3, r3, #10
 800359e:	4013      	ands	r3, r2
 80035a0:	d0ef      	beq.n	8003582 <HAL_RCC_OscConfig+0xe6>
 80035a2:	e015      	b.n	80035d0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fe fa4a 	bl	8001a3c <HAL_GetTick>
 80035a8:	0003      	movs	r3, r0
 80035aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ae:	f7fe fa45 	bl	8001a3c <HAL_GetTick>
 80035b2:	0002      	movs	r2, r0
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b64      	cmp	r3, #100	@ 0x64
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e336      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035c0:	4b85      	ldr	r3, [pc, #532]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	2380      	movs	r3, #128	@ 0x80
 80035c6:	029b      	lsls	r3, r3, #10
 80035c8:	4013      	ands	r3, r2
 80035ca:	d1f0      	bne.n	80035ae <HAL_RCC_OscConfig+0x112>
 80035cc:	e000      	b.n	80035d0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2202      	movs	r2, #2
 80035d6:	4013      	ands	r3, r2
 80035d8:	d100      	bne.n	80035dc <HAL_RCC_OscConfig+0x140>
 80035da:	e099      	b.n	8003710 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	2220      	movs	r2, #32
 80035e6:	4013      	ands	r3, r2
 80035e8:	d009      	beq.n	80035fe <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80035ea:	4b7b      	ldr	r3, [pc, #492]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b7a      	ldr	r3, [pc, #488]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 80035f0:	2120      	movs	r1, #32
 80035f2:	430a      	orrs	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	2220      	movs	r2, #32
 80035fa:	4393      	bics	r3, r2
 80035fc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	2b04      	cmp	r3, #4
 8003602:	d005      	beq.n	8003610 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	2b0c      	cmp	r3, #12
 8003608:	d13e      	bne.n	8003688 <HAL_RCC_OscConfig+0x1ec>
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d13b      	bne.n	8003688 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003610:	4b71      	ldr	r3, [pc, #452]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2204      	movs	r2, #4
 8003616:	4013      	ands	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_RCC_OscConfig+0x188>
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e304      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003624:	4b6c      	ldr	r3, [pc, #432]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4a6e      	ldr	r2, [pc, #440]	@ (80037e4 <HAL_RCC_OscConfig+0x348>)
 800362a:	4013      	ands	r3, r2
 800362c:	0019      	movs	r1, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	021a      	lsls	r2, r3, #8
 8003634:	4b68      	ldr	r3, [pc, #416]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800363a:	4b67      	ldr	r3, [pc, #412]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2209      	movs	r2, #9
 8003640:	4393      	bics	r3, r2
 8003642:	0019      	movs	r1, r3
 8003644:	4b64      	ldr	r3, [pc, #400]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003648:	430a      	orrs	r2, r1
 800364a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800364c:	f000 fc42 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8003650:	0001      	movs	r1, r0
 8003652:	4b61      	ldr	r3, [pc, #388]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	220f      	movs	r2, #15
 800365a:	4013      	ands	r3, r2
 800365c:	4a62      	ldr	r2, [pc, #392]	@ (80037e8 <HAL_RCC_OscConfig+0x34c>)
 800365e:	5cd3      	ldrb	r3, [r2, r3]
 8003660:	000a      	movs	r2, r1
 8003662:	40da      	lsrs	r2, r3
 8003664:	4b61      	ldr	r3, [pc, #388]	@ (80037ec <HAL_RCC_OscConfig+0x350>)
 8003666:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003668:	4b61      	ldr	r3, [pc, #388]	@ (80037f0 <HAL_RCC_OscConfig+0x354>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2513      	movs	r5, #19
 800366e:	197c      	adds	r4, r7, r5
 8003670:	0018      	movs	r0, r3
 8003672:	f7fe f99d 	bl	80019b0 <HAL_InitTick>
 8003676:	0003      	movs	r3, r0
 8003678:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800367a:	197b      	adds	r3, r7, r5
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d046      	beq.n	8003710 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003682:	197b      	adds	r3, r7, r5
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	e2d2      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	2b00      	cmp	r3, #0
 800368c:	d027      	beq.n	80036de <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800368e:	4b52      	ldr	r3, [pc, #328]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2209      	movs	r2, #9
 8003694:	4393      	bics	r3, r2
 8003696:	0019      	movs	r1, r3
 8003698:	4b4f      	ldr	r3, [pc, #316]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 800369a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fe f9cc 	bl	8001a3c <HAL_GetTick>
 80036a4:	0003      	movs	r3, r0
 80036a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe f9c7 	bl	8001a3c <HAL_GetTick>
 80036ae:	0002      	movs	r2, r0
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e2b8      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036bc:	4b46      	ldr	r3, [pc, #280]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2204      	movs	r2, #4
 80036c2:	4013      	ands	r3, r2
 80036c4:	d0f1      	beq.n	80036aa <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c6:	4b44      	ldr	r3, [pc, #272]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4a46      	ldr	r2, [pc, #280]	@ (80037e4 <HAL_RCC_OscConfig+0x348>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	0019      	movs	r1, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	021a      	lsls	r2, r3, #8
 80036d6:	4b40      	ldr	r3, [pc, #256]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 80036d8:	430a      	orrs	r2, r1
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	e018      	b.n	8003710 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b3e      	ldr	r3, [pc, #248]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b3d      	ldr	r3, [pc, #244]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 80036e4:	2101      	movs	r1, #1
 80036e6:	438a      	bics	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fe f9a7 	bl	8001a3c <HAL_GetTick>
 80036ee:	0003      	movs	r3, r0
 80036f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fe f9a2 	bl	8001a3c <HAL_GetTick>
 80036f8:	0002      	movs	r2, r0
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e293      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003706:	4b34      	ldr	r3, [pc, #208]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2204      	movs	r2, #4
 800370c:	4013      	ands	r3, r2
 800370e:	d1f1      	bne.n	80036f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2210      	movs	r2, #16
 8003716:	4013      	ands	r3, r2
 8003718:	d100      	bne.n	800371c <HAL_RCC_OscConfig+0x280>
 800371a:	e0a2      	b.n	8003862 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d140      	bne.n	80037a4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003722:	4b2d      	ldr	r3, [pc, #180]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	2380      	movs	r3, #128	@ 0x80
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4013      	ands	r3, r2
 800372c:	d005      	beq.n	800373a <HAL_RCC_OscConfig+0x29e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e279      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800373a:	4b27      	ldr	r3, [pc, #156]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4a2d      	ldr	r2, [pc, #180]	@ (80037f4 <HAL_RCC_OscConfig+0x358>)
 8003740:	4013      	ands	r3, r2
 8003742:	0019      	movs	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003748:	4b23      	ldr	r3, [pc, #140]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800374e:	4b22      	ldr	r3, [pc, #136]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	0a19      	lsrs	r1, r3, #8
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	061a      	lsls	r2, r3, #24
 800375c:	4b1e      	ldr	r3, [pc, #120]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	0b5b      	lsrs	r3, r3, #13
 8003768:	3301      	adds	r3, #1
 800376a:	2280      	movs	r2, #128	@ 0x80
 800376c:	0212      	lsls	r2, r2, #8
 800376e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003770:	4b19      	ldr	r3, [pc, #100]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	210f      	movs	r1, #15
 8003778:	400b      	ands	r3, r1
 800377a:	491b      	ldr	r1, [pc, #108]	@ (80037e8 <HAL_RCC_OscConfig+0x34c>)
 800377c:	5ccb      	ldrb	r3, [r1, r3]
 800377e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003780:	4b1a      	ldr	r3, [pc, #104]	@ (80037ec <HAL_RCC_OscConfig+0x350>)
 8003782:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003784:	4b1a      	ldr	r3, [pc, #104]	@ (80037f0 <HAL_RCC_OscConfig+0x354>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2513      	movs	r5, #19
 800378a:	197c      	adds	r4, r7, r5
 800378c:	0018      	movs	r0, r3
 800378e:	f7fe f90f 	bl	80019b0 <HAL_InitTick>
 8003792:	0003      	movs	r3, r0
 8003794:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003796:	197b      	adds	r3, r7, r5
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d061      	beq.n	8003862 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800379e:	197b      	adds	r3, r7, r5
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	e244      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d040      	beq.n	800382e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037ac:	4b0a      	ldr	r3, [pc, #40]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <HAL_RCC_OscConfig+0x33c>)
 80037b2:	2180      	movs	r1, #128	@ 0x80
 80037b4:	0049      	lsls	r1, r1, #1
 80037b6:	430a      	orrs	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7fe f93f 	bl	8001a3c <HAL_GetTick>
 80037be:	0003      	movs	r3, r0
 80037c0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037c2:	e019      	b.n	80037f8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037c4:	f7fe f93a 	bl	8001a3c <HAL_GetTick>
 80037c8:	0002      	movs	r2, r0
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d912      	bls.n	80037f8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e22b      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	40021000 	.word	0x40021000
 80037dc:	fffeffff 	.word	0xfffeffff
 80037e0:	fffbffff 	.word	0xfffbffff
 80037e4:	ffffe0ff 	.word	0xffffe0ff
 80037e8:	08005878 	.word	0x08005878
 80037ec:	20000004 	.word	0x20000004
 80037f0:	20000008 	.word	0x20000008
 80037f4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037f8:	4bca      	ldr	r3, [pc, #808]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	2380      	movs	r3, #128	@ 0x80
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4013      	ands	r3, r2
 8003802:	d0df      	beq.n	80037c4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003804:	4bc7      	ldr	r3, [pc, #796]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4ac7      	ldr	r2, [pc, #796]	@ (8003b28 <HAL_RCC_OscConfig+0x68c>)
 800380a:	4013      	ands	r3, r2
 800380c:	0019      	movs	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003812:	4bc4      	ldr	r3, [pc, #784]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003814:	430a      	orrs	r2, r1
 8003816:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003818:	4bc2      	ldr	r3, [pc, #776]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	0a19      	lsrs	r1, r3, #8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	061a      	lsls	r2, r3, #24
 8003826:	4bbf      	ldr	r3, [pc, #764]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003828:	430a      	orrs	r2, r1
 800382a:	605a      	str	r2, [r3, #4]
 800382c:	e019      	b.n	8003862 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800382e:	4bbd      	ldr	r3, [pc, #756]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4bbc      	ldr	r3, [pc, #752]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003834:	49bd      	ldr	r1, [pc, #756]	@ (8003b2c <HAL_RCC_OscConfig+0x690>)
 8003836:	400a      	ands	r2, r1
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fe f8ff 	bl	8001a3c <HAL_GetTick>
 800383e:	0003      	movs	r3, r0
 8003840:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003844:	f7fe f8fa 	bl	8001a3c <HAL_GetTick>
 8003848:	0002      	movs	r2, r0
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e1eb      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003856:	4bb3      	ldr	r3, [pc, #716]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	2380      	movs	r3, #128	@ 0x80
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4013      	ands	r3, r2
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2208      	movs	r2, #8
 8003868:	4013      	ands	r3, r2
 800386a:	d036      	beq.n	80038da <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d019      	beq.n	80038a8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003874:	4bab      	ldr	r3, [pc, #684]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003876:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003878:	4baa      	ldr	r3, [pc, #680]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 800387a:	2101      	movs	r1, #1
 800387c:	430a      	orrs	r2, r1
 800387e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003880:	f7fe f8dc 	bl	8001a3c <HAL_GetTick>
 8003884:	0003      	movs	r3, r0
 8003886:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388a:	f7fe f8d7 	bl	8001a3c <HAL_GetTick>
 800388e:	0002      	movs	r2, r0
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e1c8      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800389c:	4ba1      	ldr	r3, [pc, #644]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 800389e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a0:	2202      	movs	r2, #2
 80038a2:	4013      	ands	r3, r2
 80038a4:	d0f1      	beq.n	800388a <HAL_RCC_OscConfig+0x3ee>
 80038a6:	e018      	b.n	80038da <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a8:	4b9e      	ldr	r3, [pc, #632]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 80038aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038ac:	4b9d      	ldr	r3, [pc, #628]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 80038ae:	2101      	movs	r1, #1
 80038b0:	438a      	bics	r2, r1
 80038b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b4:	f7fe f8c2 	bl	8001a3c <HAL_GetTick>
 80038b8:	0003      	movs	r3, r0
 80038ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038be:	f7fe f8bd 	bl	8001a3c <HAL_GetTick>
 80038c2:	0002      	movs	r2, r0
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e1ae      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038d0:	4b94      	ldr	r3, [pc, #592]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 80038d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d4:	2202      	movs	r2, #2
 80038d6:	4013      	ands	r3, r2
 80038d8:	d1f1      	bne.n	80038be <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2204      	movs	r2, #4
 80038e0:	4013      	ands	r3, r2
 80038e2:	d100      	bne.n	80038e6 <HAL_RCC_OscConfig+0x44a>
 80038e4:	e0ae      	b.n	8003a44 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e6:	2023      	movs	r0, #35	@ 0x23
 80038e8:	183b      	adds	r3, r7, r0
 80038ea:	2200      	movs	r2, #0
 80038ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 80038f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038f2:	2380      	movs	r3, #128	@ 0x80
 80038f4:	055b      	lsls	r3, r3, #21
 80038f6:	4013      	ands	r3, r2
 80038f8:	d109      	bne.n	800390e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fa:	4b8a      	ldr	r3, [pc, #552]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 80038fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038fe:	4b89      	ldr	r3, [pc, #548]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003900:	2180      	movs	r1, #128	@ 0x80
 8003902:	0549      	lsls	r1, r1, #21
 8003904:	430a      	orrs	r2, r1
 8003906:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003908:	183b      	adds	r3, r7, r0
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390e:	4b88      	ldr	r3, [pc, #544]	@ (8003b30 <HAL_RCC_OscConfig+0x694>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	2380      	movs	r3, #128	@ 0x80
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4013      	ands	r3, r2
 8003918:	d11a      	bne.n	8003950 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391a:	4b85      	ldr	r3, [pc, #532]	@ (8003b30 <HAL_RCC_OscConfig+0x694>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4b84      	ldr	r3, [pc, #528]	@ (8003b30 <HAL_RCC_OscConfig+0x694>)
 8003920:	2180      	movs	r1, #128	@ 0x80
 8003922:	0049      	lsls	r1, r1, #1
 8003924:	430a      	orrs	r2, r1
 8003926:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003928:	f7fe f888 	bl	8001a3c <HAL_GetTick>
 800392c:	0003      	movs	r3, r0
 800392e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003932:	f7fe f883 	bl	8001a3c <HAL_GetTick>
 8003936:	0002      	movs	r2, r0
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b64      	cmp	r3, #100	@ 0x64
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e174      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	4b7a      	ldr	r3, [pc, #488]	@ (8003b30 <HAL_RCC_OscConfig+0x694>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2380      	movs	r3, #128	@ 0x80
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4013      	ands	r3, r2
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	2380      	movs	r3, #128	@ 0x80
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	429a      	cmp	r2, r3
 800395a:	d107      	bne.n	800396c <HAL_RCC_OscConfig+0x4d0>
 800395c:	4b71      	ldr	r3, [pc, #452]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 800395e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003960:	4b70      	ldr	r3, [pc, #448]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003962:	2180      	movs	r1, #128	@ 0x80
 8003964:	0049      	lsls	r1, r1, #1
 8003966:	430a      	orrs	r2, r1
 8003968:	651a      	str	r2, [r3, #80]	@ 0x50
 800396a:	e031      	b.n	80039d0 <HAL_RCC_OscConfig+0x534>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10c      	bne.n	800398e <HAL_RCC_OscConfig+0x4f2>
 8003974:	4b6b      	ldr	r3, [pc, #428]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003976:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003978:	4b6a      	ldr	r3, [pc, #424]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 800397a:	496c      	ldr	r1, [pc, #432]	@ (8003b2c <HAL_RCC_OscConfig+0x690>)
 800397c:	400a      	ands	r2, r1
 800397e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003980:	4b68      	ldr	r3, [pc, #416]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003982:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003984:	4b67      	ldr	r3, [pc, #412]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003986:	496b      	ldr	r1, [pc, #428]	@ (8003b34 <HAL_RCC_OscConfig+0x698>)
 8003988:	400a      	ands	r2, r1
 800398a:	651a      	str	r2, [r3, #80]	@ 0x50
 800398c:	e020      	b.n	80039d0 <HAL_RCC_OscConfig+0x534>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	23a0      	movs	r3, #160	@ 0xa0
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	429a      	cmp	r2, r3
 8003998:	d10e      	bne.n	80039b8 <HAL_RCC_OscConfig+0x51c>
 800399a:	4b62      	ldr	r3, [pc, #392]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 800399c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800399e:	4b61      	ldr	r3, [pc, #388]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 80039a0:	2180      	movs	r1, #128	@ 0x80
 80039a2:	00c9      	lsls	r1, r1, #3
 80039a4:	430a      	orrs	r2, r1
 80039a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80039a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 80039aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039ac:	4b5d      	ldr	r3, [pc, #372]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 80039ae:	2180      	movs	r1, #128	@ 0x80
 80039b0:	0049      	lsls	r1, r1, #1
 80039b2:	430a      	orrs	r2, r1
 80039b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80039b6:	e00b      	b.n	80039d0 <HAL_RCC_OscConfig+0x534>
 80039b8:	4b5a      	ldr	r3, [pc, #360]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 80039ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039bc:	4b59      	ldr	r3, [pc, #356]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 80039be:	495b      	ldr	r1, [pc, #364]	@ (8003b2c <HAL_RCC_OscConfig+0x690>)
 80039c0:	400a      	ands	r2, r1
 80039c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80039c4:	4b57      	ldr	r3, [pc, #348]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 80039c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039c8:	4b56      	ldr	r3, [pc, #344]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 80039ca:	495a      	ldr	r1, [pc, #360]	@ (8003b34 <HAL_RCC_OscConfig+0x698>)
 80039cc:	400a      	ands	r2, r1
 80039ce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d015      	beq.n	8003a04 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d8:	f7fe f830 	bl	8001a3c <HAL_GetTick>
 80039dc:	0003      	movs	r3, r0
 80039de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039e0:	e009      	b.n	80039f6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fe f82b 	bl	8001a3c <HAL_GetTick>
 80039e6:	0002      	movs	r2, r0
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	4a52      	ldr	r2, [pc, #328]	@ (8003b38 <HAL_RCC_OscConfig+0x69c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e11b      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 80039f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039fa:	2380      	movs	r3, #128	@ 0x80
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4013      	ands	r3, r2
 8003a00:	d0ef      	beq.n	80039e2 <HAL_RCC_OscConfig+0x546>
 8003a02:	e014      	b.n	8003a2e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a04:	f7fe f81a 	bl	8001a3c <HAL_GetTick>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a0c:	e009      	b.n	8003a22 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fe f815 	bl	8001a3c <HAL_GetTick>
 8003a12:	0002      	movs	r2, r0
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	4a47      	ldr	r2, [pc, #284]	@ (8003b38 <HAL_RCC_OscConfig+0x69c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e105      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a22:	4b40      	ldr	r3, [pc, #256]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003a24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a26:	2380      	movs	r3, #128	@ 0x80
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d1ef      	bne.n	8003a0e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a2e:	2323      	movs	r3, #35	@ 0x23
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a38:	4b3a      	ldr	r3, [pc, #232]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003a3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a3c:	4b39      	ldr	r3, [pc, #228]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003a3e:	493f      	ldr	r1, [pc, #252]	@ (8003b3c <HAL_RCC_OscConfig+0x6a0>)
 8003a40:	400a      	ands	r2, r1
 8003a42:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d049      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d026      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003a56:	4b33      	ldr	r3, [pc, #204]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	4b32      	ldr	r3, [pc, #200]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	609a      	str	r2, [r3, #8]
 8003a62:	4b30      	ldr	r3, [pc, #192]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a66:	4b2f      	ldr	r3, [pc, #188]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003a68:	2101      	movs	r1, #1
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a6e:	4b34      	ldr	r3, [pc, #208]	@ (8003b40 <HAL_RCC_OscConfig+0x6a4>)
 8003a70:	6a1a      	ldr	r2, [r3, #32]
 8003a72:	4b33      	ldr	r3, [pc, #204]	@ (8003b40 <HAL_RCC_OscConfig+0x6a4>)
 8003a74:	2180      	movs	r1, #128	@ 0x80
 8003a76:	0189      	lsls	r1, r1, #6
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fd ffde 	bl	8001a3c <HAL_GetTick>
 8003a80:	0003      	movs	r3, r0
 8003a82:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a86:	f7fd ffd9 	bl	8001a3c <HAL_GetTick>
 8003a8a:	0002      	movs	r2, r0
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e0ca      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a98:	4b22      	ldr	r3, [pc, #136]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d0f1      	beq.n	8003a86 <HAL_RCC_OscConfig+0x5ea>
 8003aa2:	e01e      	b.n	8003ae2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003aaa:	2101      	movs	r1, #1
 8003aac:	438a      	bics	r2, r1
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	4b23      	ldr	r3, [pc, #140]	@ (8003b40 <HAL_RCC_OscConfig+0x6a4>)
 8003ab2:	6a1a      	ldr	r2, [r3, #32]
 8003ab4:	4b22      	ldr	r3, [pc, #136]	@ (8003b40 <HAL_RCC_OscConfig+0x6a4>)
 8003ab6:	4923      	ldr	r1, [pc, #140]	@ (8003b44 <HAL_RCC_OscConfig+0x6a8>)
 8003ab8:	400a      	ands	r2, r1
 8003aba:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7fd ffbe 	bl	8001a3c <HAL_GetTick>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ac6:	f7fd ffb9 	bl	8001a3c <HAL_GetTick>
 8003aca:	0002      	movs	r2, r0
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e0aa      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ad8:	4b12      	ldr	r3, [pc, #72]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2202      	movs	r2, #2
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d1f1      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d100      	bne.n	8003aec <HAL_RCC_OscConfig+0x650>
 8003aea:	e09f      	b.n	8003c2c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d100      	bne.n	8003af4 <HAL_RCC_OscConfig+0x658>
 8003af2:	e078      	b.n	8003be6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d159      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afc:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b08      	ldr	r3, [pc, #32]	@ (8003b24 <HAL_RCC_OscConfig+0x688>)
 8003b02:	4911      	ldr	r1, [pc, #68]	@ (8003b48 <HAL_RCC_OscConfig+0x6ac>)
 8003b04:	400a      	ands	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fd ff98 	bl	8001a3c <HAL_GetTick>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b10:	e01c      	b.n	8003b4c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fd ff93 	bl	8001a3c <HAL_GetTick>
 8003b16:	0002      	movs	r2, r0
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d915      	bls.n	8003b4c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e084      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
 8003b24:	40021000 	.word	0x40021000
 8003b28:	ffff1fff 	.word	0xffff1fff
 8003b2c:	fffffeff 	.word	0xfffffeff
 8003b30:	40007000 	.word	0x40007000
 8003b34:	fffffbff 	.word	0xfffffbff
 8003b38:	00001388 	.word	0x00001388
 8003b3c:	efffffff 	.word	0xefffffff
 8003b40:	40010000 	.word	0x40010000
 8003b44:	ffffdfff 	.word	0xffffdfff
 8003b48:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c38 <HAL_RCC_OscConfig+0x79c>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	2380      	movs	r3, #128	@ 0x80
 8003b52:	049b      	lsls	r3, r3, #18
 8003b54:	4013      	ands	r3, r2
 8003b56:	d1dc      	bne.n	8003b12 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b58:	4b37      	ldr	r3, [pc, #220]	@ (8003c38 <HAL_RCC_OscConfig+0x79c>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a37      	ldr	r2, [pc, #220]	@ (8003c3c <HAL_RCC_OscConfig+0x7a0>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	0019      	movs	r1, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b70:	431a      	orrs	r2, r3
 8003b72:	4b31      	ldr	r3, [pc, #196]	@ (8003c38 <HAL_RCC_OscConfig+0x79c>)
 8003b74:	430a      	orrs	r2, r1
 8003b76:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b78:	4b2f      	ldr	r3, [pc, #188]	@ (8003c38 <HAL_RCC_OscConfig+0x79c>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c38 <HAL_RCC_OscConfig+0x79c>)
 8003b7e:	2180      	movs	r1, #128	@ 0x80
 8003b80:	0449      	lsls	r1, r1, #17
 8003b82:	430a      	orrs	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b86:	f7fd ff59 	bl	8001a3c <HAL_GetTick>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fd ff54 	bl	8001a3c <HAL_GetTick>
 8003b94:	0002      	movs	r2, r0
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e045      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003ba2:	4b25      	ldr	r3, [pc, #148]	@ (8003c38 <HAL_RCC_OscConfig+0x79c>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	2380      	movs	r3, #128	@ 0x80
 8003ba8:	049b      	lsls	r3, r3, #18
 8003baa:	4013      	ands	r3, r2
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0x6f4>
 8003bae:	e03d      	b.n	8003c2c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb0:	4b21      	ldr	r3, [pc, #132]	@ (8003c38 <HAL_RCC_OscConfig+0x79c>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b20      	ldr	r3, [pc, #128]	@ (8003c38 <HAL_RCC_OscConfig+0x79c>)
 8003bb6:	4922      	ldr	r1, [pc, #136]	@ (8003c40 <HAL_RCC_OscConfig+0x7a4>)
 8003bb8:	400a      	ands	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7fd ff3e 	bl	8001a3c <HAL_GetTick>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc6:	f7fd ff39 	bl	8001a3c <HAL_GetTick>
 8003bca:	0002      	movs	r2, r0
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e02a      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003bd8:	4b17      	ldr	r3, [pc, #92]	@ (8003c38 <HAL_RCC_OscConfig+0x79c>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	2380      	movs	r3, #128	@ 0x80
 8003bde:	049b      	lsls	r3, r3, #18
 8003be0:	4013      	ands	r3, r2
 8003be2:	d1f0      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x72a>
 8003be4:	e022      	b.n	8003c2c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e01d      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bf2:	4b11      	ldr	r3, [pc, #68]	@ (8003c38 <HAL_RCC_OscConfig+0x79c>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	2380      	movs	r3, #128	@ 0x80
 8003bfc:	025b      	lsls	r3, r3, #9
 8003bfe:	401a      	ands	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d10f      	bne.n	8003c28 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	23f0      	movs	r3, #240	@ 0xf0
 8003c0c:	039b      	lsls	r3, r3, #14
 8003c0e:	401a      	ands	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	23c0      	movs	r3, #192	@ 0xc0
 8003c1c:	041b      	lsls	r3, r3, #16
 8003c1e:	401a      	ands	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	0018      	movs	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b00a      	add	sp, #40	@ 0x28
 8003c34:	bdb0      	pop	{r4, r5, r7, pc}
 8003c36:	46c0      	nop			@ (mov r8, r8)
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	ff02ffff 	.word	0xff02ffff
 8003c40:	feffffff 	.word	0xfeffffff

08003c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c44:	b5b0      	push	{r4, r5, r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e128      	b.n	8003eaa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c58:	4b96      	ldr	r3, [pc, #600]	@ (8003eb4 <HAL_RCC_ClockConfig+0x270>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	4013      	ands	r3, r2
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d91e      	bls.n	8003ca4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b93      	ldr	r3, [pc, #588]	@ (8003eb4 <HAL_RCC_ClockConfig+0x270>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4393      	bics	r3, r2
 8003c6e:	0019      	movs	r1, r3
 8003c70:	4b90      	ldr	r3, [pc, #576]	@ (8003eb4 <HAL_RCC_ClockConfig+0x270>)
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c78:	f7fd fee0 	bl	8001a3c <HAL_GetTick>
 8003c7c:	0003      	movs	r3, r0
 8003c7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c80:	e009      	b.n	8003c96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c82:	f7fd fedb 	bl	8001a3c <HAL_GetTick>
 8003c86:	0002      	movs	r2, r0
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	4a8a      	ldr	r2, [pc, #552]	@ (8003eb8 <HAL_RCC_ClockConfig+0x274>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e109      	b.n	8003eaa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c96:	4b87      	ldr	r3, [pc, #540]	@ (8003eb4 <HAL_RCC_ClockConfig+0x270>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d1ee      	bne.n	8003c82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	4013      	ands	r3, r2
 8003cac:	d009      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cae:	4b83      	ldr	r3, [pc, #524]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	22f0      	movs	r2, #240	@ 0xf0
 8003cb4:	4393      	bics	r3, r2
 8003cb6:	0019      	movs	r1, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	4b7f      	ldr	r3, [pc, #508]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d100      	bne.n	8003cce <HAL_RCC_ClockConfig+0x8a>
 8003ccc:	e089      	b.n	8003de2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d107      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cd6:	4b79      	ldr	r3, [pc, #484]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	2380      	movs	r3, #128	@ 0x80
 8003cdc:	029b      	lsls	r3, r3, #10
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d120      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e0e1      	b.n	8003eaa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d107      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cee:	4b73      	ldr	r3, [pc, #460]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	2380      	movs	r3, #128	@ 0x80
 8003cf4:	049b      	lsls	r3, r3, #18
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d114      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e0d5      	b.n	8003eaa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d106      	bne.n	8003d14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d06:	4b6d      	ldr	r3, [pc, #436]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d109      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0ca      	b.n	8003eaa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d14:	4b69      	ldr	r3, [pc, #420]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	2380      	movs	r3, #128	@ 0x80
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0c2      	b.n	8003eaa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d24:	4b65      	ldr	r3, [pc, #404]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2203      	movs	r2, #3
 8003d2a:	4393      	bics	r3, r2
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	4b62      	ldr	r3, [pc, #392]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003d34:	430a      	orrs	r2, r1
 8003d36:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d38:	f7fd fe80 	bl	8001a3c <HAL_GetTick>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d111      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d48:	e009      	b.n	8003d5e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4a:	f7fd fe77 	bl	8001a3c <HAL_GetTick>
 8003d4e:	0002      	movs	r2, r0
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	4a58      	ldr	r2, [pc, #352]	@ (8003eb8 <HAL_RCC_ClockConfig+0x274>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e0a5      	b.n	8003eaa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d5e:	4b57      	ldr	r3, [pc, #348]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	220c      	movs	r2, #12
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d1ef      	bne.n	8003d4a <HAL_RCC_ClockConfig+0x106>
 8003d6a:	e03a      	b.n	8003de2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d111      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d74:	e009      	b.n	8003d8a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d76:	f7fd fe61 	bl	8001a3c <HAL_GetTick>
 8003d7a:	0002      	movs	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	4a4d      	ldr	r2, [pc, #308]	@ (8003eb8 <HAL_RCC_ClockConfig+0x274>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e08f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d8a:	4b4c      	ldr	r3, [pc, #304]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	220c      	movs	r2, #12
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d1ef      	bne.n	8003d76 <HAL_RCC_ClockConfig+0x132>
 8003d96:	e024      	b.n	8003de2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003da0:	e009      	b.n	8003db6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da2:	f7fd fe4b 	bl	8001a3c <HAL_GetTick>
 8003da6:	0002      	movs	r2, r0
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	4a42      	ldr	r2, [pc, #264]	@ (8003eb8 <HAL_RCC_ClockConfig+0x274>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e079      	b.n	8003eaa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003db6:	4b41      	ldr	r3, [pc, #260]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	220c      	movs	r2, #12
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d1ef      	bne.n	8003da2 <HAL_RCC_ClockConfig+0x15e>
 8003dc2:	e00e      	b.n	8003de2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc4:	f7fd fe3a 	bl	8001a3c <HAL_GetTick>
 8003dc8:	0002      	movs	r2, r0
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	4a3a      	ldr	r2, [pc, #232]	@ (8003eb8 <HAL_RCC_ClockConfig+0x274>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e068      	b.n	8003eaa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003dd8:	4b38      	ldr	r3, [pc, #224]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	220c      	movs	r2, #12
 8003dde:	4013      	ands	r3, r2
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de2:	4b34      	ldr	r3, [pc, #208]	@ (8003eb4 <HAL_RCC_ClockConfig+0x270>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2201      	movs	r2, #1
 8003de8:	4013      	ands	r3, r2
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d21e      	bcs.n	8003e2e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df0:	4b30      	ldr	r3, [pc, #192]	@ (8003eb4 <HAL_RCC_ClockConfig+0x270>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2201      	movs	r2, #1
 8003df6:	4393      	bics	r3, r2
 8003df8:	0019      	movs	r1, r3
 8003dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb4 <HAL_RCC_ClockConfig+0x270>)
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e02:	f7fd fe1b 	bl	8001a3c <HAL_GetTick>
 8003e06:	0003      	movs	r3, r0
 8003e08:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	e009      	b.n	8003e20 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0c:	f7fd fe16 	bl	8001a3c <HAL_GetTick>
 8003e10:	0002      	movs	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	4a28      	ldr	r2, [pc, #160]	@ (8003eb8 <HAL_RCC_ClockConfig+0x274>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e044      	b.n	8003eaa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e20:	4b24      	ldr	r3, [pc, #144]	@ (8003eb4 <HAL_RCC_ClockConfig+0x270>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2201      	movs	r2, #1
 8003e26:	4013      	ands	r3, r2
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d1ee      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2204      	movs	r2, #4
 8003e34:	4013      	ands	r3, r2
 8003e36:	d009      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e38:	4b20      	ldr	r3, [pc, #128]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a20      	ldr	r2, [pc, #128]	@ (8003ec0 <HAL_RCC_ClockConfig+0x27c>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	0019      	movs	r1, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	4b1d      	ldr	r3, [pc, #116]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2208      	movs	r2, #8
 8003e52:	4013      	ands	r3, r2
 8003e54:	d00a      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e56:	4b19      	ldr	r3, [pc, #100]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ec4 <HAL_RCC_ClockConfig+0x280>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	0019      	movs	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	00da      	lsls	r2, r3, #3
 8003e66:	4b15      	ldr	r3, [pc, #84]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e6c:	f000 f832 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8003e70:	0001      	movs	r1, r0
 8003e72:	4b12      	ldr	r3, [pc, #72]	@ (8003ebc <HAL_RCC_ClockConfig+0x278>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	220f      	movs	r2, #15
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	4a12      	ldr	r2, [pc, #72]	@ (8003ec8 <HAL_RCC_ClockConfig+0x284>)
 8003e7e:	5cd3      	ldrb	r3, [r2, r3]
 8003e80:	000a      	movs	r2, r1
 8003e82:	40da      	lsrs	r2, r3
 8003e84:	4b11      	ldr	r3, [pc, #68]	@ (8003ecc <HAL_RCC_ClockConfig+0x288>)
 8003e86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e88:	4b11      	ldr	r3, [pc, #68]	@ (8003ed0 <HAL_RCC_ClockConfig+0x28c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	250b      	movs	r5, #11
 8003e8e:	197c      	adds	r4, r7, r5
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7fd fd8d 	bl	80019b0 <HAL_InitTick>
 8003e96:	0003      	movs	r3, r0
 8003e98:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003e9a:	197b      	adds	r3, r7, r5
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003ea2:	197b      	adds	r3, r7, r5
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	e000      	b.n	8003eaa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	0018      	movs	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b004      	add	sp, #16
 8003eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8003eb2:	46c0      	nop			@ (mov r8, r8)
 8003eb4:	40022000 	.word	0x40022000
 8003eb8:	00001388 	.word	0x00001388
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	fffff8ff 	.word	0xfffff8ff
 8003ec4:	ffffc7ff 	.word	0xffffc7ff
 8003ec8:	08005878 	.word	0x08005878
 8003ecc:	20000004 	.word	0x20000004
 8003ed0:	20000008 	.word	0x20000008

08003ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003eda:	4b3c      	ldr	r3, [pc, #240]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	220c      	movs	r2, #12
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b0c      	cmp	r3, #12
 8003ee8:	d013      	beq.n	8003f12 <HAL_RCC_GetSysClockFreq+0x3e>
 8003eea:	d85c      	bhi.n	8003fa6 <HAL_RCC_GetSysClockFreq+0xd2>
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d002      	beq.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x22>
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d00b      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x38>
 8003ef4:	e057      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ef6:	4b35      	ldr	r3, [pc, #212]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2210      	movs	r2, #16
 8003efc:	4013      	ands	r3, r2
 8003efe:	d002      	beq.n	8003f06 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003f00:	4b33      	ldr	r3, [pc, #204]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f02:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003f04:	e05d      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003f06:	4b33      	ldr	r3, [pc, #204]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003f08:	613b      	str	r3, [r7, #16]
      break;
 8003f0a:	e05a      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f0c:	4b32      	ldr	r3, [pc, #200]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f0e:	613b      	str	r3, [r7, #16]
      break;
 8003f10:	e057      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	0c9b      	lsrs	r3, r3, #18
 8003f16:	220f      	movs	r2, #15
 8003f18:	4013      	ands	r3, r2
 8003f1a:	4a30      	ldr	r2, [pc, #192]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1c:	5cd3      	ldrb	r3, [r2, r3]
 8003f1e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	0d9b      	lsrs	r3, r3, #22
 8003f24:	2203      	movs	r2, #3
 8003f26:	4013      	ands	r3, r2
 8003f28:	3301      	adds	r3, #1
 8003f2a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f2c:	4b27      	ldr	r3, [pc, #156]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	2380      	movs	r3, #128	@ 0x80
 8003f32:	025b      	lsls	r3, r3, #9
 8003f34:	4013      	ands	r3, r2
 8003f36:	d00f      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	000a      	movs	r2, r1
 8003f3c:	0152      	lsls	r2, r2, #5
 8003f3e:	1a52      	subs	r2, r2, r1
 8003f40:	0193      	lsls	r3, r2, #6
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	185b      	adds	r3, r3, r1
 8003f48:	025b      	lsls	r3, r3, #9
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7fc f8db 	bl	8000108 <__udivsi3>
 8003f52:	0003      	movs	r3, r0
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	e023      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f58:	4b1c      	ldr	r3, [pc, #112]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2210      	movs	r2, #16
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d00f      	beq.n	8003f82 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	000a      	movs	r2, r1
 8003f66:	0152      	lsls	r2, r2, #5
 8003f68:	1a52      	subs	r2, r2, r1
 8003f6a:	0193      	lsls	r3, r2, #6
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	185b      	adds	r3, r3, r1
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7fc f8c6 	bl	8000108 <__udivsi3>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e00e      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	000a      	movs	r2, r1
 8003f86:	0152      	lsls	r2, r2, #5
 8003f88:	1a52      	subs	r2, r2, r1
 8003f8a:	0193      	lsls	r3, r2, #6
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	185b      	adds	r3, r3, r1
 8003f92:	029b      	lsls	r3, r3, #10
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7fc f8b6 	bl	8000108 <__udivsi3>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	613b      	str	r3, [r7, #16]
      break;
 8003fa4:	e00d      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003fa6:	4b09      	ldr	r3, [pc, #36]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	0b5b      	lsrs	r3, r3, #13
 8003fac:	2207      	movs	r2, #7
 8003fae:	4013      	ands	r3, r2
 8003fb0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	2280      	movs	r2, #128	@ 0x80
 8003fb8:	0212      	lsls	r2, r2, #8
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	0013      	movs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
      break;
 8003fc0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003fc2:	693b      	ldr	r3, [r7, #16]
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b006      	add	sp, #24
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	003d0900 	.word	0x003d0900
 8003fd4:	00f42400 	.word	0x00f42400
 8003fd8:	007a1200 	.word	0x007a1200
 8003fdc:	08005890 	.word	0x08005890

08003fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe4:	4b02      	ldr	r3, [pc, #8]	@ (8003ff0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	0018      	movs	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	20000004 	.word	0x20000004

08003ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ff8:	f7ff fff2 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8003ffc:	0001      	movs	r1, r0
 8003ffe:	4b06      	ldr	r3, [pc, #24]	@ (8004018 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	2207      	movs	r2, #7
 8004006:	4013      	ands	r3, r2
 8004008:	4a04      	ldr	r2, [pc, #16]	@ (800401c <HAL_RCC_GetPCLK1Freq+0x28>)
 800400a:	5cd3      	ldrb	r3, [r2, r3]
 800400c:	40d9      	lsrs	r1, r3
 800400e:	000b      	movs	r3, r1
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	40021000 	.word	0x40021000
 800401c:	08005888 	.word	0x08005888

08004020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004024:	f7ff ffdc 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004028:	0001      	movs	r1, r0
 800402a:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	0adb      	lsrs	r3, r3, #11
 8004030:	2207      	movs	r2, #7
 8004032:	4013      	ands	r3, r2
 8004034:	4a04      	ldr	r2, [pc, #16]	@ (8004048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004036:	5cd3      	ldrb	r3, [r2, r3]
 8004038:	40d9      	lsrs	r1, r3
 800403a:	000b      	movs	r3, r1
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	40021000 	.word	0x40021000
 8004048:	08005888 	.word	0x08005888

0800404c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004054:	2317      	movs	r3, #23
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2220      	movs	r2, #32
 8004062:	4013      	ands	r3, r2
 8004064:	d106      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	2380      	movs	r3, #128	@ 0x80
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	4013      	ands	r3, r2
 8004070:	d100      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004072:	e104      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004074:	4bb9      	ldr	r3, [pc, #740]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004078:	2380      	movs	r3, #128	@ 0x80
 800407a:	055b      	lsls	r3, r3, #21
 800407c:	4013      	ands	r3, r2
 800407e:	d10a      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004080:	4bb6      	ldr	r3, [pc, #728]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004084:	4bb5      	ldr	r3, [pc, #724]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004086:	2180      	movs	r1, #128	@ 0x80
 8004088:	0549      	lsls	r1, r1, #21
 800408a:	430a      	orrs	r2, r1
 800408c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800408e:	2317      	movs	r3, #23
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004096:	4bb2      	ldr	r3, [pc, #712]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4013      	ands	r3, r2
 80040a0:	d11a      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a2:	4baf      	ldr	r3, [pc, #700]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4bae      	ldr	r3, [pc, #696]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80040a8:	2180      	movs	r1, #128	@ 0x80
 80040aa:	0049      	lsls	r1, r1, #1
 80040ac:	430a      	orrs	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b0:	f7fd fcc4 	bl	8001a3c <HAL_GetTick>
 80040b4:	0003      	movs	r3, r0
 80040b6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b8:	e008      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ba:	f7fd fcbf 	bl	8001a3c <HAL_GetTick>
 80040be:	0002      	movs	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b64      	cmp	r3, #100	@ 0x64
 80040c6:	d901      	bls.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e143      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040cc:	4ba4      	ldr	r3, [pc, #656]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	2380      	movs	r3, #128	@ 0x80
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	4013      	ands	r3, r2
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80040d8:	4ba0      	ldr	r3, [pc, #640]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	23c0      	movs	r3, #192	@ 0xc0
 80040de:	039b      	lsls	r3, r3, #14
 80040e0:	4013      	ands	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	23c0      	movs	r3, #192	@ 0xc0
 80040ea:	039b      	lsls	r3, r3, #14
 80040ec:	4013      	ands	r3, r2
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d107      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	23c0      	movs	r3, #192	@ 0xc0
 80040fa:	039b      	lsls	r3, r3, #14
 80040fc:	4013      	ands	r3, r2
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	429a      	cmp	r2, r3
 8004102:	d013      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	23c0      	movs	r3, #192	@ 0xc0
 800410a:	029b      	lsls	r3, r3, #10
 800410c:	401a      	ands	r2, r3
 800410e:	23c0      	movs	r3, #192	@ 0xc0
 8004110:	029b      	lsls	r3, r3, #10
 8004112:	429a      	cmp	r2, r3
 8004114:	d10a      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004116:	4b91      	ldr	r3, [pc, #580]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	029b      	lsls	r3, r3, #10
 800411e:	401a      	ands	r2, r3
 8004120:	2380      	movs	r3, #128	@ 0x80
 8004122:	029b      	lsls	r3, r3, #10
 8004124:	429a      	cmp	r2, r3
 8004126:	d101      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e113      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800412c:	4b8b      	ldr	r3, [pc, #556]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800412e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004130:	23c0      	movs	r3, #192	@ 0xc0
 8004132:	029b      	lsls	r3, r3, #10
 8004134:	4013      	ands	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d049      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	23c0      	movs	r3, #192	@ 0xc0
 8004144:	029b      	lsls	r3, r3, #10
 8004146:	4013      	ands	r3, r2
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	429a      	cmp	r2, r3
 800414c:	d004      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2220      	movs	r2, #32
 8004154:	4013      	ands	r3, r2
 8004156:	d10d      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	23c0      	movs	r3, #192	@ 0xc0
 800415e:	029b      	lsls	r3, r3, #10
 8004160:	4013      	ands	r3, r2
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	429a      	cmp	r2, r3
 8004166:	d034      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	2380      	movs	r3, #128	@ 0x80
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	4013      	ands	r3, r2
 8004172:	d02e      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004174:	4b79      	ldr	r3, [pc, #484]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004178:	4a7a      	ldr	r2, [pc, #488]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800417a:	4013      	ands	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800417e:	4b77      	ldr	r3, [pc, #476]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004180:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004182:	4b76      	ldr	r3, [pc, #472]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004184:	2180      	movs	r1, #128	@ 0x80
 8004186:	0309      	lsls	r1, r1, #12
 8004188:	430a      	orrs	r2, r1
 800418a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800418c:	4b73      	ldr	r3, [pc, #460]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800418e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004190:	4b72      	ldr	r3, [pc, #456]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004192:	4975      	ldr	r1, [pc, #468]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004194:	400a      	ands	r2, r1
 8004196:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004198:	4b70      	ldr	r3, [pc, #448]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	2380      	movs	r3, #128	@ 0x80
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4013      	ands	r3, r2
 80041a6:	d014      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7fd fc48 	bl	8001a3c <HAL_GetTick>
 80041ac:	0003      	movs	r3, r0
 80041ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041b0:	e009      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fd fc43 	bl	8001a3c <HAL_GetTick>
 80041b6:	0002      	movs	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	4a6b      	ldr	r2, [pc, #428]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e0c6      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041c6:	4b65      	ldr	r3, [pc, #404]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4013      	ands	r3, r2
 80041d0:	d0ef      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	2380      	movs	r3, #128	@ 0x80
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	4013      	ands	r3, r2
 80041dc:	d01f      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	23c0      	movs	r3, #192	@ 0xc0
 80041e4:	029b      	lsls	r3, r3, #10
 80041e6:	401a      	ands	r2, r3
 80041e8:	23c0      	movs	r3, #192	@ 0xc0
 80041ea:	029b      	lsls	r3, r3, #10
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d10c      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80041f0:	4b5a      	ldr	r3, [pc, #360]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a5e      	ldr	r2, [pc, #376]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	0019      	movs	r1, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	23c0      	movs	r3, #192	@ 0xc0
 8004200:	039b      	lsls	r3, r3, #14
 8004202:	401a      	ands	r2, r3
 8004204:	4b55      	ldr	r3, [pc, #340]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004206:	430a      	orrs	r2, r1
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	4b54      	ldr	r3, [pc, #336]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800420c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	23c0      	movs	r3, #192	@ 0xc0
 8004214:	029b      	lsls	r3, r3, #10
 8004216:	401a      	ands	r2, r3
 8004218:	4b50      	ldr	r3, [pc, #320]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800421a:	430a      	orrs	r2, r1
 800421c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2220      	movs	r2, #32
 8004224:	4013      	ands	r3, r2
 8004226:	d01f      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	23c0      	movs	r3, #192	@ 0xc0
 800422e:	029b      	lsls	r3, r3, #10
 8004230:	401a      	ands	r2, r3
 8004232:	23c0      	movs	r3, #192	@ 0xc0
 8004234:	029b      	lsls	r3, r3, #10
 8004236:	429a      	cmp	r2, r3
 8004238:	d10c      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800423a:	4b48      	ldr	r3, [pc, #288]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a4c      	ldr	r2, [pc, #304]	@ (8004370 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004240:	4013      	ands	r3, r2
 8004242:	0019      	movs	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	23c0      	movs	r3, #192	@ 0xc0
 800424a:	039b      	lsls	r3, r3, #14
 800424c:	401a      	ands	r2, r3
 800424e:	4b43      	ldr	r3, [pc, #268]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004250:	430a      	orrs	r2, r1
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	4b41      	ldr	r3, [pc, #260]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004256:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	23c0      	movs	r3, #192	@ 0xc0
 800425e:	029b      	lsls	r3, r3, #10
 8004260:	401a      	ands	r2, r3
 8004262:	4b3e      	ldr	r3, [pc, #248]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004264:	430a      	orrs	r2, r1
 8004266:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004268:	2317      	movs	r3, #23
 800426a:	18fb      	adds	r3, r7, r3
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d105      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004272:	4b3a      	ldr	r3, [pc, #232]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004276:	4b39      	ldr	r3, [pc, #228]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004278:	493e      	ldr	r1, [pc, #248]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800427a:	400a      	ands	r2, r1
 800427c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2201      	movs	r2, #1
 8004284:	4013      	ands	r3, r2
 8004286:	d009      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004288:	4b34      	ldr	r3, [pc, #208]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800428a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428c:	2203      	movs	r2, #3
 800428e:	4393      	bics	r3, r2
 8004290:	0019      	movs	r1, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	4b31      	ldr	r3, [pc, #196]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004298:	430a      	orrs	r2, r1
 800429a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2202      	movs	r2, #2
 80042a2:	4013      	ands	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042a6:	4b2d      	ldr	r3, [pc, #180]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042aa:	220c      	movs	r2, #12
 80042ac:	4393      	bics	r3, r2
 80042ae:	0019      	movs	r1, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	4b29      	ldr	r3, [pc, #164]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042b6:	430a      	orrs	r2, r1
 80042b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2204      	movs	r2, #4
 80042c0:	4013      	ands	r3, r2
 80042c2:	d009      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042c4:	4b25      	ldr	r3, [pc, #148]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	0019      	movs	r1, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	4b22      	ldr	r3, [pc, #136]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042d4:	430a      	orrs	r2, r1
 80042d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2208      	movs	r2, #8
 80042de:	4013      	ands	r3, r2
 80042e0:	d009      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042e2:	4b1e      	ldr	r3, [pc, #120]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e6:	4a25      	ldr	r2, [pc, #148]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	0019      	movs	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	4b1a      	ldr	r3, [pc, #104]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042f2:	430a      	orrs	r2, r1
 80042f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	2380      	movs	r3, #128	@ 0x80
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	4013      	ands	r3, r2
 8004300:	d009      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004302:	4b16      	ldr	r3, [pc, #88]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004306:	4a17      	ldr	r2, [pc, #92]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004308:	4013      	ands	r3, r2
 800430a:	0019      	movs	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	4b12      	ldr	r3, [pc, #72]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004312:	430a      	orrs	r2, r1
 8004314:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2240      	movs	r2, #64	@ 0x40
 800431c:	4013      	ands	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004320:	4b0e      	ldr	r3, [pc, #56]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004324:	4a16      	ldr	r2, [pc, #88]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004326:	4013      	ands	r3, r2
 8004328:	0019      	movs	r1, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800432e:	4b0b      	ldr	r3, [pc, #44]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004330:	430a      	orrs	r2, r1
 8004332:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2280      	movs	r2, #128	@ 0x80
 800433a:	4013      	ands	r3, r2
 800433c:	d009      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800433e:	4b07      	ldr	r3, [pc, #28]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004342:	4a10      	ldr	r2, [pc, #64]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004344:	4013      	ands	r3, r2
 8004346:	0019      	movs	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	4b03      	ldr	r3, [pc, #12]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800434e:	430a      	orrs	r2, r1
 8004350:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	0018      	movs	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	b006      	add	sp, #24
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40021000 	.word	0x40021000
 8004360:	40007000 	.word	0x40007000
 8004364:	fffcffff 	.word	0xfffcffff
 8004368:	fff7ffff 	.word	0xfff7ffff
 800436c:	00001388 	.word	0x00001388
 8004370:	ffcfffff 	.word	0xffcfffff
 8004374:	efffffff 	.word	0xefffffff
 8004378:	fffff3ff 	.word	0xfffff3ff
 800437c:	ffffcfff 	.word	0xffffcfff
 8004380:	fbffffff 	.word	0xfbffffff
 8004384:	fff3ffff 	.word	0xfff3ffff

08004388 <HAL_RCCEx_EnableLSECSS>:
/**
  * @brief  Enables the LSE Clock Security System.
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSECSSON) ;
 800438c:	4b04      	ldr	r3, [pc, #16]	@ (80043a0 <HAL_RCCEx_EnableLSECSS+0x18>)
 800438e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004390:	4b03      	ldr	r3, [pc, #12]	@ (80043a0 <HAL_RCCEx_EnableLSECSS+0x18>)
 8004392:	2180      	movs	r1, #128	@ 0x80
 8004394:	0189      	lsls	r1, r1, #6
 8004396:	430a      	orrs	r2, r1
 8004398:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800439a:	46c0      	nop			@ (mov r8, r8)
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40021000 	.word	0x40021000

080043a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043a4:	b5b0      	push	{r4, r5, r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043ac:	230f      	movs	r3, #15
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	2201      	movs	r2, #1
 80043b2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e088      	b.n	80044d0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2221      	movs	r2, #33	@ 0x21
 80043c2:	5c9b      	ldrb	r3, [r3, r2]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d107      	bne.n	80043da <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	2100      	movs	r1, #0
 80043d0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	0018      	movs	r0, r3
 80043d6:	f7fc fe6b 	bl	80010b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2221      	movs	r2, #33	@ 0x21
 80043de:	2102      	movs	r1, #2
 80043e0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2210      	movs	r2, #16
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b10      	cmp	r3, #16
 80043ee:	d05f      	beq.n	80044b0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	22ca      	movs	r2, #202	@ 0xca
 80043f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2253      	movs	r2, #83	@ 0x53
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004400:	250f      	movs	r5, #15
 8004402:	197c      	adds	r4, r7, r5
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	0018      	movs	r0, r3
 8004408:	f000 f890 	bl	800452c <RTC_EnterInitMode>
 800440c:	0003      	movs	r3, r0
 800440e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8004410:	0028      	movs	r0, r5
 8004412:	183b      	adds	r3, r7, r0
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d12c      	bne.n	8004474 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	492c      	ldr	r1, [pc, #176]	@ (80044d8 <HAL_RTC_Init+0x134>)
 8004426:	400a      	ands	r2, r1
 8004428:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6899      	ldr	r1, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	68d2      	ldr	r2, [r2, #12]
 8004450:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6919      	ldr	r1, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	041a      	lsls	r2, r3, #16
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004466:	183c      	adds	r4, r7, r0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	0018      	movs	r0, r3
 800446c:	f000 f8a2 	bl	80045b4 <RTC_ExitInitMode>
 8004470:	0003      	movs	r3, r0
 8004472:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004474:	230f      	movs	r3, #15
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d113      	bne.n	80044a6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2103      	movs	r1, #3
 800448a:	438a      	bics	r2, r1
 800448c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	22ff      	movs	r2, #255	@ 0xff
 80044ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80044ae:	e003      	b.n	80044b8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80044b0:	230f      	movs	r3, #15
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80044b8:	230f      	movs	r3, #15
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d103      	bne.n	80044ca <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2221      	movs	r2, #33	@ 0x21
 80044c6:	2101      	movs	r1, #1
 80044c8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80044ca:	230f      	movs	r3, #15
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	781b      	ldrb	r3, [r3, #0]
}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b004      	add	sp, #16
 80044d6:	bdb0      	pop	{r4, r5, r7, pc}
 80044d8:	ff8fffbf 	.word	0xff8fffbf

080044dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a0e      	ldr	r2, [pc, #56]	@ (8004528 <HAL_RTC_WaitForSynchro+0x4c>)
 80044ee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044f0:	f7fd faa4 	bl	8001a3c <HAL_GetTick>
 80044f4:	0003      	movs	r3, r0
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044f8:	e00a      	b.n	8004510 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044fa:	f7fd fa9f 	bl	8001a3c <HAL_GetTick>
 80044fe:	0002      	movs	r2, r0
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1ad2      	subs	r2, r2, r3
 8004504:	23fa      	movs	r3, #250	@ 0xfa
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	429a      	cmp	r2, r3
 800450a:	d901      	bls.n	8004510 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e006      	b.n	800451e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	4013      	ands	r3, r2
 800451a:	d0ee      	beq.n	80044fa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	0018      	movs	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	b004      	add	sp, #16
 8004524:	bd80      	pop	{r7, pc}
 8004526:	46c0      	nop			@ (mov r8, r8)
 8004528:	0001ff5f 	.word	0x0001ff5f

0800452c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004538:	230f      	movs	r3, #15
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2240      	movs	r2, #64	@ 0x40
 8004548:	4013      	ands	r3, r2
 800454a:	d12c      	bne.n	80045a6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2180      	movs	r1, #128	@ 0x80
 8004558:	430a      	orrs	r2, r1
 800455a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800455c:	f7fd fa6e 	bl	8001a3c <HAL_GetTick>
 8004560:	0003      	movs	r3, r0
 8004562:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004564:	e014      	b.n	8004590 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004566:	f7fd fa69 	bl	8001a3c <HAL_GetTick>
 800456a:	0002      	movs	r2, r0
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	1ad2      	subs	r2, r2, r3
 8004570:	200f      	movs	r0, #15
 8004572:	183b      	adds	r3, r7, r0
 8004574:	1839      	adds	r1, r7, r0
 8004576:	7809      	ldrb	r1, [r1, #0]
 8004578:	7019      	strb	r1, [r3, #0]
 800457a:	23fa      	movs	r3, #250	@ 0xfa
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	429a      	cmp	r2, r3
 8004580:	d906      	bls.n	8004590 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2221      	movs	r2, #33	@ 0x21
 8004586:	2104      	movs	r1, #4
 8004588:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800458a:	183b      	adds	r3, r7, r0
 800458c:	2201      	movs	r2, #1
 800458e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2240      	movs	r2, #64	@ 0x40
 8004598:	4013      	ands	r3, r2
 800459a:	d104      	bne.n	80045a6 <RTC_EnterInitMode+0x7a>
 800459c:	230f      	movs	r3, #15
 800459e:	18fb      	adds	r3, r7, r3
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d1df      	bne.n	8004566 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80045a6:	230f      	movs	r3, #15
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	781b      	ldrb	r3, [r3, #0]
}
 80045ac:	0018      	movs	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b004      	add	sp, #16
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80045b4:	b590      	push	{r4, r7, lr}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045bc:	240f      	movs	r4, #15
 80045be:	193b      	adds	r3, r7, r4
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2180      	movs	r1, #128	@ 0x80
 80045d0:	438a      	bics	r2, r1
 80045d2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2220      	movs	r2, #32
 80045dc:	4013      	ands	r3, r2
 80045de:	d10c      	bne.n	80045fa <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f7ff ff7a 	bl	80044dc <HAL_RTC_WaitForSynchro>
 80045e8:	1e03      	subs	r3, r0, #0
 80045ea:	d006      	beq.n	80045fa <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2221      	movs	r2, #33	@ 0x21
 80045f0:	2104      	movs	r1, #4
 80045f2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80045f4:	193b      	adds	r3, r7, r4
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80045fa:	230f      	movs	r3, #15
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	781b      	ldrb	r3, [r3, #0]
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b005      	add	sp, #20
 8004606:	bd90      	pop	{r4, r7, pc}

08004608 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004614:	4b64      	ldr	r3, [pc, #400]	@ (80047a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	22fa      	movs	r2, #250	@ 0xfa
 800461a:	01d1      	lsls	r1, r2, #7
 800461c:	0018      	movs	r0, r3
 800461e:	f7fb fd73 	bl	8000108 <__udivsi3>
 8004622:	0003      	movs	r3, r0
 8004624:	001a      	movs	r2, r3
 8004626:	0013      	movs	r3, r2
 8004628:	015b      	lsls	r3, r3, #5
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	189b      	adds	r3, r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	5c9b      	ldrb	r3, [r3, r2]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 800463e:	2302      	movs	r3, #2
 8004640:	e0ad      	b.n	800479e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	2101      	movs	r1, #1
 8004648:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2221      	movs	r2, #33	@ 0x21
 800464e:	2102      	movs	r1, #2
 8004650:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	22ca      	movs	r2, #202	@ 0xca
 8004658:	625a      	str	r2, [r3, #36]	@ 0x24
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2253      	movs	r2, #83	@ 0x53
 8004660:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	2380      	movs	r3, #128	@ 0x80
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4013      	ands	r3, r2
 800466e:	d019      	beq.n	80046a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	3b01      	subs	r3, #1
 8004674:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10d      	bne.n	8004698 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	22ff      	movs	r2, #255	@ 0xff
 8004682:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2221      	movs	r2, #33	@ 0x21
 8004688:	2103      	movs	r1, #3
 800468a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	2100      	movs	r1, #0
 8004692:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e082      	b.n	800479e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2204      	movs	r2, #4
 80046a0:	4013      	ands	r3, r2
 80046a2:	d1e5      	bne.n	8004670 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	493f      	ldr	r1, [pc, #252]	@ (80047ac <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80046b0:	400a      	ands	r2, r1
 80046b2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	22ff      	movs	r2, #255	@ 0xff
 80046bc:	401a      	ands	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	493b      	ldr	r1, [pc, #236]	@ (80047b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80046c4:	430a      	orrs	r2, r1
 80046c6:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80046c8:	4b37      	ldr	r3, [pc, #220]	@ (80047a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	22fa      	movs	r2, #250	@ 0xfa
 80046ce:	01d1      	lsls	r1, r2, #7
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7fb fd19 	bl	8000108 <__udivsi3>
 80046d6:	0003      	movs	r3, r0
 80046d8:	001a      	movs	r2, r3
 80046da:	0013      	movs	r3, r2
 80046dc:	015b      	lsls	r3, r3, #5
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	189b      	adds	r3, r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10d      	bne.n	8004710 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	22ff      	movs	r2, #255	@ 0xff
 80046fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2221      	movs	r2, #33	@ 0x21
 8004700:	2103      	movs	r1, #3
 8004702:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	2100      	movs	r1, #0
 800470a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e046      	b.n	800479e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	2204      	movs	r2, #4
 8004718:	4013      	ands	r3, r2
 800471a:	d0e5      	beq.n	80046e8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2107      	movs	r1, #7
 8004728:	438a      	bics	r2, r1
 800472a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6899      	ldr	r1, [r3, #8]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	430a      	orrs	r2, r1
 800473a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004744:	4b1b      	ldr	r3, [pc, #108]	@ (80047b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b1a      	ldr	r3, [pc, #104]	@ (80047b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800474a:	2180      	movs	r1, #128	@ 0x80
 800474c:	0349      	lsls	r1, r1, #13
 800474e:	430a      	orrs	r2, r1
 8004750:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004752:	4b18      	ldr	r3, [pc, #96]	@ (80047b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	4b17      	ldr	r3, [pc, #92]	@ (80047b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004758:	2180      	movs	r1, #128	@ 0x80
 800475a:	0349      	lsls	r1, r1, #13
 800475c:	430a      	orrs	r2, r1
 800475e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2180      	movs	r1, #128	@ 0x80
 800476c:	01c9      	lsls	r1, r1, #7
 800476e:	430a      	orrs	r2, r1
 8004770:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2180      	movs	r1, #128	@ 0x80
 800477e:	00c9      	lsls	r1, r1, #3
 8004780:	430a      	orrs	r2, r1
 8004782:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	22ff      	movs	r2, #255	@ 0xff
 800478a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2221      	movs	r2, #33	@ 0x21
 8004790:	2101      	movs	r1, #1
 8004792:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	2100      	movs	r1, #0
 800479a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	0018      	movs	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b006      	add	sp, #24
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	46c0      	nop			@ (mov r8, r8)
 80047a8:	20000004 	.word	0x20000004
 80047ac:	fffffbff 	.word	0xfffffbff
 80047b0:	fffffb7f 	.word	0xfffffb7f
 80047b4:	40010400 	.word	0x40010400

080047b8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80047c0:	4b13      	ldr	r3, [pc, #76]	@ (8004810 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80047c2:	2280      	movs	r2, #128	@ 0x80
 80047c4:	0352      	lsls	r2, r2, #13
 80047c6:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	2380      	movs	r3, #128	@ 0x80
 80047d0:	01db      	lsls	r3, r3, #7
 80047d2:	4013      	ands	r3, r2
 80047d4:	d014      	beq.n	8004800 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	2380      	movs	r3, #128	@ 0x80
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4013      	ands	r3, r2
 80047e2:	d00d      	beq.n	8004800 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	22ff      	movs	r2, #255	@ 0xff
 80047ec:	401a      	ands	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4908      	ldr	r1, [pc, #32]	@ (8004814 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80047f4:	430a      	orrs	r2, r1
 80047f6:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f7fc fa5c 	bl	8000cb8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2221      	movs	r2, #33	@ 0x21
 8004804:	2101      	movs	r1, #1
 8004806:	5499      	strb	r1, [r3, r2]
}
 8004808:	46c0      	nop			@ (mov r8, r8)
 800480a:	46bd      	mov	sp, r7
 800480c:	b002      	add	sp, #8
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40010400 	.word	0x40010400
 8004814:	fffffb7f 	.word	0xfffffb7f

08004818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e044      	b.n	80048b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d107      	bne.n	8004842 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2278      	movs	r2, #120	@ 0x78
 8004836:	2100      	movs	r1, #0
 8004838:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	0018      	movs	r0, r3
 800483e:	f7fc fc57 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2224      	movs	r2, #36	@ 0x24
 8004846:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2101      	movs	r1, #1
 8004854:	438a      	bics	r2, r1
 8004856:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	0018      	movs	r0, r3
 8004864:	f000 fc50 	bl	8005108 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	0018      	movs	r0, r3
 800486c:	f000 f9ae 	bl	8004bcc <UART_SetConfig>
 8004870:	0003      	movs	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e01c      	b.n	80048b4 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	490d      	ldr	r1, [pc, #52]	@ (80048bc <HAL_UART_Init+0xa4>)
 8004886:	400a      	ands	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	212a      	movs	r1, #42	@ 0x2a
 8004896:	438a      	bics	r2, r1
 8004898:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2101      	movs	r1, #1
 80048a6:	430a      	orrs	r2, r1
 80048a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	0018      	movs	r0, r3
 80048ae:	f000 fcdf 	bl	8005270 <UART_CheckIdleState>
 80048b2:	0003      	movs	r3, r0
}
 80048b4:	0018      	movs	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b002      	add	sp, #8
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	ffffb7ff 	.word	0xffffb7ff

080048c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	@ 0x28
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	1dbb      	adds	r3, r7, #6
 80048ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d000      	beq.n	80048da <HAL_UART_Transmit+0x1a>
 80048d8:	e08c      	b.n	80049f4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_UART_Transmit+0x28>
 80048e0:	1dbb      	adds	r3, r7, #6
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e084      	b.n	80049f6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	2380      	movs	r3, #128	@ 0x80
 80048f2:	015b      	lsls	r3, r3, #5
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d109      	bne.n	800490c <HAL_UART_Transmit+0x4c>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d105      	bne.n	800490c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2201      	movs	r2, #1
 8004904:	4013      	ands	r3, r2
 8004906:	d001      	beq.n	800490c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e074      	b.n	80049f6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2284      	movs	r2, #132	@ 0x84
 8004910:	2100      	movs	r1, #0
 8004912:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2221      	movs	r2, #33	@ 0x21
 8004918:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800491a:	f7fd f88f 	bl	8001a3c <HAL_GetTick>
 800491e:	0003      	movs	r3, r0
 8004920:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1dba      	adds	r2, r7, #6
 8004926:	2150      	movs	r1, #80	@ 0x50
 8004928:	8812      	ldrh	r2, [r2, #0]
 800492a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1dba      	adds	r2, r7, #6
 8004930:	2152      	movs	r1, #82	@ 0x52
 8004932:	8812      	ldrh	r2, [r2, #0]
 8004934:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	2380      	movs	r3, #128	@ 0x80
 800493c:	015b      	lsls	r3, r3, #5
 800493e:	429a      	cmp	r2, r3
 8004940:	d108      	bne.n	8004954 <HAL_UART_Transmit+0x94>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d104      	bne.n	8004954 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	61bb      	str	r3, [r7, #24]
 8004952:	e003      	b.n	800495c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004958:	2300      	movs	r3, #0
 800495a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800495c:	e02f      	b.n	80049be <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	0013      	movs	r3, r2
 8004968:	2200      	movs	r2, #0
 800496a:	2180      	movs	r1, #128	@ 0x80
 800496c:	f000 fd28 	bl	80053c0 <UART_WaitOnFlagUntilTimeout>
 8004970:	1e03      	subs	r3, r0, #0
 8004972:	d004      	beq.n	800497e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e03b      	b.n	80049f6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10b      	bne.n	800499c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	001a      	movs	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	05d2      	lsls	r2, r2, #23
 8004990:	0dd2      	lsrs	r2, r2, #23
 8004992:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	3302      	adds	r3, #2
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	e007      	b.n	80049ac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	781a      	ldrb	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	3301      	adds	r3, #1
 80049aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2252      	movs	r2, #82	@ 0x52
 80049b0:	5a9b      	ldrh	r3, [r3, r2]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b299      	uxth	r1, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2252      	movs	r2, #82	@ 0x52
 80049bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2252      	movs	r2, #82	@ 0x52
 80049c2:	5a9b      	ldrh	r3, [r3, r2]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1c9      	bne.n	800495e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	0013      	movs	r3, r2
 80049d4:	2200      	movs	r2, #0
 80049d6:	2140      	movs	r1, #64	@ 0x40
 80049d8:	f000 fcf2 	bl	80053c0 <UART_WaitOnFlagUntilTimeout>
 80049dc:	1e03      	subs	r3, r0, #0
 80049de:	d004      	beq.n	80049ea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e005      	b.n	80049f6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
  }
}
 80049f6:	0018      	movs	r0, r3
 80049f8:	46bd      	mov	sp, r7
 80049fa:	b008      	add	sp, #32
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08a      	sub	sp, #40	@ 0x28
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	1dbb      	adds	r3, r7, #6
 8004a0e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2280      	movs	r2, #128	@ 0x80
 8004a14:	589b      	ldr	r3, [r3, r2]
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d000      	beq.n	8004a1c <HAL_UART_Receive+0x1c>
 8004a1a:	e0d0      	b.n	8004bbe <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_UART_Receive+0x2a>
 8004a22:	1dbb      	adds	r3, r7, #6
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e0c8      	b.n	8004bc0 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	2380      	movs	r3, #128	@ 0x80
 8004a34:	015b      	lsls	r3, r3, #5
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d109      	bne.n	8004a4e <HAL_UART_Receive+0x4e>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d105      	bne.n	8004a4e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2201      	movs	r2, #1
 8004a46:	4013      	ands	r3, r2
 8004a48:	d001      	beq.n	8004a4e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e0b8      	b.n	8004bc0 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2284      	movs	r2, #132	@ 0x84
 8004a52:	2100      	movs	r1, #0
 8004a54:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2280      	movs	r2, #128	@ 0x80
 8004a5a:	2122      	movs	r1, #34	@ 0x22
 8004a5c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a64:	f7fc ffea 	bl	8001a3c <HAL_GetTick>
 8004a68:	0003      	movs	r3, r0
 8004a6a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1dba      	adds	r2, r7, #6
 8004a70:	2158      	movs	r1, #88	@ 0x58
 8004a72:	8812      	ldrh	r2, [r2, #0]
 8004a74:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1dba      	adds	r2, r7, #6
 8004a7a:	215a      	movs	r1, #90	@ 0x5a
 8004a7c:	8812      	ldrh	r2, [r2, #0]
 8004a7e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	2380      	movs	r3, #128	@ 0x80
 8004a86:	015b      	lsls	r3, r3, #5
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d10d      	bne.n	8004aa8 <HAL_UART_Receive+0xa8>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <HAL_UART_Receive+0x9e>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	225c      	movs	r2, #92	@ 0x5c
 8004a98:	494b      	ldr	r1, [pc, #300]	@ (8004bc8 <HAL_UART_Receive+0x1c8>)
 8004a9a:	5299      	strh	r1, [r3, r2]
 8004a9c:	e02e      	b.n	8004afc <HAL_UART_Receive+0xfc>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	225c      	movs	r2, #92	@ 0x5c
 8004aa2:	21ff      	movs	r1, #255	@ 0xff
 8004aa4:	5299      	strh	r1, [r3, r2]
 8004aa6:	e029      	b.n	8004afc <HAL_UART_Receive+0xfc>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10d      	bne.n	8004acc <HAL_UART_Receive+0xcc>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d104      	bne.n	8004ac2 <HAL_UART_Receive+0xc2>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	225c      	movs	r2, #92	@ 0x5c
 8004abc:	21ff      	movs	r1, #255	@ 0xff
 8004abe:	5299      	strh	r1, [r3, r2]
 8004ac0:	e01c      	b.n	8004afc <HAL_UART_Receive+0xfc>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	225c      	movs	r2, #92	@ 0x5c
 8004ac6:	217f      	movs	r1, #127	@ 0x7f
 8004ac8:	5299      	strh	r1, [r3, r2]
 8004aca:	e017      	b.n	8004afc <HAL_UART_Receive+0xfc>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	2380      	movs	r3, #128	@ 0x80
 8004ad2:	055b      	lsls	r3, r3, #21
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d10d      	bne.n	8004af4 <HAL_UART_Receive+0xf4>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d104      	bne.n	8004aea <HAL_UART_Receive+0xea>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	225c      	movs	r2, #92	@ 0x5c
 8004ae4:	217f      	movs	r1, #127	@ 0x7f
 8004ae6:	5299      	strh	r1, [r3, r2]
 8004ae8:	e008      	b.n	8004afc <HAL_UART_Receive+0xfc>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	225c      	movs	r2, #92	@ 0x5c
 8004aee:	213f      	movs	r1, #63	@ 0x3f
 8004af0:	5299      	strh	r1, [r3, r2]
 8004af2:	e003      	b.n	8004afc <HAL_UART_Receive+0xfc>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	225c      	movs	r2, #92	@ 0x5c
 8004af8:	2100      	movs	r1, #0
 8004afa:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004afc:	2312      	movs	r3, #18
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	215c      	movs	r1, #92	@ 0x5c
 8004b04:	5a52      	ldrh	r2, [r2, r1]
 8004b06:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	2380      	movs	r3, #128	@ 0x80
 8004b0e:	015b      	lsls	r3, r3, #5
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d108      	bne.n	8004b26 <HAL_UART_Receive+0x126>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d104      	bne.n	8004b26 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	61bb      	str	r3, [r7, #24]
 8004b24:	e003      	b.n	8004b2e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004b2e:	e03a      	b.n	8004ba6 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	0013      	movs	r3, r2
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2120      	movs	r1, #32
 8004b3e:	f000 fc3f 	bl	80053c0 <UART_WaitOnFlagUntilTimeout>
 8004b42:	1e03      	subs	r3, r0, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2280      	movs	r2, #128	@ 0x80
 8004b4a:	2120      	movs	r1, #32
 8004b4c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e036      	b.n	8004bc0 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10e      	bne.n	8004b76 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2212      	movs	r2, #18
 8004b62:	18ba      	adds	r2, r7, r2
 8004b64:	8812      	ldrh	r2, [r2, #0]
 8004b66:	4013      	ands	r3, r2
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	3302      	adds	r3, #2
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	e00e      	b.n	8004b94 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2212      	movs	r2, #18
 8004b80:	18ba      	adds	r2, r7, r2
 8004b82:	8812      	ldrh	r2, [r2, #0]
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	4013      	ands	r3, r2
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3301      	adds	r3, #1
 8004b92:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	225a      	movs	r2, #90	@ 0x5a
 8004b98:	5a9b      	ldrh	r3, [r3, r2]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b299      	uxth	r1, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	225a      	movs	r2, #90	@ 0x5a
 8004ba4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	225a      	movs	r2, #90	@ 0x5a
 8004baa:	5a9b      	ldrh	r3, [r3, r2]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1be      	bne.n	8004b30 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2280      	movs	r2, #128	@ 0x80
 8004bb6:	2120      	movs	r1, #32
 8004bb8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e000      	b.n	8004bc0 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004bbe:	2302      	movs	r3, #2
  }
}
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b008      	add	sp, #32
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	000001ff 	.word	0x000001ff

08004bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bcc:	b5b0      	push	{r4, r5, r7, lr}
 8004bce:	b08e      	sub	sp, #56	@ 0x38
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bd4:	231a      	movs	r3, #26
 8004bd6:	2218      	movs	r2, #24
 8004bd8:	189b      	adds	r3, r3, r2
 8004bda:	19db      	adds	r3, r3, r7
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	431a      	orrs	r2, r3
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4ac3      	ldr	r2, [pc, #780]	@ (8004f0c <UART_SetConfig+0x340>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	0019      	movs	r1, r3
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4abe      	ldr	r2, [pc, #760]	@ (8004f10 <UART_SetConfig+0x344>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	0019      	movs	r1, r3
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4ab8      	ldr	r2, [pc, #736]	@ (8004f14 <UART_SetConfig+0x348>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d004      	beq.n	8004c40 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4ab4      	ldr	r2, [pc, #720]	@ (8004f18 <UART_SetConfig+0x34c>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c52:	430a      	orrs	r2, r1
 8004c54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4ab0      	ldr	r2, [pc, #704]	@ (8004f1c <UART_SetConfig+0x350>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d131      	bne.n	8004cc4 <UART_SetConfig+0xf8>
 8004c60:	4baf      	ldr	r3, [pc, #700]	@ (8004f20 <UART_SetConfig+0x354>)
 8004c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c64:	2203      	movs	r2, #3
 8004c66:	4013      	ands	r3, r2
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d01d      	beq.n	8004ca8 <UART_SetConfig+0xdc>
 8004c6c:	d823      	bhi.n	8004cb6 <UART_SetConfig+0xea>
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d00c      	beq.n	8004c8c <UART_SetConfig+0xc0>
 8004c72:	d820      	bhi.n	8004cb6 <UART_SetConfig+0xea>
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <UART_SetConfig+0xb2>
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d00e      	beq.n	8004c9a <UART_SetConfig+0xce>
 8004c7c:	e01b      	b.n	8004cb6 <UART_SetConfig+0xea>
 8004c7e:	231b      	movs	r3, #27
 8004c80:	2218      	movs	r2, #24
 8004c82:	189b      	adds	r3, r3, r2
 8004c84:	19db      	adds	r3, r3, r7
 8004c86:	2201      	movs	r2, #1
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	e0b4      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004c8c:	231b      	movs	r3, #27
 8004c8e:	2218      	movs	r2, #24
 8004c90:	189b      	adds	r3, r3, r2
 8004c92:	19db      	adds	r3, r3, r7
 8004c94:	2202      	movs	r2, #2
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e0ad      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004c9a:	231b      	movs	r3, #27
 8004c9c:	2218      	movs	r2, #24
 8004c9e:	189b      	adds	r3, r3, r2
 8004ca0:	19db      	adds	r3, r3, r7
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	e0a6      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004ca8:	231b      	movs	r3, #27
 8004caa:	2218      	movs	r2, #24
 8004cac:	189b      	adds	r3, r3, r2
 8004cae:	19db      	adds	r3, r3, r7
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	701a      	strb	r2, [r3, #0]
 8004cb4:	e09f      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004cb6:	231b      	movs	r3, #27
 8004cb8:	2218      	movs	r2, #24
 8004cba:	189b      	adds	r3, r3, r2
 8004cbc:	19db      	adds	r3, r3, r7
 8004cbe:	2210      	movs	r2, #16
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	e098      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a96      	ldr	r2, [pc, #600]	@ (8004f24 <UART_SetConfig+0x358>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d131      	bne.n	8004d32 <UART_SetConfig+0x166>
 8004cce:	4b94      	ldr	r3, [pc, #592]	@ (8004f20 <UART_SetConfig+0x354>)
 8004cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd2:	220c      	movs	r2, #12
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	2b0c      	cmp	r3, #12
 8004cd8:	d01d      	beq.n	8004d16 <UART_SetConfig+0x14a>
 8004cda:	d823      	bhi.n	8004d24 <UART_SetConfig+0x158>
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d00c      	beq.n	8004cfa <UART_SetConfig+0x12e>
 8004ce0:	d820      	bhi.n	8004d24 <UART_SetConfig+0x158>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <UART_SetConfig+0x120>
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d00e      	beq.n	8004d08 <UART_SetConfig+0x13c>
 8004cea:	e01b      	b.n	8004d24 <UART_SetConfig+0x158>
 8004cec:	231b      	movs	r3, #27
 8004cee:	2218      	movs	r2, #24
 8004cf0:	189b      	adds	r3, r3, r2
 8004cf2:	19db      	adds	r3, r3, r7
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	701a      	strb	r2, [r3, #0]
 8004cf8:	e07d      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004cfa:	231b      	movs	r3, #27
 8004cfc:	2218      	movs	r2, #24
 8004cfe:	189b      	adds	r3, r3, r2
 8004d00:	19db      	adds	r3, r3, r7
 8004d02:	2202      	movs	r2, #2
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	e076      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004d08:	231b      	movs	r3, #27
 8004d0a:	2218      	movs	r2, #24
 8004d0c:	189b      	adds	r3, r3, r2
 8004d0e:	19db      	adds	r3, r3, r7
 8004d10:	2204      	movs	r2, #4
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	e06f      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004d16:	231b      	movs	r3, #27
 8004d18:	2218      	movs	r2, #24
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	19db      	adds	r3, r3, r7
 8004d1e:	2208      	movs	r2, #8
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	e068      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004d24:	231b      	movs	r3, #27
 8004d26:	2218      	movs	r2, #24
 8004d28:	189b      	adds	r3, r3, r2
 8004d2a:	19db      	adds	r3, r3, r7
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	701a      	strb	r2, [r3, #0]
 8004d30:	e061      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a7c      	ldr	r2, [pc, #496]	@ (8004f28 <UART_SetConfig+0x35c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d106      	bne.n	8004d4a <UART_SetConfig+0x17e>
 8004d3c:	231b      	movs	r3, #27
 8004d3e:	2218      	movs	r2, #24
 8004d40:	189b      	adds	r3, r3, r2
 8004d42:	19db      	adds	r3, r3, r7
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	e055      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a77      	ldr	r2, [pc, #476]	@ (8004f2c <UART_SetConfig+0x360>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d106      	bne.n	8004d62 <UART_SetConfig+0x196>
 8004d54:	231b      	movs	r3, #27
 8004d56:	2218      	movs	r2, #24
 8004d58:	189b      	adds	r3, r3, r2
 8004d5a:	19db      	adds	r3, r3, r7
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e049      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a6b      	ldr	r2, [pc, #428]	@ (8004f14 <UART_SetConfig+0x348>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d13e      	bne.n	8004dea <UART_SetConfig+0x21e>
 8004d6c:	4b6c      	ldr	r3, [pc, #432]	@ (8004f20 <UART_SetConfig+0x354>)
 8004d6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d70:	23c0      	movs	r3, #192	@ 0xc0
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	4013      	ands	r3, r2
 8004d76:	22c0      	movs	r2, #192	@ 0xc0
 8004d78:	0112      	lsls	r2, r2, #4
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d027      	beq.n	8004dce <UART_SetConfig+0x202>
 8004d7e:	22c0      	movs	r2, #192	@ 0xc0
 8004d80:	0112      	lsls	r2, r2, #4
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d82a      	bhi.n	8004ddc <UART_SetConfig+0x210>
 8004d86:	2280      	movs	r2, #128	@ 0x80
 8004d88:	0112      	lsls	r2, r2, #4
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d011      	beq.n	8004db2 <UART_SetConfig+0x1e6>
 8004d8e:	2280      	movs	r2, #128	@ 0x80
 8004d90:	0112      	lsls	r2, r2, #4
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d822      	bhi.n	8004ddc <UART_SetConfig+0x210>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d004      	beq.n	8004da4 <UART_SetConfig+0x1d8>
 8004d9a:	2280      	movs	r2, #128	@ 0x80
 8004d9c:	00d2      	lsls	r2, r2, #3
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00e      	beq.n	8004dc0 <UART_SetConfig+0x1f4>
 8004da2:	e01b      	b.n	8004ddc <UART_SetConfig+0x210>
 8004da4:	231b      	movs	r3, #27
 8004da6:	2218      	movs	r2, #24
 8004da8:	189b      	adds	r3, r3, r2
 8004daa:	19db      	adds	r3, r3, r7
 8004dac:	2200      	movs	r2, #0
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	e021      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004db2:	231b      	movs	r3, #27
 8004db4:	2218      	movs	r2, #24
 8004db6:	189b      	adds	r3, r3, r2
 8004db8:	19db      	adds	r3, r3, r7
 8004dba:	2202      	movs	r2, #2
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	e01a      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004dc0:	231b      	movs	r3, #27
 8004dc2:	2218      	movs	r2, #24
 8004dc4:	189b      	adds	r3, r3, r2
 8004dc6:	19db      	adds	r3, r3, r7
 8004dc8:	2204      	movs	r2, #4
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	e013      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004dce:	231b      	movs	r3, #27
 8004dd0:	2218      	movs	r2, #24
 8004dd2:	189b      	adds	r3, r3, r2
 8004dd4:	19db      	adds	r3, r3, r7
 8004dd6:	2208      	movs	r2, #8
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	e00c      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004ddc:	231b      	movs	r3, #27
 8004dde:	2218      	movs	r2, #24
 8004de0:	189b      	adds	r3, r3, r2
 8004de2:	19db      	adds	r3, r3, r7
 8004de4:	2210      	movs	r2, #16
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	e005      	b.n	8004df6 <UART_SetConfig+0x22a>
 8004dea:	231b      	movs	r3, #27
 8004dec:	2218      	movs	r2, #24
 8004dee:	189b      	adds	r3, r3, r2
 8004df0:	19db      	adds	r3, r3, r7
 8004df2:	2210      	movs	r2, #16
 8004df4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a46      	ldr	r2, [pc, #280]	@ (8004f14 <UART_SetConfig+0x348>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d000      	beq.n	8004e02 <UART_SetConfig+0x236>
 8004e00:	e09a      	b.n	8004f38 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e02:	231b      	movs	r3, #27
 8004e04:	2218      	movs	r2, #24
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	19db      	adds	r3, r3, r7
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d01d      	beq.n	8004e4c <UART_SetConfig+0x280>
 8004e10:	dc20      	bgt.n	8004e54 <UART_SetConfig+0x288>
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d015      	beq.n	8004e42 <UART_SetConfig+0x276>
 8004e16:	dc1d      	bgt.n	8004e54 <UART_SetConfig+0x288>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <UART_SetConfig+0x256>
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d005      	beq.n	8004e2c <UART_SetConfig+0x260>
 8004e20:	e018      	b.n	8004e54 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e22:	f7ff f8e7 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004e26:	0003      	movs	r3, r0
 8004e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e2a:	e01c      	b.n	8004e66 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8004f20 <UART_SetConfig+0x354>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2210      	movs	r2, #16
 8004e32:	4013      	ands	r3, r2
 8004e34:	d002      	beq.n	8004e3c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004e36:	4b3e      	ldr	r3, [pc, #248]	@ (8004f30 <UART_SetConfig+0x364>)
 8004e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e3a:	e014      	b.n	8004e66 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f34 <UART_SetConfig+0x368>)
 8004e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e40:	e011      	b.n	8004e66 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e42:	f7ff f847 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8004e46:	0003      	movs	r3, r0
 8004e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e4a:	e00c      	b.n	8004e66 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4c:	2380      	movs	r3, #128	@ 0x80
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e52:	e008      	b.n	8004e66 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004e58:	231a      	movs	r3, #26
 8004e5a:	2218      	movs	r2, #24
 8004e5c:	189b      	adds	r3, r3, r2
 8004e5e:	19db      	adds	r3, r3, r7
 8004e60:	2201      	movs	r2, #1
 8004e62:	701a      	strb	r2, [r3, #0]
        break;
 8004e64:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d100      	bne.n	8004e6e <UART_SetConfig+0x2a2>
 8004e6c:	e133      	b.n	80050d6 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	0013      	movs	r3, r2
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	189b      	adds	r3, r3, r2
 8004e78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d305      	bcc.n	8004e8a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d906      	bls.n	8004e98 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004e8a:	231a      	movs	r3, #26
 8004e8c:	2218      	movs	r2, #24
 8004e8e:	189b      	adds	r3, r3, r2
 8004e90:	19db      	adds	r3, r3, r7
 8004e92:	2201      	movs	r2, #1
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	e11e      	b.n	80050d6 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	6939      	ldr	r1, [r7, #16]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	000b      	movs	r3, r1
 8004ea6:	0e1b      	lsrs	r3, r3, #24
 8004ea8:	0010      	movs	r0, r2
 8004eaa:	0205      	lsls	r5, r0, #8
 8004eac:	431d      	orrs	r5, r3
 8004eae:	000b      	movs	r3, r1
 8004eb0:	021c      	lsls	r4, r3, #8
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	68b8      	ldr	r0, [r7, #8]
 8004ec0:	68f9      	ldr	r1, [r7, #12]
 8004ec2:	1900      	adds	r0, r0, r4
 8004ec4:	4169      	adcs	r1, r5
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	607b      	str	r3, [r7, #4]
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f7fb f9a4 	bl	8000220 <__aeabi_uldivmod>
 8004ed8:	0002      	movs	r2, r0
 8004eda:	000b      	movs	r3, r1
 8004edc:	0013      	movs	r3, r2
 8004ede:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ee0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ee2:	23c0      	movs	r3, #192	@ 0xc0
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d309      	bcc.n	8004efe <UART_SetConfig+0x332>
 8004eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eec:	2380      	movs	r3, #128	@ 0x80
 8004eee:	035b      	lsls	r3, r3, #13
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d204      	bcs.n	8004efe <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004efa:	60da      	str	r2, [r3, #12]
 8004efc:	e0eb      	b.n	80050d6 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004efe:	231a      	movs	r3, #26
 8004f00:	2218      	movs	r2, #24
 8004f02:	189b      	adds	r3, r3, r2
 8004f04:	19db      	adds	r3, r3, r7
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e0e4      	b.n	80050d6 <UART_SetConfig+0x50a>
 8004f0c:	efff69f3 	.word	0xefff69f3
 8004f10:	ffffcfff 	.word	0xffffcfff
 8004f14:	40004800 	.word	0x40004800
 8004f18:	fffff4ff 	.word	0xfffff4ff
 8004f1c:	40013800 	.word	0x40013800
 8004f20:	40021000 	.word	0x40021000
 8004f24:	40004400 	.word	0x40004400
 8004f28:	40004c00 	.word	0x40004c00
 8004f2c:	40005000 	.word	0x40005000
 8004f30:	003d0900 	.word	0x003d0900
 8004f34:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	2380      	movs	r3, #128	@ 0x80
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d000      	beq.n	8004f46 <UART_SetConfig+0x37a>
 8004f44:	e070      	b.n	8005028 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004f46:	231b      	movs	r3, #27
 8004f48:	2218      	movs	r2, #24
 8004f4a:	189b      	adds	r3, r3, r2
 8004f4c:	19db      	adds	r3, r3, r7
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d822      	bhi.n	8004f9a <UART_SetConfig+0x3ce>
 8004f54:	009a      	lsls	r2, r3, #2
 8004f56:	4b67      	ldr	r3, [pc, #412]	@ (80050f4 <UART_SetConfig+0x528>)
 8004f58:	18d3      	adds	r3, r2, r3
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f5e:	f7ff f849 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004f62:	0003      	movs	r3, r0
 8004f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f66:	e021      	b.n	8004fac <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f68:	f7ff f85a 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f70:	e01c      	b.n	8004fac <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f72:	4b61      	ldr	r3, [pc, #388]	@ (80050f8 <UART_SetConfig+0x52c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2210      	movs	r2, #16
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d002      	beq.n	8004f82 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f7c:	4b5f      	ldr	r3, [pc, #380]	@ (80050fc <UART_SetConfig+0x530>)
 8004f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f80:	e014      	b.n	8004fac <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004f82:	4b5f      	ldr	r3, [pc, #380]	@ (8005100 <UART_SetConfig+0x534>)
 8004f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f86:	e011      	b.n	8004fac <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f88:	f7fe ffa4 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f90:	e00c      	b.n	8004fac <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f92:	2380      	movs	r3, #128	@ 0x80
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f98:	e008      	b.n	8004fac <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004f9e:	231a      	movs	r3, #26
 8004fa0:	2218      	movs	r2, #24
 8004fa2:	189b      	adds	r3, r3, r2
 8004fa4:	19db      	adds	r3, r3, r7
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	701a      	strb	r2, [r3, #0]
        break;
 8004faa:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d100      	bne.n	8004fb4 <UART_SetConfig+0x3e8>
 8004fb2:	e090      	b.n	80050d6 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb6:	005a      	lsls	r2, r3, #1
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	18d2      	adds	r2, r2, r3
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	0019      	movs	r1, r3
 8004fc6:	0010      	movs	r0, r2
 8004fc8:	f7fb f89e 	bl	8000108 <__udivsi3>
 8004fcc:	0003      	movs	r3, r0
 8004fce:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd2:	2b0f      	cmp	r3, #15
 8004fd4:	d921      	bls.n	800501a <UART_SetConfig+0x44e>
 8004fd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fd8:	2380      	movs	r3, #128	@ 0x80
 8004fda:	025b      	lsls	r3, r3, #9
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d21c      	bcs.n	800501a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	200e      	movs	r0, #14
 8004fe6:	2418      	movs	r4, #24
 8004fe8:	1903      	adds	r3, r0, r4
 8004fea:	19db      	adds	r3, r3, r7
 8004fec:	210f      	movs	r1, #15
 8004fee:	438a      	bics	r2, r1
 8004ff0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	2207      	movs	r2, #7
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	b299      	uxth	r1, r3
 8004ffe:	1903      	adds	r3, r0, r4
 8005000:	19db      	adds	r3, r3, r7
 8005002:	1902      	adds	r2, r0, r4
 8005004:	19d2      	adds	r2, r2, r7
 8005006:	8812      	ldrh	r2, [r2, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	1902      	adds	r2, r0, r4
 8005012:	19d2      	adds	r2, r2, r7
 8005014:	8812      	ldrh	r2, [r2, #0]
 8005016:	60da      	str	r2, [r3, #12]
 8005018:	e05d      	b.n	80050d6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800501a:	231a      	movs	r3, #26
 800501c:	2218      	movs	r2, #24
 800501e:	189b      	adds	r3, r3, r2
 8005020:	19db      	adds	r3, r3, r7
 8005022:	2201      	movs	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	e056      	b.n	80050d6 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005028:	231b      	movs	r3, #27
 800502a:	2218      	movs	r2, #24
 800502c:	189b      	adds	r3, r3, r2
 800502e:	19db      	adds	r3, r3, r7
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b08      	cmp	r3, #8
 8005034:	d822      	bhi.n	800507c <UART_SetConfig+0x4b0>
 8005036:	009a      	lsls	r2, r3, #2
 8005038:	4b32      	ldr	r3, [pc, #200]	@ (8005104 <UART_SetConfig+0x538>)
 800503a:	18d3      	adds	r3, r2, r3
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005040:	f7fe ffd8 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8005044:	0003      	movs	r3, r0
 8005046:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005048:	e021      	b.n	800508e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800504a:	f7fe ffe9 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 800504e:	0003      	movs	r3, r0
 8005050:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005052:	e01c      	b.n	800508e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005054:	4b28      	ldr	r3, [pc, #160]	@ (80050f8 <UART_SetConfig+0x52c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2210      	movs	r2, #16
 800505a:	4013      	ands	r3, r2
 800505c:	d002      	beq.n	8005064 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800505e:	4b27      	ldr	r3, [pc, #156]	@ (80050fc <UART_SetConfig+0x530>)
 8005060:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005062:	e014      	b.n	800508e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005064:	4b26      	ldr	r3, [pc, #152]	@ (8005100 <UART_SetConfig+0x534>)
 8005066:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005068:	e011      	b.n	800508e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800506a:	f7fe ff33 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 800506e:	0003      	movs	r3, r0
 8005070:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005072:	e00c      	b.n	800508e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005074:	2380      	movs	r3, #128	@ 0x80
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800507a:	e008      	b.n	800508e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005080:	231a      	movs	r3, #26
 8005082:	2218      	movs	r2, #24
 8005084:	189b      	adds	r3, r3, r2
 8005086:	19db      	adds	r3, r3, r7
 8005088:	2201      	movs	r2, #1
 800508a:	701a      	strb	r2, [r3, #0]
        break;
 800508c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800508e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d020      	beq.n	80050d6 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	085a      	lsrs	r2, r3, #1
 800509a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509c:	18d2      	adds	r2, r2, r3
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	0019      	movs	r1, r3
 80050a4:	0010      	movs	r0, r2
 80050a6:	f7fb f82f 	bl	8000108 <__udivsi3>
 80050aa:	0003      	movs	r3, r0
 80050ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b0:	2b0f      	cmp	r3, #15
 80050b2:	d90a      	bls.n	80050ca <UART_SetConfig+0x4fe>
 80050b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050b6:	2380      	movs	r3, #128	@ 0x80
 80050b8:	025b      	lsls	r3, r3, #9
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d205      	bcs.n	80050ca <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60da      	str	r2, [r3, #12]
 80050c8:	e005      	b.n	80050d6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80050ca:	231a      	movs	r3, #26
 80050cc:	2218      	movs	r2, #24
 80050ce:	189b      	adds	r3, r3, r2
 80050d0:	19db      	adds	r3, r3, r7
 80050d2:	2201      	movs	r2, #1
 80050d4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	2200      	movs	r2, #0
 80050da:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	2200      	movs	r2, #0
 80050e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80050e2:	231a      	movs	r3, #26
 80050e4:	2218      	movs	r2, #24
 80050e6:	189b      	adds	r3, r3, r2
 80050e8:	19db      	adds	r3, r3, r7
 80050ea:	781b      	ldrb	r3, [r3, #0]
}
 80050ec:	0018      	movs	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b00e      	add	sp, #56	@ 0x38
 80050f2:	bdb0      	pop	{r4, r5, r7, pc}
 80050f4:	0800589c 	.word	0x0800589c
 80050f8:	40021000 	.word	0x40021000
 80050fc:	003d0900 	.word	0x003d0900
 8005100:	00f42400 	.word	0x00f42400
 8005104:	080058c0 	.word	0x080058c0

08005108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005114:	2208      	movs	r2, #8
 8005116:	4013      	ands	r3, r2
 8005118:	d00b      	beq.n	8005132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	4a4a      	ldr	r2, [pc, #296]	@ (800524c <UART_AdvFeatureConfig+0x144>)
 8005122:	4013      	ands	r3, r2
 8005124:	0019      	movs	r1, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	2201      	movs	r2, #1
 8005138:	4013      	ands	r3, r2
 800513a:	d00b      	beq.n	8005154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	4a43      	ldr	r2, [pc, #268]	@ (8005250 <UART_AdvFeatureConfig+0x148>)
 8005144:	4013      	ands	r3, r2
 8005146:	0019      	movs	r1, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005158:	2202      	movs	r2, #2
 800515a:	4013      	ands	r3, r2
 800515c:	d00b      	beq.n	8005176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	4a3b      	ldr	r2, [pc, #236]	@ (8005254 <UART_AdvFeatureConfig+0x14c>)
 8005166:	4013      	ands	r3, r2
 8005168:	0019      	movs	r1, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517a:	2204      	movs	r2, #4
 800517c:	4013      	ands	r3, r2
 800517e:	d00b      	beq.n	8005198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	4a34      	ldr	r2, [pc, #208]	@ (8005258 <UART_AdvFeatureConfig+0x150>)
 8005188:	4013      	ands	r3, r2
 800518a:	0019      	movs	r1, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519c:	2210      	movs	r2, #16
 800519e:	4013      	ands	r3, r2
 80051a0:	d00b      	beq.n	80051ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	4a2c      	ldr	r2, [pc, #176]	@ (800525c <UART_AdvFeatureConfig+0x154>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	0019      	movs	r1, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051be:	2220      	movs	r2, #32
 80051c0:	4013      	ands	r3, r2
 80051c2:	d00b      	beq.n	80051dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	4a25      	ldr	r2, [pc, #148]	@ (8005260 <UART_AdvFeatureConfig+0x158>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	0019      	movs	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e0:	2240      	movs	r2, #64	@ 0x40
 80051e2:	4013      	ands	r3, r2
 80051e4:	d01d      	beq.n	8005222 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005264 <UART_AdvFeatureConfig+0x15c>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	0019      	movs	r1, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005202:	2380      	movs	r3, #128	@ 0x80
 8005204:	035b      	lsls	r3, r3, #13
 8005206:	429a      	cmp	r2, r3
 8005208:	d10b      	bne.n	8005222 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	4a15      	ldr	r2, [pc, #84]	@ (8005268 <UART_AdvFeatureConfig+0x160>)
 8005212:	4013      	ands	r3, r2
 8005214:	0019      	movs	r1, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005226:	2280      	movs	r2, #128	@ 0x80
 8005228:	4013      	ands	r3, r2
 800522a:	d00b      	beq.n	8005244 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	4a0e      	ldr	r2, [pc, #56]	@ (800526c <UART_AdvFeatureConfig+0x164>)
 8005234:	4013      	ands	r3, r2
 8005236:	0019      	movs	r1, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	605a      	str	r2, [r3, #4]
  }
}
 8005244:	46c0      	nop			@ (mov r8, r8)
 8005246:	46bd      	mov	sp, r7
 8005248:	b002      	add	sp, #8
 800524a:	bd80      	pop	{r7, pc}
 800524c:	ffff7fff 	.word	0xffff7fff
 8005250:	fffdffff 	.word	0xfffdffff
 8005254:	fffeffff 	.word	0xfffeffff
 8005258:	fffbffff 	.word	0xfffbffff
 800525c:	ffffefff 	.word	0xffffefff
 8005260:	ffffdfff 	.word	0xffffdfff
 8005264:	ffefffff 	.word	0xffefffff
 8005268:	ff9fffff 	.word	0xff9fffff
 800526c:	fff7ffff 	.word	0xfff7ffff

08005270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b092      	sub	sp, #72	@ 0x48
 8005274:	af02      	add	r7, sp, #8
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2284      	movs	r2, #132	@ 0x84
 800527c:	2100      	movs	r1, #0
 800527e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005280:	f7fc fbdc 	bl	8001a3c <HAL_GetTick>
 8005284:	0003      	movs	r3, r0
 8005286:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2208      	movs	r2, #8
 8005290:	4013      	ands	r3, r2
 8005292:	2b08      	cmp	r3, #8
 8005294:	d12c      	bne.n	80052f0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005298:	2280      	movs	r2, #128	@ 0x80
 800529a:	0391      	lsls	r1, r2, #14
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4a46      	ldr	r2, [pc, #280]	@ (80053b8 <UART_CheckIdleState+0x148>)
 80052a0:	9200      	str	r2, [sp, #0]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f000 f88c 	bl	80053c0 <UART_WaitOnFlagUntilTimeout>
 80052a8:	1e03      	subs	r3, r0, #0
 80052aa:	d021      	beq.n	80052f0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ac:	f3ef 8310 	mrs	r3, PRIMASK
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052b6:	2301      	movs	r3, #1
 80052b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052bc:	f383 8810 	msr	PRIMASK, r3
}
 80052c0:	46c0      	nop			@ (mov r8, r8)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2180      	movs	r1, #128	@ 0x80
 80052ce:	438a      	bics	r2, r1
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d8:	f383 8810 	msr	PRIMASK, r3
}
 80052dc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2278      	movs	r2, #120	@ 0x78
 80052e8:	2100      	movs	r1, #0
 80052ea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e05f      	b.n	80053b0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2204      	movs	r2, #4
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d146      	bne.n	800538c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005300:	2280      	movs	r2, #128	@ 0x80
 8005302:	03d1      	lsls	r1, r2, #15
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	4a2c      	ldr	r2, [pc, #176]	@ (80053b8 <UART_CheckIdleState+0x148>)
 8005308:	9200      	str	r2, [sp, #0]
 800530a:	2200      	movs	r2, #0
 800530c:	f000 f858 	bl	80053c0 <UART_WaitOnFlagUntilTimeout>
 8005310:	1e03      	subs	r3, r0, #0
 8005312:	d03b      	beq.n	800538c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005314:	f3ef 8310 	mrs	r3, PRIMASK
 8005318:	60fb      	str	r3, [r7, #12]
  return(result);
 800531a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531c:	637b      	str	r3, [r7, #52]	@ 0x34
 800531e:	2301      	movs	r3, #1
 8005320:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f383 8810 	msr	PRIMASK, r3
}
 8005328:	46c0      	nop			@ (mov r8, r8)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4921      	ldr	r1, [pc, #132]	@ (80053bc <UART_CheckIdleState+0x14c>)
 8005336:	400a      	ands	r2, r1
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800533c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f383 8810 	msr	PRIMASK, r3
}
 8005344:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005346:	f3ef 8310 	mrs	r3, PRIMASK
 800534a:	61bb      	str	r3, [r7, #24]
  return(result);
 800534c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005350:	2301      	movs	r3, #1
 8005352:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f383 8810 	msr	PRIMASK, r3
}
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2101      	movs	r1, #1
 8005368:	438a      	bics	r2, r1
 800536a:	609a      	str	r2, [r3, #8]
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	f383 8810 	msr	PRIMASK, r3
}
 8005376:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2280      	movs	r2, #128	@ 0x80
 800537c:	2120      	movs	r1, #32
 800537e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2278      	movs	r2, #120	@ 0x78
 8005384:	2100      	movs	r1, #0
 8005386:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e011      	b.n	80053b0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2220      	movs	r2, #32
 8005390:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2280      	movs	r2, #128	@ 0x80
 8005396:	2120      	movs	r1, #32
 8005398:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2278      	movs	r2, #120	@ 0x78
 80053aa:	2100      	movs	r1, #0
 80053ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	0018      	movs	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b010      	add	sp, #64	@ 0x40
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	01ffffff 	.word	0x01ffffff
 80053bc:	fffffedf 	.word	0xfffffedf

080053c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	1dfb      	adds	r3, r7, #7
 80053ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d0:	e051      	b.n	8005476 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	3301      	adds	r3, #1
 80053d6:	d04e      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d8:	f7fc fb30 	bl	8001a3c <HAL_GetTick>
 80053dc:	0002      	movs	r2, r0
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d302      	bcc.n	80053ee <UART_WaitOnFlagUntilTimeout+0x2e>
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e051      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2204      	movs	r2, #4
 80053fa:	4013      	ands	r3, r2
 80053fc:	d03b      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0xb6>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b80      	cmp	r3, #128	@ 0x80
 8005402:	d038      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b40      	cmp	r3, #64	@ 0x40
 8005408:	d035      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	2208      	movs	r2, #8
 8005412:	4013      	ands	r3, r2
 8005414:	2b08      	cmp	r3, #8
 8005416:	d111      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2208      	movs	r2, #8
 800541e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	0018      	movs	r0, r3
 8005424:	f000 f83c 	bl	80054a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2284      	movs	r2, #132	@ 0x84
 800542c:	2108      	movs	r1, #8
 800542e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2278      	movs	r2, #120	@ 0x78
 8005434:	2100      	movs	r1, #0
 8005436:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e02c      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	2380      	movs	r3, #128	@ 0x80
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	401a      	ands	r2, r3
 8005448:	2380      	movs	r3, #128	@ 0x80
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	429a      	cmp	r2, r3
 800544e:	d112      	bne.n	8005476 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2280      	movs	r2, #128	@ 0x80
 8005456:	0112      	lsls	r2, r2, #4
 8005458:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	0018      	movs	r0, r3
 800545e:	f000 f81f 	bl	80054a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2284      	movs	r2, #132	@ 0x84
 8005466:	2120      	movs	r1, #32
 8005468:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2278      	movs	r2, #120	@ 0x78
 800546e:	2100      	movs	r1, #0
 8005470:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e00f      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	4013      	ands	r3, r2
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	425a      	negs	r2, r3
 8005486:	4153      	adcs	r3, r2
 8005488:	b2db      	uxtb	r3, r3
 800548a:	001a      	movs	r2, r3
 800548c:	1dfb      	adds	r3, r7, #7
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d09e      	beq.n	80053d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	0018      	movs	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	b004      	add	sp, #16
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08e      	sub	sp, #56	@ 0x38
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a8:	f3ef 8310 	mrs	r3, PRIMASK
 80054ac:	617b      	str	r3, [r7, #20]
  return(result);
 80054ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054b2:	2301      	movs	r3, #1
 80054b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f383 8810 	msr	PRIMASK, r3
}
 80054bc:	46c0      	nop			@ (mov r8, r8)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4926      	ldr	r1, [pc, #152]	@ (8005564 <UART_EndRxTransfer+0xc4>)
 80054ca:	400a      	ands	r2, r1
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f383 8810 	msr	PRIMASK, r3
}
 80054d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054da:	f3ef 8310 	mrs	r3, PRIMASK
 80054de:	623b      	str	r3, [r7, #32]
  return(result);
 80054e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80054e4:	2301      	movs	r3, #1
 80054e6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ea:	f383 8810 	msr	PRIMASK, r3
}
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2101      	movs	r1, #1
 80054fc:	438a      	bics	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005502:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	f383 8810 	msr	PRIMASK, r3
}
 800550a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005510:	2b01      	cmp	r3, #1
 8005512:	d118      	bne.n	8005546 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005514:	f3ef 8310 	mrs	r3, PRIMASK
 8005518:	60bb      	str	r3, [r7, #8]
  return(result);
 800551a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800551e:	2301      	movs	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f383 8810 	msr	PRIMASK, r3
}
 8005528:	46c0      	nop			@ (mov r8, r8)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2110      	movs	r1, #16
 8005536:	438a      	bics	r2, r1
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f383 8810 	msr	PRIMASK, r3
}
 8005544:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2280      	movs	r2, #128	@ 0x80
 800554a:	2120      	movs	r1, #32
 800554c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	46bd      	mov	sp, r7
 800555e:	b00e      	add	sp, #56	@ 0x38
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	fffffedf 	.word	0xfffffedf

08005568 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	1dbb      	adds	r3, r7, #6
 8005576:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2280      	movs	r2, #128	@ 0x80
 800557c:	589b      	ldr	r3, [r3, r2]
 800557e:	2b20      	cmp	r3, #32
 8005580:	d000      	beq.n	8005584 <HAL_UARTEx_ReceiveToIdle+0x1c>
 8005582:	e109      	b.n	8005798 <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_UARTEx_ReceiveToIdle+0x2a>
 800558a:	1dbb      	adds	r3, r7, #6
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e101      	b.n	800579a <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	689a      	ldr	r2, [r3, #8]
 800559a:	2380      	movs	r3, #128	@ 0x80
 800559c:	015b      	lsls	r3, r3, #5
 800559e:	429a      	cmp	r2, r3
 80055a0:	d109      	bne.n	80055b6 <HAL_UARTEx_ReceiveToIdle+0x4e>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d105      	bne.n	80055b6 <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2201      	movs	r2, #1
 80055ae:	4013      	ands	r3, r2
 80055b0:	d001      	beq.n	80055b6 <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e0f1      	b.n	800579a <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2284      	movs	r2, #132	@ 0x84
 80055ba:	2100      	movs	r1, #0
 80055bc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2280      	movs	r2, #128	@ 0x80
 80055c2:	2122      	movs	r1, #34	@ 0x22
 80055c4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055d2:	f7fc fa33 	bl	8001a3c <HAL_GetTick>
 80055d6:	0003      	movs	r3, r0
 80055d8:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1dba      	adds	r2, r7, #6
 80055de:	2158      	movs	r1, #88	@ 0x58
 80055e0:	8812      	ldrh	r2, [r2, #0]
 80055e2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	1dba      	adds	r2, r7, #6
 80055e8:	215a      	movs	r1, #90	@ 0x5a
 80055ea:	8812      	ldrh	r2, [r2, #0]
 80055ec:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	2380      	movs	r3, #128	@ 0x80
 80055f4:	015b      	lsls	r3, r3, #5
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d10d      	bne.n	8005616 <HAL_UARTEx_ReceiveToIdle+0xae>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <HAL_UARTEx_ReceiveToIdle+0xa4>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	225c      	movs	r2, #92	@ 0x5c
 8005606:	4967      	ldr	r1, [pc, #412]	@ (80057a4 <HAL_UARTEx_ReceiveToIdle+0x23c>)
 8005608:	5299      	strh	r1, [r3, r2]
 800560a:	e02e      	b.n	800566a <HAL_UARTEx_ReceiveToIdle+0x102>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	225c      	movs	r2, #92	@ 0x5c
 8005610:	21ff      	movs	r1, #255	@ 0xff
 8005612:	5299      	strh	r1, [r3, r2]
 8005614:	e029      	b.n	800566a <HAL_UARTEx_ReceiveToIdle+0x102>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10d      	bne.n	800563a <HAL_UARTEx_ReceiveToIdle+0xd2>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <HAL_UARTEx_ReceiveToIdle+0xc8>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	225c      	movs	r2, #92	@ 0x5c
 800562a:	21ff      	movs	r1, #255	@ 0xff
 800562c:	5299      	strh	r1, [r3, r2]
 800562e:	e01c      	b.n	800566a <HAL_UARTEx_ReceiveToIdle+0x102>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	225c      	movs	r2, #92	@ 0x5c
 8005634:	217f      	movs	r1, #127	@ 0x7f
 8005636:	5299      	strh	r1, [r3, r2]
 8005638:	e017      	b.n	800566a <HAL_UARTEx_ReceiveToIdle+0x102>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	2380      	movs	r3, #128	@ 0x80
 8005640:	055b      	lsls	r3, r3, #21
 8005642:	429a      	cmp	r2, r3
 8005644:	d10d      	bne.n	8005662 <HAL_UARTEx_ReceiveToIdle+0xfa>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d104      	bne.n	8005658 <HAL_UARTEx_ReceiveToIdle+0xf0>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	225c      	movs	r2, #92	@ 0x5c
 8005652:	217f      	movs	r1, #127	@ 0x7f
 8005654:	5299      	strh	r1, [r3, r2]
 8005656:	e008      	b.n	800566a <HAL_UARTEx_ReceiveToIdle+0x102>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	225c      	movs	r2, #92	@ 0x5c
 800565c:	213f      	movs	r1, #63	@ 0x3f
 800565e:	5299      	strh	r1, [r3, r2]
 8005660:	e003      	b.n	800566a <HAL_UARTEx_ReceiveToIdle+0x102>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	225c      	movs	r2, #92	@ 0x5c
 8005666:	2100      	movs	r1, #0
 8005668:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800566a:	2312      	movs	r3, #18
 800566c:	18fb      	adds	r3, r7, r3
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	215c      	movs	r1, #92	@ 0x5c
 8005672:	5a52      	ldrh	r2, [r2, r1]
 8005674:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	2380      	movs	r3, #128	@ 0x80
 800567c:	015b      	lsls	r3, r3, #5
 800567e:	429a      	cmp	r2, r3
 8005680:	d108      	bne.n	8005694 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	e003      	b.n	800569c <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2200      	movs	r2, #0
 80056a0:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056a2:	e062      	b.n	800576a <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	2210      	movs	r2, #16
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b10      	cmp	r3, #16
 80056b0:	d110      	bne.n	80056d4 <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2210      	movs	r2, #16
 80056b8:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d008      	beq.n	80056d4 <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2202      	movs	r2, #2
 80056c6:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2280      	movs	r2, #128	@ 0x80
 80056cc:	2120      	movs	r1, #32
 80056ce:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e062      	b.n	800579a <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	2220      	movs	r2, #32
 80056dc:	4013      	ands	r3, r2
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d12f      	bne.n	8005742 <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10e      	bne.n	8005706 <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2212      	movs	r2, #18
 80056f2:	18ba      	adds	r2, r7, r2
 80056f4:	8812      	ldrh	r2, [r2, #0]
 80056f6:	4013      	ands	r3, r2
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	3302      	adds	r3, #2
 8005702:	61bb      	str	r3, [r7, #24]
 8005704:	e00e      	b.n	8005724 <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2212      	movs	r2, #18
 8005710:	18ba      	adds	r2, r7, r2
 8005712:	8812      	ldrh	r2, [r2, #0]
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	4013      	ands	r3, r2
 8005718:	b2da      	uxtb	r2, r3
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	3301      	adds	r3, #1
 8005722:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	3301      	adds	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	225a      	movs	r2, #90	@ 0x5a
 8005734:	5a9b      	ldrh	r3, [r3, r2]
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b299      	uxth	r1, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	225a      	movs	r2, #90	@ 0x5a
 8005740:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005744:	3301      	adds	r3, #1
 8005746:	d010      	beq.n	800576a <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005748:	f7fc f978 	bl	8001a3c <HAL_GetTick>
 800574c:	0002      	movs	r2, r0
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005754:	429a      	cmp	r2, r3
 8005756:	d302      	bcc.n	800575e <HAL_UARTEx_ReceiveToIdle+0x1f6>
 8005758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575a:	2b00      	cmp	r3, #0
 800575c:	d105      	bne.n	800576a <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2280      	movs	r2, #128	@ 0x80
 8005762:	2120      	movs	r1, #32
 8005764:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e017      	b.n	800579a <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	225a      	movs	r2, #90	@ 0x5a
 800576e:	5a9b      	ldrh	r3, [r3, r2]
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d196      	bne.n	80056a4 <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2258      	movs	r2, #88	@ 0x58
 800577a:	5a9a      	ldrh	r2, [r3, r2]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	215a      	movs	r1, #90	@ 0x5a
 8005780:	5a5b      	ldrh	r3, [r3, r1]
 8005782:	b29b      	uxth	r3, r3
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	b29a      	uxth	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2280      	movs	r2, #128	@ 0x80
 8005790:	2120      	movs	r1, #32
 8005792:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	e000      	b.n	800579a <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 8005798:	2302      	movs	r3, #2
  }
}
 800579a:	0018      	movs	r0, r3
 800579c:	46bd      	mov	sp, r7
 800579e:	b008      	add	sp, #32
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	46c0      	nop			@ (mov r8, r8)
 80057a4:	000001ff 	.word	0x000001ff

080057a8 <memset>:
 80057a8:	0003      	movs	r3, r0
 80057aa:	1882      	adds	r2, r0, r2
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d100      	bne.n	80057b2 <memset+0xa>
 80057b0:	4770      	bx	lr
 80057b2:	7019      	strb	r1, [r3, #0]
 80057b4:	3301      	adds	r3, #1
 80057b6:	e7f9      	b.n	80057ac <memset+0x4>

080057b8 <__libc_init_array>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	2600      	movs	r6, #0
 80057bc:	4c0c      	ldr	r4, [pc, #48]	@ (80057f0 <__libc_init_array+0x38>)
 80057be:	4d0d      	ldr	r5, [pc, #52]	@ (80057f4 <__libc_init_array+0x3c>)
 80057c0:	1b64      	subs	r4, r4, r5
 80057c2:	10a4      	asrs	r4, r4, #2
 80057c4:	42a6      	cmp	r6, r4
 80057c6:	d109      	bne.n	80057dc <__libc_init_array+0x24>
 80057c8:	2600      	movs	r6, #0
 80057ca:	f000 f819 	bl	8005800 <_init>
 80057ce:	4c0a      	ldr	r4, [pc, #40]	@ (80057f8 <__libc_init_array+0x40>)
 80057d0:	4d0a      	ldr	r5, [pc, #40]	@ (80057fc <__libc_init_array+0x44>)
 80057d2:	1b64      	subs	r4, r4, r5
 80057d4:	10a4      	asrs	r4, r4, #2
 80057d6:	42a6      	cmp	r6, r4
 80057d8:	d105      	bne.n	80057e6 <__libc_init_array+0x2e>
 80057da:	bd70      	pop	{r4, r5, r6, pc}
 80057dc:	00b3      	lsls	r3, r6, #2
 80057de:	58eb      	ldr	r3, [r5, r3]
 80057e0:	4798      	blx	r3
 80057e2:	3601      	adds	r6, #1
 80057e4:	e7ee      	b.n	80057c4 <__libc_init_array+0xc>
 80057e6:	00b3      	lsls	r3, r6, #2
 80057e8:	58eb      	ldr	r3, [r5, r3]
 80057ea:	4798      	blx	r3
 80057ec:	3601      	adds	r6, #1
 80057ee:	e7f2      	b.n	80057d6 <__libc_init_array+0x1e>
 80057f0:	080058ec 	.word	0x080058ec
 80057f4:	080058ec 	.word	0x080058ec
 80057f8:	080058f0 	.word	0x080058f0
 80057fc:	080058ec 	.word	0x080058ec

08005800 <_init>:
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005806:	bc08      	pop	{r3}
 8005808:	469e      	mov	lr, r3
 800580a:	4770      	bx	lr

0800580c <_fini>:
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	46c0      	nop			@ (mov r8, r8)
 8005810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005812:	bc08      	pop	{r3}
 8005814:	469e      	mov	lr, r3
 8005816:	4770      	bx	lr
