
seri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e98  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006f58  08006f58  00007f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007064  08007064  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007064  08007064  00008064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800706c  0800706c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800706c  0800706c  0000806c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007070  08007070  00008070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007074  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  20000060  080070d4  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  080070d4  000095d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135bb  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ab  00000000  00000000  0001c643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  0001f8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8a  00000000  00000000  00020a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017570  00000000  00000000  000217f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016397  00000000  00000000  00038d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008afd0  00000000  00000000  0004f0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da0c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004330  00000000  00000000  000da10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000de43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006f40 	.word	0x08006f40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08006f40 	.word	0x08006f40

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	@ (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	@ (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4699      	mov	r9, r3
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	469c      	mov	ip, r3
 8000452:	0413      	lsls	r3, r2, #16
 8000454:	4647      	mov	r7, r8
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	001d      	movs	r5, r3
 800045a:	000e      	movs	r6, r1
 800045c:	4661      	mov	r1, ip
 800045e:	0404      	lsls	r4, r0, #16
 8000460:	0c24      	lsrs	r4, r4, #16
 8000462:	b580      	push	{r7, lr}
 8000464:	0007      	movs	r7, r0
 8000466:	0c10      	lsrs	r0, r2, #16
 8000468:	434b      	muls	r3, r1
 800046a:	4365      	muls	r5, r4
 800046c:	4341      	muls	r1, r0
 800046e:	4360      	muls	r0, r4
 8000470:	0c2c      	lsrs	r4, r5, #16
 8000472:	18c0      	adds	r0, r0, r3
 8000474:	1824      	adds	r4, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	42a3      	cmp	r3, r4
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	@ 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4356      	muls	r6, r2
 800048a:	0c23      	lsrs	r3, r4, #16
 800048c:	042d      	lsls	r5, r5, #16
 800048e:	0c2d      	lsrs	r5, r5, #16
 8000490:	1989      	adds	r1, r1, r6
 8000492:	4463      	add	r3, ip
 8000494:	0424      	lsls	r4, r4, #16
 8000496:	1960      	adds	r0, r4, r5
 8000498:	18c9      	adds	r1, r1, r3
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8ba 	bl	800063c <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8b5 	bl	800063c <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	d434      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004da:	469b      	mov	fp, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	465a      	mov	r2, fp
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83b      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e079      	b.n	80005ea <__udivmoddi4+0x146>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e076      	b.n	80005f0 <__udivmoddi4+0x14c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e029      	b.n	8000570 <__udivmoddi4+0xcc>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	469b      	mov	fp, r3
 8000548:	2320      	movs	r3, #32
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	4652      	mov	r2, sl
 800054e:	40da      	lsrs	r2, r3
 8000550:	4641      	mov	r1, r8
 8000552:	0013      	movs	r3, r2
 8000554:	464a      	mov	r2, r9
 8000556:	408a      	lsls	r2, r1
 8000558:	0017      	movs	r7, r2
 800055a:	4642      	mov	r2, r8
 800055c:	431f      	orrs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001e      	movs	r6, r3
 8000564:	42af      	cmp	r7, r5
 8000566:	d9c3      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	4643      	mov	r3, r8
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0d8      	beq.n	8000528 <__udivmoddi4+0x84>
 8000576:	07fb      	lsls	r3, r7, #31
 8000578:	0872      	lsrs	r2, r6, #1
 800057a:	431a      	orrs	r2, r3
 800057c:	4646      	mov	r6, r8
 800057e:	087b      	lsrs	r3, r7, #1
 8000580:	e00e      	b.n	80005a0 <__udivmoddi4+0xfc>
 8000582:	42ab      	cmp	r3, r5
 8000584:	d101      	bne.n	800058a <__udivmoddi4+0xe6>
 8000586:	42a2      	cmp	r2, r4
 8000588:	d80c      	bhi.n	80005a4 <__udivmoddi4+0x100>
 800058a:	1aa4      	subs	r4, r4, r2
 800058c:	419d      	sbcs	r5, r3
 800058e:	2001      	movs	r0, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2100      	movs	r1, #0
 8000596:	3e01      	subs	r6, #1
 8000598:	1824      	adds	r4, r4, r0
 800059a:	414d      	adcs	r5, r1
 800059c:	2e00      	cmp	r6, #0
 800059e:	d006      	beq.n	80005ae <__udivmoddi4+0x10a>
 80005a0:	42ab      	cmp	r3, r5
 80005a2:	d9ee      	bls.n	8000582 <__udivmoddi4+0xde>
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1924      	adds	r4, r4, r4
 80005a8:	416d      	adcs	r5, r5
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d1f8      	bne.n	80005a0 <__udivmoddi4+0xfc>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	465b      	mov	r3, fp
 80005b4:	1900      	adds	r0, r0, r4
 80005b6:	4169      	adcs	r1, r5
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db24      	blt.n	8000606 <__udivmoddi4+0x162>
 80005bc:	002b      	movs	r3, r5
 80005be:	465a      	mov	r2, fp
 80005c0:	4644      	mov	r4, r8
 80005c2:	40d3      	lsrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db2a      	blt.n	8000628 <__udivmoddi4+0x184>
 80005d2:	0026      	movs	r6, r4
 80005d4:	409e      	lsls	r6, r3
 80005d6:	0033      	movs	r3, r6
 80005d8:	0026      	movs	r6, r4
 80005da:	4647      	mov	r7, r8
 80005dc:	40be      	lsls	r6, r7
 80005de:	0032      	movs	r2, r6
 80005e0:	1a80      	subs	r0, r0, r2
 80005e2:	4199      	sbcs	r1, r3
 80005e4:	9000      	str	r0, [sp, #0]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	e79e      	b.n	8000528 <__udivmoddi4+0x84>
 80005ea:	42a3      	cmp	r3, r4
 80005ec:	d8bc      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80005ee:	e782      	b.n	80004f6 <__udivmoddi4+0x52>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	9100      	str	r1, [sp, #0]
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	40da      	lsrs	r2, r3
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	e785      	b.n	8000512 <__udivmoddi4+0x6e>
 8000606:	4642      	mov	r2, r8
 8000608:	2320      	movs	r3, #32
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4646      	mov	r6, r8
 8000610:	409a      	lsls	r2, r3
 8000612:	0023      	movs	r3, r4
 8000614:	40f3      	lsrs	r3, r6
 8000616:	4644      	mov	r4, r8
 8000618:	4313      	orrs	r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	40e2      	lsrs	r2, r4
 800061e:	001c      	movs	r4, r3
 8000620:	465b      	mov	r3, fp
 8000622:	0015      	movs	r5, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	dad4      	bge.n	80005d2 <__udivmoddi4+0x12e>
 8000628:	4642      	mov	r2, r8
 800062a:	002f      	movs	r7, r5
 800062c:	2320      	movs	r3, #32
 800062e:	0026      	movs	r6, r4
 8000630:	4097      	lsls	r7, r2
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	40de      	lsrs	r6, r3
 8000636:	003b      	movs	r3, r7
 8000638:	4333      	orrs	r3, r6
 800063a:	e7cd      	b.n	80005d8 <__udivmoddi4+0x134>

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f000 f807 	bl	8000654 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	0008      	movs	r0, r1
 800064c:	f000 f802 	bl	8000654 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			@ (mov r8, r8)

08000654 <__clzsi2>:
 8000654:	211c      	movs	r1, #28
 8000656:	2301      	movs	r3, #1
 8000658:	041b      	lsls	r3, r3, #16
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0xe>
 800065e:	0c00      	lsrs	r0, r0, #16
 8000660:	3910      	subs	r1, #16
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	4298      	cmp	r0, r3
 8000666:	d301      	bcc.n	800066c <__clzsi2+0x18>
 8000668:	0a00      	lsrs	r0, r0, #8
 800066a:	3908      	subs	r1, #8
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	4298      	cmp	r0, r3
 8000670:	d301      	bcc.n	8000676 <__clzsi2+0x22>
 8000672:	0900      	lsrs	r0, r0, #4
 8000674:	3904      	subs	r1, #4
 8000676:	a202      	add	r2, pc, #8	@ (adr r2, 8000680 <__clzsi2+0x2c>)
 8000678:	5c10      	ldrb	r0, [r2, r0]
 800067a:	1840      	adds	r0, r0, r1
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	02020304 	.word	0x02020304
 8000684:	01010101 	.word	0x01010101
	...

08000690 <vbat_gate>:
#include "vbat_lorawan.h"

/* ---- Internal helpers --------------------------------------------------- */

static inline void vbat_gate(bool enable)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	0002      	movs	r2, r0
 8000698:	1dfb      	adds	r3, r7, #7
 800069a:	701a      	strb	r2, [r3, #0]
#if VBAT_MEAS_EN_ACTIVE_HIGH
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin,
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	001a      	movs	r2, r3
 80006a2:	23a0      	movs	r3, #160	@ 0xa0
 80006a4:	05db      	lsls	r3, r3, #23
 80006a6:	2102      	movs	r1, #2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f002 fd2d 	bl	8003108 <HAL_GPIO_WritePin>
                      enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
#else
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin,
                      enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <adc_read_counts>:

static bool adc_read_counts(ADC_HandleTypeDef *hadc, uint32_t channel, uint16_t *out_counts)
{
 80006b6:	b590      	push	{r4, r7, lr}
 80006b8:	b087      	sub	sp, #28
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	60f8      	str	r0, [r7, #12]
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
    if (!hadc || !out_counts) return false;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <adc_read_counts+0x18>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d101      	bne.n	80006d2 <adc_read_counts+0x1c>
 80006ce:	2300      	movs	r3, #0
 80006d0:	e03b      	b.n	800074a <adc_read_counts+0x94>

    ADC_ChannelConfTypeDef s = {0};
 80006d2:	2410      	movs	r4, #16
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	0018      	movs	r0, r3
 80006d8:	2308      	movs	r3, #8
 80006da:	001a      	movs	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	f005 ffb5 	bl	800664c <memset>
    s.Channel = channel;
 80006e2:	0021      	movs	r1, r4
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	601a      	str	r2, [r3, #0]
#if defined(ADC_RANK_CHANNEL_NUMBER)
    s.Rank    = ADC_RANK_CHANNEL_NUMBER;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2280      	movs	r2, #128	@ 0x80
 80006ee:	0152      	lsls	r2, r2, #5
 80006f0:	605a      	str	r2, [r3, #4]
#endif
    /* NOTE (STM32L0): sampling time is set globally in hadc.Init.SamplingTime */

    if (HAL_ADC_ConfigChannel(hadc, &s) != HAL_OK) return false;
 80006f2:	187a      	adds	r2, r7, r1
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f002 f86d 	bl	80027d8 <HAL_ADC_ConfigChannel>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <adc_read_counts+0x50>
 8000702:	2300      	movs	r3, #0
 8000704:	e021      	b.n	800074a <adc_read_counts+0x94>
    if (HAL_ADC_Start(hadc) != HAL_OK) return false;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	0018      	movs	r0, r3
 800070a:	f001 ff29 	bl	8002560 <HAL_ADC_Start>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <adc_read_counts+0x60>
 8000712:	2300      	movs	r3, #0
 8000714:	e019      	b.n	800074a <adc_read_counts+0x94>
    if (HAL_ADC_PollForConversion(hadc, 5) != HAL_OK) { (void)HAL_ADC_Stop(hadc); return false; }
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2105      	movs	r1, #5
 800071a:	0018      	movs	r0, r3
 800071c:	f001 ffb4 	bl	8002688 <HAL_ADC_PollForConversion>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d005      	beq.n	8000730 <adc_read_counts+0x7a>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	0018      	movs	r0, r3
 8000728:	f001 ff6e 	bl	8002608 <HAL_ADC_Stop>
 800072c:	2300      	movs	r3, #0
 800072e:	e00c      	b.n	800074a <adc_read_counts+0x94>

    *out_counts = (uint16_t)HAL_ADC_GetValue(hadc);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	0018      	movs	r0, r3
 8000734:	f002 f844 	bl	80027c0 <HAL_ADC_GetValue>
 8000738:	0003      	movs	r3, r0
 800073a:	b29a      	uxth	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	801a      	strh	r2, [r3, #0]
    (void)HAL_ADC_Stop(hadc);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	0018      	movs	r0, r3
 8000744:	f001 ff60 	bl	8002608 <HAL_ADC_Stop>
    return true;
 8000748:	2301      	movs	r3, #1
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b007      	add	sp, #28
 8000750:	bd90      	pop	{r4, r7, pc}

08000752 <vbat_cold_compensation_mv>:


/* ---- Public API --------------------------------------------------------- */

uint16_t vbat_cold_compensation_mv(int16_t temp_c)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	0002      	movs	r2, r0
 800075a:	1dbb      	adds	r3, r7, #6
 800075c:	801a      	strh	r2, [r3, #0]
    if (temp_c >= 0) return 0;
 800075e:	1dbb      	adds	r3, r7, #6
 8000760:	2200      	movs	r2, #0
 8000762:	5e9b      	ldrsh	r3, [r3, r2]
 8000764:	2b00      	cmp	r3, #0
 8000766:	db01      	blt.n	800076c <vbat_cold_compensation_mv+0x1a>
 8000768:	2300      	movs	r3, #0
 800076a:	e00e      	b.n	800078a <vbat_cold_compensation_mv+0x38>
    /* 4 mV per °C below zero, capped at +200 mV */
    uint32_t add = (uint32_t)((-temp_c) * 4);
 800076c:	1dbb      	adds	r3, r7, #6
 800076e:	2200      	movs	r2, #0
 8000770:	5e9a      	ldrsh	r2, [r3, r2]
 8000772:	0013      	movs	r3, r2
 8000774:	079b      	lsls	r3, r3, #30
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	60fb      	str	r3, [r7, #12]
    if (add > 200U) add = 200U;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2bc8      	cmp	r3, #200	@ 0xc8
 8000780:	d901      	bls.n	8000786 <vbat_cold_compensation_mv+0x34>
 8000782:	23c8      	movs	r3, #200	@ 0xc8
 8000784:	60fb      	str	r3, [r7, #12]
    return (uint16_t)add;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	b29b      	uxth	r3, r3
}
 800078a:	0018      	movs	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	b004      	add	sp, #16
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <vbat_read_mv>:

bool vbat_read_mv(ADC_HandleTypeDef *hadc, uint32_t adc_channel, uint16_t *vbat_mv_out)
{
 8000794:	b5b0      	push	{r4, r5, r7, lr}
 8000796:	b08a      	sub	sp, #40	@ 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
    if (!hadc || !vbat_mv_out) return false;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <vbat_read_mv+0x18>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <vbat_read_mv+0x1c>
 80007ac:	2300      	movs	r3, #0
 80007ae:	e06c      	b.n	800088a <vbat_read_mv+0xf6>

    vbat_gate(true);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff ff6d 	bl	8000690 <vbat_gate>
    HAL_Delay(VBAT_SETTLE_MS);
 80007b6:	2004      	movs	r0, #4
 80007b8:	f001 fd16 	bl	80021e8 <HAL_Delay>

    uint32_t acc = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t s   = 0;
 80007c0:	2312      	movs	r3, #18
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	2200      	movs	r2, #0
 80007c6:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < VBAT_SAMPLES; i++) {
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
 80007cc:	e01c      	b.n	8000808 <vbat_read_mv+0x74>
        if (!adc_read_counts(hadc, adc_channel, &s)) { vbat_gate(false); return false; }
 80007ce:	2312      	movs	r3, #18
 80007d0:	18fa      	adds	r2, r7, r3
 80007d2:	68b9      	ldr	r1, [r7, #8]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	0018      	movs	r0, r3
 80007d8:	f7ff ff6d 	bl	80006b6 <adc_read_counts>
 80007dc:	0003      	movs	r3, r0
 80007de:	001a      	movs	r2, r3
 80007e0:	2301      	movs	r3, #1
 80007e2:	4053      	eors	r3, r2
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d004      	beq.n	80007f4 <vbat_read_mv+0x60>
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff50 	bl	8000690 <vbat_gate>
 80007f0:	2300      	movs	r3, #0
 80007f2:	e04a      	b.n	800088a <vbat_read_mv+0xf6>
        acc += s;
 80007f4:	2312      	movs	r3, #18
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	001a      	movs	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007fe:	189b      	adds	r3, r3, r2
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
    for (uint32_t i = 0; i < VBAT_SAMPLES; i++) {
 8000802:	6a3b      	ldr	r3, [r7, #32]
 8000804:	3301      	adds	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
 8000808:	6a3b      	ldr	r3, [r7, #32]
 800080a:	2b07      	cmp	r3, #7
 800080c:	d9df      	bls.n	80007ce <vbat_read_mv+0x3a>
    }

    vbat_gate(false);
 800080e:	2000      	movs	r0, #0
 8000810:	f7ff ff3e 	bl	8000690 <vbat_gate>

    uint32_t avg_counts = acc / VBAT_SAMPLES;
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	617b      	str	r3, [r7, #20]

    /* mv = counts * Vref / ADC_MAX * divider_factor; round properly */
    uint64_t mv = (uint64_t)avg_counts * (uint64_t)VREF_mV;
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	001c      	movs	r4, r3
 800081e:	2300      	movs	r3, #0
 8000820:	001d      	movs	r5, r3
 8000822:	4a1c      	ldr	r2, [pc, #112]	@ (8000894 <vbat_read_mv+0x100>)
 8000824:	2300      	movs	r3, #0
 8000826:	0020      	movs	r0, r4
 8000828:	0029      	movs	r1, r5
 800082a:	f7ff fe0d 	bl	8000448 <__aeabi_lmul>
 800082e:	0002      	movs	r2, r0
 8000830:	000b      	movs	r3, r1
 8000832:	61ba      	str	r2, [r7, #24]
 8000834:	61fb      	str	r3, [r7, #28]
    mv = (mv + (ADC_MAX_COUNTS/2)) / (uint64_t)ADC_MAX_COUNTS;
 8000836:	69ba      	ldr	r2, [r7, #24]
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	4817      	ldr	r0, [pc, #92]	@ (8000898 <vbat_read_mv+0x104>)
 800083c:	2100      	movs	r1, #0
 800083e:	1880      	adds	r0, r0, r2
 8000840:	4159      	adcs	r1, r3
 8000842:	4a16      	ldr	r2, [pc, #88]	@ (800089c <vbat_read_mv+0x108>)
 8000844:	2300      	movs	r3, #0
 8000846:	f7ff fddf 	bl	8000408 <__aeabi_uldivmod>
 800084a:	0002      	movs	r2, r0
 800084c:	000b      	movs	r3, r1
 800084e:	61ba      	str	r2, [r7, #24]
 8000850:	61fb      	str	r3, [r7, #28]
    mv *= VBAT_DIV_NUM;
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	1892      	adds	r2, r2, r2
 8000858:	415b      	adcs	r3, r3
 800085a:	61ba      	str	r2, [r7, #24]
 800085c:	61fb      	str	r3, [r7, #28]

    if (mv > 0xFFFFU) mv = 0xFFFFU;
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d107      	bne.n	8000874 <vbat_read_mv+0xe0>
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d108      	bne.n	800087c <vbat_read_mv+0xe8>
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	2380      	movs	r3, #128	@ 0x80
 800086e:	025b      	lsls	r3, r3, #9
 8000870:	429a      	cmp	r2, r3
 8000872:	d303      	bcc.n	800087c <vbat_read_mv+0xe8>
 8000874:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <vbat_read_mv+0x10c>)
 8000876:	2300      	movs	r3, #0
 8000878:	61ba      	str	r2, [r7, #24]
 800087a:	61fb      	str	r3, [r7, #28]
    *vbat_mv_out = (uint16_t)mv;
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	1c13      	adds	r3, r2, #0
 8000882:	b29a      	uxth	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	801a      	strh	r2, [r3, #0]
    return true;
 8000888:	2301      	movs	r3, #1
}
 800088a:	0018      	movs	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	b00a      	add	sp, #40	@ 0x28
 8000890:	bdb0      	pop	{r4, r5, r7, pc}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	00000ce4 	.word	0x00000ce4
 8000898:	000007ff 	.word	0x000007ff
 800089c:	00000fff 	.word	0x00000fff
 80008a0:	0000ffff 	.word	0x0000ffff

080008a4 <lorawan_encode_battery>:

uint8_t lorawan_encode_battery(uint16_t vbat_mv,
                               int16_t  temp_c,
                               bool     external_power_present,
                               bool     measurement_ok)
{
 80008a4:	b5b0      	push	{r4, r5, r7, lr}
 80008a6:	b090      	sub	sp, #64	@ 0x40
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	0005      	movs	r5, r0
 80008ac:	000c      	movs	r4, r1
 80008ae:	0010      	movs	r0, r2
 80008b0:	0019      	movs	r1, r3
 80008b2:	1dbb      	adds	r3, r7, #6
 80008b4:	1c2a      	adds	r2, r5, #0
 80008b6:	801a      	strh	r2, [r3, #0]
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	1c22      	adds	r2, r4, #0
 80008bc:	801a      	strh	r2, [r3, #0]
 80008be:	1cfb      	adds	r3, r7, #3
 80008c0:	1c02      	adds	r2, r0, #0
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	1cbb      	adds	r3, r7, #2
 80008c6:	1c0a      	adds	r2, r1, #0
 80008c8:	701a      	strb	r2, [r3, #0]
    if (external_power_present) return 0;   /* 0 = external power */
 80008ca:	1cfb      	adds	r3, r7, #3
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <lorawan_encode_battery+0x32>
 80008d2:	2300      	movs	r3, #0
 80008d4:	e08c      	b.n	80009f0 <lorawan_encode_battery+0x14c>
    if (!measurement_ok)       return 255;  /* 255 = cannot measure */
 80008d6:	1cbb      	adds	r3, r7, #2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2201      	movs	r2, #1
 80008dc:	4053      	eors	r3, r2
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <lorawan_encode_battery+0x44>
 80008e4:	23ff      	movs	r3, #255	@ 0xff
 80008e6:	e083      	b.n	80009f0 <lorawan_encode_battery+0x14c>

    uint32_t v = (uint32_t)vbat_mv + (uint32_t)vbat_cold_compensation_mv(temp_c);
 80008e8:	1dbb      	adds	r3, r7, #6
 80008ea:	881c      	ldrh	r4, [r3, #0]
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	5e9b      	ldrsh	r3, [r3, r2]
 80008f2:	0018      	movs	r0, r3
 80008f4:	f7ff ff2d 	bl	8000752 <vbat_cold_compensation_mv>
 80008f8:	0003      	movs	r3, r0
 80008fa:	18e3      	adds	r3, r4, r3
 80008fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (v > 5000U) v = 5000U; /* clamp */
 80008fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000900:	4a3d      	ldr	r2, [pc, #244]	@ (80009f8 <lorawan_encode_battery+0x154>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d901      	bls.n	800090a <lorawan_encode_battery+0x66>
 8000906:	4b3c      	ldr	r3, [pc, #240]	@ (80009f8 <lorawan_encode_battery+0x154>)
 8000908:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (v >= VBAT_SEG1_MIN_mV) {
 800090a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800090c:	4a3b      	ldr	r2, [pc, #236]	@ (80009fc <lorawan_encode_battery+0x158>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d925      	bls.n	800095e <lorawan_encode_battery+0xba>
        /* 3.30–3.60 V → 200..254 (55 steps over 300 mV) */
        const uint32_t span_mv = (VBAT_SEG1_MAX_mV - VBAT_SEG1_MIN_mV);    /* 300 */
 8000912:	2396      	movs	r3, #150	@ 0x96
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	617b      	str	r3, [r7, #20]
        const uint32_t span_lv = (LORA_SEG1_MAX - LORA_SEG1_MIN);          /* 54 */
 8000918:	2336      	movs	r3, #54	@ 0x36
 800091a:	613b      	str	r3, [r7, #16]
        uint32_t dv = (v > VBAT_SEG1_MAX_mV) ? span_mv : (v - VBAT_SEG1_MIN_mV);
 800091c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800091e:	23e1      	movs	r3, #225	@ 0xe1
 8000920:	011b      	lsls	r3, r3, #4
 8000922:	429a      	cmp	r2, r3
 8000924:	d804      	bhi.n	8000930 <lorawan_encode_battery+0x8c>
 8000926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000928:	4a35      	ldr	r2, [pc, #212]	@ (8000a00 <lorawan_encode_battery+0x15c>)
 800092a:	4694      	mov	ip, r2
 800092c:	4463      	add	r3, ip
 800092e:	e000      	b.n	8000932 <lorawan_encode_battery+0x8e>
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	60fb      	str	r3, [r7, #12]
        uint32_t lvl = LORA_SEG1_MIN + (dv * span_lv + (span_mv/2)) / span_mv;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	435a      	muls	r2, r3
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	18d3      	adds	r3, r2, r3
 8000940:	6979      	ldr	r1, [r7, #20]
 8000942:	0018      	movs	r0, r3
 8000944:	f7ff fbea 	bl	800011c <__udivsi3>
 8000948:	0003      	movs	r3, r0
 800094a:	33c8      	adds	r3, #200	@ 0xc8
 800094c:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (lvl > LORA_SEG1_MAX) lvl = LORA_SEG1_MAX;
 800094e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000950:	2bfe      	cmp	r3, #254	@ 0xfe
 8000952:	d901      	bls.n	8000958 <lorawan_encode_battery+0xb4>
 8000954:	23fe      	movs	r3, #254	@ 0xfe
 8000956:	63bb      	str	r3, [r7, #56]	@ 0x38
        return (uint8_t)lvl;
 8000958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800095a:	b2db      	uxtb	r3, r3
 800095c:	e048      	b.n	80009f0 <lorawan_encode_battery+0x14c>
    } else if (v >= VBAT_SEG2_MIN_mV) {
 800095e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000960:	23af      	movs	r3, #175	@ 0xaf
 8000962:	011b      	lsls	r3, r3, #4
 8000964:	429a      	cmp	r2, r3
 8000966:	d31e      	bcc.n	80009a6 <lorawan_encode_battery+0x102>
        /* 2.80–3.30 V → 50..199 (150 steps over 500 mV) */
        const uint32_t span_mv = (VBAT_SEG1_MIN_mV - VBAT_SEG2_MIN_mV);    /* 500 */
 8000968:	23fa      	movs	r3, #250	@ 0xfa
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	623b      	str	r3, [r7, #32]
        const uint32_t span_lv = (LORA_SEG2_MAX - LORA_SEG2_MIN);          /* 149 */
 800096e:	2395      	movs	r3, #149	@ 0x95
 8000970:	61fb      	str	r3, [r7, #28]
        uint32_t dv = v - VBAT_SEG2_MIN_mV;
 8000972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000974:	4a23      	ldr	r2, [pc, #140]	@ (8000a04 <lorawan_encode_battery+0x160>)
 8000976:	4694      	mov	ip, r2
 8000978:	4463      	add	r3, ip
 800097a:	61bb      	str	r3, [r7, #24]
        uint32_t lvl = LORA_SEG2_MIN + (dv * span_lv + (span_mv/2)) / span_mv;
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	435a      	muls	r2, r3
 8000982:	6a3b      	ldr	r3, [r7, #32]
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	18d3      	adds	r3, r2, r3
 8000988:	6a39      	ldr	r1, [r7, #32]
 800098a:	0018      	movs	r0, r3
 800098c:	f7ff fbc6 	bl	800011c <__udivsi3>
 8000990:	0003      	movs	r3, r0
 8000992:	3332      	adds	r3, #50	@ 0x32
 8000994:	637b      	str	r3, [r7, #52]	@ 0x34
        if (lvl > LORA_SEG2_MAX) lvl = LORA_SEG2_MAX;
 8000996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000998:	2bc7      	cmp	r3, #199	@ 0xc7
 800099a:	d901      	bls.n	80009a0 <lorawan_encode_battery+0xfc>
 800099c:	23c7      	movs	r3, #199	@ 0xc7
 800099e:	637b      	str	r3, [r7, #52]	@ 0x34
        return (uint8_t)lvl;
 80009a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	e024      	b.n	80009f0 <lorawan_encode_battery+0x14c>
    } else if (v >= VBAT_SEG3_MIN_mV) {
 80009a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80009a8:	23fa      	movs	r3, #250	@ 0xfa
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d31e      	bcc.n	80009ee <lorawan_encode_battery+0x14a>
        /* 2.00–2.80 V → 1..49 (49 steps over 800 mV) */
        const uint32_t span_mv = (VBAT_SEG2_MIN_mV - VBAT_SEG3_MIN_mV);    /* 800 */
 80009b0:	23c8      	movs	r3, #200	@ 0xc8
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const uint32_t span_lv = (LORA_SEG3_MAX - LORA_SEG3_MIN);          /* 48 */
 80009b6:	2330      	movs	r3, #48	@ 0x30
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint32_t dv = v - VBAT_SEG3_MIN_mV;
 80009ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009bc:	4a12      	ldr	r2, [pc, #72]	@ (8000a08 <lorawan_encode_battery+0x164>)
 80009be:	4694      	mov	ip, r2
 80009c0:	4463      	add	r3, ip
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t lvl = LORA_SEG3_MIN + (dv * span_lv + (span_mv/2)) / span_mv;
 80009c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009c8:	435a      	muls	r2, r3
 80009ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009cc:	085b      	lsrs	r3, r3, #1
 80009ce:	18d3      	adds	r3, r2, r3
 80009d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff fba2 	bl	800011c <__udivsi3>
 80009d8:	0003      	movs	r3, r0
 80009da:	3301      	adds	r3, #1
 80009dc:	633b      	str	r3, [r7, #48]	@ 0x30
        if (lvl > LORA_SEG3_MAX) lvl = LORA_SEG3_MAX;
 80009de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009e0:	2b31      	cmp	r3, #49	@ 0x31
 80009e2:	d901      	bls.n	80009e8 <lorawan_encode_battery+0x144>
 80009e4:	2331      	movs	r3, #49	@ 0x31
 80009e6:	633b      	str	r3, [r7, #48]	@ 0x30
        return (uint8_t)lvl;
 80009e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	e000      	b.n	80009f0 <lorawan_encode_battery+0x14c>
    } else {
        /* <2.00 V */
        return 1;
 80009ee:	2301      	movs	r3, #1
    }
}
 80009f0:	0018      	movs	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b010      	add	sp, #64	@ 0x40
 80009f6:	bdb0      	pop	{r4, r5, r7, pc}
 80009f8:	00001388 	.word	0x00001388
 80009fc:	00000ce3 	.word	0x00000ce3
 8000a00:	fffff31c 	.word	0xfffff31c
 8000a04:	fffff510 	.word	0xfffff510
 8000a08:	fffff830 	.word	0xfffff830

08000a0c <vbat_measure_and_encode>:

uint8_t vbat_measure_and_encode(ADC_HandleTypeDef *hadc,
                                uint32_t adc_channel,
                                int16_t  temp_c,
                                bool     external_power_present)
{
 8000a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	0019      	movs	r1, r3
 8000a18:	1dbb      	adds	r3, r7, #6
 8000a1a:	801a      	strh	r2, [r3, #0]
 8000a1c:	1d7b      	adds	r3, r7, #5
 8000a1e:	1c0a      	adds	r2, r1, #0
 8000a20:	701a      	strb	r2, [r3, #0]
    uint16_t mv = 0;
 8000a22:	2514      	movs	r5, #20
 8000a24:	197b      	adds	r3, r7, r5
 8000a26:	2200      	movs	r2, #0
 8000a28:	801a      	strh	r2, [r3, #0]
    bool ok = vbat_read_mv(hadc, adc_channel, &mv);
 8000a2a:	2617      	movs	r6, #23
 8000a2c:	19bc      	adds	r4, r7, r6
 8000a2e:	197a      	adds	r2, r7, r5
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff fead 	bl	8000794 <vbat_read_mv>
 8000a3a:	0003      	movs	r3, r0
 8000a3c:	7023      	strb	r3, [r4, #0]
    return lorawan_encode_battery(mv, temp_c, external_power_present, ok);
 8000a3e:	197b      	adds	r3, r7, r5
 8000a40:	8818      	ldrh	r0, [r3, #0]
 8000a42:	19bb      	adds	r3, r7, r6
 8000a44:	781c      	ldrb	r4, [r3, #0]
 8000a46:	1d7b      	adds	r3, r7, #5
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	1dbb      	adds	r3, r7, #6
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	5e59      	ldrsh	r1, [r3, r1]
 8000a50:	0023      	movs	r3, r4
 8000a52:	f7ff ff27 	bl	80008a4 <lorawan_encode_battery>
 8000a56:	0003      	movs	r3, r0
}
 8000a58:	0018      	movs	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b007      	add	sp, #28
 8000a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a60 <find_char_after>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


char find_char_after(const char *str, const char *keyword) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
    if (!str || !keyword) return '\0';
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d002      	beq.n	8000a76 <find_char_after+0x16>
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <find_char_after+0x1a>
 8000a76:	2300      	movs	r3, #0
 8000a78:	e02a      	b.n	8000ad0 <find_char_after+0x70>

    // Simple substring search
    const char *p = str;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	617b      	str	r3, [r7, #20]
    const char *k;

    while (*p) {
 8000a7e:	e022      	b.n	8000ac6 <find_char_after+0x66>
        const char *s = p;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	60fb      	str	r3, [r7, #12]
        k = keyword;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	613b      	str	r3, [r7, #16]
        while (*s && *k && *s == *k) {
 8000a88:	e005      	b.n	8000a96 <find_char_after+0x36>
            s++;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
            k++;
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	3301      	adds	r3, #1
 8000a94:	613b      	str	r3, [r7, #16]
        while (*s && *k && *s == *k) {
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d009      	beq.n	8000ab2 <find_char_after+0x52>
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d005      	beq.n	8000ab2 <find_char_after+0x52>
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d0eb      	beq.n	8000a8a <find_char_after+0x2a>
        }
        if (*k == '\0') {
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d102      	bne.n	8000ac0 <find_char_after+0x60>
            // Found full keyword, return next char if available
            return *s ? *s : '\0';
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	e007      	b.n	8000ad0 <find_char_after+0x70>
        }
        p++;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	617b      	str	r3, [r7, #20]
    while (*p) {
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1d8      	bne.n	8000a80 <find_char_after+0x20>
    }
    return '\0'; // Not found
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b006      	add	sp, #24
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <join>:
	  }
}


int join(UART_HandleTypeDef *huart)
{
 8000ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ada:	b0c7      	sub	sp, #284	@ 0x11c
 8000adc:	af02      	add	r7, sp, #8
 8000ade:	6078      	str	r0, [r7, #4]
	if (is_connected) return 1;
 8000ae0:	4b56      	ldr	r3, [pc, #344]	@ (8000c3c <join+0x164>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <join+0x14>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e0a3      	b.n	8000c34 <join+0x15c>
	HAL_UART_Transmit(&huart2, (uint8_t*)"AT\r\n", 4, 300);
 8000aec:	2396      	movs	r3, #150	@ 0x96
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4953      	ldr	r1, [pc, #332]	@ (8000c40 <join+0x168>)
 8000af2:	4854      	ldr	r0, [pc, #336]	@ (8000c44 <join+0x16c>)
 8000af4:	2204      	movs	r2, #4
 8000af6:	f004 fd51 	bl	800559c <HAL_UART_Transmit>
	HAL_Delay(300); // let OK come back!
 8000afa:	2396      	movs	r3, #150	@ 0x96
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	0018      	movs	r0, r3
 8000b00:	f001 fb72 	bl	80021e8 <HAL_Delay>
	uint16_t total_rcv = 0;
 8000b04:	2385      	movs	r3, #133	@ 0x85
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	801a      	strh	r2, [r3, #0]
	int16_t total_expected =11;
 8000b0e:	2387      	movs	r3, #135	@ 0x87
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	220b      	movs	r2, #11
 8000b16:	801a      	strh	r2, [r3, #0]
	uint8_t rxbuf[256] = {0};
 8000b18:	4b4b      	ldr	r3, [pc, #300]	@ (8000c48 <join+0x170>)
 8000b1a:	2288      	movs	r2, #136	@ 0x88
 8000b1c:	0052      	lsls	r2, r2, #1
 8000b1e:	189b      	adds	r3, r3, r2
 8000b20:	19db      	adds	r3, r3, r7
 8000b22:	0018      	movs	r0, r3
 8000b24:	2380      	movs	r3, #128	@ 0x80
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f005 fd8e 	bl	800664c <memset>
	HAL_UART_Transmit(&huart2, (uint8_t*)"AT+JOIN\r\n", 9, 300);
 8000b30:	2396      	movs	r3, #150	@ 0x96
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4945      	ldr	r1, [pc, #276]	@ (8000c4c <join+0x174>)
 8000b36:	4843      	ldr	r0, [pc, #268]	@ (8000c44 <join+0x16c>)
 8000b38:	2209      	movs	r2, #9
 8000b3a:	f004 fd2f 	bl	800559c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rxbuf, 4, 100);
 8000b3e:	2308      	movs	r3, #8
 8000b40:	18f9      	adds	r1, r7, r3
 8000b42:	4840      	ldr	r0, [pc, #256]	@ (8000c44 <join+0x16c>)
 8000b44:	2364      	movs	r3, #100	@ 0x64
 8000b46:	2204      	movs	r2, #4
 8000b48:	f004 fdc8 	bl	80056dc <HAL_UART_Receive>
	__HAL_UART_FLUSH_DRREGISTER(&huart2);
 8000b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c44 <join+0x16c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	699a      	ldr	r2, [r3, #24]
 8000b52:	4b3c      	ldr	r3, [pc, #240]	@ (8000c44 <join+0x16c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2108      	movs	r1, #8
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	619a      	str	r2, [r3, #24]
 8000b5c:	4b39      	ldr	r3, [pc, #228]	@ (8000c44 <join+0x16c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	699a      	ldr	r2, [r3, #24]
 8000b62:	4b38      	ldr	r3, [pc, #224]	@ (8000c44 <join+0x16c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2110      	movs	r1, #16
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	619a      	str	r2, [r3, #24]
	__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8000b6c:	4b35      	ldr	r3, [pc, #212]	@ (8000c44 <join+0x16c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2210      	movs	r2, #16
 8000b72:	621a      	str	r2, [r3, #32]

	while (total_expected > 0)
 8000b74:	e019      	b.n	8000baa <join+0xd2>
	{
		  HAL_UARTEx_ReceiveToIdle(&huart2, rxbuf + total_rcv, 100, &total_rcv, 10000);
 8000b76:	2085      	movs	r0, #133	@ 0x85
 8000b78:	0040      	lsls	r0, r0, #1
 8000b7a:	183b      	adds	r3, r7, r0
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	001a      	movs	r2, r3
 8000b80:	2308      	movs	r3, #8
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	1899      	adds	r1, r3, r2
 8000b86:	0004      	movs	r4, r0
 8000b88:	183b      	adds	r3, r7, r0
 8000b8a:	482e      	ldr	r0, [pc, #184]	@ (8000c44 <join+0x16c>)
 8000b8c:	4a30      	ldr	r2, [pc, #192]	@ (8000c50 <join+0x178>)
 8000b8e:	9200      	str	r2, [sp, #0]
 8000b90:	2264      	movs	r2, #100	@ 0x64
 8000b92:	f005 fc05 	bl	80063a0 <HAL_UARTEx_ReceiveToIdle>
		  total_expected -= total_rcv;
 8000b96:	2187      	movs	r1, #135	@ 0x87
 8000b98:	0049      	lsls	r1, r1, #1
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	881a      	ldrh	r2, [r3, #0]
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	801a      	strh	r2, [r3, #0]
	while (total_expected > 0)
 8000baa:	2387      	movs	r3, #135	@ 0x87
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	5e9b      	ldrsh	r3, [r3, r2]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	dcde      	bgt.n	8000b76 <join+0x9e>
	}

	__HAL_UART_FLUSH_DRREGISTER(&huart2);
 8000bb8:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <join+0x16c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	699a      	ldr	r2, [r3, #24]
 8000bbe:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <join+0x16c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	619a      	str	r2, [r3, #24]
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c44 <join+0x16c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	699a      	ldr	r2, [r3, #24]
 8000bce:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <join+0x16c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	619a      	str	r2, [r3, #24]
	__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <join+0x16c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2210      	movs	r2, #16
 8000bde:	621a      	str	r2, [r3, #32]

	char result = find_char_after((const char*)rxbuf, "JOIN: [");
 8000be0:	250e      	movs	r5, #14
 8000be2:	35ff      	adds	r5, #255	@ 0xff
 8000be4:	197c      	adds	r4, r7, r5
 8000be6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c54 <join+0x17c>)
 8000be8:	2608      	movs	r6, #8
 8000bea:	19bb      	adds	r3, r7, r6
 8000bec:	0011      	movs	r1, r2
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff ff36 	bl	8000a60 <find_char_after>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	7023      	strb	r3, [r4, #0]
	char error14 = find_char_after((const char*)rxbuf, "\nERROR 1");
 8000bf8:	2386      	movs	r3, #134	@ 0x86
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	18fc      	adds	r4, r7, r3
 8000bfe:	4a16      	ldr	r2, [pc, #88]	@ (8000c58 <join+0x180>)
 8000c00:	19bb      	adds	r3, r7, r6
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff ff2b 	bl	8000a60 <find_char_after>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	7023      	strb	r3, [r4, #0]
	if (result == 'O' || error14 == '4')
 8000c0e:	197b      	adds	r3, r7, r5
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b4f      	cmp	r3, #79	@ 0x4f
 8000c14:	d005      	beq.n	8000c22 <join+0x14a>
 8000c16:	2386      	movs	r3, #134	@ 0x86
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b34      	cmp	r3, #52	@ 0x34
 8000c20:	d104      	bne.n	8000c2c <join+0x154>
	{
		is_connected = 1;
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <join+0x164>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
		return 1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e003      	b.n	8000c34 <join+0x15c>
		__NOP(); // success
	}
	else
	{
		is_connected = 0;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	@ (8000c3c <join+0x164>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
		return 0;
 8000c32:	2300      	movs	r3, #0
		__NOP(); // fail
	}
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b045      	add	sp, #276	@ 0x114
 8000c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c3c:	20000260 	.word	0x20000260
 8000c40:	08006f58 	.word	0x08006f58
 8000c44:	200001d8 	.word	0x200001d8
 8000c48:	fffffef8 	.word	0xfffffef8
 8000c4c:	08006f6c 	.word	0x08006f6c
 8000c50:	00002710 	.word	0x00002710
 8000c54:	08006f78 	.word	0x08006f78
 8000c58:	08006f80 	.word	0x08006f80

08000c5c <lorawan_set_battery_level>:
		  return 1;
	  }
}

int lorawan_set_battery_level(UART_HandleTypeDef *huart, uint8_t battery_level)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	@ 0x30
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	000a      	movs	r2, r1
 8000c66:	1cfb      	adds	r3, r7, #3
 8000c68:	701a      	strb	r2, [r3, #0]
    char cmd[32];   // enough space for command
    int len = snprintf(cmd, sizeof(cmd), "AT+BAT %u\r\n", battery_level);
 8000c6a:	1cfb      	adds	r3, r7, #3
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	4a22      	ldr	r2, [pc, #136]	@ (8000cf8 <lorawan_set_battery_level+0x9c>)
 8000c70:	210c      	movs	r1, #12
 8000c72:	1878      	adds	r0, r7, r1
 8000c74:	2120      	movs	r1, #32
 8000c76:	f005 fcb3 	bl	80065e0 <sniprintf>
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (len <= 0 || len >= sizeof(cmd)) {
 8000c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	dd02      	ble.n	8000c8a <lorawan_set_battery_level+0x2e>
 8000c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c86:	2b1f      	cmp	r3, #31
 8000c88:	d902      	bls.n	8000c90 <lorawan_set_battery_level+0x34>
        return -1; // encoding error or buffer too small
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	425b      	negs	r3, r3
 8000c8e:	e02f      	b.n	8000cf0 <lorawan_set_battery_level+0x94>
    }

    // Flush / clear UART
    HAL_UART_AbortReceive(huart);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f004 fe08 	bl	80058a8 <HAL_UART_AbortReceive>
    __HAL_UART_FLUSH_DRREGISTER(huart);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	699a      	ldr	r2, [r3, #24]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	619a      	str	r2, [r3, #24]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	699a      	ldr	r2, [r3, #24]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	619a      	str	r2, [r3, #24]
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2210      	movs	r2, #16
 8000cbe:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FLAG(huart,
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	621a      	str	r2, [r3, #32]
        UART_CLEAR_OREF | UART_CLEAR_FEF | UART_CLEAR_PEF | UART_CLEAR_NEF);

    // Transmit command
    if (HAL_UART_Transmit(huart, (uint8_t*)cmd, (uint16_t)len, 300) != HAL_OK) {
 8000cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	2396      	movs	r3, #150	@ 0x96
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	210c      	movs	r1, #12
 8000cd2:	1879      	adds	r1, r7, r1
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f004 fc61 	bl	800559c <HAL_UART_Transmit>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d002      	beq.n	8000ce4 <lorawan_set_battery_level+0x88>
        return -2; // TX error
 8000cde:	2302      	movs	r3, #2
 8000ce0:	425b      	negs	r3, r3
 8000ce2:	e005      	b.n	8000cf0 <lorawan_set_battery_level+0x94>
    }

    HAL_Delay(300);
 8000ce4:	2396      	movs	r3, #150	@ 0x96
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f001 fa7d 	bl	80021e8 <HAL_Delay>
    return 0; // success
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b00c      	add	sp, #48	@ 0x30
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	08006f98 	.word	0x08006f98

08000cfc <LoRaWAN_SendHex>:




void LoRaWAN_SendHex(const uint8_t *payload, size_t length)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	@ 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
    static const char HEX[16] = "0123456789ABCDEF";
    static const char prefix[] = "AT+SEND \"";
    static const char suffix[] = "\"\r\n";

    if (!payload || length == 0) return;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d100      	bne.n	8000d0e <LoRaWAN_SendHex+0x12>
 8000d0c:	e078      	b.n	8000e00 <LoRaWAN_SendHex+0x104>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d100      	bne.n	8000d16 <LoRaWAN_SendHex+0x1a>
 8000d14:	e074      	b.n	8000e00 <LoRaWAN_SendHex+0x104>

    // Max wire size = len*2 hex + 8(prefix) + 3(suffix)
    // 242B -> 484 + 11 = 495 bytes fits in 512
    static uint8_t txbuf[512];

    const size_t prefix_len = sizeof(prefix) - 1;
 8000d16:	2309      	movs	r3, #9
 8000d18:	617b      	str	r3, [r7, #20]
    const size_t suffix_len = sizeof(suffix) - 1;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	613b      	str	r3, [r7, #16]
    const size_t need = prefix_len + (length * 2u) + suffix_len;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	005a      	lsls	r2, r3, #1
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	18d3      	adds	r3, r2, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	18d3      	adds	r3, r2, r3
 8000d2a:	60fb      	str	r3, [r7, #12]

    if (need > sizeof(txbuf)) {
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d866      	bhi.n	8000e04 <LoRaWAN_SendHex+0x108>
        // Payload too large for our static buffer; don't send a truncated command
        return;
    }

    size_t idx = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24

    // Copy prefix
    for (size_t i = 0; i < prefix_len; ++i) txbuf[idx++] = (uint8_t)prefix[i];
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
 8000d3e:	e00b      	b.n	8000d58 <LoRaWAN_SendHex+0x5c>
 8000d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	627a      	str	r2, [r7, #36]	@ 0x24
 8000d46:	4931      	ldr	r1, [pc, #196]	@ (8000e0c <LoRaWAN_SendHex+0x110>)
 8000d48:	6a3a      	ldr	r2, [r7, #32]
 8000d4a:	188a      	adds	r2, r1, r2
 8000d4c:	7811      	ldrb	r1, [r2, #0]
 8000d4e:	4a30      	ldr	r2, [pc, #192]	@ (8000e10 <LoRaWAN_SendHex+0x114>)
 8000d50:	54d1      	strb	r1, [r2, r3]
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	3301      	adds	r3, #1
 8000d56:	623b      	str	r3, [r7, #32]
 8000d58:	6a3a      	ldr	r2, [r7, #32]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d3ef      	bcc.n	8000d40 <LoRaWAN_SendHex+0x44>

    // Hex-encode payload
    for (size_t i = 0; i < length; ++i) {
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
 8000d64:	e020      	b.n	8000da8 <LoRaWAN_SendHex+0xac>
        uint8_t b = payload[i];
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	18d2      	adds	r2, r2, r3
 8000d6c:	200b      	movs	r0, #11
 8000d6e:	183b      	adds	r3, r7, r0
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	701a      	strb	r2, [r3, #0]
        txbuf[idx++] = (uint8_t)HEX[b >> 4];
 8000d74:	183b      	adds	r3, r7, r0
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	091b      	lsrs	r3, r3, #4
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d80:	1c5a      	adds	r2, r3, #1
 8000d82:	627a      	str	r2, [r7, #36]	@ 0x24
 8000d84:	4a23      	ldr	r2, [pc, #140]	@ (8000e14 <LoRaWAN_SendHex+0x118>)
 8000d86:	5c51      	ldrb	r1, [r2, r1]
 8000d88:	4a21      	ldr	r2, [pc, #132]	@ (8000e10 <LoRaWAN_SendHex+0x114>)
 8000d8a:	54d1      	strb	r1, [r2, r3]
        txbuf[idx++] = (uint8_t)HEX[b & 0x0F];
 8000d8c:	183b      	adds	r3, r7, r0
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	220f      	movs	r2, #15
 8000d92:	401a      	ands	r2, r3
 8000d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d96:	1c59      	adds	r1, r3, #1
 8000d98:	6279      	str	r1, [r7, #36]	@ 0x24
 8000d9a:	491e      	ldr	r1, [pc, #120]	@ (8000e14 <LoRaWAN_SendHex+0x118>)
 8000d9c:	5c89      	ldrb	r1, [r1, r2]
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e10 <LoRaWAN_SendHex+0x114>)
 8000da0:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < length; ++i) {
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3301      	adds	r3, #1
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	69fa      	ldr	r2, [r7, #28]
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d3da      	bcc.n	8000d66 <LoRaWAN_SendHex+0x6a>
    }

    // Copy suffix
    for (size_t i = 0; i < suffix_len; ++i) txbuf[idx++] = (uint8_t)suffix[i];
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	e00b      	b.n	8000dce <LoRaWAN_SendHex+0xd2>
 8000db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db8:	1c5a      	adds	r2, r3, #1
 8000dba:	627a      	str	r2, [r7, #36]	@ 0x24
 8000dbc:	4916      	ldr	r1, [pc, #88]	@ (8000e18 <LoRaWAN_SendHex+0x11c>)
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	188a      	adds	r2, r1, r2
 8000dc2:	7811      	ldrb	r1, [r2, #0]
 8000dc4:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <LoRaWAN_SendHex+0x114>)
 8000dc6:	54d1      	strb	r1, [r2, r3]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d3ef      	bcc.n	8000db6 <LoRaWAN_SendHex+0xba>

    HAL_UART_Transmit(&huart2, (uint8_t*)"AT\r\n", 4, 300);
 8000dd6:	2396      	movs	r3, #150	@ 0x96
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4910      	ldr	r1, [pc, #64]	@ (8000e1c <LoRaWAN_SendHex+0x120>)
 8000ddc:	4810      	ldr	r0, [pc, #64]	@ (8000e20 <LoRaWAN_SendHex+0x124>)
 8000dde:	2204      	movs	r2, #4
 8000de0:	f004 fbdc 	bl	800559c <HAL_UART_Transmit>
    HAL_Delay(300);
 8000de4:	2396      	movs	r3, #150	@ 0x96
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	0018      	movs	r0, r3
 8000dea:	f001 f9fd 	bl	80021e8 <HAL_Delay>
    // Exactly one TX
    HAL_UART_Transmit(&huart2, txbuf, (uint16_t)idx, 300);
 8000dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	2396      	movs	r3, #150	@ 0x96
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4906      	ldr	r1, [pc, #24]	@ (8000e10 <LoRaWAN_SendHex+0x114>)
 8000df8:	4809      	ldr	r0, [pc, #36]	@ (8000e20 <LoRaWAN_SendHex+0x124>)
 8000dfa:	f004 fbcf 	bl	800559c <HAL_UART_Transmit>
 8000dfe:	e002      	b.n	8000e06 <LoRaWAN_SendHex+0x10a>
    if (!payload || length == 0) return;
 8000e00:	46c0      	nop			@ (mov r8, r8)
 8000e02:	e000      	b.n	8000e06 <LoRaWAN_SendHex+0x10a>
        return;
 8000e04:	46c0      	nop			@ (mov r8, r8)
}
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b00a      	add	sp, #40	@ 0x28
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	08006fa4 	.word	0x08006fa4
 8000e10:	20000268 	.word	0x20000268
 8000e14:	08006fb0 	.word	0x08006fb0
 8000e18:	08006fc0 	.word	0x08006fc0
 8000e1c:	08006f58 	.word	0x08006f58
 8000e20:	200001d8 	.word	0x200001d8

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b5b0      	push	{r4, r5, r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2a:	f001 f96d 	bl	8002108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2e:	f000 f89b 	bl	8000f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e32:	f000 fa5b 	bl	80012ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e36:	f000 fa29 	bl	800128c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000e3a:	f000 f9f3 	bl	8001224 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000e3e:	f000 f9bd 	bl	80011bc <MX_RTC_Init>
  MX_I2C1_Init();
 8000e42:	f000 f97b 	bl	800113c <MX_I2C1_Init>
  MX_ADC_Init();
 8000e46:	f000 f915 	bl	8001074 <MX_ADC_Init>





  HAL_GPIO_WritePin(DBG_LED_GPIO_Port, DBG_LED_Pin, GPIO_PIN_SET);
 8000e4a:	23a0      	movs	r3, #160	@ 0xa0
 8000e4c:	05db      	lsls	r3, r3, #23
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2120      	movs	r1, #32
 8000e52:	0018      	movs	r0, r3
 8000e54:	f002 f958 	bl	8003108 <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */
	// Check if it's time for LoRaWAN transmission
	// Transmit on first run, then every WAKEUPS_PER_CYCLE wake-ups
	// With SLEEP_TIME_MINUTES=2, WAKEUPS_PER_CYCLE=8, so we transmit every 8 wake-ups
	if (first_run || wakeup_counter >= WAKEUPS_PER_CYCLE)
 8000e58:	4b3b      	ldr	r3, [pc, #236]	@ (8000f48 <main+0x124>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d104      	bne.n	8000e6a <main+0x46>
 8000e60:	4b3a      	ldr	r3, [pc, #232]	@ (8000f4c <main+0x128>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2201      	movs	r2, #1
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d3f6      	bcc.n	8000e58 <main+0x34>
	{
		// Reset counter for next cycle
		wakeup_counter = 0;
 8000e6a:	4b38      	ldr	r3, [pc, #224]	@ (8000f4c <main+0x128>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]


//		if (first_run)
//		{
			first_run = false;
 8000e70:	4b35      	ldr	r3, [pc, #212]	@ (8000f48 <main+0x124>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
			// Check for connection again just incase on initial startup, we didn't connect
			if(is_connected == 0)
 8000e76:	4b36      	ldr	r3, [pc, #216]	@ (8000f50 <main+0x12c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d103      	bne.n	8000e86 <main+0x62>
			{
				join(&huart2);
 8000e7e:	4b35      	ldr	r3, [pc, #212]	@ (8000f54 <main+0x130>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f7ff fe29 	bl	8000ad8 <join>
			}
			HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8000e86:	4b34      	ldr	r3, [pc, #208]	@ (8000f58 <main+0x134>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2120      	movs	r1, #32
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f002 f93b 	bl	8003108 <HAL_GPIO_WritePin>
			HAL_Delay(1000); // Increased delay for sensor power-up and stabilization
 8000e92:	23fa      	movs	r3, #250	@ 0xfa
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	0018      	movs	r0, r3
 8000e98:	f001 f9a6 	bl	80021e8 <HAL_Delay>
			scan_i2c_bus();
 8000e9c:	f000 fd96 	bl	80019cc <scan_i2c_bus>
			bool i2c_success = sensor_init_and_read();
 8000ea0:	250f      	movs	r5, #15
 8000ea2:	197c      	adds	r4, r7, r5
 8000ea4:	f000 fdba 	bl	8001a1c <sensor_init_and_read>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	7023      	strb	r3, [r4, #0]
			HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8000eac:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <main+0x134>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f002 f928 	bl	8003108 <HAL_GPIO_WritePin>
			if (i2c_success)
 8000eb8:	197b      	adds	r3, r7, r5
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d03f      	beq.n	8000f40 <main+0x11c>
			{
				HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin, GPIO_PIN_SET);
 8000ec0:	4b25      	ldr	r3, [pc, #148]	@ (8000f58 <main+0x134>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2121      	movs	r1, #33	@ 0x21
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f002 f91e 	bl	8003108 <HAL_GPIO_WritePin>
				HAL_Delay(300); // just tto let the power stabalize
 8000ecc:	2396      	movs	r3, #150	@ 0x96
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f001 f989 	bl	80021e8 <HAL_Delay>
				int aproxBatteryTemp_c = ((calculated_temp - 55) / 10);
 8000ed6:	4b21      	ldr	r3, [pc, #132]	@ (8000f5c <main+0x138>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	3b37      	subs	r3, #55	@ 0x37
 8000edc:	210a      	movs	r1, #10
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff f9a6 	bl	8000230 <__divsi3>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	60bb      	str	r3, [r7, #8]
				uint8_t battery = vbat_measure_and_encode(&hadc, ADC_CHANNEL_0, aproxBatteryTemp_c, /*external_power_present=*/false);
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	1dfc      	adds	r4, r7, #7
 8000eee:	481c      	ldr	r0, [pc, #112]	@ (8000f60 <main+0x13c>)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f7ff fd8a 	bl	8000a0c <vbat_measure_and_encode>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	7023      	strb	r3, [r4, #0]
				HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8000efc:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <main+0x134>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	2121      	movs	r1, #33	@ 0x21
 8000f02:	0018      	movs	r0, r3
 8000f04:	f002 f900 	bl	8003108 <HAL_GPIO_WritePin>
				lorawan_set_battery_level(&huart2, battery);
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <main+0x130>)
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff fea3 	bl	8000c5c <lorawan_set_battery_level>

				uint8_t payload[5];
				payload[0] = (uint8_t)(calculated_temp >> 8);     // high byte
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <main+0x138>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	003b      	movs	r3, r7
 8000f22:	701a      	strb	r2, [r3, #0]
				payload[1] = (uint8_t)(calculated_temp & 0xFF);   // low byte
 8000f24:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <main+0x138>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	003b      	movs	r3, r7
 8000f2c:	705a      	strb	r2, [r3, #1]
				payload[2] = calculated_hum;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <main+0x140>)
 8000f30:	781a      	ldrb	r2, [r3, #0]
 8000f32:	003b      	movs	r3, r7
 8000f34:	709a      	strb	r2, [r3, #2]
				LoRaWAN_SendHex(payload, 3);
 8000f36:	003b      	movs	r3, r7
 8000f38:	2103      	movs	r1, #3
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff fede 	bl	8000cfc <LoRaWAN_SendHex>
			}

//		}
//		configWakeupTime();
		EnterDeepSleepMode();
 8000f40:	f000 fb04 	bl	800154c <EnterDeepSleepMode>
	if (first_run || wakeup_counter >= WAKEUPS_PER_CYCLE)
 8000f44:	e788      	b.n	8000e58 <main+0x34>
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000264 	.word	0x20000264
 8000f50:	20000260 	.word	0x20000260
 8000f54:	200001d8 	.word	0x200001d8
 8000f58:	50000400 	.word	0x50000400
 8000f5c:	20000476 	.word	0x20000476
 8000f60:	2000007c 	.word	0x2000007c
 8000f64:	20000478 	.word	0x20000478

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b09f      	sub	sp, #124	@ 0x7c
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	2440      	movs	r4, #64	@ 0x40
 8000f70:	193b      	adds	r3, r7, r4
 8000f72:	0018      	movs	r0, r3
 8000f74:	2338      	movs	r3, #56	@ 0x38
 8000f76:	001a      	movs	r2, r3
 8000f78:	2100      	movs	r1, #0
 8000f7a:	f005 fb67 	bl	800664c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7e:	232c      	movs	r3, #44	@ 0x2c
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	0018      	movs	r0, r3
 8000f84:	2314      	movs	r3, #20
 8000f86:	001a      	movs	r2, r3
 8000f88:	2100      	movs	r1, #0
 8000f8a:	f005 fb5f 	bl	800664c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	0018      	movs	r0, r3
 8000f92:	2328      	movs	r3, #40	@ 0x28
 8000f94:	001a      	movs	r2, r3
 8000f96:	2100      	movs	r1, #0
 8000f98:	f005 fb58 	bl	800664c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9c:	4b32      	ldr	r3, [pc, #200]	@ (8001068 <SystemClock_Config+0x100>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a32      	ldr	r2, [pc, #200]	@ (800106c <SystemClock_Config+0x104>)
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	4b30      	ldr	r3, [pc, #192]	@ (8001068 <SystemClock_Config+0x100>)
 8000fa6:	2180      	movs	r1, #128	@ 0x80
 8000fa8:	0109      	lsls	r1, r1, #4
 8000faa:	430a      	orrs	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fae:	f003 f809 	bl	8003fc4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001070 <SystemClock_Config+0x108>)
 8000fb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001070 <SystemClock_Config+0x108>)
 8000fb8:	492c      	ldr	r1, [pc, #176]	@ (800106c <SystemClock_Config+0x104>)
 8000fba:	400a      	ands	r2, r1
 8000fbc:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	2214      	movs	r2, #20
 8000fc2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	2280      	movs	r2, #128	@ 0x80
 8000fc8:	0052      	lsls	r2, r2, #1
 8000fca:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fcc:	0021      	movs	r1, r4
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	22a0      	movs	r2, #160	@ 0xa0
 8000fde:	0212      	lsls	r2, r2, #8
 8000fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	0018      	movs	r0, r3
 8000fec:	f003 f8c4 	bl	8004178 <HAL_RCC_OscConfig>
 8000ff0:	1e03      	subs	r3, r0, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ff4:	f000 fb3e 	bl	8001674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff8:	212c      	movs	r1, #44	@ 0x2c
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2100      	movs	r1, #0
 800101c:	0018      	movs	r0, r3
 800101e:	f003 fc7f 	bl	8004920 <HAL_RCC_ClockConfig>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001026:	f000 fb25 	bl	8001674 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	222b      	movs	r2, #43	@ 0x2b
 800102e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2280      	movs	r2, #128	@ 0x80
 8001046:	0252      	lsls	r2, r2, #9
 8001048:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	0018      	movs	r0, r3
 800104e:	f003 fe6b 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001056:	f000 fb0d 	bl	8001674 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 800105a:	f004 f803 	bl	8005064 <HAL_RCCEx_EnableLSECSS>
}
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b01f      	add	sp, #124	@ 0x7c
 8001064:	bd90      	pop	{r4, r7, pc}
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	40007000 	.word	0x40007000
 800106c:	ffffe7ff 	.word	0xffffe7ff
 8001070:	40021000 	.word	0x40021000

08001074 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107a:	003b      	movs	r3, r7
 800107c:	0018      	movs	r0, r3
 800107e:	2308      	movs	r3, #8
 8001080:	001a      	movs	r2, r3
 8001082:	2100      	movs	r1, #0
 8001084:	f005 fae2 	bl	800664c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001088:	4b2a      	ldr	r3, [pc, #168]	@ (8001134 <MX_ADC_Init+0xc0>)
 800108a:	4a2b      	ldr	r2, [pc, #172]	@ (8001138 <MX_ADC_Init+0xc4>)
 800108c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800108e:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <MX_ADC_Init+0xc0>)
 8001090:	2200      	movs	r2, #0
 8001092:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001094:	4b27      	ldr	r3, [pc, #156]	@ (8001134 <MX_ADC_Init+0xc0>)
 8001096:	22c0      	movs	r2, #192	@ 0xc0
 8001098:	0612      	lsls	r2, r2, #24
 800109a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800109c:	4b25      	ldr	r3, [pc, #148]	@ (8001134 <MX_ADC_Init+0xc0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80010a2:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <MX_ADC_Init+0xc0>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80010a8:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <MX_ADC_Init+0xc0>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ae:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <MX_ADC_Init+0xc0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <MX_ADC_Init+0xc0>)
 80010b6:	2220      	movs	r2, #32
 80010b8:	2100      	movs	r1, #0
 80010ba:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <MX_ADC_Init+0xc0>)
 80010be:	2221      	movs	r2, #33	@ 0x21
 80010c0:	2100      	movs	r1, #0
 80010c2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_ADC_Init+0xc0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MX_ADC_Init+0xc0>)
 80010cc:	22c2      	movs	r2, #194	@ 0xc2
 80010ce:	32ff      	adds	r2, #255	@ 0xff
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80010d2:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <MX_ADC_Init+0xc0>)
 80010d4:	222c      	movs	r2, #44	@ 0x2c
 80010d6:	2100      	movs	r1, #0
 80010d8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010da:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <MX_ADC_Init+0xc0>)
 80010dc:	2204      	movs	r2, #4
 80010de:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e0:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_ADC_Init+0xc0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <MX_ADC_Init+0xc0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_ADC_Init+0xc0>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <MX_ADC_Init+0xc0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80010f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_ADC_Init+0xc0>)
 80010fa:	0018      	movs	r0, r3
 80010fc:	f001 f8bc 	bl	8002278 <HAL_ADC_Init>
 8001100:	1e03      	subs	r3, r0, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001104:	f000 fab6 	bl	8001674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001108:	003b      	movs	r3, r7
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800110e:	003b      	movs	r3, r7
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	0152      	lsls	r2, r2, #5
 8001114:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001116:	003a      	movs	r2, r7
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_ADC_Init+0xc0>)
 800111a:	0011      	movs	r1, r2
 800111c:	0018      	movs	r0, r3
 800111e:	f001 fb5b 	bl	80027d8 <HAL_ADC_ConfigChannel>
 8001122:	1e03      	subs	r3, r0, #0
 8001124:	d001      	beq.n	800112a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001126:	f000 faa5 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	2000007c 	.word	0x2000007c
 8001138:	40012400 	.word	0x40012400

0800113c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001140:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <MX_I2C1_Init+0x78>)
 8001142:	4a1d      	ldr	r2, [pc, #116]	@ (80011b8 <MX_I2C1_Init+0x7c>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8001146:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <MX_I2C1_Init+0x78>)
 8001148:	22c1      	movs	r2, #193	@ 0xc1
 800114a:	00d2      	lsls	r2, r2, #3
 800114c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <MX_I2C1_Init+0x78>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <MX_I2C1_Init+0x78>)
 8001156:	2201      	movs	r2, #1
 8001158:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115a:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <MX_I2C1_Init+0x78>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <MX_I2C1_Init+0x78>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <MX_I2C1_Init+0x78>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_I2C1_Init+0x78>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <MX_I2C1_Init+0x78>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_I2C1_Init+0x78>)
 800117a:	0018      	movs	r0, r3
 800117c:	f001 ffe2 	bl	8003144 <HAL_I2C_Init>
 8001180:	1e03      	subs	r3, r0, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001184:	f000 fa76 	bl	8001674 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001188:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <MX_I2C1_Init+0x78>)
 800118a:	2100      	movs	r1, #0
 800118c:	0018      	movs	r0, r3
 800118e:	f002 fe81 	bl	8003e94 <HAL_I2CEx_ConfigAnalogFilter>
 8001192:	1e03      	subs	r3, r0, #0
 8001194:	d001      	beq.n	800119a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001196:	f000 fa6d 	bl	8001674 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_I2C1_Init+0x78>)
 800119c:	2100      	movs	r1, #0
 800119e:	0018      	movs	r0, r3
 80011a0:	f002 fec4 	bl	8003f2c <HAL_I2CEx_ConfigDigitalFilter>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80011a8:	f000 fa64 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	200000d8 	.word	0x200000d8
 80011b8:	40005400 	.word	0x40005400

080011bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <MX_RTC_Init+0x60>)
 80011c2:	4a17      	ldr	r2, [pc, #92]	@ (8001220 <MX_RTC_Init+0x64>)
 80011c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <MX_RTC_Init+0x60>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <MX_RTC_Init+0x60>)
 80011ce:	227f      	movs	r2, #127	@ 0x7f
 80011d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_RTC_Init+0x60>)
 80011d4:	22ff      	movs	r2, #255	@ 0xff
 80011d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011d8:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MX_RTC_Init+0x60>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_RTC_Init+0x60>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011e4:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <MX_RTC_Init+0x60>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_RTC_Init+0x60>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <MX_RTC_Init+0x60>)
 80011f2:	0018      	movs	r0, r3
 80011f4:	f003 ff44 	bl	8005080 <HAL_RTC_Init>
 80011f8:	1e03      	subs	r3, r0, #0
 80011fa:	d001      	beq.n	8001200 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80011fc:	f000 fa3a 	bl	8001674 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_RTC_Init+0x60>)
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	0018      	movs	r0, r3
 8001208:	f004 f86c 	bl	80052e4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800120c:	1e03      	subs	r3, r0, #0
 800120e:	d001      	beq.n	8001214 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001210:	f000 fa30 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001214:	46c0      	nop			@ (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	2000012c 	.word	0x2000012c
 8001220:	40002800 	.word	0x40002800

08001224 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001228:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <MX_USART1_UART_Init+0x60>)
 800122a:	4a17      	ldr	r2, [pc, #92]	@ (8001288 <MX_USART1_UART_Init+0x64>)
 800122c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <MX_USART1_UART_Init+0x60>)
 8001230:	22e1      	movs	r2, #225	@ 0xe1
 8001232:	0252      	lsls	r2, r2, #9
 8001234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <MX_USART1_UART_Init+0x60>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_USART1_UART_Init+0x60>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <MX_USART1_UART_Init+0x60>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_USART1_UART_Init+0x60>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <MX_USART1_UART_Init+0x60>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <MX_USART1_UART_Init+0x60>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <MX_USART1_UART_Init+0x60>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <MX_USART1_UART_Init+0x60>)
 8001262:	2220      	movs	r2, #32
 8001264:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <MX_USART1_UART_Init+0x60>)
 8001268:	2280      	movs	r2, #128	@ 0x80
 800126a:	0192      	lsls	r2, r2, #6
 800126c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800126e:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <MX_USART1_UART_Init+0x60>)
 8001270:	0018      	movs	r0, r3
 8001272:	f004 f93f 	bl	80054f4 <HAL_UART_Init>
 8001276:	1e03      	subs	r3, r0, #0
 8001278:	d001      	beq.n	800127e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800127a:	f000 f9fb 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000150 	.word	0x20000150
 8001288:	40013800 	.word	0x40013800

0800128c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001290:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 8001292:	4a15      	ldr	r2, [pc, #84]	@ (80012e8 <MX_USART2_UART_Init+0x5c>)
 8001294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001296:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 8001298:	2296      	movs	r2, #150	@ 0x96
 800129a:	0192      	lsls	r2, r2, #6
 800129c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ce:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <MX_USART2_UART_Init+0x58>)
 80012d0:	0018      	movs	r0, r3
 80012d2:	f004 f90f 	bl	80054f4 <HAL_UART_Init>
 80012d6:	1e03      	subs	r3, r0, #0
 80012d8:	d001      	beq.n	80012de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012da:	f000 f9cb 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200001d8 	.word	0x200001d8
 80012e8:	40004400 	.word	0x40004400

080012ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b089      	sub	sp, #36	@ 0x24
 80012f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	240c      	movs	r4, #12
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	0018      	movs	r0, r3
 80012f8:	2314      	movs	r3, #20
 80012fa:	001a      	movs	r2, r3
 80012fc:	2100      	movs	r1, #0
 80012fe:	f005 f9a5 	bl	800664c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	4b2d      	ldr	r3, [pc, #180]	@ (80013b8 <MX_GPIO_Init+0xcc>)
 8001304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001306:	4b2c      	ldr	r3, [pc, #176]	@ (80013b8 <MX_GPIO_Init+0xcc>)
 8001308:	2104      	movs	r1, #4
 800130a:	430a      	orrs	r2, r1
 800130c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800130e:	4b2a      	ldr	r3, [pc, #168]	@ (80013b8 <MX_GPIO_Init+0xcc>)
 8001310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001312:	2204      	movs	r2, #4
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <MX_GPIO_Init+0xcc>)
 800131c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800131e:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <MX_GPIO_Init+0xcc>)
 8001320:	2101      	movs	r1, #1
 8001322:	430a      	orrs	r2, r1
 8001324:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001326:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <MX_GPIO_Init+0xcc>)
 8001328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132a:	2201      	movs	r2, #1
 800132c:	4013      	ands	r3, r2
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <MX_GPIO_Init+0xcc>)
 8001334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001336:	4b20      	ldr	r3, [pc, #128]	@ (80013b8 <MX_GPIO_Init+0xcc>)
 8001338:	2102      	movs	r1, #2
 800133a:	430a      	orrs	r2, r1
 800133c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800133e:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <MX_GPIO_Init+0xcc>)
 8001340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001342:	2202      	movs	r2, #2
 8001344:	4013      	ands	r3, r2
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_LED_GPIO_Port, DBG_LED_Pin, GPIO_PIN_RESET);
 800134a:	23a0      	movs	r3, #160	@ 0xa0
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	2200      	movs	r2, #0
 8001350:	2120      	movs	r1, #32
 8001352:	0018      	movs	r0, r3
 8001354:	f001 fed8 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8001358:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <MX_GPIO_Init+0xd0>)
 800135a:	2200      	movs	r2, #0
 800135c:	2121      	movs	r1, #33	@ 0x21
 800135e:	0018      	movs	r0, r3
 8001360:	f001 fed2 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DBG_LED_Pin */
  GPIO_InitStruct.Pin = DBG_LED_Pin;
 8001364:	193b      	adds	r3, r7, r4
 8001366:	2220      	movs	r2, #32
 8001368:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	193b      	adds	r3, r7, r4
 800136c:	2201      	movs	r2, #1
 800136e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	193b      	adds	r3, r7, r4
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	193b      	adds	r3, r7, r4
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DBG_LED_GPIO_Port, &GPIO_InitStruct);
 800137c:	193a      	adds	r2, r7, r4
 800137e:	23a0      	movs	r3, #160	@ 0xa0
 8001380:	05db      	lsls	r3, r3, #23
 8001382:	0011      	movs	r1, r2
 8001384:	0018      	movs	r0, r3
 8001386:	f001 fd41 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : VBAT_MEAS_EN_Pin I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin;
 800138a:	0021      	movs	r1, r4
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2221      	movs	r2, #33	@ 0x21
 8001390:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	187b      	adds	r3, r7, r1
 8001394:	2201      	movs	r2, #1
 8001396:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	187b      	adds	r3, r7, r1
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <MX_GPIO_Init+0xd0>)
 80013a8:	0019      	movs	r1, r3
 80013aa:	0010      	movs	r0, r2
 80013ac:	f001 fd2e 	bl	8002e0c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013b0:	46c0      	nop			@ (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b009      	add	sp, #36	@ 0x24
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	50000400 	.word	0x50000400

080013c0 <configWakeupTime>:

/* USER CODE BEGIN 4 */

void configWakeupTime()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DBG_LED_GPIO_Port, DBG_LED_Pin, GPIO_PIN_SET);
 80013c6:	23a0      	movs	r3, #160	@ 0xa0
 80013c8:	05db      	lsls	r3, r3, #23
 80013ca:	2201      	movs	r2, #1
 80013cc:	2120      	movs	r1, #32
 80013ce:	0018      	movs	r0, r3
 80013d0:	f001 fe9a 	bl	8003108 <HAL_GPIO_WritePin>
	uint32_t wakeup_timer_value = 32 * 2048 - 1;  // 32 seconds
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <configWakeupTime+0x2c>)
 80013d6:	607b      	str	r3, [r7, #4]
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_timer_value, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <configWakeupTime+0x30>)
 80013dc:	2200      	movs	r2, #0
 80013de:	0018      	movs	r0, r3
 80013e0:	f003 ff80 	bl	80052e4 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 80013e4:	46c0      	nop			@ (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	0000ffff 	.word	0x0000ffff
 80013f0:	2000012c 	.word	0x2000012c

080013f4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Increment counter - process LoRaWAN based on SLEEP_TIME_MINUTES setting */

  wakeup_counter++;
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_RTCEx_WakeUpTimerEventCallback+0x30>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <HAL_RTCEx_WakeUpTimerEventCallback+0x30>)
 8001406:	701a      	strb	r2, [r3, #0]
  
  /* Clear the wake-up timer flag to acknowledge the interrupt */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	22ff      	movs	r2, #255	@ 0xff
 8001410:	401a      	ands	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4904      	ldr	r1, [pc, #16]	@ (8001428 <HAL_RTCEx_WakeUpTimerEventCallback+0x34>)
 8001418:	430a      	orrs	r2, r1
 800141a:	60da      	str	r2, [r3, #12]
}
 800141c:	46c0      	nop			@ (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000264 	.word	0x20000264
 8001428:	fffffb7f 	.word	0xfffffb7f

0800142c <ConfigureGPIOForLowPower>:
/**
  * @brief  Configure GPIOs for ultra-low power consumption
  * @retval None
  */
void ConfigureGPIOForLowPower(void)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b08b      	sub	sp, #44	@ 0x2c
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	2414      	movs	r4, #20
 8001434:	193b      	adds	r3, r7, r4
 8001436:	0018      	movs	r0, r3
 8001438:	2314      	movs	r3, #20
 800143a:	001a      	movs	r2, r3
 800143c:	2100      	movs	r1, #0
 800143e:	f005 f905 	bl	800664c <memset>
  
  /* Enable all GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b3a      	ldr	r3, [pc, #232]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 8001444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001446:	4b39      	ldr	r3, [pc, #228]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 8001448:	2101      	movs	r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800144e:	4b37      	ldr	r3, [pc, #220]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 8001450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001452:	2201      	movs	r2, #1
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b34      	ldr	r3, [pc, #208]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 800145c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800145e:	4b33      	ldr	r3, [pc, #204]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 8001460:	2102      	movs	r1, #2
 8001462:	430a      	orrs	r2, r1
 8001464:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001466:	4b31      	ldr	r3, [pc, #196]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 8001468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	4b2e      	ldr	r3, [pc, #184]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 8001474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001476:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 8001478:	2104      	movs	r1, #4
 800147a:	430a      	orrs	r2, r1
 800147c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800147e:	4b2b      	ldr	r3, [pc, #172]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 8001480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001482:	2204      	movs	r2, #4
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148a:	4b28      	ldr	r3, [pc, #160]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 800148c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800148e:	4b27      	ldr	r3, [pc, #156]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 8001490:	2108      	movs	r1, #8
 8001492:	430a      	orrs	r2, r1
 8001494:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001496:	4b25      	ldr	r3, [pc, #148]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 8001498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149a:	2208      	movs	r2, #8
 800149c:	4013      	ands	r3, r2
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	4b22      	ldr	r3, [pc, #136]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 80014a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014a6:	4b21      	ldr	r3, [pc, #132]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 80014a8:	2180      	movs	r1, #128	@ 0x80
 80014aa:	430a      	orrs	r2, r1
 80014ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014ae:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <ConfigureGPIOForLowPower+0x100>)
 80014b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b2:	2280      	movs	r2, #128	@ 0x80
 80014b4:	4013      	ands	r3, r2
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
  
  /* Configure all GPIO pins as analog to reduce power consumption */
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	2203      	movs	r2, #3
 80014be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  
  /* Configure GPIOA pins (except UART pins PA2, PA3 and PA9, PA10) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | 
 80014c6:	193b      	adds	r3, r7, r4
 80014c8:	4a19      	ldr	r2, [pc, #100]	@ (8001530 <ConfigureGPIOForLowPower+0x104>)
 80014ca:	601a      	str	r2, [r3, #0]
                        GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | 
                        GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	193a      	adds	r2, r7, r4
 80014ce:	23a0      	movs	r3, #160	@ 0xa0
 80014d0:	05db      	lsls	r3, r3, #23
 80014d2:	0011      	movs	r1, r2
 80014d4:	0018      	movs	r0, r3
 80014d6:	f001 fc99 	bl	8002e0c <HAL_GPIO_Init>
  
  /* Configure all GPIOB pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 80014da:	193b      	adds	r3, r7, r4
 80014dc:	4a15      	ldr	r2, [pc, #84]	@ (8001534 <ConfigureGPIOForLowPower+0x108>)
 80014de:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	193b      	adds	r3, r7, r4
 80014e2:	4a15      	ldr	r2, [pc, #84]	@ (8001538 <ConfigureGPIOForLowPower+0x10c>)
 80014e4:	0019      	movs	r1, r3
 80014e6:	0010      	movs	r0, r2
 80014e8:	f001 fc90 	bl	8002e0c <HAL_GPIO_Init>
  
  /* Configure GPIOC pins (except PC14, PC15 for LSE crystal) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | 
 80014ec:	193b      	adds	r3, r7, r4
 80014ee:	4a13      	ldr	r2, [pc, #76]	@ (800153c <ConfigureGPIOForLowPower+0x110>)
 80014f0:	601a      	str	r2, [r3, #0]
                        GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | 
                        GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | 
                        GPIO_PIN_12 | GPIO_PIN_13;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <ConfigureGPIOForLowPower+0x114>)
 80014f6:	0019      	movs	r1, r3
 80014f8:	0010      	movs	r0, r2
 80014fa:	f001 fc87 	bl	8002e0c <HAL_GPIO_Init>
  
  /* Configure all GPIOD pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 80014fe:	193b      	adds	r3, r7, r4
 8001500:	4a0c      	ldr	r2, [pc, #48]	@ (8001534 <ConfigureGPIOForLowPower+0x108>)
 8001502:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001504:	193b      	adds	r3, r7, r4
 8001506:	4a0f      	ldr	r2, [pc, #60]	@ (8001544 <ConfigureGPIOForLowPower+0x118>)
 8001508:	0019      	movs	r1, r3
 800150a:	0010      	movs	r0, r2
 800150c:	f001 fc7e 	bl	8002e0c <HAL_GPIO_Init>
  
  /* Configure all GPIOH pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8001510:	0021      	movs	r1, r4
 8001512:	187b      	adds	r3, r7, r1
 8001514:	4a07      	ldr	r2, [pc, #28]	@ (8001534 <ConfigureGPIOForLowPower+0x108>)
 8001516:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001518:	187b      	adds	r3, r7, r1
 800151a:	4a0b      	ldr	r2, [pc, #44]	@ (8001548 <ConfigureGPIOForLowPower+0x11c>)
 800151c:	0019      	movs	r1, r3
 800151e:	0010      	movs	r0, r2
 8001520:	f001 fc74 	bl	8002e0c <HAL_GPIO_Init>
}
 8001524:	46c0      	nop			@ (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b00b      	add	sp, #44	@ 0x2c
 800152a:	bd90      	pop	{r4, r7, pc}
 800152c:	40021000 	.word	0x40021000
 8001530:	0000f9f3 	.word	0x0000f9f3
 8001534:	0000ffff 	.word	0x0000ffff
 8001538:	50000400 	.word	0x50000400
 800153c:	00003fff 	.word	0x00003fff
 8001540:	50000800 	.word	0x50000800
 8001544:	50000c00 	.word	0x50000c00
 8001548:	50001c00 	.word	0x50001c00

0800154c <EnterDeepSleepMode>:
/**
  * @brief  Enter Deep Sleep Mode using STOP mode with RTC wake-up
  * @retval None
  */
void EnterDeepSleepMode(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
  /* Configure all GPIOs for ultra-low power */
  ConfigureGPIOForLowPower();
 8001552:	f7ff ff6b 	bl	800142c <ConfigureGPIOForLowPower>
  
  /* Disable unnecessary peripheral clocks */
  __HAL_RCC_I2C1_CLK_DISABLE();
 8001556:	4b40      	ldr	r3, [pc, #256]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 8001558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800155a:	4b3f      	ldr	r3, [pc, #252]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 800155c:	493f      	ldr	r1, [pc, #252]	@ (800165c <EnterDeepSleepMode+0x110>)
 800155e:	400a      	ands	r2, r1
 8001560:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_USART1_CLK_DISABLE();
 8001562:	4b3d      	ldr	r3, [pc, #244]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 8001564:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001566:	4b3c      	ldr	r3, [pc, #240]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 8001568:	493d      	ldr	r1, [pc, #244]	@ (8001660 <EnterDeepSleepMode+0x114>)
 800156a:	400a      	ands	r2, r1
 800156c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_USART2_CLK_DISABLE();
 800156e:	4b3a      	ldr	r3, [pc, #232]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 8001570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001572:	4b39      	ldr	r3, [pc, #228]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 8001574:	493b      	ldr	r1, [pc, #236]	@ (8001664 <EnterDeepSleepMode+0x118>)
 8001576:	400a      	ands	r2, r1
 8001578:	639a      	str	r2, [r3, #56]	@ 0x38
//  __HAL_RCC_GPIOA_CLK_DISABLE();
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800157a:	4b37      	ldr	r3, [pc, #220]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 800157c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800157e:	4b36      	ldr	r3, [pc, #216]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 8001580:	2102      	movs	r1, #2
 8001582:	438a      	bics	r2, r1
 8001584:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8001586:	4b34      	ldr	r3, [pc, #208]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 8001588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800158a:	4b33      	ldr	r3, [pc, #204]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 800158c:	2104      	movs	r1, #4
 800158e:	438a      	bics	r2, r1
 8001590:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOD_CLK_DISABLE();
 8001592:	4b31      	ldr	r3, [pc, #196]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 8001594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001596:	4b30      	ldr	r3, [pc, #192]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 8001598:	2108      	movs	r1, #8
 800159a:	438a      	bics	r2, r1
 800159c:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800159e:	4b2e      	ldr	r3, [pc, #184]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 80015a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 80015a4:	2180      	movs	r1, #128	@ 0x80
 80015a6:	438a      	bics	r2, r1
 80015a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Suspend SysTick to avoid wake-up from SysTick interrupt */
  HAL_SuspendTick();
 80015aa:	f000 fe41 	bl	8002230 <HAL_SuspendTick>
  
  /* Clear any pending wake-up flags before sleeping */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80015ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001668 <EnterDeepSleepMode+0x11c>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <EnterDeepSleepMode+0x11c>)
 80015b4:	2104      	movs	r1, #4
 80015b6:	430a      	orrs	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80015ba:	4b2c      	ldr	r3, [pc, #176]	@ (800166c <EnterDeepSleepMode+0x120>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	22ff      	movs	r2, #255	@ 0xff
 80015c2:	401a      	ands	r2, r3
 80015c4:	4b29      	ldr	r3, [pc, #164]	@ (800166c <EnterDeepSleepMode+0x120>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4929      	ldr	r1, [pc, #164]	@ (8001670 <EnterDeepSleepMode+0x124>)
 80015ca:	430a      	orrs	r2, r1
 80015cc:	60da      	str	r2, [r3, #12]
  
  /* Restart the RTC wake-up timer for next wake-up */
  configWakeupTime();
 80015ce:	f7ff fef7 	bl	80013c0 <configWakeupTime>
  
  /* Enter STOP Mode with Low Power Regulator */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80015d2:	2101      	movs	r1, #1
 80015d4:	2001      	movs	r0, #1
 80015d6:	f002 fd73 	bl	80040c0 <HAL_PWR_EnterSTOPMode>
  
  /* === DEVICE IS NOW IN DEEP SLEEP === */
  /* === WAKE UP OCCURS HERE === */
  
  /* Upon wake-up, the system clock needs to be reconfigured */
  SystemClock_Config();
 80015da:	f7ff fcc5 	bl	8000f68 <SystemClock_Config>
  
  /* Re-enable peripheral clocks */
  __HAL_RCC_I2C1_CLK_ENABLE();
 80015de:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 80015e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 80015e4:	2180      	movs	r1, #128	@ 0x80
 80015e6:	0389      	lsls	r1, r1, #14
 80015e8:	430a      	orrs	r2, r1
 80015ea:	639a      	str	r2, [r3, #56]	@ 0x38
//  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 80015ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 80015f2:	2102      	movs	r1, #2
 80015f4:	430a      	orrs	r2, r1
 80015f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015f8:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 80015fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fc:	2202      	movs	r2, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 8001606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001608:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 800160a:	2104      	movs	r1, #4
 800160c:	430a      	orrs	r2, r1
 800160e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 8001612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001614:	2204      	movs	r2, #4
 8001616:	4013      	ands	r3, r2
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_USART1_CLK_ENABLE();
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 800161e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001620:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 8001622:	2180      	movs	r1, #128	@ 0x80
 8001624:	01c9      	lsls	r1, r1, #7
 8001626:	430a      	orrs	r2, r1
 8001628:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_USART2_CLK_ENABLE();
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 800162c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800162e:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <EnterDeepSleepMode+0x10c>)
 8001630:	2180      	movs	r1, #128	@ 0x80
 8001632:	0289      	lsls	r1, r1, #10
 8001634:	430a      	orrs	r2, r1
 8001636:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Restore GPIO configuration for normal operation */
//  RestoreGPIOAfterWakeup();
  
  /* Re-initialize I2C and UARTs */
  MX_I2C1_Init();
 8001638:	f7ff fd80 	bl	800113c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800163c:	f7ff fdf2 	bl	8001224 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001640:	f7ff fe24 	bl	800128c <MX_USART2_UART_Init>
  
  /* Resume SysTick */
  HAL_ResumeTick();
 8001644:	f000 fe02 	bl	800224c <HAL_ResumeTick>
  
  /* Small delay to ensure system is stable after wake-up */
  HAL_Delay(10);
 8001648:	200a      	movs	r0, #10
 800164a:	f000 fdcd 	bl	80021e8 <HAL_Delay>
}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	b002      	add	sp, #8
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	40021000 	.word	0x40021000
 800165c:	ffdfffff 	.word	0xffdfffff
 8001660:	ffffbfff 	.word	0xffffbfff
 8001664:	fffdffff 	.word	0xfffdffff
 8001668:	40007000 	.word	0x40007000
 800166c:	2000012c 	.word	0x2000012c
 8001670:	fffffb7f 	.word	0xfffffb7f

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
//  while (1)
//  {
//  }
  HAL_NVIC_SystemReset();
 800167c:	f001 fb6b 	bl	8002d56 <HAL_NVIC_SystemReset>
  /* USER CODE END Error_Handler_Debug */
}
 8001680:	46c0      	nop			@ (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800168e:	003b      	movs	r3, r7
 8001690:	0018      	movs	r0, r3
 8001692:	2308      	movs	r3, #8
 8001694:	001a      	movs	r2, r3
 8001696:	2100      	movs	r1, #0
 8001698:	f004 ffd8 	bl	800664c <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169c:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <HAL_MspInit+0x50>)
 800169e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016a0:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <HAL_MspInit+0x50>)
 80016a2:	2101      	movs	r1, #1
 80016a4:	430a      	orrs	r2, r1
 80016a6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a8:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <HAL_MspInit+0x50>)
 80016aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <HAL_MspInit+0x50>)
 80016ae:	2180      	movs	r1, #128	@ 0x80
 80016b0:	0549      	lsls	r1, r1, #21
 80016b2:	430a      	orrs	r2, r1
 80016b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80016b6:	003b      	movs	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80016bc:	003b      	movs	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80016c2:	003b      	movs	r3, r7
 80016c4:	0018      	movs	r0, r3
 80016c6:	f002 fc8b 	bl	8003fe0 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80016ca:	f002 fceb 	bl	80040a4 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b002      	add	sp, #8
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b089      	sub	sp, #36	@ 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	240c      	movs	r4, #12
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	0018      	movs	r0, r3
 80016ea:	2314      	movs	r3, #20
 80016ec:	001a      	movs	r2, r3
 80016ee:	2100      	movs	r1, #0
 80016f0:	f004 ffac 	bl	800664c <memset>
  if(hadc->Instance==ADC1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a14      	ldr	r2, [pc, #80]	@ (800174c <HAL_ADC_MspInit+0x70>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d122      	bne.n	8001744 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016fe:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <HAL_ADC_MspInit+0x74>)
 8001700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001702:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <HAL_ADC_MspInit+0x74>)
 8001704:	2180      	movs	r1, #128	@ 0x80
 8001706:	0089      	lsls	r1, r1, #2
 8001708:	430a      	orrs	r2, r1
 800170a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <HAL_ADC_MspInit+0x74>)
 800170e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001710:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <HAL_ADC_MspInit+0x74>)
 8001712:	2101      	movs	r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001718:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <HAL_ADC_MspInit+0x74>)
 800171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171c:	2201      	movs	r2, #1
 800171e:	4013      	ands	r3, r2
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC_IN0_Pin;
 8001724:	193b      	adds	r3, r7, r4
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800172a:	193b      	adds	r3, r7, r4
 800172c:	2203      	movs	r2, #3
 800172e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	193b      	adds	r3, r7, r4
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_IN0_GPIO_Port, &GPIO_InitStruct);
 8001736:	193a      	adds	r2, r7, r4
 8001738:	23a0      	movs	r3, #160	@ 0xa0
 800173a:	05db      	lsls	r3, r3, #23
 800173c:	0011      	movs	r1, r2
 800173e:	0018      	movs	r0, r3
 8001740:	f001 fb64 	bl	8002e0c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001744:	46c0      	nop			@ (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	b009      	add	sp, #36	@ 0x24
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	40012400 	.word	0x40012400
 8001750:	40021000 	.word	0x40021000

08001754 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b089      	sub	sp, #36	@ 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	240c      	movs	r4, #12
 800175e:	193b      	adds	r3, r7, r4
 8001760:	0018      	movs	r0, r3
 8001762:	2314      	movs	r3, #20
 8001764:	001a      	movs	r2, r3
 8001766:	2100      	movs	r1, #0
 8001768:	f004 ff70 	bl	800664c <memset>
  if(hi2c->Instance==I2C1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a17      	ldr	r2, [pc, #92]	@ (80017d0 <HAL_I2C_MspInit+0x7c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d128      	bne.n	80017c8 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <HAL_I2C_MspInit+0x80>)
 8001778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800177a:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <HAL_I2C_MspInit+0x80>)
 800177c:	2102      	movs	r1, #2
 800177e:	430a      	orrs	r2, r1
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001782:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <HAL_I2C_MspInit+0x80>)
 8001784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001786:	2202      	movs	r2, #2
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800178e:	0021      	movs	r1, r4
 8001790:	187b      	adds	r3, r7, r1
 8001792:	22c0      	movs	r2, #192	@ 0xc0
 8001794:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001796:	187b      	adds	r3, r7, r1
 8001798:	2212      	movs	r2, #18
 800179a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	187b      	adds	r3, r7, r1
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2203      	movs	r2, #3
 80017a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	2201      	movs	r2, #1
 80017ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <HAL_I2C_MspInit+0x84>)
 80017b2:	0019      	movs	r1, r3
 80017b4:	0010      	movs	r0, r2
 80017b6:	f001 fb29 	bl	8002e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_I2C_MspInit+0x80>)
 80017bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017be:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <HAL_I2C_MspInit+0x80>)
 80017c0:	2180      	movs	r1, #128	@ 0x80
 80017c2:	0389      	lsls	r1, r1, #14
 80017c4:	430a      	orrs	r2, r1
 80017c6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017c8:	46c0      	nop			@ (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b009      	add	sp, #36	@ 0x24
 80017ce:	bd90      	pop	{r4, r7, pc}
 80017d0:	40005400 	.word	0x40005400
 80017d4:	40021000 	.word	0x40021000
 80017d8:	50000400 	.word	0x50000400

080017dc <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <HAL_RTC_MspInit+0x38>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10e      	bne.n	800180c <HAL_RTC_MspInit+0x30>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <HAL_RTC_MspInit+0x3c>)
 80017f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017f2:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <HAL_RTC_MspInit+0x3c>)
 80017f4:	2180      	movs	r1, #128	@ 0x80
 80017f6:	02c9      	lsls	r1, r1, #11
 80017f8:	430a      	orrs	r2, r1
 80017fa:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	2002      	movs	r0, #2
 8001802:	f001 fa83 	bl	8002d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001806:	2002      	movs	r0, #2
 8001808:	f001 fa95 	bl	8002d36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800180c:	46c0      	nop			@ (mov r8, r8)
 800180e:	46bd      	mov	sp, r7
 8001810:	b002      	add	sp, #8
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40002800 	.word	0x40002800
 8001818:	40021000 	.word	0x40021000

0800181c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b08b      	sub	sp, #44	@ 0x2c
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	2414      	movs	r4, #20
 8001826:	193b      	adds	r3, r7, r4
 8001828:	0018      	movs	r0, r3
 800182a:	2314      	movs	r3, #20
 800182c:	001a      	movs	r2, r3
 800182e:	2100      	movs	r1, #0
 8001830:	f004 ff0c 	bl	800664c <memset>
  if(huart->Instance==USART1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a30      	ldr	r2, [pc, #192]	@ (80018fc <HAL_UART_MspInit+0xe0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d12b      	bne.n	8001896 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800183e:	4b30      	ldr	r3, [pc, #192]	@ (8001900 <HAL_UART_MspInit+0xe4>)
 8001840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001842:	4b2f      	ldr	r3, [pc, #188]	@ (8001900 <HAL_UART_MspInit+0xe4>)
 8001844:	2180      	movs	r1, #128	@ 0x80
 8001846:	01c9      	lsls	r1, r1, #7
 8001848:	430a      	orrs	r2, r1
 800184a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184c:	4b2c      	ldr	r3, [pc, #176]	@ (8001900 <HAL_UART_MspInit+0xe4>)
 800184e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001850:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <HAL_UART_MspInit+0xe4>)
 8001852:	2101      	movs	r1, #1
 8001854:	430a      	orrs	r2, r1
 8001856:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001858:	4b29      	ldr	r3, [pc, #164]	@ (8001900 <HAL_UART_MspInit+0xe4>)
 800185a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185c:	2201      	movs	r2, #1
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001864:	193b      	adds	r3, r7, r4
 8001866:	22c0      	movs	r2, #192	@ 0xc0
 8001868:	00d2      	lsls	r2, r2, #3
 800186a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	0021      	movs	r1, r4
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2202      	movs	r2, #2
 8001872:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	187b      	adds	r3, r7, r1
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	187b      	adds	r3, r7, r1
 800187c:	2203      	movs	r2, #3
 800187e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001880:	187b      	adds	r3, r7, r1
 8001882:	2204      	movs	r2, #4
 8001884:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	187a      	adds	r2, r7, r1
 8001888:	23a0      	movs	r3, #160	@ 0xa0
 800188a:	05db      	lsls	r3, r3, #23
 800188c:	0011      	movs	r1, r2
 800188e:	0018      	movs	r0, r3
 8001890:	f001 fabc 	bl	8002e0c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001894:	e02e      	b.n	80018f4 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1a      	ldr	r2, [pc, #104]	@ (8001904 <HAL_UART_MspInit+0xe8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d129      	bne.n	80018f4 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a0:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <HAL_UART_MspInit+0xe4>)
 80018a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018a4:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <HAL_UART_MspInit+0xe4>)
 80018a6:	2180      	movs	r1, #128	@ 0x80
 80018a8:	0289      	lsls	r1, r1, #10
 80018aa:	430a      	orrs	r2, r1
 80018ac:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <HAL_UART_MspInit+0xe4>)
 80018b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <HAL_UART_MspInit+0xe4>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	430a      	orrs	r2, r1
 80018b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018ba:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <HAL_UART_MspInit+0xe4>)
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	2201      	movs	r2, #1
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018c6:	2114      	movs	r1, #20
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	220c      	movs	r2, #12
 80018cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	2202      	movs	r2, #2
 80018d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2203      	movs	r2, #3
 80018de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2204      	movs	r2, #4
 80018e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	187a      	adds	r2, r7, r1
 80018e8:	23a0      	movs	r3, #160	@ 0xa0
 80018ea:	05db      	lsls	r3, r3, #23
 80018ec:	0011      	movs	r1, r2
 80018ee:	0018      	movs	r0, r3
 80018f0:	f001 fa8c 	bl	8002e0c <HAL_GPIO_Init>
}
 80018f4:	46c0      	nop			@ (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b00b      	add	sp, #44	@ 0x2c
 80018fa:	bd90      	pop	{r4, r7, pc}
 80018fc:	40013800 	.word	0x40013800
 8001900:	40021000 	.word	0x40021000
 8001904:	40004400 	.word	0x40004400

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800190c:	46c0      	nop			@ (mov r8, r8)
 800190e:	e7fd      	b.n	800190c <NMI_Handler+0x4>

08001910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001914:	46c0      	nop			@ (mov r8, r8)
 8001916:	e7fd      	b.n	8001914 <HardFault_Handler+0x4>

08001918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800191c:	46c0      	nop			@ (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001930:	f000 fc3e 	bl	80021b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001934:	46c0      	nop			@ (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001940:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <RTC_IRQHandler+0x14>)
 8001942:	0018      	movs	r0, r3
 8001944:	f003 fda6 	bl	8005494 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001948:	46c0      	nop			@ (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	2000012c 	.word	0x2000012c

08001954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800195c:	4a14      	ldr	r2, [pc, #80]	@ (80019b0 <_sbrk+0x5c>)
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <_sbrk+0x60>)
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001968:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001970:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <_sbrk+0x64>)
 8001972:	4a12      	ldr	r2, [pc, #72]	@ (80019bc <_sbrk+0x68>)
 8001974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001976:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	18d3      	adds	r3, r2, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	429a      	cmp	r2, r3
 8001982:	d207      	bcs.n	8001994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001984:	f004 fe6a 	bl	800665c <__errno>
 8001988:	0003      	movs	r3, r0
 800198a:	220c      	movs	r2, #12
 800198c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198e:	2301      	movs	r3, #1
 8001990:	425b      	negs	r3, r3
 8001992:	e009      	b.n	80019a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199a:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	18d2      	adds	r2, r2, r3
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <_sbrk+0x64>)
 80019a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b006      	add	sp, #24
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20005000 	.word	0x20005000
 80019b4:	00000400 	.word	0x00000400
 80019b8:	20000468 	.word	0x20000468
 80019bc:	200005d0 	.word	0x200005d0

080019c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c4:	46c0      	nop			@ (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <scan_i2c_bus>:
uint16_t calculated_temp;
uint8_t  calculated_hum;
int16_t i2c_error_code = 0;

void scan_i2c_bus(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	// we re-set these to false because we want to check this every time for safety
    has_sensor_1 = false;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <scan_i2c_bus+0x44>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
    has_sensor_2 = false;
 80019d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <scan_i2c_bus+0x48>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]

    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x44 << 1, 1, 10) == HAL_OK) has_sensor_1 = true;
 80019dc:	480e      	ldr	r0, [pc, #56]	@ (8001a18 <scan_i2c_bus+0x4c>)
 80019de:	230a      	movs	r3, #10
 80019e0:	2201      	movs	r2, #1
 80019e2:	2188      	movs	r1, #136	@ 0x88
 80019e4:	f001 fe86 	bl	80036f4 <HAL_I2C_IsDeviceReady>
 80019e8:	1e03      	subs	r3, r0, #0
 80019ea:	d102      	bne.n	80019f2 <scan_i2c_bus+0x26>
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <scan_i2c_bus+0x44>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x46 << 1, 1, 10) == HAL_OK) has_sensor_2 = true;
 80019f2:	4809      	ldr	r0, [pc, #36]	@ (8001a18 <scan_i2c_bus+0x4c>)
 80019f4:	230a      	movs	r3, #10
 80019f6:	2201      	movs	r2, #1
 80019f8:	218c      	movs	r1, #140	@ 0x8c
 80019fa:	f001 fe7b 	bl	80036f4 <HAL_I2C_IsDeviceReady>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d102      	bne.n	8001a08 <scan_i2c_bus+0x3c>
 8001a02:	4b04      	ldr	r3, [pc, #16]	@ (8001a14 <scan_i2c_bus+0x48>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
}
 8001a08:	46c0      	nop			@ (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	2000046c 	.word	0x2000046c
 8001a14:	2000046d 	.word	0x2000046d
 8001a18:	200000d8 	.word	0x200000d8

08001a1c <sensor_init_and_read>:

bool sensor_init_and_read(void)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
    if (!has_sensor_1 && !has_sensor_2) {
 8001a22:	4b56      	ldr	r3, [pc, #344]	@ (8001b7c <sensor_init_and_read+0x160>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2201      	movs	r2, #1
 8001a28:	4053      	eors	r3, r2
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00b      	beq.n	8001a48 <sensor_init_and_read+0x2c>
 8001a30:	4b53      	ldr	r3, [pc, #332]	@ (8001b80 <sensor_init_and_read+0x164>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4053      	eors	r3, r2
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <sensor_init_and_read+0x2c>
    	i2c_error_code = NO_SENSORS_FOUND;
 8001a3e:	4b51      	ldr	r3, [pc, #324]	@ (8001b84 <sensor_init_and_read+0x168>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	801a      	strh	r2, [r3, #0]
        return false;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e095      	b.n	8001b74 <sensor_init_and_read+0x158>
    }

    i2c_error_code = NO_ERROR;
 8001a48:	4b4e      	ldr	r3, [pc, #312]	@ (8001b84 <sensor_init_and_read+0x168>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	801a      	strh	r2, [r3, #0]
    HAL_Delay(100);
 8001a4e:	2064      	movs	r0, #100	@ 0x64
 8001a50:	f000 fbca 	bl	80021e8 <HAL_Delay>

    if (has_sensor_1) {
 8001a54:	4b49      	ldr	r3, [pc, #292]	@ (8001b7c <sensor_init_and_read+0x160>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d015      	beq.n	8001a88 <sensor_init_and_read+0x6c>
        sht4x_init(SHT43_I2C_ADDR_44);
 8001a5c:	2044      	movs	r0, #68	@ 0x44
 8001a5e:	f000 fa79 	bl	8001f54 <sht4x_init>
        sht4x_soft_reset();
 8001a62:	f000 faeb 	bl	800203c <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 8001a66:	4b48      	ldr	r3, [pc, #288]	@ (8001b88 <sensor_init_and_read+0x16c>)
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f000 fa49 	bl	8001f00 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT43_I2C_ADDR_44);
 8001a6e:	2044      	movs	r0, #68	@ 0x44
 8001a70:	f000 fa70 	bl	8001f54 <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 8001a74:	4a45      	ldr	r2, [pc, #276]	@ (8001b8c <sensor_init_and_read+0x170>)
 8001a76:	4b46      	ldr	r3, [pc, #280]	@ (8001b90 <sensor_init_and_read+0x174>)
 8001a78:	0011      	movs	r1, r2
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f000 fa7a 	bl	8001f74 <sht4x_measure_high_precision_ticks>
 8001a80:	0003      	movs	r3, r0
 8001a82:	001a      	movs	r2, r3
 8001a84:	4b3f      	ldr	r3, [pc, #252]	@ (8001b84 <sensor_init_and_read+0x168>)
 8001a86:	801a      	strh	r2, [r3, #0]
    }

    if (has_sensor_2) {
 8001a88:	4b3d      	ldr	r3, [pc, #244]	@ (8001b80 <sensor_init_and_read+0x164>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d015      	beq.n	8001abc <sensor_init_and_read+0xa0>
        sht4x_init(SHT40_I2C_ADDR_46);
 8001a90:	2046      	movs	r0, #70	@ 0x46
 8001a92:	f000 fa5f 	bl	8001f54 <sht4x_init>
        sht4x_soft_reset();
 8001a96:	f000 fad1 	bl	800203c <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b88 <sensor_init_and_read+0x16c>)
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 fa2f 	bl	8001f00 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT40_I2C_ADDR_46);
 8001aa2:	2046      	movs	r0, #70	@ 0x46
 8001aa4:	f000 fa56 	bl	8001f54 <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 8001aa8:	4a3a      	ldr	r2, [pc, #232]	@ (8001b94 <sensor_init_and_read+0x178>)
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8001b98 <sensor_init_and_read+0x17c>)
 8001aac:	0011      	movs	r1, r2
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f000 fa60 	bl	8001f74 <sht4x_measure_high_precision_ticks>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	4b32      	ldr	r3, [pc, #200]	@ (8001b84 <sensor_init_and_read+0x168>)
 8001aba:	801a      	strh	r2, [r3, #0]
    }

    calculated_temp            = (temp_ticks_1 / 100U) + 55U;
 8001abc:	4b34      	ldr	r3, [pc, #208]	@ (8001b90 <sensor_init_and_read+0x174>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	2164      	movs	r1, #100	@ 0x64
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7fe fb2a 	bl	800011c <__udivsi3>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	3337      	adds	r3, #55	@ 0x37
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	4b32      	ldr	r3, [pc, #200]	@ (8001b9c <sensor_init_and_read+0x180>)
 8001ad2:	801a      	strh	r2, [r3, #0]
    uint16_t calculated_temp_2 = (temp_ticks_2 / 100U) + 55U;
 8001ad4:	4b30      	ldr	r3, [pc, #192]	@ (8001b98 <sensor_init_and_read+0x17c>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	2164      	movs	r1, #100	@ 0x64
 8001ada:	0018      	movs	r0, r3
 8001adc:	f7fe fb1e 	bl	800011c <__udivsi3>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	240e      	movs	r4, #14
 8001ae6:	193b      	adds	r3, r7, r4
 8001ae8:	3237      	adds	r2, #55	@ 0x37
 8001aea:	801a      	strh	r2, [r3, #0]
    calculated_hum             = (hum_ticks_1 / 100U);
 8001aec:	4b27      	ldr	r3, [pc, #156]	@ (8001b8c <sensor_init_and_read+0x170>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	2164      	movs	r1, #100	@ 0x64
 8001af2:	0018      	movs	r0, r3
 8001af4:	f7fe fb12 	bl	800011c <__udivsi3>
 8001af8:	0003      	movs	r3, r0
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b28      	ldr	r3, [pc, #160]	@ (8001ba0 <sensor_init_and_read+0x184>)
 8001b00:	701a      	strb	r2, [r3, #0]
    uint8_t  calculated_hum_2  = (hum_ticks_2 / 100U);
 8001b02:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <sensor_init_and_read+0x178>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	2164      	movs	r1, #100	@ 0x64
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7fe fb07 	bl	800011c <__udivsi3>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	210d      	movs	r1, #13
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	701a      	strb	r2, [r3, #0]

    // compute raw differences (signed)
    int16_t temp_diff = (int16_t)calculated_temp - (int16_t)calculated_temp_2;
 8001b18:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <sensor_init_and_read+0x180>)
 8001b1a:	881a      	ldrh	r2, [r3, #0]
 8001b1c:	193b      	adds	r3, r7, r4
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	200a      	movs	r0, #10
 8001b26:	183b      	adds	r3, r7, r0
 8001b28:	801a      	strh	r2, [r3, #0]
    int16_t hum_diff  = (int16_t)calculated_hum - (int16_t)calculated_hum_2;
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba0 <sensor_init_and_read+0x184>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	001a      	movs	r2, r3
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	2108      	movs	r1, #8
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	801a      	strh	r2, [r3, #0]

    // convert to absolute unsigned values
    uint8_t temp_delta = (uint8_t)abs(temp_diff);
 8001b40:	183b      	adds	r3, r7, r0
 8001b42:	2200      	movs	r2, #0
 8001b44:	5e9b      	ldrsh	r3, [r3, r2]
 8001b46:	17da      	asrs	r2, r3, #31
 8001b48:	189b      	adds	r3, r3, r2
 8001b4a:	4053      	eors	r3, r2
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	701a      	strb	r2, [r3, #0]
    uint8_t hum_delta  = (uint8_t)abs(hum_diff);
 8001b52:	187b      	adds	r3, r7, r1
 8001b54:	2200      	movs	r2, #0
 8001b56:	5e9b      	ldrsh	r3, [r3, r2]
 8001b58:	17da      	asrs	r2, r3, #31
 8001b5a:	189b      	adds	r3, r3, r2
 8001b5c:	4053      	eors	r3, r2
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	1dbb      	adds	r3, r7, #6
 8001b62:	701a      	strb	r2, [r3, #0]

    if (i2c_error_code) {
 8001b64:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <sensor_init_and_read+0x168>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	5e9b      	ldrsh	r3, [r3, r2]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <sensor_init_and_read+0x156>
        return false;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <sensor_init_and_read+0x158>
    }
    return true;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b005      	add	sp, #20
 8001b7a:	bd90      	pop	{r4, r7, pc}
 8001b7c:	2000046c 	.word	0x2000046c
 8001b80:	2000046d 	.word	0x2000046d
 8001b84:	2000047a 	.word	0x2000047a
 8001b88:	00002710 	.word	0x00002710
 8001b8c:	20000470 	.word	0x20000470
 8001b90:	2000046e 	.word	0x2000046e
 8001b94:	20000474 	.word	0x20000474
 8001b98:	20000472 	.word	0x20000472
 8001b9c:	20000476 	.word	0x20000476
 8001ba0:	20000478 	.word	0x20000478

08001ba4 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	b29b      	uxth	r3, r3
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b002      	add	sp, #8
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	1cbb      	adds	r3, r7, #2
 8001bd8:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8001bda:	230d      	movs	r3, #13
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	22ff      	movs	r2, #255	@ 0xff
 8001be0:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001be2:	230e      	movs	r3, #14
 8001be4:	18fb      	adds	r3, r7, r3
 8001be6:	2200      	movs	r2, #0
 8001be8:	801a      	strh	r2, [r3, #0]
 8001bea:	e038      	b.n	8001c5e <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8001bec:	230e      	movs	r3, #14
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	18d3      	adds	r3, r2, r3
 8001bf6:	7819      	ldrb	r1, [r3, #0]
 8001bf8:	220d      	movs	r2, #13
 8001bfa:	18bb      	adds	r3, r7, r2
 8001bfc:	18ba      	adds	r2, r7, r2
 8001bfe:	7812      	ldrb	r2, [r2, #0]
 8001c00:	404a      	eors	r2, r1
 8001c02:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001c04:	230c      	movs	r3, #12
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	2208      	movs	r2, #8
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	e01c      	b.n	8001c48 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 8001c0e:	210d      	movs	r1, #13
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b25b      	sxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	da0a      	bge.n	8001c30 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b25b      	sxtb	r3, r3
 8001c20:	18db      	adds	r3, r3, r3
 8001c22:	b25b      	sxtb	r3, r3
 8001c24:	2231      	movs	r2, #49	@ 0x31
 8001c26:	4053      	eors	r3, r2
 8001c28:	b25a      	sxtb	r2, r3
 8001c2a:	187b      	adds	r3, r7, r1
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	e005      	b.n	8001c3c <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8001c30:	230d      	movs	r3, #13
 8001c32:	18fa      	adds	r2, r7, r3
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	18db      	adds	r3, r3, r3
 8001c3a:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001c3c:	220c      	movs	r2, #12
 8001c3e:	18bb      	adds	r3, r7, r2
 8001c40:	18ba      	adds	r2, r7, r2
 8001c42:	7812      	ldrb	r2, [r2, #0]
 8001c44:	3a01      	subs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	230c      	movs	r3, #12
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1dd      	bne.n	8001c0e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001c52:	220e      	movs	r2, #14
 8001c54:	18bb      	adds	r3, r7, r2
 8001c56:	18ba      	adds	r2, r7, r2
 8001c58:	8812      	ldrh	r2, [r2, #0]
 8001c5a:	3201      	adds	r2, #1
 8001c5c:	801a      	strh	r2, [r3, #0]
 8001c5e:	230e      	movs	r3, #14
 8001c60:	18fa      	adds	r2, r7, r3
 8001c62:	1cbb      	adds	r3, r7, #2
 8001c64:	8812      	ldrh	r2, [r2, #0]
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d3bf      	bcc.n	8001bec <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8001c6c:	230d      	movs	r3, #13
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	781b      	ldrb	r3, [r3, #0]
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b004      	add	sp, #16
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	0008      	movs	r0, r1
 8001c84:	0011      	movs	r1, r2
 8001c86:	1cbb      	adds	r3, r7, #2
 8001c88:	1c02      	adds	r2, r0, #0
 8001c8a:	801a      	strh	r2, [r3, #0]
 8001c8c:	1c7b      	adds	r3, r7, #1
 8001c8e:	1c0a      	adds	r2, r1, #0
 8001c90:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8001c92:	1cbb      	adds	r3, r7, #2
 8001c94:	881a      	ldrh	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0011      	movs	r1, r2
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f7ff ff96 	bl	8001bcc <sensirion_i2c_generate_crc>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	001a      	movs	r2, r3
 8001ca4:	1c7b      	adds	r3, r7, #1
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d001      	beq.n	8001cb0 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b002      	add	sp, #8
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	0008      	movs	r0, r1
 8001cc4:	0011      	movs	r1, r2
 8001cc6:	1cbb      	adds	r3, r7, #2
 8001cc8:	1c02      	adds	r2, r0, #0
 8001cca:	801a      	strh	r2, [r3, #0]
 8001ccc:	1c7b      	adds	r3, r7, #1
 8001cce:	1c0a      	adds	r2, r1, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 8001cd2:	1cbb      	adds	r3, r7, #2
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	1cba      	adds	r2, r7, #2
 8001cd8:	1c59      	adds	r1, r3, #1
 8001cda:	8011      	strh	r1, [r2, #0]
 8001cdc:	001a      	movs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	189b      	adds	r3, r3, r2
 8001ce2:	1c7a      	adds	r2, r7, #1
 8001ce4:	7812      	ldrb	r2, [r2, #0]
 8001ce6:	701a      	strb	r2, [r3, #0]
    return offset;
 8001ce8:	1cbb      	adds	r3, r7, #2
 8001cea:	881b      	ldrh	r3, [r3, #0]
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6039      	str	r1, [r7, #0]
 8001cfc:	0011      	movs	r1, r2
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	1c02      	adds	r2, r0, #0
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	1c0a      	adds	r2, r1, #0
 8001d08:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	6839      	ldr	r1, [r7, #0]
 8001d12:	1dfb      	adds	r3, r7, #7
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	0018      	movs	r0, r3
 8001d18:	f000 f8c4 	bl	8001ea4 <sensirion_i2c_hal_write>
 8001d1c:	0003      	movs	r3, r0
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b002      	add	sp, #8
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8001d26:	b5b0      	push	{r4, r5, r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	0011      	movs	r1, r2
 8001d30:	1dfb      	adds	r3, r7, #7
 8001d32:	1c02      	adds	r2, r0, #0
 8001d34:	701a      	strb	r2, [r3, #0]
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	1c0a      	adds	r2, r1, #0
 8001d3a:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	085b      	lsrs	r3, r3, #1
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	220a      	movs	r2, #10
 8001d46:	18ba      	adds	r2, r7, r2
 8001d48:	1c19      	adds	r1, r3, #0
 8001d4a:	1c0b      	adds	r3, r1, #0
 8001d4c:	18db      	adds	r3, r3, r3
 8001d4e:	185b      	adds	r3, r3, r1
 8001d50:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	2201      	movs	r2, #1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8001d60:	2304      	movs	r3, #4
 8001d62:	e06c      	b.n	8001e3e <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8001d64:	230a      	movs	r3, #10
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	6839      	ldr	r1, [r7, #0]
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	0018      	movs	r0, r3
 8001d74:	f000 f868 	bl	8001e48 <sensirion_i2c_hal_read>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	2108      	movs	r1, #8
 8001d7e:	187b      	adds	r3, r7, r1
 8001d80:	801a      	strh	r2, [r3, #0]
    if (error) {
 8001d82:	000a      	movs	r2, r1
 8001d84:	18bb      	adds	r3, r7, r2
 8001d86:	2100      	movs	r1, #0
 8001d88:	5e5b      	ldrsh	r3, [r3, r1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <sensirion_i2c_read_data_inplace+0x70>
        return error;
 8001d8e:	18bb      	adds	r3, r7, r2
 8001d90:	2200      	movs	r2, #0
 8001d92:	5e9b      	ldrsh	r3, [r3, r2]
 8001d94:	e053      	b.n	8001e3e <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001d96:	230e      	movs	r3, #14
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	230c      	movs	r3, #12
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	2200      	movs	r2, #0
 8001da4:	801a      	strh	r2, [r3, #0]
 8001da6:	e041      	b.n	8001e2c <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001da8:	210e      	movs	r1, #14
 8001daa:	187b      	adds	r3, r7, r1
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8001db2:	187b      	adds	r3, r7, r1
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	3302      	adds	r3, #2
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	f7ff ff5a 	bl	8001c7a <sensirion_i2c_check_crc>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	001a      	movs	r2, r3
 8001dca:	2108      	movs	r1, #8
 8001dcc:	187b      	adds	r3, r7, r1
 8001dce:	801a      	strh	r2, [r3, #0]
        if (error) {
 8001dd0:	000a      	movs	r2, r1
 8001dd2:	18bb      	adds	r3, r7, r2
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	5e5b      	ldrsh	r3, [r3, r1]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 8001ddc:	18bb      	adds	r3, r7, r2
 8001dde:	2200      	movs	r2, #0
 8001de0:	5e9b      	ldrsh	r3, [r3, r2]
 8001de2:	e02c      	b.n	8001e3e <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 8001de4:	240e      	movs	r4, #14
 8001de6:	193b      	adds	r3, r7, r4
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	18d2      	adds	r2, r2, r3
 8001dee:	250c      	movs	r5, #12
 8001df0:	197b      	adds	r3, r7, r5
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	1979      	adds	r1, r7, r5
 8001df6:	1c58      	adds	r0, r3, #1
 8001df8:	8008      	strh	r0, [r1, #0]
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	185b      	adds	r3, r3, r1
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8001e04:	193b      	adds	r3, r7, r4
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	18d2      	adds	r2, r2, r3
 8001e0e:	197b      	adds	r3, r7, r5
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	1979      	adds	r1, r7, r5
 8001e14:	1c58      	adds	r0, r3, #1
 8001e16:	8008      	strh	r0, [r1, #0]
 8001e18:	0019      	movs	r1, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	185b      	adds	r3, r3, r1
 8001e1e:	7812      	ldrb	r2, [r2, #0]
 8001e20:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001e22:	193b      	adds	r3, r7, r4
 8001e24:	193a      	adds	r2, r7, r4
 8001e26:	8812      	ldrh	r2, [r2, #0]
 8001e28:	3203      	adds	r2, #3
 8001e2a:	801a      	strh	r2, [r3, #0]
 8001e2c:	230e      	movs	r3, #14
 8001e2e:	18fa      	adds	r2, r7, r3
 8001e30:	230a      	movs	r3, #10
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	8812      	ldrh	r2, [r2, #0]
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d3b5      	bcc.n	8001da8 <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b004      	add	sp, #16
 8001e44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001e48 <sensirion_i2c_hal_read>:

void sensirion_i2c_hal_free(void) {
    /* nothing to free */
}

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	6039      	str	r1, [r7, #0]
 8001e50:	0011      	movs	r1, r2
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	1c02      	adds	r2, r0, #0
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	1dbb      	adds	r3, r7, #6
 8001e5a:	1c0a      	adds	r2, r1, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1), data, count, 1000);
 8001e5e:	1dfb      	adds	r3, r7, #7
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	18db      	adds	r3, r3, r3
 8001e66:	b299      	uxth	r1, r3
 8001e68:	1dbb      	adds	r3, r7, #6
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b29d      	uxth	r5, r3
 8001e6e:	260f      	movs	r6, #15
 8001e70:	19bc      	adds	r4, r7, r6
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	480a      	ldr	r0, [pc, #40]	@ (8001ea0 <sensirion_i2c_hal_read+0x58>)
 8001e76:	23fa      	movs	r3, #250	@ 0xfa
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	002b      	movs	r3, r5
 8001e7e:	f001 fb31 	bl	80034e4 <HAL_I2C_Master_Receive>
 8001e82:	0003      	movs	r3, r0
 8001e84:	7023      	strb	r3, [r4, #0]
    return (status == HAL_OK) ? 0 : -1;
 8001e86:	19bb      	adds	r3, r7, r6
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <sensirion_i2c_hal_read+0x4a>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e001      	b.n	8001e96 <sensirion_i2c_hal_read+0x4e>
 8001e92:	2301      	movs	r3, #1
 8001e94:	425b      	negs	r3, r3
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b005      	add	sp, #20
 8001e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	200000d8 	.word	0x200000d8

08001ea4 <sensirion_i2c_hal_write>:

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint8_t count) {
 8001ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	6039      	str	r1, [r7, #0]
 8001eac:	0011      	movs	r1, r2
 8001eae:	1dfb      	adds	r3, r7, #7
 8001eb0:	1c02      	adds	r2, r0, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	1dbb      	adds	r3, r7, #6
 8001eb6:	1c0a      	adds	r2, r1, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1), (uint8_t*)data, count, 1000);
 8001eba:	1dfb      	adds	r3, r7, #7
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	18db      	adds	r3, r3, r3
 8001ec2:	b299      	uxth	r1, r3
 8001ec4:	1dbb      	adds	r3, r7, #6
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b29d      	uxth	r5, r3
 8001eca:	260f      	movs	r6, #15
 8001ecc:	19bc      	adds	r4, r7, r6
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	480a      	ldr	r0, [pc, #40]	@ (8001efc <sensirion_i2c_hal_write+0x58>)
 8001ed2:	23fa      	movs	r3, #250	@ 0xfa
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	002b      	movs	r3, r5
 8001eda:	f001 f9d9 	bl	8003290 <HAL_I2C_Master_Transmit>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	7023      	strb	r3, [r4, #0]
    return (status == HAL_OK) ? 0 : -1;
 8001ee2:	19bb      	adds	r3, r7, r6
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <sensirion_i2c_hal_write+0x4a>
 8001eea:	2300      	movs	r3, #0
 8001eec:	e001      	b.n	8001ef2 <sensirion_i2c_hal_write+0x4e>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	425b      	negs	r3, r3
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b005      	add	sp, #20
 8001ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	200000d8 	.word	0x200000d8

08001f00 <sensirion_i2c_hal_sleep_usec>:

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	22fa      	movs	r2, #250	@ 0xfa
 8001f0c:	0091      	lsls	r1, r2, #2
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f7fe f904 	bl	800011c <__udivsi3>
 8001f14:	0003      	movs	r3, r0
 8001f16:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	22fa      	movs	r2, #250	@ 0xfa
 8001f1c:	0091      	lsls	r1, r2, #2
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7fe f982 	bl	8000228 <__aeabi_uidivmod>
 8001f24:	1e0b      	subs	r3, r1, #0
 8001f26:	d002      	beq.n	8001f2e <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_GetHalVersion() < 0x01010100) {
 8001f2e:	f000 f99b 	bl	8002268 <HAL_GetHalVersion>
 8001f32:	0003      	movs	r3, r0
 8001f34:	4a06      	ldr	r2, [pc, #24]	@ (8001f50 <sensirion_i2c_hal_sleep_usec+0x50>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d802      	bhi.n	8001f40 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 f950 	bl	80021e8 <HAL_Delay>
}
 8001f48:	46c0      	nop			@ (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b004      	add	sp, #16
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	010100ff 	.word	0x010100ff

08001f54 <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	1dfb      	adds	r3, r7, #7
 8001f5e:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 8001f60:	4b03      	ldr	r3, [pc, #12]	@ (8001f70 <sht4x_init+0x1c>)
 8001f62:	1dfa      	adds	r2, r7, #7
 8001f64:	7812      	ldrb	r2, [r2, #0]
 8001f66:	701a      	strb	r2, [r3, #0]
}
 8001f68:	46c0      	nop			@ (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000482 	.word	0x20000482

08001f74 <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 8001f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 8001f7e:	2516      	movs	r5, #22
 8001f80:	197b      	adds	r3, r7, r5
 8001f82:	2200      	movs	r2, #0
 8001f84:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8001f86:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <sht4x_measure_high_precision_ticks+0xbc>)
 8001f88:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 8001f8a:	260e      	movs	r6, #14
 8001f8c:	19bb      	adds	r3, r7, r6
 8001f8e:	2200      	movs	r2, #0
 8001f90:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 8001f92:	19bc      	adds	r4, r7, r6
 8001f94:	19bb      	adds	r3, r7, r6
 8001f96:	8819      	ldrh	r1, [r3, #0]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	22fd      	movs	r2, #253	@ 0xfd
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7ff fe8c 	bl	8001cba <sensirion_i2c_add_command8_to_buffer>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8001fa6:	4b23      	ldr	r3, [pc, #140]	@ (8002034 <sht4x_measure_high_precision_ticks+0xc0>)
 8001fa8:	7818      	ldrb	r0, [r3, #0]
 8001faa:	197c      	adds	r4, r7, r5
 8001fac:	19bb      	adds	r3, r7, r6
 8001fae:	881a      	ldrh	r2, [r3, #0]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	f7ff fe9e 	bl	8001cf4 <sensirion_i2c_write_data>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001fbc:	197b      	adds	r3, r7, r5
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	5e9b      	ldrsh	r3, [r3, r2]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 8001fc6:	197b      	adds	r3, r7, r5
 8001fc8:	2200      	movs	r2, #0
 8001fca:	5e9b      	ldrsh	r3, [r3, r2]
 8001fcc:	e02c      	b.n	8002028 <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8001fce:	4b1a      	ldr	r3, [pc, #104]	@ (8002038 <sht4x_measure_high_precision_ticks+0xc4>)
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f7ff ff95 	bl	8001f00 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 8001fd6:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <sht4x_measure_high_precision_ticks+0xc0>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2516      	movs	r5, #22
 8001fdc:	197c      	adds	r4, r7, r5
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f7ff fe9f 	bl	8001d26 <sensirion_i2c_read_data_inplace>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001fec:	197b      	adds	r3, r7, r5
 8001fee:	2200      	movs	r2, #0
 8001ff0:	5e9b      	ldrsh	r3, [r3, r2]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 8001ff6:	197b      	adds	r3, r7, r5
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	5e9b      	ldrsh	r3, [r3, r2]
 8001ffc:	e014      	b.n	8002028 <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	0018      	movs	r0, r3
 8002002:	f7ff fdcf 	bl	8001ba4 <sensirion_common_bytes_to_uint16_t>
 8002006:	0003      	movs	r3, r0
 8002008:	001a      	movs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	3302      	adds	r3, #2
 8002012:	0018      	movs	r0, r3
 8002014:	f7ff fdc6 	bl	8001ba4 <sensirion_common_bytes_to_uint16_t>
 8002018:	0003      	movs	r3, r0
 800201a:	001a      	movs	r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	801a      	strh	r2, [r3, #0]
    return local_error;
 8002020:	2316      	movs	r3, #22
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	2200      	movs	r2, #0
 8002026:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b007      	add	sp, #28
 800202e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002030:	2000047c 	.word	0x2000047c
 8002034:	20000482 	.word	0x20000482
 8002038:	00002710 	.word	0x00002710

0800203c <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 800203c:	b5b0      	push	{r4, r5, r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8002042:	250e      	movs	r5, #14
 8002044:	197b      	adds	r3, r7, r5
 8002046:	2200      	movs	r2, #0
 8002048:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 800204a:	4b17      	ldr	r3, [pc, #92]	@ (80020a8 <sht4x_soft_reset+0x6c>)
 800204c:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 800204e:	1dbb      	adds	r3, r7, #6
 8002050:	2200      	movs	r2, #0
 8002052:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 8002054:	1dbc      	adds	r4, r7, #6
 8002056:	1dbb      	adds	r3, r7, #6
 8002058:	8819      	ldrh	r1, [r3, #0]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2294      	movs	r2, #148	@ 0x94
 800205e:	0018      	movs	r0, r3
 8002060:	f7ff fe2b 	bl	8001cba <sensirion_i2c_add_command8_to_buffer>
 8002064:	0003      	movs	r3, r0
 8002066:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8002068:	4b10      	ldr	r3, [pc, #64]	@ (80020ac <sht4x_soft_reset+0x70>)
 800206a:	7818      	ldrb	r0, [r3, #0]
 800206c:	197c      	adds	r4, r7, r5
 800206e:	1dbb      	adds	r3, r7, #6
 8002070:	881a      	ldrh	r2, [r3, #0]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	0019      	movs	r1, r3
 8002076:	f7ff fe3d 	bl	8001cf4 <sensirion_i2c_write_data>
 800207a:	0003      	movs	r3, r0
 800207c:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 800207e:	197b      	adds	r3, r7, r5
 8002080:	2200      	movs	r2, #0
 8002082:	5e9b      	ldrsh	r3, [r3, r2]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <sht4x_soft_reset+0x54>
        return local_error;
 8002088:	197b      	adds	r3, r7, r5
 800208a:	2200      	movs	r2, #0
 800208c:	5e9b      	ldrsh	r3, [r3, r2]
 800208e:	e007      	b.n	80020a0 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8002090:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <sht4x_soft_reset+0x74>)
 8002092:	0018      	movs	r0, r3
 8002094:	f7ff ff34 	bl	8001f00 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8002098:	230e      	movs	r3, #14
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	2200      	movs	r2, #0
 800209e:	5e9b      	ldrsh	r3, [r3, r2]
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b004      	add	sp, #16
 80020a6:	bdb0      	pop	{r4, r5, r7, pc}
 80020a8:	2000047c 	.word	0x2000047c
 80020ac:	20000482 	.word	0x20000482
 80020b0:	00002710 	.word	0x00002710

080020b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80020b4:	480d      	ldr	r0, [pc, #52]	@ (80020ec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80020b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020b8:	f7ff fc82 	bl	80019c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020bc:	480c      	ldr	r0, [pc, #48]	@ (80020f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80020be:	490d      	ldr	r1, [pc, #52]	@ (80020f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020c0:	4a0d      	ldr	r2, [pc, #52]	@ (80020f8 <LoopForever+0xe>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c4:	e002      	b.n	80020cc <LoopCopyDataInit>

080020c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ca:	3304      	adds	r3, #4

080020cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d0:	d3f9      	bcc.n	80020c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d2:	4a0a      	ldr	r2, [pc, #40]	@ (80020fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80020d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002100 <LoopForever+0x16>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d8:	e001      	b.n	80020de <LoopFillZerobss>

080020da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020dc:	3204      	adds	r2, #4

080020de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e0:	d3fb      	bcc.n	80020da <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80020e2:	f004 fac1 	bl	8006668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e6:	f7fe fe9d 	bl	8000e24 <main>

080020ea <LoopForever>:

LoopForever:
    b LoopForever
 80020ea:	e7fe      	b.n	80020ea <LoopForever>
   ldr   r0, =_estack
 80020ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80020f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80020f8:	08007074 	.word	0x08007074
  ldr r2, =_sbss
 80020fc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002100:	200005d0 	.word	0x200005d0

08002104 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC1_COMP_IRQHandler>
	...

08002108 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800210e:	1dfb      	adds	r3, r7, #7
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002114:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_Init+0x3c>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <HAL_Init+0x3c>)
 800211a:	2140      	movs	r1, #64	@ 0x40
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002120:	2003      	movs	r0, #3
 8002122:	f000 f811 	bl	8002148 <HAL_InitTick>
 8002126:	1e03      	subs	r3, r0, #0
 8002128:	d003      	beq.n	8002132 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	e001      	b.n	8002136 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002132:	f7ff faa9 	bl	8001688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002136:	1dfb      	adds	r3, r7, #7
 8002138:	781b      	ldrb	r3, [r3, #0]
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b002      	add	sp, #8
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	40022000 	.word	0x40022000

08002148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002150:	4b14      	ldr	r3, [pc, #80]	@ (80021a4 <HAL_InitTick+0x5c>)
 8002152:	681c      	ldr	r4, [r3, #0]
 8002154:	4b14      	ldr	r3, [pc, #80]	@ (80021a8 <HAL_InitTick+0x60>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	0019      	movs	r1, r3
 800215a:	23fa      	movs	r3, #250	@ 0xfa
 800215c:	0098      	lsls	r0, r3, #2
 800215e:	f7fd ffdd 	bl	800011c <__udivsi3>
 8002162:	0003      	movs	r3, r0
 8002164:	0019      	movs	r1, r3
 8002166:	0020      	movs	r0, r4
 8002168:	f7fd ffd8 	bl	800011c <__udivsi3>
 800216c:	0003      	movs	r3, r0
 800216e:	0018      	movs	r0, r3
 8002170:	f000 fdf5 	bl	8002d5e <HAL_SYSTICK_Config>
 8002174:	1e03      	subs	r3, r0, #0
 8002176:	d001      	beq.n	800217c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e00f      	b.n	800219c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d80b      	bhi.n	800219a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	2301      	movs	r3, #1
 8002186:	425b      	negs	r3, r3
 8002188:	2200      	movs	r2, #0
 800218a:	0018      	movs	r0, r3
 800218c:	f000 fdbe 	bl	8002d0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <HAL_InitTick+0x64>)
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e000      	b.n	800219c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b003      	add	sp, #12
 80021a2:	bd90      	pop	{r4, r7, pc}
 80021a4:	20000004 	.word	0x20000004
 80021a8:	2000000c 	.word	0x2000000c
 80021ac:	20000008 	.word	0x20000008

080021b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b4:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <HAL_IncTick+0x1c>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	001a      	movs	r2, r3
 80021ba:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <HAL_IncTick+0x20>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	18d2      	adds	r2, r2, r3
 80021c0:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <HAL_IncTick+0x20>)
 80021c2:	601a      	str	r2, [r3, #0]
}
 80021c4:	46c0      	nop			@ (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	2000000c 	.word	0x2000000c
 80021d0:	20000484 	.word	0x20000484

080021d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  return uwTick;
 80021d8:	4b02      	ldr	r3, [pc, #8]	@ (80021e4 <HAL_GetTick+0x10>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	20000484 	.word	0x20000484

080021e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff fff0 	bl	80021d4 <HAL_GetTick>
 80021f4:	0003      	movs	r3, r0
 80021f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3301      	adds	r3, #1
 8002200:	d005      	beq.n	800220e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002202:	4b0a      	ldr	r3, [pc, #40]	@ (800222c <HAL_Delay+0x44>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	001a      	movs	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	189b      	adds	r3, r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	f7ff ffe0 	bl	80021d4 <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	d8f7      	bhi.n	8002210 <HAL_Delay+0x28>
  {
  }
}
 8002220:	46c0      	nop			@ (mov r8, r8)
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	46bd      	mov	sp, r7
 8002226:	b004      	add	sp, #16
 8002228:	bd80      	pop	{r7, pc}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	2000000c 	.word	0x2000000c

08002230 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002234:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <HAL_SuspendTick+0x18>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <HAL_SuspendTick+0x18>)
 800223a:	2102      	movs	r1, #2
 800223c:	438a      	bics	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
}
 8002240:	46c0      	nop			@ (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002250:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <HAL_ResumeTick+0x18>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <HAL_ResumeTick+0x18>)
 8002256:	2102      	movs	r1, #2
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
}
 800225c:	46c0      	nop			@ (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	e000e010 	.word	0xe000e010

08002268 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 800226c:	4b01      	ldr	r3, [pc, #4]	@ (8002274 <HAL_GetHalVersion+0xc>)
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	010a0700 	.word	0x010a0700

08002278 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e159      	b.n	800253e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10a      	bne.n	80022a8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2250      	movs	r2, #80	@ 0x50
 800229c:	2100      	movs	r1, #0
 800229e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7ff fa1a 	bl	80016dc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ac:	2210      	movs	r2, #16
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d005      	beq.n	80022c0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2204      	movs	r2, #4
 80022bc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80022be:	d00b      	beq.n	80022d8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	2210      	movs	r2, #16
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2250      	movs	r2, #80	@ 0x50
 80022d0:	2100      	movs	r1, #0
 80022d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e132      	b.n	800253e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022dc:	4a9a      	ldr	r2, [pc, #616]	@ (8002548 <HAL_ADC_Init+0x2d0>)
 80022de:	4013      	ands	r3, r2
 80022e0:	2202      	movs	r2, #2
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2203      	movs	r2, #3
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d108      	bne.n	8002308 <HAL_ADC_Init+0x90>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2201      	movs	r2, #1
 80022fe:	4013      	ands	r3, r2
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_ADC_Init+0x90>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <HAL_ADC_Init+0x92>
 8002308:	2300      	movs	r3, #0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d149      	bne.n	80023a2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	23c0      	movs	r3, #192	@ 0xc0
 8002314:	061b      	lsls	r3, r3, #24
 8002316:	429a      	cmp	r2, r3
 8002318:	d00b      	beq.n	8002332 <HAL_ADC_Init+0xba>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	05db      	lsls	r3, r3, #23
 8002322:	429a      	cmp	r2, r3
 8002324:	d005      	beq.n	8002332 <HAL_ADC_Init+0xba>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	2380      	movs	r3, #128	@ 0x80
 800232c:	061b      	lsls	r3, r3, #24
 800232e:	429a      	cmp	r2, r3
 8002330:	d111      	bne.n	8002356 <HAL_ADC_Init+0xde>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	0892      	lsrs	r2, r2, #2
 8002340:	611a      	str	r2, [r3, #16]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6919      	ldr	r1, [r3, #16]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	611a      	str	r2, [r3, #16]
 8002354:	e014      	b.n	8002380 <HAL_ADC_Init+0x108>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0092      	lsls	r2, r2, #2
 8002362:	0892      	lsrs	r2, r2, #2
 8002364:	611a      	str	r2, [r3, #16]
 8002366:	4b79      	ldr	r3, [pc, #484]	@ (800254c <HAL_ADC_Init+0x2d4>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b78      	ldr	r3, [pc, #480]	@ (800254c <HAL_ADC_Init+0x2d4>)
 800236c:	4978      	ldr	r1, [pc, #480]	@ (8002550 <HAL_ADC_Init+0x2d8>)
 800236e:	400a      	ands	r2, r1
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	4b76      	ldr	r3, [pc, #472]	@ (800254c <HAL_ADC_Init+0x2d4>)
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	4b74      	ldr	r3, [pc, #464]	@ (800254c <HAL_ADC_Init+0x2d4>)
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2118      	movs	r1, #24
 800238c:	438a      	bics	r2, r1
 800238e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68d9      	ldr	r1, [r3, #12]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80023a2:	4b6a      	ldr	r3, [pc, #424]	@ (800254c <HAL_ADC_Init+0x2d4>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b69      	ldr	r3, [pc, #420]	@ (800254c <HAL_ADC_Init+0x2d4>)
 80023a8:	496a      	ldr	r1, [pc, #424]	@ (8002554 <HAL_ADC_Init+0x2dc>)
 80023aa:	400a      	ands	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80023ae:	4b67      	ldr	r3, [pc, #412]	@ (800254c <HAL_ADC_Init+0x2d4>)
 80023b0:	6819      	ldr	r1, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b6:	065a      	lsls	r2, r3, #25
 80023b8:	4b64      	ldr	r3, [pc, #400]	@ (800254c <HAL_ADC_Init+0x2d4>)
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	4013      	ands	r3, r2
 80023ca:	d108      	bne.n	80023de <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2180      	movs	r1, #128	@ 0x80
 80023d8:	0549      	lsls	r1, r1, #21
 80023da:	430a      	orrs	r2, r1
 80023dc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	495b      	ldr	r1, [pc, #364]	@ (8002558 <HAL_ADC_Init+0x2e0>)
 80023ea:	400a      	ands	r2, r1
 80023ec:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68d9      	ldr	r1, [r3, #12]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_Init+0x18c>
 8002400:	2304      	movs	r3, #4
 8002402:	e000      	b.n	8002406 <HAL_ADC_Init+0x18e>
 8002404:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002406:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2020      	movs	r0, #32
 800240c:	5c1b      	ldrb	r3, [r3, r0]
 800240e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002410:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	202c      	movs	r0, #44	@ 0x2c
 8002416:	5c1b      	ldrb	r3, [r3, r0]
 8002418:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800241a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002420:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002428:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002430:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800243e:	23c2      	movs	r3, #194	@ 0xc2
 8002440:	33ff      	adds	r3, #255	@ 0xff
 8002442:	429a      	cmp	r2, r3
 8002444:	d00b      	beq.n	800245e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68d9      	ldr	r1, [r3, #12]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2221      	movs	r2, #33	@ 0x21
 8002462:	5c9b      	ldrb	r3, [r3, r2]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d11a      	bne.n	800249e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	5c9b      	ldrb	r3, [r3, r2]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2180      	movs	r1, #128	@ 0x80
 800247e:	0249      	lsls	r1, r1, #9
 8002480:	430a      	orrs	r2, r1
 8002482:	60da      	str	r2, [r3, #12]
 8002484:	e00b      	b.n	800249e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248a:	2220      	movs	r2, #32
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	2201      	movs	r2, #1
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d11f      	bne.n	80024e6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	492a      	ldr	r1, [pc, #168]	@ (800255c <HAL_ADC_Init+0x2e4>)
 80024b2:	400a      	ands	r2, r1
 80024b4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6919      	ldr	r1, [r3, #16]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80024c4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80024ca:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2101      	movs	r1, #1
 80024e0:	430a      	orrs	r2, r1
 80024e2:	611a      	str	r2, [r3, #16]
 80024e4:	e00e      	b.n	8002504 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2201      	movs	r2, #1
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d107      	bne.n	8002504 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2101      	movs	r1, #1
 8002500:	438a      	bics	r2, r1
 8002502:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2107      	movs	r1, #7
 8002510:	438a      	bics	r2, r1
 8002512:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6959      	ldr	r1, [r3, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002530:	2203      	movs	r2, #3
 8002532:	4393      	bics	r3, r2
 8002534:	2201      	movs	r2, #1
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b002      	add	sp, #8
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	fffffefd 	.word	0xfffffefd
 800254c:	40012708 	.word	0x40012708
 8002550:	ffc3ffff 	.word	0xffc3ffff
 8002554:	fdffffff 	.word	0xfdffffff
 8002558:	fffe0219 	.word	0xfffe0219
 800255c:	fffffc03 	.word	0xfffffc03

08002560 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002568:	230f      	movs	r3, #15
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2204      	movs	r2, #4
 8002578:	4013      	ands	r3, r2
 800257a:	d138      	bne.n	80025ee <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2250      	movs	r2, #80	@ 0x50
 8002580:	5c9b      	ldrb	r3, [r3, r2]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_ADC_Start+0x2a>
 8002586:	2302      	movs	r3, #2
 8002588:	e038      	b.n	80025fc <HAL_ADC_Start+0x9c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2250      	movs	r2, #80	@ 0x50
 800258e:	2101      	movs	r1, #1
 8002590:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d007      	beq.n	80025aa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800259a:	230f      	movs	r3, #15
 800259c:	18fc      	adds	r4, r7, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f000 f9b9 	bl	8002918 <ADC_Enable>
 80025a6:	0003      	movs	r3, r0
 80025a8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025aa:	230f      	movs	r3, #15
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d120      	bne.n	80025f6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b8:	4a12      	ldr	r2, [pc, #72]	@ (8002604 <HAL_ADC_Start+0xa4>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	2280      	movs	r2, #128	@ 0x80
 80025be:	0052      	lsls	r2, r2, #1
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2250      	movs	r2, #80	@ 0x50
 80025d0:	2100      	movs	r1, #0
 80025d2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	221c      	movs	r2, #28
 80025da:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2104      	movs	r1, #4
 80025e8:	430a      	orrs	r2, r1
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	e003      	b.n	80025f6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025ee:	230f      	movs	r3, #15
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	2202      	movs	r2, #2
 80025f4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80025f6:	230f      	movs	r3, #15
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	781b      	ldrb	r3, [r3, #0]
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	b005      	add	sp, #20
 8002602:	bd90      	pop	{r4, r7, pc}
 8002604:	fffff0fe 	.word	0xfffff0fe

08002608 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002608:	b5b0      	push	{r4, r5, r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002610:	230f      	movs	r3, #15
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2250      	movs	r2, #80	@ 0x50
 800261c:	5c9b      	ldrb	r3, [r3, r2]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_ADC_Stop+0x1e>
 8002622:	2302      	movs	r3, #2
 8002624:	e029      	b.n	800267a <HAL_ADC_Stop+0x72>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2250      	movs	r2, #80	@ 0x50
 800262a:	2101      	movs	r1, #1
 800262c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800262e:	250f      	movs	r5, #15
 8002630:	197c      	adds	r4, r7, r5
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	0018      	movs	r0, r3
 8002636:	f000 fa3e 	bl	8002ab6 <ADC_ConversionStop>
 800263a:	0003      	movs	r3, r0
 800263c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800263e:	197b      	adds	r3, r7, r5
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d112      	bne.n	800266c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002646:	197c      	adds	r4, r7, r5
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0018      	movs	r0, r3
 800264c:	f000 f9cc 	bl	80029e8 <ADC_Disable>
 8002650:	0003      	movs	r3, r0
 8002652:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002654:	197b      	adds	r3, r7, r5
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d107      	bne.n	800266c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002660:	4a08      	ldr	r2, [pc, #32]	@ (8002684 <HAL_ADC_Stop+0x7c>)
 8002662:	4013      	ands	r3, r2
 8002664:	2201      	movs	r2, #1
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2250      	movs	r2, #80	@ 0x50
 8002670:	2100      	movs	r1, #0
 8002672:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002674:	230f      	movs	r3, #15
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	781b      	ldrb	r3, [r3, #0]
}
 800267a:	0018      	movs	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	b004      	add	sp, #16
 8002680:	bdb0      	pop	{r4, r5, r7, pc}
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	fffffefe 	.word	0xfffffefe

08002688 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d102      	bne.n	80026a8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80026a2:	2308      	movs	r3, #8
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	e014      	b.n	80026d2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d10b      	bne.n	80026ce <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	2220      	movs	r2, #32
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2250      	movs	r2, #80	@ 0x50
 80026c6:	2100      	movs	r1, #0
 80026c8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e072      	b.n	80027b4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80026ce:	230c      	movs	r3, #12
 80026d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80026d2:	f7ff fd7f 	bl	80021d4 <HAL_GetTick>
 80026d6:	0003      	movs	r3, r0
 80026d8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80026da:	e01f      	b.n	800271c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	d01c      	beq.n	800271c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <HAL_ADC_PollForConversion+0x70>
 80026e8:	f7ff fd74 	bl	80021d4 <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d211      	bcs.n	800271c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4013      	ands	r3, r2
 8002702:	d10b      	bne.n	800271c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002708:	2204      	movs	r2, #4
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2250      	movs	r2, #80	@ 0x50
 8002714:	2100      	movs	r1, #0
 8002716:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e04b      	b.n	80027b4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	d0d9      	beq.n	80026dc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272c:	2280      	movs	r2, #128	@ 0x80
 800272e:	0092      	lsls	r2, r2, #2
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	23c0      	movs	r3, #192	@ 0xc0
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	4013      	ands	r3, r2
 8002742:	d12e      	bne.n	80027a2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800274a:	2b00      	cmp	r3, #0
 800274c:	d129      	bne.n	80027a2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2208      	movs	r2, #8
 8002756:	4013      	ands	r3, r2
 8002758:	2b08      	cmp	r3, #8
 800275a:	d122      	bne.n	80027a2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2204      	movs	r2, #4
 8002764:	4013      	ands	r3, r2
 8002766:	d110      	bne.n	800278a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	210c      	movs	r1, #12
 8002774:	438a      	bics	r2, r1
 8002776:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277c:	4a0f      	ldr	r2, [pc, #60]	@ (80027bc <HAL_ADC_PollForConversion+0x134>)
 800277e:	4013      	ands	r3, r2
 8002780:	2201      	movs	r2, #1
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	@ 0x54
 8002788:	e00b      	b.n	80027a2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278e:	2220      	movs	r2, #32
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279a:	2201      	movs	r2, #1
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	220c      	movs	r2, #12
 80027b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b004      	add	sp, #16
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	fffffefe 	.word	0xfffffefe

080027c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80027ce:	0018      	movs	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2250      	movs	r2, #80	@ 0x50
 80027e6:	5c9b      	ldrb	r3, [r3, r2]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x18>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e085      	b.n	80028fc <HAL_ADC_ConfigChannel+0x124>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2250      	movs	r2, #80	@ 0x50
 80027f4:	2101      	movs	r1, #1
 80027f6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2204      	movs	r2, #4
 8002800:	4013      	ands	r3, r2
 8002802:	d00b      	beq.n	800281c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002808:	2220      	movs	r2, #32
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2250      	movs	r2, #80	@ 0x50
 8002814:	2100      	movs	r1, #0
 8002816:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e06f      	b.n	80028fc <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a38      	ldr	r2, [pc, #224]	@ (8002904 <HAL_ADC_ConfigChannel+0x12c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d035      	beq.n	8002892 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	035b      	lsls	r3, r3, #13
 8002832:	0b5a      	lsrs	r2, r3, #13
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2380      	movs	r3, #128	@ 0x80
 8002842:	02db      	lsls	r3, r3, #11
 8002844:	4013      	ands	r3, r2
 8002846:	d009      	beq.n	800285c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002848:	4b2f      	ldr	r3, [pc, #188]	@ (8002908 <HAL_ADC_ConfigChannel+0x130>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b2e      	ldr	r3, [pc, #184]	@ (8002908 <HAL_ADC_ConfigChannel+0x130>)
 800284e:	2180      	movs	r1, #128	@ 0x80
 8002850:	0409      	lsls	r1, r1, #16
 8002852:	430a      	orrs	r2, r1
 8002854:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002856:	200a      	movs	r0, #10
 8002858:	f000 f97a 	bl	8002b50 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	2380      	movs	r3, #128	@ 0x80
 8002862:	029b      	lsls	r3, r3, #10
 8002864:	4013      	ands	r3, r2
 8002866:	d006      	beq.n	8002876 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002868:	4b27      	ldr	r3, [pc, #156]	@ (8002908 <HAL_ADC_ConfigChannel+0x130>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b26      	ldr	r3, [pc, #152]	@ (8002908 <HAL_ADC_ConfigChannel+0x130>)
 800286e:	2180      	movs	r1, #128	@ 0x80
 8002870:	03c9      	lsls	r1, r1, #15
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	2380      	movs	r3, #128	@ 0x80
 800287c:	025b      	lsls	r3, r3, #9
 800287e:	4013      	ands	r3, r2
 8002880:	d037      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8002882:	4b21      	ldr	r3, [pc, #132]	@ (8002908 <HAL_ADC_ConfigChannel+0x130>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b20      	ldr	r3, [pc, #128]	@ (8002908 <HAL_ADC_ConfigChannel+0x130>)
 8002888:	2180      	movs	r1, #128	@ 0x80
 800288a:	0449      	lsls	r1, r1, #17
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e02f      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	035b      	lsls	r3, r3, #13
 800289e:	0b5b      	lsrs	r3, r3, #13
 80028a0:	43d9      	mvns	r1, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	400a      	ands	r2, r1
 80028a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	2380      	movs	r3, #128	@ 0x80
 80028b0:	02db      	lsls	r3, r3, #11
 80028b2:	4013      	ands	r3, r2
 80028b4:	d005      	beq.n	80028c2 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80028b6:	4b14      	ldr	r3, [pc, #80]	@ (8002908 <HAL_ADC_ConfigChannel+0x130>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b13      	ldr	r3, [pc, #76]	@ (8002908 <HAL_ADC_ConfigChannel+0x130>)
 80028bc:	4913      	ldr	r1, [pc, #76]	@ (800290c <HAL_ADC_ConfigChannel+0x134>)
 80028be:	400a      	ands	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	@ 0x80
 80028c8:	029b      	lsls	r3, r3, #10
 80028ca:	4013      	ands	r3, r2
 80028cc:	d005      	beq.n	80028da <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80028ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002908 <HAL_ADC_ConfigChannel+0x130>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002908 <HAL_ADC_ConfigChannel+0x130>)
 80028d4:	490e      	ldr	r1, [pc, #56]	@ (8002910 <HAL_ADC_ConfigChannel+0x138>)
 80028d6:	400a      	ands	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	2380      	movs	r3, #128	@ 0x80
 80028e0:	025b      	lsls	r3, r3, #9
 80028e2:	4013      	ands	r3, r2
 80028e4:	d005      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 80028e6:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <HAL_ADC_ConfigChannel+0x130>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b07      	ldr	r3, [pc, #28]	@ (8002908 <HAL_ADC_ConfigChannel+0x130>)
 80028ec:	4909      	ldr	r1, [pc, #36]	@ (8002914 <HAL_ADC_ConfigChannel+0x13c>)
 80028ee:	400a      	ands	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2250      	movs	r2, #80	@ 0x50
 80028f6:	2100      	movs	r1, #0
 80028f8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}
 8002904:	00001001 	.word	0x00001001
 8002908:	40012708 	.word	0x40012708
 800290c:	ff7fffff 	.word	0xff7fffff
 8002910:	ffbfffff 	.word	0xffbfffff
 8002914:	feffffff 	.word	0xfeffffff

08002918 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2203      	movs	r2, #3
 800292c:	4013      	ands	r3, r2
 800292e:	2b01      	cmp	r3, #1
 8002930:	d108      	bne.n	8002944 <ADC_Enable+0x2c>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2201      	movs	r2, #1
 800293a:	4013      	ands	r3, r2
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <ADC_Enable+0x2c>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <ADC_Enable+0x2e>
 8002944:	2300      	movs	r3, #0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d146      	bne.n	80029d8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4a24      	ldr	r2, [pc, #144]	@ (80029e4 <ADC_Enable+0xcc>)
 8002952:	4013      	ands	r3, r2
 8002954:	d00d      	beq.n	8002972 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295a:	2210      	movs	r2, #16
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002966:	2201      	movs	r2, #1
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e033      	b.n	80029da <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002982:	2001      	movs	r0, #1
 8002984:	f000 f8e4 	bl	8002b50 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002988:	f7ff fc24 	bl	80021d4 <HAL_GetTick>
 800298c:	0003      	movs	r3, r0
 800298e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002990:	e01b      	b.n	80029ca <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002992:	f7ff fc1f 	bl	80021d4 <HAL_GetTick>
 8002996:	0002      	movs	r2, r0
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b0a      	cmp	r3, #10
 800299e:	d914      	bls.n	80029ca <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2201      	movs	r2, #1
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d00d      	beq.n	80029ca <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b2:	2210      	movs	r2, #16
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029be:	2201      	movs	r2, #1
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e007      	b.n	80029da <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2201      	movs	r2, #1
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d1dc      	bne.n	8002992 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b004      	add	sp, #16
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	80000017 	.word	0x80000017

080029e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2203      	movs	r2, #3
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d108      	bne.n	8002a14 <ADC_Disable+0x2c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <ADC_Disable+0x2c>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <ADC_Disable+0x2e>
 8002a14:	2300      	movs	r3, #0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d048      	beq.n	8002aac <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2205      	movs	r2, #5
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d110      	bne.n	8002a4a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2102      	movs	r1, #2
 8002a34:	430a      	orrs	r2, r1
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a40:	f7ff fbc8 	bl	80021d4 <HAL_GetTick>
 8002a44:	0003      	movs	r3, r0
 8002a46:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a48:	e029      	b.n	8002a9e <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4e:	2210      	movs	r2, #16
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e023      	b.n	8002aae <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a66:	f7ff fbb5 	bl	80021d4 <HAL_GetTick>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b0a      	cmp	r3, #10
 8002a72:	d914      	bls.n	8002a9e <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d10d      	bne.n	8002a9e <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a86:	2210      	movs	r2, #16
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a92:	2201      	movs	r2, #1
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e007      	b.n	8002aae <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d0dc      	beq.n	8002a66 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b004      	add	sp, #16
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	4013      	ands	r3, r2
 8002acc:	d03a      	beq.n	8002b44 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d10d      	bne.n	8002af8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8002ae6:	d107      	bne.n	8002af8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2110      	movs	r1, #16
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002af8:	f7ff fb6c 	bl	80021d4 <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002b00:	e01a      	b.n	8002b38 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002b02:	f7ff fb67 	bl	80021d4 <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b0a      	cmp	r3, #10
 8002b0e:	d913      	bls.n	8002b38 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2204      	movs	r2, #4
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d00d      	beq.n	8002b38 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b20:	2210      	movs	r2, #16
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e006      	b.n	8002b46 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	4013      	ands	r3, r2
 8002b42:	d1de      	bne.n	8002b02 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b004      	add	sp, #16
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002b58:	4b0b      	ldr	r3, [pc, #44]	@ (8002b88 <ADC_DelayMicroSecond+0x38>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	490b      	ldr	r1, [pc, #44]	@ (8002b8c <ADC_DelayMicroSecond+0x3c>)
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7fd fadc 	bl	800011c <__udivsi3>
 8002b64:	0003      	movs	r3, r0
 8002b66:	001a      	movs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4353      	muls	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8002b6e:	e002      	b.n	8002b76 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f9      	bne.n	8002b70 <ADC_DelayMicroSecond+0x20>
  }
}
 8002b7c:	46c0      	nop			@ (mov r8, r8)
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	20000004 	.word	0x20000004
 8002b8c:	000f4240 	.word	0x000f4240

08002b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	0002      	movs	r2, r0
 8002b98:	1dfb      	adds	r3, r7, #7
 8002b9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	1dfb      	adds	r3, r7, #7
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ba2:	d809      	bhi.n	8002bb8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba4:	1dfb      	adds	r3, r7, #7
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	001a      	movs	r2, r3
 8002baa:	231f      	movs	r3, #31
 8002bac:	401a      	ands	r2, r3
 8002bae:	4b04      	ldr	r3, [pc, #16]	@ (8002bc0 <__NVIC_EnableIRQ+0x30>)
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	4091      	lsls	r1, r2
 8002bb4:	000a      	movs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]
  }
}
 8002bb8:	46c0      	nop			@ (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	0002      	movs	r2, r0
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	1dfb      	adds	r3, r7, #7
 8002bd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	1dfb      	adds	r3, r7, #7
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bd8:	d828      	bhi.n	8002c2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bda:	4a2f      	ldr	r2, [pc, #188]	@ (8002c98 <__NVIC_SetPriority+0xd4>)
 8002bdc:	1dfb      	adds	r3, r7, #7
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	33c0      	adds	r3, #192	@ 0xc0
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	589b      	ldr	r3, [r3, r2]
 8002bea:	1dfa      	adds	r2, r7, #7
 8002bec:	7812      	ldrb	r2, [r2, #0]
 8002bee:	0011      	movs	r1, r2
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	400a      	ands	r2, r1
 8002bf4:	00d2      	lsls	r2, r2, #3
 8002bf6:	21ff      	movs	r1, #255	@ 0xff
 8002bf8:	4091      	lsls	r1, r2
 8002bfa:	000a      	movs	r2, r1
 8002bfc:	43d2      	mvns	r2, r2
 8002bfe:	401a      	ands	r2, r3
 8002c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	019b      	lsls	r3, r3, #6
 8002c06:	22ff      	movs	r2, #255	@ 0xff
 8002c08:	401a      	ands	r2, r3
 8002c0a:	1dfb      	adds	r3, r7, #7
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	2303      	movs	r3, #3
 8002c12:	4003      	ands	r3, r0
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c18:	481f      	ldr	r0, [pc, #124]	@ (8002c98 <__NVIC_SetPriority+0xd4>)
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b25b      	sxtb	r3, r3
 8002c20:	089b      	lsrs	r3, r3, #2
 8002c22:	430a      	orrs	r2, r1
 8002c24:	33c0      	adds	r3, #192	@ 0xc0
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c2a:	e031      	b.n	8002c90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8002c9c <__NVIC_SetPriority+0xd8>)
 8002c2e:	1dfb      	adds	r3, r7, #7
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	0019      	movs	r1, r3
 8002c34:	230f      	movs	r3, #15
 8002c36:	400b      	ands	r3, r1
 8002c38:	3b08      	subs	r3, #8
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	3306      	adds	r3, #6
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	18d3      	adds	r3, r2, r3
 8002c42:	3304      	adds	r3, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	1dfa      	adds	r2, r7, #7
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	400a      	ands	r2, r1
 8002c50:	00d2      	lsls	r2, r2, #3
 8002c52:	21ff      	movs	r1, #255	@ 0xff
 8002c54:	4091      	lsls	r1, r2
 8002c56:	000a      	movs	r2, r1
 8002c58:	43d2      	mvns	r2, r2
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	22ff      	movs	r2, #255	@ 0xff
 8002c64:	401a      	ands	r2, r3
 8002c66:	1dfb      	adds	r3, r7, #7
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	4003      	ands	r3, r0
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c74:	4809      	ldr	r0, [pc, #36]	@ (8002c9c <__NVIC_SetPriority+0xd8>)
 8002c76:	1dfb      	adds	r3, r7, #7
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	001c      	movs	r4, r3
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	4023      	ands	r3, r4
 8002c80:	3b08      	subs	r3, #8
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	430a      	orrs	r2, r1
 8002c86:	3306      	adds	r3, #6
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	18c3      	adds	r3, r0, r3
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	601a      	str	r2, [r3, #0]
}
 8002c90:	46c0      	nop			@ (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b003      	add	sp, #12
 8002c96:	bd90      	pop	{r4, r7, pc}
 8002c98:	e000e100 	.word	0xe000e100
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ca4:	f3bf 8f4f 	dsb	sy
}
 8002ca8:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002caa:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <__NVIC_SystemReset+0x1c>)
 8002cac:	4a04      	ldr	r2, [pc, #16]	@ (8002cc0 <__NVIC_SystemReset+0x20>)
 8002cae:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cb0:	f3bf 8f4f 	dsb	sy
}
 8002cb4:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	e7fd      	b.n	8002cb6 <__NVIC_SystemReset+0x16>
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	e000ed00 	.word	0xe000ed00
 8002cc0:	05fa0004 	.word	0x05fa0004

08002cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	1e5a      	subs	r2, r3, #1
 8002cd0:	2380      	movs	r3, #128	@ 0x80
 8002cd2:	045b      	lsls	r3, r3, #17
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d301      	bcc.n	8002cdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e010      	b.n	8002cfe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <SysTick_Config+0x44>)
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	3a01      	subs	r2, #1
 8002ce2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	425b      	negs	r3, r3
 8002ce8:	2103      	movs	r1, #3
 8002cea:	0018      	movs	r0, r3
 8002cec:	f7ff ff6a 	bl	8002bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf0:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <SysTick_Config+0x44>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cf6:	4b04      	ldr	r3, [pc, #16]	@ (8002d08 <SysTick_Config+0x44>)
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	0018      	movs	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b002      	add	sp, #8
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	e000e010 	.word	0xe000e010

08002d0c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	210f      	movs	r1, #15
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	1c02      	adds	r2, r0, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	187b      	adds	r3, r7, r1
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	0011      	movs	r1, r2
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7ff ff4b 	bl	8002bc4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b004      	add	sp, #16
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	0002      	movs	r2, r0
 8002d3e:	1dfb      	adds	r3, r7, #7
 8002d40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d42:	1dfb      	adds	r3, r7, #7
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b25b      	sxtb	r3, r3
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7ff ff21 	bl	8002b90 <__NVIC_EnableIRQ>
}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b002      	add	sp, #8
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002d5a:	f7ff ffa1 	bl	8002ca0 <__NVIC_SystemReset>

08002d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7ff ffab 	bl	8002cc4 <SysTick_Config>
 8002d6e:	0003      	movs	r3, r0
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b002      	add	sp, #8
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d80:	230f      	movs	r3, #15
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2225      	movs	r2, #37	@ 0x25
 8002d8c:	5c9b      	ldrb	r3, [r3, r2]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d008      	beq.n	8002da6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2204      	movs	r2, #4
 8002d98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2224      	movs	r2, #36	@ 0x24
 8002d9e:	2100      	movs	r1, #0
 8002da0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e024      	b.n	8002df0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	210e      	movs	r1, #14
 8002db2:	438a      	bics	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	438a      	bics	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	221c      	movs	r2, #28
 8002dcc:	401a      	ands	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	4091      	lsls	r1, r2
 8002dd6:	000a      	movs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2225      	movs	r2, #37	@ 0x25
 8002dde:	2101      	movs	r1, #1
 8002de0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2224      	movs	r2, #36	@ 0x24
 8002de6:	2100      	movs	r1, #0
 8002de8:	5499      	strb	r1, [r3, r2]

    return status;
 8002dea:	230f      	movs	r3, #15
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b004      	add	sp, #16
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002e22:	e155      	b.n	80030d0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4091      	lsls	r1, r2
 8002e2e:	000a      	movs	r2, r1
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d100      	bne.n	8002e3c <HAL_GPIO_Init+0x30>
 8002e3a:	e146      	b.n	80030ca <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2203      	movs	r2, #3
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d005      	beq.n	8002e54 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d130      	bne.n	8002eb6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	409a      	lsls	r2, r3
 8002e62:	0013      	movs	r3, r2
 8002e64:	43da      	mvns	r2, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	409a      	lsls	r2, r3
 8002e76:	0013      	movs	r3, r2
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	0013      	movs	r3, r2
 8002e92:	43da      	mvns	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	091b      	lsrs	r3, r3, #4
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2203      	movs	r2, #3
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d017      	beq.n	8002ef2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	2203      	movs	r2, #3
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	0013      	movs	r3, r2
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	0013      	movs	r3, r2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d123      	bne.n	8002f46 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	08da      	lsrs	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3208      	adds	r2, #8
 8002f06:	0092      	lsls	r2, r2, #2
 8002f08:	58d3      	ldr	r3, [r2, r3]
 8002f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2207      	movs	r2, #7
 8002f10:	4013      	ands	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	220f      	movs	r2, #15
 8002f16:	409a      	lsls	r2, r3
 8002f18:	0013      	movs	r3, r2
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2107      	movs	r1, #7
 8002f2a:	400b      	ands	r3, r1
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	0013      	movs	r3, r2
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	08da      	lsrs	r2, r3, #3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3208      	adds	r2, #8
 8002f40:	0092      	lsls	r2, r2, #2
 8002f42:	6939      	ldr	r1, [r7, #16]
 8002f44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	2203      	movs	r2, #3
 8002f52:	409a      	lsls	r2, r3
 8002f54:	0013      	movs	r3, r2
 8002f56:	43da      	mvns	r2, r3
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2203      	movs	r2, #3
 8002f64:	401a      	ands	r2, r3
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	0013      	movs	r3, r2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	23c0      	movs	r3, #192	@ 0xc0
 8002f80:	029b      	lsls	r3, r3, #10
 8002f82:	4013      	ands	r3, r2
 8002f84:	d100      	bne.n	8002f88 <HAL_GPIO_Init+0x17c>
 8002f86:	e0a0      	b.n	80030ca <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f88:	4b57      	ldr	r3, [pc, #348]	@ (80030e8 <HAL_GPIO_Init+0x2dc>)
 8002f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f8c:	4b56      	ldr	r3, [pc, #344]	@ (80030e8 <HAL_GPIO_Init+0x2dc>)
 8002f8e:	2101      	movs	r1, #1
 8002f90:	430a      	orrs	r2, r1
 8002f92:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f94:	4a55      	ldr	r2, [pc, #340]	@ (80030ec <HAL_GPIO_Init+0x2e0>)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	089b      	lsrs	r3, r3, #2
 8002f9a:	3302      	adds	r3, #2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	589b      	ldr	r3, [r3, r2]
 8002fa0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	220f      	movs	r2, #15
 8002fac:	409a      	lsls	r2, r3
 8002fae:	0013      	movs	r3, r2
 8002fb0:	43da      	mvns	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	23a0      	movs	r3, #160	@ 0xa0
 8002fbc:	05db      	lsls	r3, r3, #23
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d01f      	beq.n	8003002 <HAL_GPIO_Init+0x1f6>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80030f0 <HAL_GPIO_Init+0x2e4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d019      	beq.n	8002ffe <HAL_GPIO_Init+0x1f2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a49      	ldr	r2, [pc, #292]	@ (80030f4 <HAL_GPIO_Init+0x2e8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d013      	beq.n	8002ffa <HAL_GPIO_Init+0x1ee>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a48      	ldr	r2, [pc, #288]	@ (80030f8 <HAL_GPIO_Init+0x2ec>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00d      	beq.n	8002ff6 <HAL_GPIO_Init+0x1ea>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a47      	ldr	r2, [pc, #284]	@ (80030fc <HAL_GPIO_Init+0x2f0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d007      	beq.n	8002ff2 <HAL_GPIO_Init+0x1e6>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a46      	ldr	r2, [pc, #280]	@ (8003100 <HAL_GPIO_Init+0x2f4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d101      	bne.n	8002fee <HAL_GPIO_Init+0x1e2>
 8002fea:	2305      	movs	r3, #5
 8002fec:	e00a      	b.n	8003004 <HAL_GPIO_Init+0x1f8>
 8002fee:	2306      	movs	r3, #6
 8002ff0:	e008      	b.n	8003004 <HAL_GPIO_Init+0x1f8>
 8002ff2:	2304      	movs	r3, #4
 8002ff4:	e006      	b.n	8003004 <HAL_GPIO_Init+0x1f8>
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e004      	b.n	8003004 <HAL_GPIO_Init+0x1f8>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e002      	b.n	8003004 <HAL_GPIO_Init+0x1f8>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_GPIO_Init+0x1f8>
 8003002:	2300      	movs	r3, #0
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	2103      	movs	r1, #3
 8003008:	400a      	ands	r2, r1
 800300a:	0092      	lsls	r2, r2, #2
 800300c:	4093      	lsls	r3, r2
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003014:	4935      	ldr	r1, [pc, #212]	@ (80030ec <HAL_GPIO_Init+0x2e0>)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	3302      	adds	r3, #2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003022:	4b38      	ldr	r3, [pc, #224]	@ (8003104 <HAL_GPIO_Init+0x2f8>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	43da      	mvns	r2, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	2380      	movs	r3, #128	@ 0x80
 8003038:	035b      	lsls	r3, r3, #13
 800303a:	4013      	ands	r3, r2
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003046:	4b2f      	ldr	r3, [pc, #188]	@ (8003104 <HAL_GPIO_Init+0x2f8>)
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800304c:	4b2d      	ldr	r3, [pc, #180]	@ (8003104 <HAL_GPIO_Init+0x2f8>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	43da      	mvns	r2, r3
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	2380      	movs	r3, #128	@ 0x80
 8003062:	039b      	lsls	r3, r3, #14
 8003064:	4013      	ands	r3, r2
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003070:	4b24      	ldr	r3, [pc, #144]	@ (8003104 <HAL_GPIO_Init+0x2f8>)
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003076:	4b23      	ldr	r3, [pc, #140]	@ (8003104 <HAL_GPIO_Init+0x2f8>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	43da      	mvns	r2, r3
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	2380      	movs	r3, #128	@ 0x80
 800308c:	029b      	lsls	r3, r3, #10
 800308e:	4013      	ands	r3, r2
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800309a:	4b1a      	ldr	r3, [pc, #104]	@ (8003104 <HAL_GPIO_Init+0x2f8>)
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030a0:	4b18      	ldr	r3, [pc, #96]	@ (8003104 <HAL_GPIO_Init+0x2f8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	43da      	mvns	r2, r3
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	2380      	movs	r3, #128	@ 0x80
 80030b6:	025b      	lsls	r3, r3, #9
 80030b8:	4013      	ands	r3, r2
 80030ba:	d003      	beq.n	80030c4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003104 <HAL_GPIO_Init+0x2f8>)
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	3301      	adds	r3, #1
 80030ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	40da      	lsrs	r2, r3
 80030d8:	1e13      	subs	r3, r2, #0
 80030da:	d000      	beq.n	80030de <HAL_GPIO_Init+0x2d2>
 80030dc:	e6a2      	b.n	8002e24 <HAL_GPIO_Init+0x18>
  }
}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	46c0      	nop			@ (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b006      	add	sp, #24
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40010000 	.word	0x40010000
 80030f0:	50000400 	.word	0x50000400
 80030f4:	50000800 	.word	0x50000800
 80030f8:	50000c00 	.word	0x50000c00
 80030fc:	50001000 	.word	0x50001000
 8003100:	50001c00 	.word	0x50001c00
 8003104:	40010400 	.word	0x40010400

08003108 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	0008      	movs	r0, r1
 8003112:	0011      	movs	r1, r2
 8003114:	1cbb      	adds	r3, r7, #2
 8003116:	1c02      	adds	r2, r0, #0
 8003118:	801a      	strh	r2, [r3, #0]
 800311a:	1c7b      	adds	r3, r7, #1
 800311c:	1c0a      	adds	r2, r1, #0
 800311e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003120:	1c7b      	adds	r3, r7, #1
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003128:	1cbb      	adds	r3, r7, #2
 800312a:	881a      	ldrh	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003130:	e003      	b.n	800313a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003132:	1cbb      	adds	r3, r7, #2
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	46bd      	mov	sp, r7
 800313e:	b002      	add	sp, #8
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e08f      	b.n	8003276 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2241      	movs	r2, #65	@ 0x41
 800315a:	5c9b      	ldrb	r3, [r3, r2]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d107      	bne.n	8003172 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2240      	movs	r2, #64	@ 0x40
 8003166:	2100      	movs	r1, #0
 8003168:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	0018      	movs	r0, r3
 800316e:	f7fe faf1 	bl	8001754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2241      	movs	r2, #65	@ 0x41
 8003176:	2124      	movs	r1, #36	@ 0x24
 8003178:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2101      	movs	r1, #1
 8003186:	438a      	bics	r2, r1
 8003188:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	493b      	ldr	r1, [pc, #236]	@ (8003280 <HAL_I2C_Init+0x13c>)
 8003194:	400a      	ands	r2, r1
 8003196:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4938      	ldr	r1, [pc, #224]	@ (8003284 <HAL_I2C_Init+0x140>)
 80031a4:	400a      	ands	r2, r1
 80031a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d108      	bne.n	80031c2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2180      	movs	r1, #128	@ 0x80
 80031ba:	0209      	lsls	r1, r1, #8
 80031bc:	430a      	orrs	r2, r1
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	e007      	b.n	80031d2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2184      	movs	r1, #132	@ 0x84
 80031cc:	0209      	lsls	r1, r1, #8
 80031ce:	430a      	orrs	r2, r1
 80031d0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d109      	bne.n	80031ee <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2180      	movs	r1, #128	@ 0x80
 80031e6:	0109      	lsls	r1, r1, #4
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	e007      	b.n	80031fe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4923      	ldr	r1, [pc, #140]	@ (8003288 <HAL_I2C_Init+0x144>)
 80031fa:	400a      	ands	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4920      	ldr	r1, [pc, #128]	@ (800328c <HAL_I2C_Init+0x148>)
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	491a      	ldr	r1, [pc, #104]	@ (8003284 <HAL_I2C_Init+0x140>)
 800321a:	400a      	ands	r2, r1
 800321c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	431a      	orrs	r2, r3
 8003228:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69d9      	ldr	r1, [r3, #28]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1a      	ldr	r2, [r3, #32]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2101      	movs	r1, #1
 8003254:	430a      	orrs	r2, r1
 8003256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2241      	movs	r2, #65	@ 0x41
 8003262:	2120      	movs	r1, #32
 8003264:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2242      	movs	r2, #66	@ 0x42
 8003270:	2100      	movs	r1, #0
 8003272:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	0018      	movs	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	b002      	add	sp, #8
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	f0ffffff 	.word	0xf0ffffff
 8003284:	ffff7fff 	.word	0xffff7fff
 8003288:	fffff7ff 	.word	0xfffff7ff
 800328c:	02008000 	.word	0x02008000

08003290 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b089      	sub	sp, #36	@ 0x24
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	0008      	movs	r0, r1
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	0019      	movs	r1, r3
 800329e:	230a      	movs	r3, #10
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	1c02      	adds	r2, r0, #0
 80032a4:	801a      	strh	r2, [r3, #0]
 80032a6:	2308      	movs	r3, #8
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	1c0a      	adds	r2, r1, #0
 80032ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2241      	movs	r2, #65	@ 0x41
 80032b2:	5c9b      	ldrb	r3, [r3, r2]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	d000      	beq.n	80032bc <HAL_I2C_Master_Transmit+0x2c>
 80032ba:	e10a      	b.n	80034d2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2240      	movs	r2, #64	@ 0x40
 80032c0:	5c9b      	ldrb	r3, [r3, r2]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_I2C_Master_Transmit+0x3a>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e104      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x244>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2240      	movs	r2, #64	@ 0x40
 80032ce:	2101      	movs	r1, #1
 80032d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032d2:	f7fe ff7f 	bl	80021d4 <HAL_GetTick>
 80032d6:	0003      	movs	r3, r0
 80032d8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032da:	2380      	movs	r3, #128	@ 0x80
 80032dc:	0219      	lsls	r1, r3, #8
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	2319      	movs	r3, #25
 80032e6:	2201      	movs	r2, #1
 80032e8:	f000 fb22 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 80032ec:	1e03      	subs	r3, r0, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0ef      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2241      	movs	r2, #65	@ 0x41
 80032f8:	2121      	movs	r1, #33	@ 0x21
 80032fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2242      	movs	r2, #66	@ 0x42
 8003300:	2110      	movs	r1, #16
 8003302:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2208      	movs	r2, #8
 8003314:	18ba      	adds	r2, r7, r2
 8003316:	8812      	ldrh	r2, [r2, #0]
 8003318:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	2bff      	cmp	r3, #255	@ 0xff
 8003328:	d906      	bls.n	8003338 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	22ff      	movs	r2, #255	@ 0xff
 800332e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003330:	2380      	movs	r3, #128	@ 0x80
 8003332:	045b      	lsls	r3, r3, #17
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	e007      	b.n	8003348 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003342:	2380      	movs	r3, #128	@ 0x80
 8003344:	049b      	lsls	r3, r3, #18
 8003346:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	d027      	beq.n	80033a0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	781a      	ldrb	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003384:	b2db      	uxtb	r3, r3
 8003386:	3301      	adds	r3, #1
 8003388:	b2da      	uxtb	r2, r3
 800338a:	697c      	ldr	r4, [r7, #20]
 800338c:	230a      	movs	r3, #10
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	8819      	ldrh	r1, [r3, #0]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	4b51      	ldr	r3, [pc, #324]	@ (80034dc <HAL_I2C_Master_Transmit+0x24c>)
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	0023      	movs	r3, r4
 800339a:	f000 fd41 	bl	8003e20 <I2C_TransferConfig>
 800339e:	e06f      	b.n	8003480 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	697c      	ldr	r4, [r7, #20]
 80033a8:	230a      	movs	r3, #10
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	8819      	ldrh	r1, [r3, #0]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	4b4a      	ldr	r3, [pc, #296]	@ (80034dc <HAL_I2C_Master_Transmit+0x24c>)
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	0023      	movs	r3, r4
 80033b6:	f000 fd33 	bl	8003e20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033ba:	e061      	b.n	8003480 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 fb0c 	bl	80039e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80033c8:	1e03      	subs	r3, r0, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e081      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d03a      	beq.n	8003480 <HAL_I2C_Master_Transmit+0x1f0>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340e:	2b00      	cmp	r3, #0
 8003410:	d136      	bne.n	8003480 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003412:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	0013      	movs	r3, r2
 800341c:	2200      	movs	r2, #0
 800341e:	2180      	movs	r1, #128	@ 0x80
 8003420:	f000 fa86 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d001      	beq.n	800342c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e053      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	2bff      	cmp	r3, #255	@ 0xff
 8003434:	d911      	bls.n	800345a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	22ff      	movs	r2, #255	@ 0xff
 800343a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003440:	b2da      	uxtb	r2, r3
 8003442:	2380      	movs	r3, #128	@ 0x80
 8003444:	045c      	lsls	r4, r3, #17
 8003446:	230a      	movs	r3, #10
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	8819      	ldrh	r1, [r3, #0]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	2300      	movs	r3, #0
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	0023      	movs	r3, r4
 8003454:	f000 fce4 	bl	8003e20 <I2C_TransferConfig>
 8003458:	e012      	b.n	8003480 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003468:	b2da      	uxtb	r2, r3
 800346a:	2380      	movs	r3, #128	@ 0x80
 800346c:	049c      	lsls	r4, r3, #18
 800346e:	230a      	movs	r3, #10
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	8819      	ldrh	r1, [r3, #0]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	2300      	movs	r3, #0
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	0023      	movs	r3, r4
 800347c:	f000 fcd0 	bl	8003e20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d198      	bne.n	80033bc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	0018      	movs	r0, r3
 8003492:	f000 faeb 	bl	8003a6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003496:	1e03      	subs	r3, r0, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e01a      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2220      	movs	r2, #32
 80034a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	490b      	ldr	r1, [pc, #44]	@ (80034e0 <HAL_I2C_Master_Transmit+0x250>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2241      	movs	r2, #65	@ 0x41
 80034ba:	2120      	movs	r1, #32
 80034bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2242      	movs	r2, #66	@ 0x42
 80034c2:	2100      	movs	r1, #0
 80034c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2240      	movs	r2, #64	@ 0x40
 80034ca:	2100      	movs	r1, #0
 80034cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
  }
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b007      	add	sp, #28
 80034da:	bd90      	pop	{r4, r7, pc}
 80034dc:	80002000 	.word	0x80002000
 80034e0:	fe00e800 	.word	0xfe00e800

080034e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b089      	sub	sp, #36	@ 0x24
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	0008      	movs	r0, r1
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	0019      	movs	r1, r3
 80034f2:	230a      	movs	r3, #10
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	1c02      	adds	r2, r0, #0
 80034f8:	801a      	strh	r2, [r3, #0]
 80034fa:	2308      	movs	r3, #8
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	1c0a      	adds	r2, r1, #0
 8003500:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2241      	movs	r2, #65	@ 0x41
 8003506:	5c9b      	ldrb	r3, [r3, r2]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b20      	cmp	r3, #32
 800350c:	d000      	beq.n	8003510 <HAL_I2C_Master_Receive+0x2c>
 800350e:	e0e8      	b.n	80036e2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2240      	movs	r2, #64	@ 0x40
 8003514:	5c9b      	ldrb	r3, [r3, r2]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_I2C_Master_Receive+0x3a>
 800351a:	2302      	movs	r3, #2
 800351c:	e0e2      	b.n	80036e4 <HAL_I2C_Master_Receive+0x200>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2240      	movs	r2, #64	@ 0x40
 8003522:	2101      	movs	r1, #1
 8003524:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003526:	f7fe fe55 	bl	80021d4 <HAL_GetTick>
 800352a:	0003      	movs	r3, r0
 800352c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800352e:	2380      	movs	r3, #128	@ 0x80
 8003530:	0219      	lsls	r1, r3, #8
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	2319      	movs	r3, #25
 800353a:	2201      	movs	r2, #1
 800353c:	f000 f9f8 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003540:	1e03      	subs	r3, r0, #0
 8003542:	d001      	beq.n	8003548 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0cd      	b.n	80036e4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2241      	movs	r2, #65	@ 0x41
 800354c:	2122      	movs	r1, #34	@ 0x22
 800354e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2242      	movs	r2, #66	@ 0x42
 8003554:	2110      	movs	r1, #16
 8003556:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2208      	movs	r2, #8
 8003568:	18ba      	adds	r2, r7, r2
 800356a:	8812      	ldrh	r2, [r2, #0]
 800356c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	2bff      	cmp	r3, #255	@ 0xff
 800357c:	d911      	bls.n	80035a2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003588:	b2da      	uxtb	r2, r3
 800358a:	2380      	movs	r3, #128	@ 0x80
 800358c:	045c      	lsls	r4, r3, #17
 800358e:	230a      	movs	r3, #10
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	8819      	ldrh	r1, [r3, #0]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	4b55      	ldr	r3, [pc, #340]	@ (80036ec <HAL_I2C_Master_Receive+0x208>)
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	0023      	movs	r3, r4
 800359c:	f000 fc40 	bl	8003e20 <I2C_TransferConfig>
 80035a0:	e076      	b.n	8003690 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	2380      	movs	r3, #128	@ 0x80
 80035b4:	049c      	lsls	r4, r3, #18
 80035b6:	230a      	movs	r3, #10
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	8819      	ldrh	r1, [r3, #0]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	4b4b      	ldr	r3, [pc, #300]	@ (80036ec <HAL_I2C_Master_Receive+0x208>)
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	0023      	movs	r3, r4
 80035c4:	f000 fc2c 	bl	8003e20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80035c8:	e062      	b.n	8003690 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	0018      	movs	r0, r3
 80035d2:	f000 fa8f 	bl	8003af4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035d6:	1e03      	subs	r3, r0, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e082      	b.n	80036e4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d03a      	beq.n	8003690 <HAL_I2C_Master_Receive+0x1ac>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361e:	2b00      	cmp	r3, #0
 8003620:	d136      	bne.n	8003690 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003622:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	0013      	movs	r3, r2
 800362c:	2200      	movs	r2, #0
 800362e:	2180      	movs	r1, #128	@ 0x80
 8003630:	f000 f97e 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003634:	1e03      	subs	r3, r0, #0
 8003636:	d001      	beq.n	800363c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e053      	b.n	80036e4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	2bff      	cmp	r3, #255	@ 0xff
 8003644:	d911      	bls.n	800366a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	22ff      	movs	r2, #255	@ 0xff
 800364a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003650:	b2da      	uxtb	r2, r3
 8003652:	2380      	movs	r3, #128	@ 0x80
 8003654:	045c      	lsls	r4, r3, #17
 8003656:	230a      	movs	r3, #10
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	8819      	ldrh	r1, [r3, #0]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	2300      	movs	r3, #0
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	0023      	movs	r3, r4
 8003664:	f000 fbdc 	bl	8003e20 <I2C_TransferConfig>
 8003668:	e012      	b.n	8003690 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003678:	b2da      	uxtb	r2, r3
 800367a:	2380      	movs	r3, #128	@ 0x80
 800367c:	049c      	lsls	r4, r3, #18
 800367e:	230a      	movs	r3, #10
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	8819      	ldrh	r1, [r3, #0]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	2300      	movs	r3, #0
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	0023      	movs	r3, r4
 800368c:	f000 fbc8 	bl	8003e20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d197      	bne.n	80035ca <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f000 f9e3 	bl	8003a6c <I2C_WaitOnSTOPFlagUntilTimeout>
 80036a6:	1e03      	subs	r3, r0, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e01a      	b.n	80036e4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2220      	movs	r2, #32
 80036b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	490b      	ldr	r1, [pc, #44]	@ (80036f0 <HAL_I2C_Master_Receive+0x20c>)
 80036c2:	400a      	ands	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2241      	movs	r2, #65	@ 0x41
 80036ca:	2120      	movs	r1, #32
 80036cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2242      	movs	r2, #66	@ 0x42
 80036d2:	2100      	movs	r1, #0
 80036d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2240      	movs	r2, #64	@ 0x40
 80036da:	2100      	movs	r1, #0
 80036dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	e000      	b.n	80036e4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
  }
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b007      	add	sp, #28
 80036ea:	bd90      	pop	{r4, r7, pc}
 80036ec:	80002400 	.word	0x80002400
 80036f0:	fe00e800 	.word	0xfe00e800

080036f4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	@ 0x28
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	230a      	movs	r3, #10
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	1c0a      	adds	r2, r1, #0
 8003706:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2241      	movs	r2, #65	@ 0x41
 8003710:	5c9b      	ldrb	r3, [r3, r2]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b20      	cmp	r3, #32
 8003716:	d000      	beq.n	800371a <HAL_I2C_IsDeviceReady+0x26>
 8003718:	e0df      	b.n	80038da <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699a      	ldr	r2, [r3, #24]
 8003720:	2380      	movs	r3, #128	@ 0x80
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	401a      	ands	r2, r3
 8003726:	2380      	movs	r3, #128	@ 0x80
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	429a      	cmp	r2, r3
 800372c:	d101      	bne.n	8003732 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800372e:	2302      	movs	r3, #2
 8003730:	e0d4      	b.n	80038dc <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2240      	movs	r2, #64	@ 0x40
 8003736:	5c9b      	ldrb	r3, [r3, r2]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_I2C_IsDeviceReady+0x4c>
 800373c:	2302      	movs	r3, #2
 800373e:	e0cd      	b.n	80038dc <HAL_I2C_IsDeviceReady+0x1e8>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2240      	movs	r2, #64	@ 0x40
 8003744:	2101      	movs	r1, #1
 8003746:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2241      	movs	r2, #65	@ 0x41
 800374c:	2124      	movs	r1, #36	@ 0x24
 800374e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d107      	bne.n	800376e <HAL_I2C_IsDeviceReady+0x7a>
 800375e:	230a      	movs	r3, #10
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	059b      	lsls	r3, r3, #22
 8003766:	0d9b      	lsrs	r3, r3, #22
 8003768:	4a5e      	ldr	r2, [pc, #376]	@ (80038e4 <HAL_I2C_IsDeviceReady+0x1f0>)
 800376a:	431a      	orrs	r2, r3
 800376c:	e006      	b.n	800377c <HAL_I2C_IsDeviceReady+0x88>
 800376e:	230a      	movs	r3, #10
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	059b      	lsls	r3, r3, #22
 8003776:	0d9b      	lsrs	r3, r3, #22
 8003778:	4a5b      	ldr	r2, [pc, #364]	@ (80038e8 <HAL_I2C_IsDeviceReady+0x1f4>)
 800377a:	431a      	orrs	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003782:	f7fe fd27 	bl	80021d4 <HAL_GetTick>
 8003786:	0003      	movs	r3, r0
 8003788:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2220      	movs	r2, #32
 8003792:	4013      	ands	r3, r2
 8003794:	3b20      	subs	r3, #32
 8003796:	425a      	negs	r2, r3
 8003798:	4153      	adcs	r3, r2
 800379a:	b2da      	uxtb	r2, r3
 800379c:	231f      	movs	r3, #31
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2210      	movs	r2, #16
 80037aa:	4013      	ands	r3, r2
 80037ac:	3b10      	subs	r3, #16
 80037ae:	425a      	negs	r2, r3
 80037b0:	4153      	adcs	r3, r2
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	231e      	movs	r3, #30
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80037ba:	e035      	b.n	8003828 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	3301      	adds	r3, #1
 80037c0:	d01a      	beq.n	80037f8 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037c2:	f7fe fd07 	bl	80021d4 <HAL_GetTick>
 80037c6:	0002      	movs	r2, r0
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <HAL_I2C_IsDeviceReady+0xe4>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10f      	bne.n	80037f8 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2241      	movs	r2, #65	@ 0x41
 80037dc:	2120      	movs	r1, #32
 80037de:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e4:	2220      	movs	r2, #32
 80037e6:	431a      	orrs	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2240      	movs	r2, #64	@ 0x40
 80037f0:	2100      	movs	r1, #0
 80037f2:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e071      	b.n	80038dc <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2220      	movs	r2, #32
 8003800:	4013      	ands	r3, r2
 8003802:	3b20      	subs	r3, #32
 8003804:	425a      	negs	r2, r3
 8003806:	4153      	adcs	r3, r2
 8003808:	b2da      	uxtb	r2, r3
 800380a:	231f      	movs	r3, #31
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2210      	movs	r2, #16
 8003818:	4013      	ands	r3, r2
 800381a:	3b10      	subs	r3, #16
 800381c:	425a      	negs	r2, r3
 800381e:	4153      	adcs	r3, r2
 8003820:	b2da      	uxtb	r2, r3
 8003822:	231e      	movs	r3, #30
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003828:	231f      	movs	r3, #31
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d104      	bne.n	800383c <HAL_I2C_IsDeviceReady+0x148>
 8003832:	231e      	movs	r3, #30
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0bf      	beq.n	80037bc <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2210      	movs	r2, #16
 8003844:	4013      	ands	r3, r2
 8003846:	2b10      	cmp	r3, #16
 8003848:	d01a      	beq.n	8003880 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	0013      	movs	r3, r2
 8003854:	2200      	movs	r2, #0
 8003856:	2120      	movs	r1, #32
 8003858:	f000 f86a 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 800385c:	1e03      	subs	r3, r0, #0
 800385e:	d001      	beq.n	8003864 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e03b      	b.n	80038dc <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2220      	movs	r2, #32
 800386a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2241      	movs	r2, #65	@ 0x41
 8003870:	2120      	movs	r1, #32
 8003872:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2240      	movs	r2, #64	@ 0x40
 8003878:	2100      	movs	r1, #0
 800387a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e02d      	b.n	80038dc <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	0013      	movs	r3, r2
 800388a:	2200      	movs	r2, #0
 800388c:	2120      	movs	r1, #32
 800388e:	f000 f84f 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003892:	1e03      	subs	r3, r0, #0
 8003894:	d001      	beq.n	800389a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e020      	b.n	80038dc <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2210      	movs	r2, #16
 80038a0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2220      	movs	r2, #32
 80038a8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	3301      	adds	r3, #1
 80038ae:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d900      	bls.n	80038ba <HAL_I2C_IsDeviceReady+0x1c6>
 80038b8:	e74d      	b.n	8003756 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2241      	movs	r2, #65	@ 0x41
 80038be:	2120      	movs	r1, #32
 80038c0:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c6:	2220      	movs	r2, #32
 80038c8:	431a      	orrs	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2240      	movs	r2, #64	@ 0x40
 80038d2:	2100      	movs	r1, #0
 80038d4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
  }
}
 80038dc:	0018      	movs	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	b008      	add	sp, #32
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	02002000 	.word	0x02002000
 80038e8:	02002800 	.word	0x02002800

080038ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2202      	movs	r2, #2
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d103      	bne.n	800390a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2200      	movs	r2, #0
 8003908:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2201      	movs	r2, #1
 8003912:	4013      	ands	r3, r2
 8003914:	2b01      	cmp	r3, #1
 8003916:	d007      	beq.n	8003928 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2101      	movs	r1, #1
 8003924:	430a      	orrs	r2, r1
 8003926:	619a      	str	r2, [r3, #24]
  }
}
 8003928:	46c0      	nop			@ (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	1dfb      	adds	r3, r7, #7
 800393e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003940:	e03a      	b.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	6839      	ldr	r1, [r7, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	0018      	movs	r0, r3
 800394a:	f000 f971 	bl	8003c30 <I2C_IsErrorOccurred>
 800394e:	1e03      	subs	r3, r0, #0
 8003950:	d001      	beq.n	8003956 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e040      	b.n	80039d8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	3301      	adds	r3, #1
 800395a:	d02d      	beq.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395c:	f7fe fc3a 	bl	80021d4 <HAL_GetTick>
 8003960:	0002      	movs	r2, r0
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d302      	bcc.n	8003972 <I2C_WaitOnFlagUntilTimeout+0x42>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d122      	bne.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	4013      	ands	r3, r2
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	425a      	negs	r2, r3
 8003982:	4153      	adcs	r3, r2
 8003984:	b2db      	uxtb	r3, r3
 8003986:	001a      	movs	r2, r3
 8003988:	1dfb      	adds	r3, r7, #7
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d113      	bne.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003994:	2220      	movs	r2, #32
 8003996:	431a      	orrs	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2241      	movs	r2, #65	@ 0x41
 80039a0:	2120      	movs	r1, #32
 80039a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2242      	movs	r2, #66	@ 0x42
 80039a8:	2100      	movs	r1, #0
 80039aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2240      	movs	r2, #64	@ 0x40
 80039b0:	2100      	movs	r1, #0
 80039b2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e00f      	b.n	80039d8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	4013      	ands	r3, r2
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	425a      	negs	r2, r3
 80039c8:	4153      	adcs	r3, r2
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	001a      	movs	r2, r3
 80039ce:	1dfb      	adds	r3, r7, #7
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d0b5      	beq.n	8003942 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b004      	add	sp, #16
 80039de:	bd80      	pop	{r7, pc}

080039e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039ec:	e032      	b.n	8003a54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	0018      	movs	r0, r3
 80039f6:	f000 f91b 	bl	8003c30 <I2C_IsErrorOccurred>
 80039fa:	1e03      	subs	r3, r0, #0
 80039fc:	d001      	beq.n	8003a02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e030      	b.n	8003a64 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3301      	adds	r3, #1
 8003a06:	d025      	beq.n	8003a54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a08:	f7fe fbe4 	bl	80021d4 <HAL_GetTick>
 8003a0c:	0002      	movs	r2, r0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d302      	bcc.n	8003a1e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11a      	bne.n	8003a54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2202      	movs	r2, #2
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d013      	beq.n	8003a54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a30:	2220      	movs	r2, #32
 8003a32:	431a      	orrs	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2241      	movs	r2, #65	@ 0x41
 8003a3c:	2120      	movs	r1, #32
 8003a3e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2242      	movs	r2, #66	@ 0x42
 8003a44:	2100      	movs	r1, #0
 8003a46:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2240      	movs	r2, #64	@ 0x40
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e007      	b.n	8003a64 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d1c5      	bne.n	80039ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	0018      	movs	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b004      	add	sp, #16
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a78:	e02f      	b.n	8003ada <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	0018      	movs	r0, r3
 8003a82:	f000 f8d5 	bl	8003c30 <I2C_IsErrorOccurred>
 8003a86:	1e03      	subs	r3, r0, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e02d      	b.n	8003aea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8e:	f7fe fba1 	bl	80021d4 <HAL_GetTick>
 8003a92:	0002      	movs	r2, r0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d11a      	bne.n	8003ada <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d013      	beq.n	8003ada <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2241      	movs	r2, #65	@ 0x41
 8003ac2:	2120      	movs	r1, #32
 8003ac4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2242      	movs	r2, #66	@ 0x42
 8003aca:	2100      	movs	r1, #0
 8003acc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2240      	movs	r2, #64	@ 0x40
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e007      	b.n	8003aea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d1c8      	bne.n	8003a7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	0018      	movs	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b004      	add	sp, #16
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b00:	2317      	movs	r3, #23
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003b08:	e07b      	b.n	8003c02 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	0018      	movs	r0, r3
 8003b12:	f000 f88d 	bl	8003c30 <I2C_IsErrorOccurred>
 8003b16:	1e03      	subs	r3, r0, #0
 8003b18:	d003      	beq.n	8003b22 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003b1a:	2317      	movs	r3, #23
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	2201      	movs	r2, #1
 8003b20:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d140      	bne.n	8003bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003b30:	2117      	movs	r1, #23
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d13b      	bne.n	8003bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2204      	movs	r2, #4
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d106      	bne.n	8003b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003b50:	187b      	adds	r3, r7, r1
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d123      	bne.n	8003bac <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2210      	movs	r2, #16
 8003b6a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2204      	movs	r2, #4
 8003b70:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2220      	movs	r2, #32
 8003b78:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4929      	ldr	r1, [pc, #164]	@ (8003c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003b86:	400a      	ands	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2241      	movs	r2, #65	@ 0x41
 8003b8e:	2120      	movs	r1, #32
 8003b90:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2242      	movs	r2, #66	@ 0x42
 8003b96:	2100      	movs	r1, #0
 8003b98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2240      	movs	r2, #64	@ 0x40
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003ba2:	2317      	movs	r3, #23
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	701a      	strb	r2, [r3, #0]
 8003baa:	e002      	b.n	8003bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003bb2:	f7fe fb0f 	bl	80021d4 <HAL_GetTick>
 8003bb6:	0002      	movs	r2, r0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d302      	bcc.n	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d11c      	bne.n	8003c02 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003bc8:	2017      	movs	r0, #23
 8003bca:	183b      	adds	r3, r7, r0
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d117      	bne.n	8003c02 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2204      	movs	r2, #4
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d010      	beq.n	8003c02 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be4:	2220      	movs	r2, #32
 8003be6:	431a      	orrs	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2241      	movs	r2, #65	@ 0x41
 8003bf0:	2120      	movs	r1, #32
 8003bf2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2240      	movs	r2, #64	@ 0x40
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003bfc:	183b      	adds	r3, r7, r0
 8003bfe:	2201      	movs	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2204      	movs	r2, #4
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d005      	beq.n	8003c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003c10:	2317      	movs	r3, #23
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d100      	bne.n	8003c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003c1a:	e776      	b.n	8003b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003c1c:	2317      	movs	r3, #23
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	781b      	ldrb	r3, [r3, #0]
}
 8003c22:	0018      	movs	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b006      	add	sp, #24
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	fe00e800 	.word	0xfe00e800

08003c30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	@ 0x28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3c:	2327      	movs	r3, #39	@ 0x27
 8003c3e:	18fb      	adds	r3, r7, r3
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2210      	movs	r2, #16
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d100      	bne.n	8003c5e <I2C_IsErrorOccurred+0x2e>
 8003c5c:	e079      	b.n	8003d52 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2210      	movs	r2, #16
 8003c64:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c66:	e057      	b.n	8003d18 <I2C_IsErrorOccurred+0xe8>
 8003c68:	2227      	movs	r2, #39	@ 0x27
 8003c6a:	18bb      	adds	r3, r7, r2
 8003c6c:	18ba      	adds	r2, r7, r2
 8003c6e:	7812      	ldrb	r2, [r2, #0]
 8003c70:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	3301      	adds	r3, #1
 8003c76:	d04f      	beq.n	8003d18 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c78:	f7fe faac 	bl	80021d4 <HAL_GetTick>
 8003c7c:	0002      	movs	r2, r0
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d302      	bcc.n	8003c8e <I2C_IsErrorOccurred+0x5e>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d144      	bne.n	8003d18 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	2380      	movs	r3, #128	@ 0x80
 8003c96:	01db      	lsls	r3, r3, #7
 8003c98:	4013      	ands	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c9c:	2013      	movs	r0, #19
 8003c9e:	183b      	adds	r3, r7, r0
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	2142      	movs	r1, #66	@ 0x42
 8003ca4:	5c52      	ldrb	r2, [r2, r1]
 8003ca6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	2380      	movs	r3, #128	@ 0x80
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	2380      	movs	r3, #128	@ 0x80
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d126      	bne.n	8003d0a <I2C_IsErrorOccurred+0xda>
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	2380      	movs	r3, #128	@ 0x80
 8003cc0:	01db      	lsls	r3, r3, #7
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d021      	beq.n	8003d0a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003cc6:	183b      	adds	r3, r7, r0
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d01d      	beq.n	8003d0a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2180      	movs	r1, #128	@ 0x80
 8003cda:	01c9      	lsls	r1, r1, #7
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ce0:	f7fe fa78 	bl	80021d4 <HAL_GetTick>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ce8:	e00f      	b.n	8003d0a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cea:	f7fe fa73 	bl	80021d4 <HAL_GetTick>
 8003cee:	0002      	movs	r2, r0
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b19      	cmp	r3, #25
 8003cf6:	d908      	bls.n	8003d0a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d00:	2327      	movs	r3, #39	@ 0x27
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]

              break;
 8003d08:	e006      	b.n	8003d18 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	2220      	movs	r2, #32
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d1e8      	bne.n	8003cea <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d004      	beq.n	8003d30 <I2C_IsErrorOccurred+0x100>
 8003d26:	2327      	movs	r3, #39	@ 0x27
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d09b      	beq.n	8003c68 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d30:	2327      	movs	r3, #39	@ 0x27
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	2204      	movs	r2, #4
 8003d46:	4313      	orrs	r3, r2
 8003d48:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d4a:	2327      	movs	r3, #39	@ 0x27
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	2201      	movs	r2, #1
 8003d50:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	2380      	movs	r3, #128	@ 0x80
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	4013      	ands	r3, r2
 8003d62:	d00c      	beq.n	8003d7e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	2201      	movs	r2, #1
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2280      	movs	r2, #128	@ 0x80
 8003d72:	0052      	lsls	r2, r2, #1
 8003d74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d76:	2327      	movs	r3, #39	@ 0x27
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	2380      	movs	r3, #128	@ 0x80
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4013      	ands	r3, r2
 8003d86:	d00c      	beq.n	8003da2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	2208      	movs	r2, #8
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2280      	movs	r2, #128	@ 0x80
 8003d96:	00d2      	lsls	r2, r2, #3
 8003d98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d9a:	2327      	movs	r3, #39	@ 0x27
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	2380      	movs	r3, #128	@ 0x80
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4013      	ands	r3, r2
 8003daa:	d00c      	beq.n	8003dc6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	2202      	movs	r2, #2
 8003db0:	4313      	orrs	r3, r2
 8003db2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2280      	movs	r2, #128	@ 0x80
 8003dba:	0092      	lsls	r2, r2, #2
 8003dbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dbe:	2327      	movs	r3, #39	@ 0x27
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003dc6:	2327      	movs	r3, #39	@ 0x27
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01d      	beq.n	8003e0c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7ff fd8a 	bl	80038ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	490e      	ldr	r1, [pc, #56]	@ (8003e1c <I2C_IsErrorOccurred+0x1ec>)
 8003de4:	400a      	ands	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2241      	movs	r2, #65	@ 0x41
 8003df8:	2120      	movs	r1, #32
 8003dfa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2242      	movs	r2, #66	@ 0x42
 8003e00:	2100      	movs	r1, #0
 8003e02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2240      	movs	r2, #64	@ 0x40
 8003e08:	2100      	movs	r1, #0
 8003e0a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003e0c:	2327      	movs	r3, #39	@ 0x27
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	781b      	ldrb	r3, [r3, #0]
}
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b00a      	add	sp, #40	@ 0x28
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			@ (mov r8, r8)
 8003e1c:	fe00e800 	.word	0xfe00e800

08003e20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	0008      	movs	r0, r1
 8003e2a:	0011      	movs	r1, r2
 8003e2c:	607b      	str	r3, [r7, #4]
 8003e2e:	240a      	movs	r4, #10
 8003e30:	193b      	adds	r3, r7, r4
 8003e32:	1c02      	adds	r2, r0, #0
 8003e34:	801a      	strh	r2, [r3, #0]
 8003e36:	2009      	movs	r0, #9
 8003e38:	183b      	adds	r3, r7, r0
 8003e3a:	1c0a      	adds	r2, r1, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e3e:	193b      	adds	r3, r7, r4
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	059b      	lsls	r3, r3, #22
 8003e44:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e46:	183b      	adds	r3, r7, r0
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	0419      	lsls	r1, r3, #16
 8003e4c:	23ff      	movs	r3, #255	@ 0xff
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e52:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e6a:	0d51      	lsrs	r1, r2, #21
 8003e6c:	2280      	movs	r2, #128	@ 0x80
 8003e6e:	00d2      	lsls	r2, r2, #3
 8003e70:	400a      	ands	r2, r1
 8003e72:	4907      	ldr	r1, [pc, #28]	@ (8003e90 <I2C_TransferConfig+0x70>)
 8003e74:	430a      	orrs	r2, r1
 8003e76:	43d2      	mvns	r2, r2
 8003e78:	401a      	ands	r2, r3
 8003e7a:	0011      	movs	r1, r2
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b007      	add	sp, #28
 8003e8c:	bd90      	pop	{r4, r7, pc}
 8003e8e:	46c0      	nop			@ (mov r8, r8)
 8003e90:	03ff63ff 	.word	0x03ff63ff

08003e94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2241      	movs	r2, #65	@ 0x41
 8003ea2:	5c9b      	ldrb	r3, [r3, r2]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d138      	bne.n	8003f1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2240      	movs	r2, #64	@ 0x40
 8003eae:	5c9b      	ldrb	r3, [r3, r2]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e032      	b.n	8003f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2240      	movs	r2, #64	@ 0x40
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2241      	movs	r2, #65	@ 0x41
 8003ec4:	2124      	movs	r1, #36	@ 0x24
 8003ec6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	438a      	bics	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4911      	ldr	r1, [pc, #68]	@ (8003f28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ee4:	400a      	ands	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6819      	ldr	r1, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2101      	movs	r1, #1
 8003f04:	430a      	orrs	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2241      	movs	r2, #65	@ 0x41
 8003f0c:	2120      	movs	r1, #32
 8003f0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2240      	movs	r2, #64	@ 0x40
 8003f14:	2100      	movs	r1, #0
 8003f16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e000      	b.n	8003f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
  }
}
 8003f1e:	0018      	movs	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b002      	add	sp, #8
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	ffffefff 	.word	0xffffefff

08003f2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2241      	movs	r2, #65	@ 0x41
 8003f3a:	5c9b      	ldrb	r3, [r3, r2]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d139      	bne.n	8003fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2240      	movs	r2, #64	@ 0x40
 8003f46:	5c9b      	ldrb	r3, [r3, r2]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e033      	b.n	8003fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2240      	movs	r2, #64	@ 0x40
 8003f54:	2101      	movs	r1, #1
 8003f56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2241      	movs	r2, #65	@ 0x41
 8003f5c:	2124      	movs	r1, #36	@ 0x24
 8003f5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	438a      	bics	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a11      	ldr	r2, [pc, #68]	@ (8003fc0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2241      	movs	r2, #65	@ 0x41
 8003fa6:	2120      	movs	r1, #32
 8003fa8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2240      	movs	r2, #64	@ 0x40
 8003fae:	2100      	movs	r1, #0
 8003fb0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e000      	b.n	8003fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
  }
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b004      	add	sp, #16
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	fffff0ff 	.word	0xfffff0ff

08003fc4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc8:	4b04      	ldr	r3, [pc, #16]	@ (8003fdc <HAL_PWR_EnableBkUpAccess+0x18>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b03      	ldr	r3, [pc, #12]	@ (8003fdc <HAL_PWR_EnableBkUpAccess+0x18>)
 8003fce:	2180      	movs	r1, #128	@ 0x80
 8003fd0:	0049      	lsls	r1, r1, #1
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]
}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40007000 	.word	0x40007000

08003fe0 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8003fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8004098 <HAL_PWR_ConfigPVD+0xb8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	22e0      	movs	r2, #224	@ 0xe0
 8003fee:	4393      	bics	r3, r2
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b28      	ldr	r3, [pc, #160]	@ (8004098 <HAL_PWR_ConfigPVD+0xb8>)
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003ffc:	4b27      	ldr	r3, [pc, #156]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	4b26      	ldr	r3, [pc, #152]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 8004002:	4927      	ldr	r1, [pc, #156]	@ (80040a0 <HAL_PWR_ConfigPVD+0xc0>)
 8004004:	400a      	ands	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8004008:	4b24      	ldr	r3, [pc, #144]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4b23      	ldr	r3, [pc, #140]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 800400e:	4924      	ldr	r1, [pc, #144]	@ (80040a0 <HAL_PWR_ConfigPVD+0xc0>)
 8004010:	400a      	ands	r2, r1
 8004012:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8004014:	4b21      	ldr	r3, [pc, #132]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	4b20      	ldr	r3, [pc, #128]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 800401a:	4921      	ldr	r1, [pc, #132]	@ (80040a0 <HAL_PWR_ConfigPVD+0xc0>)
 800401c:	400a      	ands	r2, r1
 800401e:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 8004026:	491e      	ldr	r1, [pc, #120]	@ (80040a0 <HAL_PWR_ConfigPVD+0xc0>)
 8004028:	400a      	ands	r2, r1
 800402a:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	2380      	movs	r3, #128	@ 0x80
 8004032:	025b      	lsls	r3, r3, #9
 8004034:	4013      	ands	r3, r2
 8004036:	d006      	beq.n	8004046 <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004038:	4b18      	ldr	r3, [pc, #96]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b17      	ldr	r3, [pc, #92]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 800403e:	2180      	movs	r1, #128	@ 0x80
 8004040:	0249      	lsls	r1, r1, #9
 8004042:	430a      	orrs	r2, r1
 8004044:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	2380      	movs	r3, #128	@ 0x80
 800404c:	029b      	lsls	r3, r3, #10
 800404e:	4013      	ands	r3, r2
 8004050:	d006      	beq.n	8004060 <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8004052:	4b12      	ldr	r3, [pc, #72]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	4b11      	ldr	r3, [pc, #68]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 8004058:	2180      	movs	r1, #128	@ 0x80
 800405a:	0249      	lsls	r1, r1, #9
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	4013      	ands	r3, r2
 8004068:	d006      	beq.n	8004078 <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800406a:	4b0c      	ldr	r3, [pc, #48]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	4b0b      	ldr	r3, [pc, #44]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 8004070:	2180      	movs	r1, #128	@ 0x80
 8004072:	0249      	lsls	r1, r1, #9
 8004074:	430a      	orrs	r2, r1
 8004076:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	4013      	ands	r3, r2
 8004080:	d006      	beq.n	8004090 <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8004082:	4b06      	ldr	r3, [pc, #24]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	4b05      	ldr	r3, [pc, #20]	@ (800409c <HAL_PWR_ConfigPVD+0xbc>)
 8004088:	2180      	movs	r1, #128	@ 0x80
 800408a:	0249      	lsls	r1, r1, #9
 800408c:	430a      	orrs	r2, r1
 800408e:	60da      	str	r2, [r3, #12]
  }
}
 8004090:	46c0      	nop			@ (mov r8, r8)
 8004092:	46bd      	mov	sp, r7
 8004094:	b002      	add	sp, #8
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40007000 	.word	0x40007000
 800409c:	40010400 	.word	0x40010400
 80040a0:	fffeffff 	.word	0xfffeffff

080040a4 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 80040a8:	4b04      	ldr	r3, [pc, #16]	@ (80040bc <HAL_PWR_EnablePVD+0x18>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b03      	ldr	r3, [pc, #12]	@ (80040bc <HAL_PWR_EnablePVD+0x18>)
 80040ae:	2110      	movs	r1, #16
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]
}
 80040b4:	46c0      	nop			@ (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	46c0      	nop			@ (mov r8, r8)
 80040bc:	40007000 	.word	0x40007000

080040c0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	000a      	movs	r2, r1
 80040ca:	1cfb      	adds	r3, r7, #3
 80040cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80040d2:	4b25      	ldr	r3, [pc, #148]	@ (8004168 <HAL_PWR_EnterSTOPMode+0xa8>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	2380      	movs	r3, #128	@ 0x80
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80040de:	4b23      	ldr	r3, [pc, #140]	@ (800416c <HAL_PWR_EnterSTOPMode+0xac>)
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	2201      	movs	r2, #1
 80040e4:	4013      	ands	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_PWR_EnterSTOPMode+0x40>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80040f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004168 <HAL_PWR_EnterSTOPMode+0xa8>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004168 <HAL_PWR_EnterSTOPMode+0xa8>)
 80040fa:	491d      	ldr	r1, [pc, #116]	@ (8004170 <HAL_PWR_EnterSTOPMode+0xb0>)
 80040fc:	400a      	ands	r2, r1
 80040fe:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004100:	4b19      	ldr	r3, [pc, #100]	@ (8004168 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2203      	movs	r2, #3
 800410a:	4393      	bics	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8004116:	4b14      	ldr	r3, [pc, #80]	@ (8004168 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800411c:	4b15      	ldr	r3, [pc, #84]	@ (8004174 <HAL_PWR_EnterSTOPMode+0xb4>)
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	4b14      	ldr	r3, [pc, #80]	@ (8004174 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004122:	2104      	movs	r1, #4
 8004124:	430a      	orrs	r2, r1
 8004126:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004128:	1cfb      	adds	r3, r7, #3
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004130:	bf30      	wfi
 8004132:	e002      	b.n	800413a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004134:	bf40      	sev
    __WFE();
 8004136:	bf20      	wfe
    __WFE();
 8004138:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800413a:	4b0e      	ldr	r3, [pc, #56]	@ (8004174 <HAL_PWR_EnterSTOPMode+0xb4>)
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004140:	2104      	movs	r1, #4
 8004142:	438a      	bics	r2, r1
 8004144:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d009      	beq.n	8004160 <HAL_PWR_EnterSTOPMode+0xa0>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d006      	beq.n	8004160 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8004152:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4b04      	ldr	r3, [pc, #16]	@ (8004168 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004158:	2180      	movs	r1, #128	@ 0x80
 800415a:	0089      	lsls	r1, r1, #2
 800415c:	430a      	orrs	r2, r1
 800415e:	601a      	str	r2, [r3, #0]
  }
}
 8004160:	46c0      	nop			@ (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	b006      	add	sp, #24
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40007000 	.word	0x40007000
 800416c:	40010000 	.word	0x40010000
 8004170:	fffffdff 	.word	0xfffffdff
 8004174:	e000ed00 	.word	0xe000ed00

08004178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004178:	b5b0      	push	{r4, r5, r7, lr}
 800417a:	b08a      	sub	sp, #40	@ 0x28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	f000 fbbf 	bl	800490a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800418c:	4bc9      	ldr	r3, [pc, #804]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	220c      	movs	r2, #12
 8004192:	4013      	ands	r3, r2
 8004194:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004196:	4bc7      	ldr	r3, [pc, #796]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	2380      	movs	r3, #128	@ 0x80
 800419c:	025b      	lsls	r3, r3, #9
 800419e:	4013      	ands	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2201      	movs	r2, #1
 80041a8:	4013      	ands	r3, r2
 80041aa:	d100      	bne.n	80041ae <HAL_RCC_OscConfig+0x36>
 80041ac:	e07e      	b.n	80042ac <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d007      	beq.n	80041c4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b0c      	cmp	r3, #12
 80041b8:	d112      	bne.n	80041e0 <HAL_RCC_OscConfig+0x68>
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	2380      	movs	r3, #128	@ 0x80
 80041be:	025b      	lsls	r3, r3, #9
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d10d      	bne.n	80041e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c4:	4bbb      	ldr	r3, [pc, #748]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	2380      	movs	r3, #128	@ 0x80
 80041ca:	029b      	lsls	r3, r3, #10
 80041cc:	4013      	ands	r3, r2
 80041ce:	d100      	bne.n	80041d2 <HAL_RCC_OscConfig+0x5a>
 80041d0:	e06b      	b.n	80042aa <HAL_RCC_OscConfig+0x132>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d167      	bne.n	80042aa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f000 fb95 	bl	800490a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	025b      	lsls	r3, r3, #9
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d107      	bne.n	80041fc <HAL_RCC_OscConfig+0x84>
 80041ec:	4bb1      	ldr	r3, [pc, #708]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	4bb0      	ldr	r3, [pc, #704]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 80041f2:	2180      	movs	r1, #128	@ 0x80
 80041f4:	0249      	lsls	r1, r1, #9
 80041f6:	430a      	orrs	r2, r1
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e027      	b.n	800424c <HAL_RCC_OscConfig+0xd4>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	23a0      	movs	r3, #160	@ 0xa0
 8004202:	02db      	lsls	r3, r3, #11
 8004204:	429a      	cmp	r2, r3
 8004206:	d10e      	bne.n	8004226 <HAL_RCC_OscConfig+0xae>
 8004208:	4baa      	ldr	r3, [pc, #680]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4ba9      	ldr	r3, [pc, #676]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 800420e:	2180      	movs	r1, #128	@ 0x80
 8004210:	02c9      	lsls	r1, r1, #11
 8004212:	430a      	orrs	r2, r1
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	4ba7      	ldr	r3, [pc, #668]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4ba6      	ldr	r3, [pc, #664]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 800421c:	2180      	movs	r1, #128	@ 0x80
 800421e:	0249      	lsls	r1, r1, #9
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e012      	b.n	800424c <HAL_RCC_OscConfig+0xd4>
 8004226:	4ba3      	ldr	r3, [pc, #652]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4ba2      	ldr	r3, [pc, #648]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 800422c:	49a2      	ldr	r1, [pc, #648]	@ (80044b8 <HAL_RCC_OscConfig+0x340>)
 800422e:	400a      	ands	r2, r1
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	4ba0      	ldr	r3, [pc, #640]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	2380      	movs	r3, #128	@ 0x80
 8004238:	025b      	lsls	r3, r3, #9
 800423a:	4013      	ands	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4b9c      	ldr	r3, [pc, #624]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b9b      	ldr	r3, [pc, #620]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004246:	499d      	ldr	r1, [pc, #628]	@ (80044bc <HAL_RCC_OscConfig+0x344>)
 8004248:	400a      	ands	r2, r1
 800424a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d015      	beq.n	8004280 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fd ffbe 	bl	80021d4 <HAL_GetTick>
 8004258:	0003      	movs	r3, r0
 800425a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800425c:	e009      	b.n	8004272 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800425e:	f7fd ffb9 	bl	80021d4 <HAL_GetTick>
 8004262:	0002      	movs	r2, r0
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b64      	cmp	r3, #100	@ 0x64
 800426a:	d902      	bls.n	8004272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	f000 fb4c 	bl	800490a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004272:	4b90      	ldr	r3, [pc, #576]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	2380      	movs	r3, #128	@ 0x80
 8004278:	029b      	lsls	r3, r3, #10
 800427a:	4013      	ands	r3, r2
 800427c:	d0ef      	beq.n	800425e <HAL_RCC_OscConfig+0xe6>
 800427e:	e015      	b.n	80042ac <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fd ffa8 	bl	80021d4 <HAL_GetTick>
 8004284:	0003      	movs	r3, r0
 8004286:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800428a:	f7fd ffa3 	bl	80021d4 <HAL_GetTick>
 800428e:	0002      	movs	r2, r0
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b64      	cmp	r3, #100	@ 0x64
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e336      	b.n	800490a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800429c:	4b85      	ldr	r3, [pc, #532]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	2380      	movs	r3, #128	@ 0x80
 80042a2:	029b      	lsls	r3, r3, #10
 80042a4:	4013      	ands	r3, r2
 80042a6:	d1f0      	bne.n	800428a <HAL_RCC_OscConfig+0x112>
 80042a8:	e000      	b.n	80042ac <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042aa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2202      	movs	r2, #2
 80042b2:	4013      	ands	r3, r2
 80042b4:	d100      	bne.n	80042b8 <HAL_RCC_OscConfig+0x140>
 80042b6:	e099      	b.n	80043ec <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	2220      	movs	r2, #32
 80042c2:	4013      	ands	r3, r2
 80042c4:	d009      	beq.n	80042da <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80042c6:	4b7b      	ldr	r3, [pc, #492]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4b7a      	ldr	r3, [pc, #488]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 80042cc:	2120      	movs	r1, #32
 80042ce:	430a      	orrs	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	2220      	movs	r2, #32
 80042d6:	4393      	bics	r3, r2
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d005      	beq.n	80042ec <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b0c      	cmp	r3, #12
 80042e4:	d13e      	bne.n	8004364 <HAL_RCC_OscConfig+0x1ec>
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d13b      	bne.n	8004364 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80042ec:	4b71      	ldr	r3, [pc, #452]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2204      	movs	r2, #4
 80042f2:	4013      	ands	r3, r2
 80042f4:	d004      	beq.n	8004300 <HAL_RCC_OscConfig+0x188>
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e304      	b.n	800490a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004300:	4b6c      	ldr	r3, [pc, #432]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	4a6e      	ldr	r2, [pc, #440]	@ (80044c0 <HAL_RCC_OscConfig+0x348>)
 8004306:	4013      	ands	r3, r2
 8004308:	0019      	movs	r1, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	021a      	lsls	r2, r3, #8
 8004310:	4b68      	ldr	r3, [pc, #416]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004316:	4b67      	ldr	r3, [pc, #412]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2209      	movs	r2, #9
 800431c:	4393      	bics	r3, r2
 800431e:	0019      	movs	r1, r3
 8004320:	4b64      	ldr	r3, [pc, #400]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004324:	430a      	orrs	r2, r1
 8004326:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004328:	f000 fc42 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 800432c:	0001      	movs	r1, r0
 800432e:	4b61      	ldr	r3, [pc, #388]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	220f      	movs	r2, #15
 8004336:	4013      	ands	r3, r2
 8004338:	4a62      	ldr	r2, [pc, #392]	@ (80044c4 <HAL_RCC_OscConfig+0x34c>)
 800433a:	5cd3      	ldrb	r3, [r2, r3]
 800433c:	000a      	movs	r2, r1
 800433e:	40da      	lsrs	r2, r3
 8004340:	4b61      	ldr	r3, [pc, #388]	@ (80044c8 <HAL_RCC_OscConfig+0x350>)
 8004342:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004344:	4b61      	ldr	r3, [pc, #388]	@ (80044cc <HAL_RCC_OscConfig+0x354>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2513      	movs	r5, #19
 800434a:	197c      	adds	r4, r7, r5
 800434c:	0018      	movs	r0, r3
 800434e:	f7fd fefb 	bl	8002148 <HAL_InitTick>
 8004352:	0003      	movs	r3, r0
 8004354:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004356:	197b      	adds	r3, r7, r5
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d046      	beq.n	80043ec <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800435e:	197b      	adds	r3, r7, r5
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	e2d2      	b.n	800490a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004366:	2b00      	cmp	r3, #0
 8004368:	d027      	beq.n	80043ba <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800436a:	4b52      	ldr	r3, [pc, #328]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2209      	movs	r2, #9
 8004370:	4393      	bics	r3, r2
 8004372:	0019      	movs	r1, r3
 8004374:	4b4f      	ldr	r3, [pc, #316]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004378:	430a      	orrs	r2, r1
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fd ff2a 	bl	80021d4 <HAL_GetTick>
 8004380:	0003      	movs	r3, r0
 8004382:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004386:	f7fd ff25 	bl	80021d4 <HAL_GetTick>
 800438a:	0002      	movs	r2, r0
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e2b8      	b.n	800490a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004398:	4b46      	ldr	r3, [pc, #280]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2204      	movs	r2, #4
 800439e:	4013      	ands	r3, r2
 80043a0:	d0f1      	beq.n	8004386 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b44      	ldr	r3, [pc, #272]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4a46      	ldr	r2, [pc, #280]	@ (80044c0 <HAL_RCC_OscConfig+0x348>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	0019      	movs	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	021a      	lsls	r2, r3, #8
 80043b2:	4b40      	ldr	r3, [pc, #256]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 80043b4:	430a      	orrs	r2, r1
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	e018      	b.n	80043ec <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ba:	4b3e      	ldr	r3, [pc, #248]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b3d      	ldr	r3, [pc, #244]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 80043c0:	2101      	movs	r1, #1
 80043c2:	438a      	bics	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fd ff05 	bl	80021d4 <HAL_GetTick>
 80043ca:	0003      	movs	r3, r0
 80043cc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043d0:	f7fd ff00 	bl	80021d4 <HAL_GetTick>
 80043d4:	0002      	movs	r2, r0
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e293      	b.n	800490a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043e2:	4b34      	ldr	r3, [pc, #208]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2204      	movs	r2, #4
 80043e8:	4013      	ands	r3, r2
 80043ea:	d1f1      	bne.n	80043d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2210      	movs	r2, #16
 80043f2:	4013      	ands	r3, r2
 80043f4:	d100      	bne.n	80043f8 <HAL_RCC_OscConfig+0x280>
 80043f6:	e0a2      	b.n	800453e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d140      	bne.n	8004480 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043fe:	4b2d      	ldr	r3, [pc, #180]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	2380      	movs	r3, #128	@ 0x80
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4013      	ands	r3, r2
 8004408:	d005      	beq.n	8004416 <HAL_RCC_OscConfig+0x29e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e279      	b.n	800490a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004416:	4b27      	ldr	r3, [pc, #156]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4a2d      	ldr	r2, [pc, #180]	@ (80044d0 <HAL_RCC_OscConfig+0x358>)
 800441c:	4013      	ands	r3, r2
 800441e:	0019      	movs	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004424:	4b23      	ldr	r3, [pc, #140]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800442a:	4b22      	ldr	r3, [pc, #136]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	0a19      	lsrs	r1, r3, #8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	061a      	lsls	r2, r3, #24
 8004438:	4b1e      	ldr	r3, [pc, #120]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	0b5b      	lsrs	r3, r3, #13
 8004444:	3301      	adds	r3, #1
 8004446:	2280      	movs	r2, #128	@ 0x80
 8004448:	0212      	lsls	r2, r2, #8
 800444a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800444c:	4b19      	ldr	r3, [pc, #100]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	210f      	movs	r1, #15
 8004454:	400b      	ands	r3, r1
 8004456:	491b      	ldr	r1, [pc, #108]	@ (80044c4 <HAL_RCC_OscConfig+0x34c>)
 8004458:	5ccb      	ldrb	r3, [r1, r3]
 800445a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800445c:	4b1a      	ldr	r3, [pc, #104]	@ (80044c8 <HAL_RCC_OscConfig+0x350>)
 800445e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004460:	4b1a      	ldr	r3, [pc, #104]	@ (80044cc <HAL_RCC_OscConfig+0x354>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2513      	movs	r5, #19
 8004466:	197c      	adds	r4, r7, r5
 8004468:	0018      	movs	r0, r3
 800446a:	f7fd fe6d 	bl	8002148 <HAL_InitTick>
 800446e:	0003      	movs	r3, r0
 8004470:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004472:	197b      	adds	r3, r7, r5
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d061      	beq.n	800453e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800447a:	197b      	adds	r3, r7, r5
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	e244      	b.n	800490a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d040      	beq.n	800450a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004488:	4b0a      	ldr	r3, [pc, #40]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <HAL_RCC_OscConfig+0x33c>)
 800448e:	2180      	movs	r1, #128	@ 0x80
 8004490:	0049      	lsls	r1, r1, #1
 8004492:	430a      	orrs	r2, r1
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004496:	f7fd fe9d 	bl	80021d4 <HAL_GetTick>
 800449a:	0003      	movs	r3, r0
 800449c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800449e:	e019      	b.n	80044d4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044a0:	f7fd fe98 	bl	80021d4 <HAL_GetTick>
 80044a4:	0002      	movs	r2, r0
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d912      	bls.n	80044d4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e22b      	b.n	800490a <HAL_RCC_OscConfig+0x792>
 80044b2:	46c0      	nop			@ (mov r8, r8)
 80044b4:	40021000 	.word	0x40021000
 80044b8:	fffeffff 	.word	0xfffeffff
 80044bc:	fffbffff 	.word	0xfffbffff
 80044c0:	ffffe0ff 	.word	0xffffe0ff
 80044c4:	08006fc4 	.word	0x08006fc4
 80044c8:	20000004 	.word	0x20000004
 80044cc:	20000008 	.word	0x20000008
 80044d0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044d4:	4bca      	ldr	r3, [pc, #808]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	2380      	movs	r3, #128	@ 0x80
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4013      	ands	r3, r2
 80044de:	d0df      	beq.n	80044a0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044e0:	4bc7      	ldr	r3, [pc, #796]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	4ac7      	ldr	r2, [pc, #796]	@ (8004804 <HAL_RCC_OscConfig+0x68c>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	0019      	movs	r1, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044ee:	4bc4      	ldr	r3, [pc, #784]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 80044f0:	430a      	orrs	r2, r1
 80044f2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044f4:	4bc2      	ldr	r3, [pc, #776]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	0a19      	lsrs	r1, r3, #8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	061a      	lsls	r2, r3, #24
 8004502:	4bbf      	ldr	r3, [pc, #764]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]
 8004508:	e019      	b.n	800453e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800450a:	4bbd      	ldr	r3, [pc, #756]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4bbc      	ldr	r3, [pc, #752]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004510:	49bd      	ldr	r1, [pc, #756]	@ (8004808 <HAL_RCC_OscConfig+0x690>)
 8004512:	400a      	ands	r2, r1
 8004514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004516:	f7fd fe5d 	bl	80021d4 <HAL_GetTick>
 800451a:	0003      	movs	r3, r0
 800451c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004520:	f7fd fe58 	bl	80021d4 <HAL_GetTick>
 8004524:	0002      	movs	r2, r0
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e1eb      	b.n	800490a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004532:	4bb3      	ldr	r3, [pc, #716]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	2380      	movs	r3, #128	@ 0x80
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4013      	ands	r3, r2
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2208      	movs	r2, #8
 8004544:	4013      	ands	r3, r2
 8004546:	d036      	beq.n	80045b6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d019      	beq.n	8004584 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004550:	4bab      	ldr	r3, [pc, #684]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004554:	4baa      	ldr	r3, [pc, #680]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004556:	2101      	movs	r1, #1
 8004558:	430a      	orrs	r2, r1
 800455a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455c:	f7fd fe3a 	bl	80021d4 <HAL_GetTick>
 8004560:	0003      	movs	r3, r0
 8004562:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004566:	f7fd fe35 	bl	80021d4 <HAL_GetTick>
 800456a:	0002      	movs	r2, r0
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e1c8      	b.n	800490a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004578:	4ba1      	ldr	r3, [pc, #644]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 800457a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800457c:	2202      	movs	r2, #2
 800457e:	4013      	ands	r3, r2
 8004580:	d0f1      	beq.n	8004566 <HAL_RCC_OscConfig+0x3ee>
 8004582:	e018      	b.n	80045b6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004584:	4b9e      	ldr	r3, [pc, #632]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004586:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004588:	4b9d      	ldr	r3, [pc, #628]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 800458a:	2101      	movs	r1, #1
 800458c:	438a      	bics	r2, r1
 800458e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004590:	f7fd fe20 	bl	80021d4 <HAL_GetTick>
 8004594:	0003      	movs	r3, r0
 8004596:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800459a:	f7fd fe1b 	bl	80021d4 <HAL_GetTick>
 800459e:	0002      	movs	r2, r0
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e1ae      	b.n	800490a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045ac:	4b94      	ldr	r3, [pc, #592]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 80045ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b0:	2202      	movs	r2, #2
 80045b2:	4013      	ands	r3, r2
 80045b4:	d1f1      	bne.n	800459a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2204      	movs	r2, #4
 80045bc:	4013      	ands	r3, r2
 80045be:	d100      	bne.n	80045c2 <HAL_RCC_OscConfig+0x44a>
 80045c0:	e0ae      	b.n	8004720 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c2:	2023      	movs	r0, #35	@ 0x23
 80045c4:	183b      	adds	r3, r7, r0
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 80045cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ce:	2380      	movs	r3, #128	@ 0x80
 80045d0:	055b      	lsls	r3, r3, #21
 80045d2:	4013      	ands	r3, r2
 80045d4:	d109      	bne.n	80045ea <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d6:	4b8a      	ldr	r3, [pc, #552]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 80045d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045da:	4b89      	ldr	r3, [pc, #548]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 80045dc:	2180      	movs	r1, #128	@ 0x80
 80045de:	0549      	lsls	r1, r1, #21
 80045e0:	430a      	orrs	r2, r1
 80045e2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80045e4:	183b      	adds	r3, r7, r0
 80045e6:	2201      	movs	r2, #1
 80045e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ea:	4b88      	ldr	r3, [pc, #544]	@ (800480c <HAL_RCC_OscConfig+0x694>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	2380      	movs	r3, #128	@ 0x80
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	4013      	ands	r3, r2
 80045f4:	d11a      	bne.n	800462c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045f6:	4b85      	ldr	r3, [pc, #532]	@ (800480c <HAL_RCC_OscConfig+0x694>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b84      	ldr	r3, [pc, #528]	@ (800480c <HAL_RCC_OscConfig+0x694>)
 80045fc:	2180      	movs	r1, #128	@ 0x80
 80045fe:	0049      	lsls	r1, r1, #1
 8004600:	430a      	orrs	r2, r1
 8004602:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004604:	f7fd fde6 	bl	80021d4 <HAL_GetTick>
 8004608:	0003      	movs	r3, r0
 800460a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460e:	f7fd fde1 	bl	80021d4 <HAL_GetTick>
 8004612:	0002      	movs	r2, r0
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b64      	cmp	r3, #100	@ 0x64
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e174      	b.n	800490a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004620:	4b7a      	ldr	r3, [pc, #488]	@ (800480c <HAL_RCC_OscConfig+0x694>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	2380      	movs	r3, #128	@ 0x80
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	4013      	ands	r3, r2
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	2380      	movs	r3, #128	@ 0x80
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	429a      	cmp	r2, r3
 8004636:	d107      	bne.n	8004648 <HAL_RCC_OscConfig+0x4d0>
 8004638:	4b71      	ldr	r3, [pc, #452]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 800463a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800463c:	4b70      	ldr	r3, [pc, #448]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 800463e:	2180      	movs	r1, #128	@ 0x80
 8004640:	0049      	lsls	r1, r1, #1
 8004642:	430a      	orrs	r2, r1
 8004644:	651a      	str	r2, [r3, #80]	@ 0x50
 8004646:	e031      	b.n	80046ac <HAL_RCC_OscConfig+0x534>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10c      	bne.n	800466a <HAL_RCC_OscConfig+0x4f2>
 8004650:	4b6b      	ldr	r3, [pc, #428]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004652:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004654:	4b6a      	ldr	r3, [pc, #424]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004656:	496c      	ldr	r1, [pc, #432]	@ (8004808 <HAL_RCC_OscConfig+0x690>)
 8004658:	400a      	ands	r2, r1
 800465a:	651a      	str	r2, [r3, #80]	@ 0x50
 800465c:	4b68      	ldr	r3, [pc, #416]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 800465e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004660:	4b67      	ldr	r3, [pc, #412]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004662:	496b      	ldr	r1, [pc, #428]	@ (8004810 <HAL_RCC_OscConfig+0x698>)
 8004664:	400a      	ands	r2, r1
 8004666:	651a      	str	r2, [r3, #80]	@ 0x50
 8004668:	e020      	b.n	80046ac <HAL_RCC_OscConfig+0x534>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	23a0      	movs	r3, #160	@ 0xa0
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	429a      	cmp	r2, r3
 8004674:	d10e      	bne.n	8004694 <HAL_RCC_OscConfig+0x51c>
 8004676:	4b62      	ldr	r3, [pc, #392]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004678:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800467a:	4b61      	ldr	r3, [pc, #388]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 800467c:	2180      	movs	r1, #128	@ 0x80
 800467e:	00c9      	lsls	r1, r1, #3
 8004680:	430a      	orrs	r2, r1
 8004682:	651a      	str	r2, [r3, #80]	@ 0x50
 8004684:	4b5e      	ldr	r3, [pc, #376]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004686:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004688:	4b5d      	ldr	r3, [pc, #372]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 800468a:	2180      	movs	r1, #128	@ 0x80
 800468c:	0049      	lsls	r1, r1, #1
 800468e:	430a      	orrs	r2, r1
 8004690:	651a      	str	r2, [r3, #80]	@ 0x50
 8004692:	e00b      	b.n	80046ac <HAL_RCC_OscConfig+0x534>
 8004694:	4b5a      	ldr	r3, [pc, #360]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004696:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004698:	4b59      	ldr	r3, [pc, #356]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 800469a:	495b      	ldr	r1, [pc, #364]	@ (8004808 <HAL_RCC_OscConfig+0x690>)
 800469c:	400a      	ands	r2, r1
 800469e:	651a      	str	r2, [r3, #80]	@ 0x50
 80046a0:	4b57      	ldr	r3, [pc, #348]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 80046a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046a4:	4b56      	ldr	r3, [pc, #344]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 80046a6:	495a      	ldr	r1, [pc, #360]	@ (8004810 <HAL_RCC_OscConfig+0x698>)
 80046a8:	400a      	ands	r2, r1
 80046aa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d015      	beq.n	80046e0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b4:	f7fd fd8e 	bl	80021d4 <HAL_GetTick>
 80046b8:	0003      	movs	r3, r0
 80046ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046bc:	e009      	b.n	80046d2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7fd fd89 	bl	80021d4 <HAL_GetTick>
 80046c2:	0002      	movs	r2, r0
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	4a52      	ldr	r2, [pc, #328]	@ (8004814 <HAL_RCC_OscConfig+0x69c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e11b      	b.n	800490a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 80046d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046d6:	2380      	movs	r3, #128	@ 0x80
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4013      	ands	r3, r2
 80046dc:	d0ef      	beq.n	80046be <HAL_RCC_OscConfig+0x546>
 80046de:	e014      	b.n	800470a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e0:	f7fd fd78 	bl	80021d4 <HAL_GetTick>
 80046e4:	0003      	movs	r3, r0
 80046e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046e8:	e009      	b.n	80046fe <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fd fd73 	bl	80021d4 <HAL_GetTick>
 80046ee:	0002      	movs	r2, r0
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	4a47      	ldr	r2, [pc, #284]	@ (8004814 <HAL_RCC_OscConfig+0x69c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e105      	b.n	800490a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046fe:	4b40      	ldr	r3, [pc, #256]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004700:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004702:	2380      	movs	r3, #128	@ 0x80
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4013      	ands	r3, r2
 8004708:	d1ef      	bne.n	80046ea <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800470a:	2323      	movs	r3, #35	@ 0x23
 800470c:	18fb      	adds	r3, r7, r3
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d105      	bne.n	8004720 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004714:	4b3a      	ldr	r3, [pc, #232]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004716:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004718:	4b39      	ldr	r3, [pc, #228]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 800471a:	493f      	ldr	r1, [pc, #252]	@ (8004818 <HAL_RCC_OscConfig+0x6a0>)
 800471c:	400a      	ands	r2, r1
 800471e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2220      	movs	r2, #32
 8004726:	4013      	ands	r3, r2
 8004728:	d049      	beq.n	80047be <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d026      	beq.n	8004780 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004732:	4b33      	ldr	r3, [pc, #204]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	4b32      	ldr	r3, [pc, #200]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004738:	2101      	movs	r1, #1
 800473a:	430a      	orrs	r2, r1
 800473c:	609a      	str	r2, [r3, #8]
 800473e:	4b30      	ldr	r3, [pc, #192]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004742:	4b2f      	ldr	r3, [pc, #188]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004744:	2101      	movs	r1, #1
 8004746:	430a      	orrs	r2, r1
 8004748:	635a      	str	r2, [r3, #52]	@ 0x34
 800474a:	4b34      	ldr	r3, [pc, #208]	@ (800481c <HAL_RCC_OscConfig+0x6a4>)
 800474c:	6a1a      	ldr	r2, [r3, #32]
 800474e:	4b33      	ldr	r3, [pc, #204]	@ (800481c <HAL_RCC_OscConfig+0x6a4>)
 8004750:	2180      	movs	r1, #128	@ 0x80
 8004752:	0189      	lsls	r1, r1, #6
 8004754:	430a      	orrs	r2, r1
 8004756:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004758:	f7fd fd3c 	bl	80021d4 <HAL_GetTick>
 800475c:	0003      	movs	r3, r0
 800475e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004762:	f7fd fd37 	bl	80021d4 <HAL_GetTick>
 8004766:	0002      	movs	r2, r0
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e0ca      	b.n	800490a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004774:	4b22      	ldr	r3, [pc, #136]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2202      	movs	r2, #2
 800477a:	4013      	ands	r3, r2
 800477c:	d0f1      	beq.n	8004762 <HAL_RCC_OscConfig+0x5ea>
 800477e:	e01e      	b.n	80047be <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004780:	4b1f      	ldr	r3, [pc, #124]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	4b1e      	ldr	r3, [pc, #120]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 8004786:	2101      	movs	r1, #1
 8004788:	438a      	bics	r2, r1
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	4b23      	ldr	r3, [pc, #140]	@ (800481c <HAL_RCC_OscConfig+0x6a4>)
 800478e:	6a1a      	ldr	r2, [r3, #32]
 8004790:	4b22      	ldr	r3, [pc, #136]	@ (800481c <HAL_RCC_OscConfig+0x6a4>)
 8004792:	4923      	ldr	r1, [pc, #140]	@ (8004820 <HAL_RCC_OscConfig+0x6a8>)
 8004794:	400a      	ands	r2, r1
 8004796:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fd fd1c 	bl	80021d4 <HAL_GetTick>
 800479c:	0003      	movs	r3, r0
 800479e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047a2:	f7fd fd17 	bl	80021d4 <HAL_GetTick>
 80047a6:	0002      	movs	r2, r0
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e0aa      	b.n	800490a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047b4:	4b12      	ldr	r3, [pc, #72]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2202      	movs	r2, #2
 80047ba:	4013      	ands	r3, r2
 80047bc:	d1f1      	bne.n	80047a2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d100      	bne.n	80047c8 <HAL_RCC_OscConfig+0x650>
 80047c6:	e09f      	b.n	8004908 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	d100      	bne.n	80047d0 <HAL_RCC_OscConfig+0x658>
 80047ce:	e078      	b.n	80048c2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d159      	bne.n	800488c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d8:	4b09      	ldr	r3, [pc, #36]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b08      	ldr	r3, [pc, #32]	@ (8004800 <HAL_RCC_OscConfig+0x688>)
 80047de:	4911      	ldr	r1, [pc, #68]	@ (8004824 <HAL_RCC_OscConfig+0x6ac>)
 80047e0:	400a      	ands	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fd fcf6 	bl	80021d4 <HAL_GetTick>
 80047e8:	0003      	movs	r3, r0
 80047ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80047ec:	e01c      	b.n	8004828 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ee:	f7fd fcf1 	bl	80021d4 <HAL_GetTick>
 80047f2:	0002      	movs	r2, r0
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d915      	bls.n	8004828 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e084      	b.n	800490a <HAL_RCC_OscConfig+0x792>
 8004800:	40021000 	.word	0x40021000
 8004804:	ffff1fff 	.word	0xffff1fff
 8004808:	fffffeff 	.word	0xfffffeff
 800480c:	40007000 	.word	0x40007000
 8004810:	fffffbff 	.word	0xfffffbff
 8004814:	00001388 	.word	0x00001388
 8004818:	efffffff 	.word	0xefffffff
 800481c:	40010000 	.word	0x40010000
 8004820:	ffffdfff 	.word	0xffffdfff
 8004824:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004828:	4b3a      	ldr	r3, [pc, #232]	@ (8004914 <HAL_RCC_OscConfig+0x79c>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	2380      	movs	r3, #128	@ 0x80
 800482e:	049b      	lsls	r3, r3, #18
 8004830:	4013      	ands	r3, r2
 8004832:	d1dc      	bne.n	80047ee <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004834:	4b37      	ldr	r3, [pc, #220]	@ (8004914 <HAL_RCC_OscConfig+0x79c>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4a37      	ldr	r2, [pc, #220]	@ (8004918 <HAL_RCC_OscConfig+0x7a0>)
 800483a:	4013      	ands	r3, r2
 800483c:	0019      	movs	r1, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484c:	431a      	orrs	r2, r3
 800484e:	4b31      	ldr	r3, [pc, #196]	@ (8004914 <HAL_RCC_OscConfig+0x79c>)
 8004850:	430a      	orrs	r2, r1
 8004852:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004854:	4b2f      	ldr	r3, [pc, #188]	@ (8004914 <HAL_RCC_OscConfig+0x79c>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b2e      	ldr	r3, [pc, #184]	@ (8004914 <HAL_RCC_OscConfig+0x79c>)
 800485a:	2180      	movs	r1, #128	@ 0x80
 800485c:	0449      	lsls	r1, r1, #17
 800485e:	430a      	orrs	r2, r1
 8004860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004862:	f7fd fcb7 	bl	80021d4 <HAL_GetTick>
 8004866:	0003      	movs	r3, r0
 8004868:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800486c:	f7fd fcb2 	bl	80021d4 <HAL_GetTick>
 8004870:	0002      	movs	r2, r0
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e045      	b.n	800490a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800487e:	4b25      	ldr	r3, [pc, #148]	@ (8004914 <HAL_RCC_OscConfig+0x79c>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	2380      	movs	r3, #128	@ 0x80
 8004884:	049b      	lsls	r3, r3, #18
 8004886:	4013      	ands	r3, r2
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x6f4>
 800488a:	e03d      	b.n	8004908 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488c:	4b21      	ldr	r3, [pc, #132]	@ (8004914 <HAL_RCC_OscConfig+0x79c>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b20      	ldr	r3, [pc, #128]	@ (8004914 <HAL_RCC_OscConfig+0x79c>)
 8004892:	4922      	ldr	r1, [pc, #136]	@ (800491c <HAL_RCC_OscConfig+0x7a4>)
 8004894:	400a      	ands	r2, r1
 8004896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004898:	f7fd fc9c 	bl	80021d4 <HAL_GetTick>
 800489c:	0003      	movs	r3, r0
 800489e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a2:	f7fd fc97 	bl	80021d4 <HAL_GetTick>
 80048a6:	0002      	movs	r2, r0
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e02a      	b.n	800490a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80048b4:	4b17      	ldr	r3, [pc, #92]	@ (8004914 <HAL_RCC_OscConfig+0x79c>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	2380      	movs	r3, #128	@ 0x80
 80048ba:	049b      	lsls	r3, r3, #18
 80048bc:	4013      	ands	r3, r2
 80048be:	d1f0      	bne.n	80048a2 <HAL_RCC_OscConfig+0x72a>
 80048c0:	e022      	b.n	8004908 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d101      	bne.n	80048ce <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e01d      	b.n	800490a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048ce:	4b11      	ldr	r3, [pc, #68]	@ (8004914 <HAL_RCC_OscConfig+0x79c>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	2380      	movs	r3, #128	@ 0x80
 80048d8:	025b      	lsls	r3, r3, #9
 80048da:	401a      	ands	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d10f      	bne.n	8004904 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	23f0      	movs	r3, #240	@ 0xf0
 80048e8:	039b      	lsls	r3, r3, #14
 80048ea:	401a      	ands	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d107      	bne.n	8004904 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	23c0      	movs	r3, #192	@ 0xc0
 80048f8:	041b      	lsls	r3, r3, #16
 80048fa:	401a      	ands	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004900:	429a      	cmp	r2, r3
 8004902:	d001      	beq.n	8004908 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	0018      	movs	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	b00a      	add	sp, #40	@ 0x28
 8004910:	bdb0      	pop	{r4, r5, r7, pc}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	40021000 	.word	0x40021000
 8004918:	ff02ffff 	.word	0xff02ffff
 800491c:	feffffff 	.word	0xfeffffff

08004920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004920:	b5b0      	push	{r4, r5, r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e128      	b.n	8004b86 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004934:	4b96      	ldr	r3, [pc, #600]	@ (8004b90 <HAL_RCC_ClockConfig+0x270>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2201      	movs	r2, #1
 800493a:	4013      	ands	r3, r2
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d91e      	bls.n	8004980 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004942:	4b93      	ldr	r3, [pc, #588]	@ (8004b90 <HAL_RCC_ClockConfig+0x270>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2201      	movs	r2, #1
 8004948:	4393      	bics	r3, r2
 800494a:	0019      	movs	r1, r3
 800494c:	4b90      	ldr	r3, [pc, #576]	@ (8004b90 <HAL_RCC_ClockConfig+0x270>)
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004954:	f7fd fc3e 	bl	80021d4 <HAL_GetTick>
 8004958:	0003      	movs	r3, r0
 800495a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495c:	e009      	b.n	8004972 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800495e:	f7fd fc39 	bl	80021d4 <HAL_GetTick>
 8004962:	0002      	movs	r2, r0
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	4a8a      	ldr	r2, [pc, #552]	@ (8004b94 <HAL_RCC_ClockConfig+0x274>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e109      	b.n	8004b86 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004972:	4b87      	ldr	r3, [pc, #540]	@ (8004b90 <HAL_RCC_ClockConfig+0x270>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2201      	movs	r2, #1
 8004978:	4013      	ands	r3, r2
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d1ee      	bne.n	800495e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2202      	movs	r2, #2
 8004986:	4013      	ands	r3, r2
 8004988:	d009      	beq.n	800499e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800498a:	4b83      	ldr	r3, [pc, #524]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	22f0      	movs	r2, #240	@ 0xf0
 8004990:	4393      	bics	r3, r2
 8004992:	0019      	movs	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	4b7f      	ldr	r3, [pc, #508]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 800499a:	430a      	orrs	r2, r1
 800499c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2201      	movs	r2, #1
 80049a4:	4013      	ands	r3, r2
 80049a6:	d100      	bne.n	80049aa <HAL_RCC_ClockConfig+0x8a>
 80049a8:	e089      	b.n	8004abe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049b2:	4b79      	ldr	r3, [pc, #484]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	2380      	movs	r3, #128	@ 0x80
 80049b8:	029b      	lsls	r3, r3, #10
 80049ba:	4013      	ands	r3, r2
 80049bc:	d120      	bne.n	8004a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e0e1      	b.n	8004b86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049ca:	4b73      	ldr	r3, [pc, #460]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	2380      	movs	r3, #128	@ 0x80
 80049d0:	049b      	lsls	r3, r3, #18
 80049d2:	4013      	ands	r3, r2
 80049d4:	d114      	bne.n	8004a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e0d5      	b.n	8004b86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d106      	bne.n	80049f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2204      	movs	r2, #4
 80049e8:	4013      	ands	r3, r2
 80049ea:	d109      	bne.n	8004a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0ca      	b.n	8004b86 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80049f0:	4b69      	ldr	r3, [pc, #420]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	2380      	movs	r3, #128	@ 0x80
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4013      	ands	r3, r2
 80049fa:	d101      	bne.n	8004a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0c2      	b.n	8004b86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a00:	4b65      	ldr	r3, [pc, #404]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2203      	movs	r2, #3
 8004a06:	4393      	bics	r3, r2
 8004a08:	0019      	movs	r1, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	4b62      	ldr	r3, [pc, #392]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 8004a10:	430a      	orrs	r2, r1
 8004a12:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a14:	f7fd fbde 	bl	80021d4 <HAL_GetTick>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d111      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a24:	e009      	b.n	8004a3a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a26:	f7fd fbd5 	bl	80021d4 <HAL_GetTick>
 8004a2a:	0002      	movs	r2, r0
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	4a58      	ldr	r2, [pc, #352]	@ (8004b94 <HAL_RCC_ClockConfig+0x274>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e0a5      	b.n	8004b86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a3a:	4b57      	ldr	r3, [pc, #348]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	220c      	movs	r2, #12
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d1ef      	bne.n	8004a26 <HAL_RCC_ClockConfig+0x106>
 8004a46:	e03a      	b.n	8004abe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d111      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a50:	e009      	b.n	8004a66 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a52:	f7fd fbbf 	bl	80021d4 <HAL_GetTick>
 8004a56:	0002      	movs	r2, r0
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	4a4d      	ldr	r2, [pc, #308]	@ (8004b94 <HAL_RCC_ClockConfig+0x274>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e08f      	b.n	8004b86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a66:	4b4c      	ldr	r3, [pc, #304]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	220c      	movs	r2, #12
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b0c      	cmp	r3, #12
 8004a70:	d1ef      	bne.n	8004a52 <HAL_RCC_ClockConfig+0x132>
 8004a72:	e024      	b.n	8004abe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d11b      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a7c:	e009      	b.n	8004a92 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a7e:	f7fd fba9 	bl	80021d4 <HAL_GetTick>
 8004a82:	0002      	movs	r2, r0
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	4a42      	ldr	r2, [pc, #264]	@ (8004b94 <HAL_RCC_ClockConfig+0x274>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e079      	b.n	8004b86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a92:	4b41      	ldr	r3, [pc, #260]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	220c      	movs	r2, #12
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d1ef      	bne.n	8004a7e <HAL_RCC_ClockConfig+0x15e>
 8004a9e:	e00e      	b.n	8004abe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa0:	f7fd fb98 	bl	80021d4 <HAL_GetTick>
 8004aa4:	0002      	movs	r2, r0
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	4a3a      	ldr	r2, [pc, #232]	@ (8004b94 <HAL_RCC_ClockConfig+0x274>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e068      	b.n	8004b86 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ab4:	4b38      	ldr	r3, [pc, #224]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	220c      	movs	r2, #12
 8004aba:	4013      	ands	r3, r2
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004abe:	4b34      	ldr	r3, [pc, #208]	@ (8004b90 <HAL_RCC_ClockConfig+0x270>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d21e      	bcs.n	8004b0a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004acc:	4b30      	ldr	r3, [pc, #192]	@ (8004b90 <HAL_RCC_ClockConfig+0x270>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	4393      	bics	r3, r2
 8004ad4:	0019      	movs	r1, r3
 8004ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8004b90 <HAL_RCC_ClockConfig+0x270>)
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ade:	f7fd fb79 	bl	80021d4 <HAL_GetTick>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	e009      	b.n	8004afc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae8:	f7fd fb74 	bl	80021d4 <HAL_GetTick>
 8004aec:	0002      	movs	r2, r0
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	4a28      	ldr	r2, [pc, #160]	@ (8004b94 <HAL_RCC_ClockConfig+0x274>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e044      	b.n	8004b86 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afc:	4b24      	ldr	r3, [pc, #144]	@ (8004b90 <HAL_RCC_ClockConfig+0x270>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2201      	movs	r2, #1
 8004b02:	4013      	ands	r3, r2
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d1ee      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2204      	movs	r2, #4
 8004b10:	4013      	ands	r3, r2
 8004b12:	d009      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b14:	4b20      	ldr	r3, [pc, #128]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4a20      	ldr	r2, [pc, #128]	@ (8004b9c <HAL_RCC_ClockConfig+0x27c>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	0019      	movs	r1, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	4b1d      	ldr	r3, [pc, #116]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 8004b24:	430a      	orrs	r2, r1
 8004b26:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b32:	4b19      	ldr	r3, [pc, #100]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	4a1a      	ldr	r2, [pc, #104]	@ (8004ba0 <HAL_RCC_ClockConfig+0x280>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	0019      	movs	r1, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	00da      	lsls	r2, r3, #3
 8004b42:	4b15      	ldr	r3, [pc, #84]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 8004b44:	430a      	orrs	r2, r1
 8004b46:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b48:	f000 f832 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 8004b4c:	0001      	movs	r1, r0
 8004b4e:	4b12      	ldr	r3, [pc, #72]	@ (8004b98 <HAL_RCC_ClockConfig+0x278>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	091b      	lsrs	r3, r3, #4
 8004b54:	220f      	movs	r2, #15
 8004b56:	4013      	ands	r3, r2
 8004b58:	4a12      	ldr	r2, [pc, #72]	@ (8004ba4 <HAL_RCC_ClockConfig+0x284>)
 8004b5a:	5cd3      	ldrb	r3, [r2, r3]
 8004b5c:	000a      	movs	r2, r1
 8004b5e:	40da      	lsrs	r2, r3
 8004b60:	4b11      	ldr	r3, [pc, #68]	@ (8004ba8 <HAL_RCC_ClockConfig+0x288>)
 8004b62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b64:	4b11      	ldr	r3, [pc, #68]	@ (8004bac <HAL_RCC_ClockConfig+0x28c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	250b      	movs	r5, #11
 8004b6a:	197c      	adds	r4, r7, r5
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f7fd faeb 	bl	8002148 <HAL_InitTick>
 8004b72:	0003      	movs	r3, r0
 8004b74:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004b76:	197b      	adds	r3, r7, r5
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004b7e:	197b      	adds	r3, r7, r5
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	e000      	b.n	8004b86 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	0018      	movs	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b004      	add	sp, #16
 8004b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b8e:	46c0      	nop			@ (mov r8, r8)
 8004b90:	40022000 	.word	0x40022000
 8004b94:	00001388 	.word	0x00001388
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	fffff8ff 	.word	0xfffff8ff
 8004ba0:	ffffc7ff 	.word	0xffffc7ff
 8004ba4:	08006fc4 	.word	0x08006fc4
 8004ba8:	20000004 	.word	0x20000004
 8004bac:	20000008 	.word	0x20000008

08004bb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	220c      	movs	r2, #12
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b0c      	cmp	r3, #12
 8004bc4:	d013      	beq.n	8004bee <HAL_RCC_GetSysClockFreq+0x3e>
 8004bc6:	d85c      	bhi.n	8004c82 <HAL_RCC_GetSysClockFreq+0xd2>
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d002      	beq.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x22>
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d00b      	beq.n	8004be8 <HAL_RCC_GetSysClockFreq+0x38>
 8004bd0:	e057      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004bd2:	4b35      	ldr	r3, [pc, #212]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2210      	movs	r2, #16
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d002      	beq.n	8004be2 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004bdc:	4b33      	ldr	r3, [pc, #204]	@ (8004cac <HAL_RCC_GetSysClockFreq+0xfc>)
 8004bde:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004be0:	e05d      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8004be2:	4b33      	ldr	r3, [pc, #204]	@ (8004cb0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004be4:	613b      	str	r3, [r7, #16]
      break;
 8004be6:	e05a      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004be8:	4b32      	ldr	r3, [pc, #200]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bea:	613b      	str	r3, [r7, #16]
      break;
 8004bec:	e057      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	0c9b      	lsrs	r3, r3, #18
 8004bf2:	220f      	movs	r2, #15
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	4a30      	ldr	r2, [pc, #192]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf8:	5cd3      	ldrb	r3, [r2, r3]
 8004bfa:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	0d9b      	lsrs	r3, r3, #22
 8004c00:	2203      	movs	r2, #3
 8004c02:	4013      	ands	r3, r2
 8004c04:	3301      	adds	r3, #1
 8004c06:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c08:	4b27      	ldr	r3, [pc, #156]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	2380      	movs	r3, #128	@ 0x80
 8004c0e:	025b      	lsls	r3, r3, #9
 8004c10:	4013      	ands	r3, r2
 8004c12:	d00f      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	000a      	movs	r2, r1
 8004c18:	0152      	lsls	r2, r2, #5
 8004c1a:	1a52      	subs	r2, r2, r1
 8004c1c:	0193      	lsls	r3, r2, #6
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	185b      	adds	r3, r3, r1
 8004c24:	025b      	lsls	r3, r3, #9
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7fb fa77 	bl	800011c <__udivsi3>
 8004c2e:	0003      	movs	r3, r0
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	e023      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004c34:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2210      	movs	r2, #16
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d00f      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	000a      	movs	r2, r1
 8004c42:	0152      	lsls	r2, r2, #5
 8004c44:	1a52      	subs	r2, r2, r1
 8004c46:	0193      	lsls	r3, r2, #6
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	185b      	adds	r3, r3, r1
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	0018      	movs	r0, r3
 8004c54:	f7fb fa62 	bl	800011c <__udivsi3>
 8004c58:	0003      	movs	r3, r0
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	e00e      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	000a      	movs	r2, r1
 8004c62:	0152      	lsls	r2, r2, #5
 8004c64:	1a52      	subs	r2, r2, r1
 8004c66:	0193      	lsls	r3, r2, #6
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	185b      	adds	r3, r3, r1
 8004c6e:	029b      	lsls	r3, r3, #10
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	0018      	movs	r0, r3
 8004c74:	f7fb fa52 	bl	800011c <__udivsi3>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	613b      	str	r3, [r7, #16]
      break;
 8004c80:	e00d      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004c82:	4b09      	ldr	r3, [pc, #36]	@ (8004ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	0b5b      	lsrs	r3, r3, #13
 8004c88:	2207      	movs	r2, #7
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	3301      	adds	r3, #1
 8004c92:	2280      	movs	r2, #128	@ 0x80
 8004c94:	0212      	lsls	r2, r2, #8
 8004c96:	409a      	lsls	r2, r3
 8004c98:	0013      	movs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
      break;
 8004c9c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004c9e:	693b      	ldr	r3, [r7, #16]
}
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b006      	add	sp, #24
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	003d0900 	.word	0x003d0900
 8004cb0:	00f42400 	.word	0x00f42400
 8004cb4:	007a1200 	.word	0x007a1200
 8004cb8:	08006fdc 	.word	0x08006fdc

08004cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc0:	4b02      	ldr	r3, [pc, #8]	@ (8004ccc <HAL_RCC_GetHCLKFreq+0x10>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	46c0      	nop			@ (mov r8, r8)
 8004ccc:	20000004 	.word	0x20000004

08004cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cd4:	f7ff fff2 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004cd8:	0001      	movs	r1, r0
 8004cda:	4b06      	ldr	r3, [pc, #24]	@ (8004cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	0a1b      	lsrs	r3, r3, #8
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	4a04      	ldr	r2, [pc, #16]	@ (8004cf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ce6:	5cd3      	ldrb	r3, [r2, r3]
 8004ce8:	40d9      	lsrs	r1, r3
 8004cea:	000b      	movs	r3, r1
}
 8004cec:	0018      	movs	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	08006fd4 	.word	0x08006fd4

08004cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d00:	f7ff ffdc 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004d04:	0001      	movs	r1, r0
 8004d06:	4b06      	ldr	r3, [pc, #24]	@ (8004d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	0adb      	lsrs	r3, r3, #11
 8004d0c:	2207      	movs	r2, #7
 8004d0e:	4013      	ands	r3, r2
 8004d10:	4a04      	ldr	r2, [pc, #16]	@ (8004d24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d12:	5cd3      	ldrb	r3, [r2, r3]
 8004d14:	40d9      	lsrs	r1, r3
 8004d16:	000b      	movs	r3, r1
}
 8004d18:	0018      	movs	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			@ (mov r8, r8)
 8004d20:	40021000 	.word	0x40021000
 8004d24:	08006fd4 	.word	0x08006fd4

08004d28 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004d30:	2317      	movs	r3, #23
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d106      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	2380      	movs	r3, #128	@ 0x80
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d100      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004d4e:	e104      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d50:	4bb9      	ldr	r3, [pc, #740]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d54:	2380      	movs	r3, #128	@ 0x80
 8004d56:	055b      	lsls	r3, r3, #21
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d10a      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5c:	4bb6      	ldr	r3, [pc, #728]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d60:	4bb5      	ldr	r3, [pc, #724]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d62:	2180      	movs	r1, #128	@ 0x80
 8004d64:	0549      	lsls	r1, r1, #21
 8004d66:	430a      	orrs	r2, r1
 8004d68:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004d6a:	2317      	movs	r3, #23
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	2201      	movs	r2, #1
 8004d70:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d72:	4bb2      	ldr	r3, [pc, #712]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	2380      	movs	r3, #128	@ 0x80
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d11a      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d7e:	4baf      	ldr	r3, [pc, #700]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4bae      	ldr	r3, [pc, #696]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004d84:	2180      	movs	r1, #128	@ 0x80
 8004d86:	0049      	lsls	r1, r1, #1
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8c:	f7fd fa22 	bl	80021d4 <HAL_GetTick>
 8004d90:	0003      	movs	r3, r0
 8004d92:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	e008      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d96:	f7fd fa1d 	bl	80021d4 <HAL_GetTick>
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b64      	cmp	r3, #100	@ 0x64
 8004da2:	d901      	bls.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e143      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da8:	4ba4      	ldr	r3, [pc, #656]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	2380      	movs	r3, #128	@ 0x80
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	4013      	ands	r3, r2
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004db4:	4ba0      	ldr	r3, [pc, #640]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	23c0      	movs	r3, #192	@ 0xc0
 8004dba:	039b      	lsls	r3, r3, #14
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	23c0      	movs	r3, #192	@ 0xc0
 8004dc6:	039b      	lsls	r3, r3, #14
 8004dc8:	4013      	ands	r3, r2
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d107      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	23c0      	movs	r3, #192	@ 0xc0
 8004dd6:	039b      	lsls	r3, r3, #14
 8004dd8:	4013      	ands	r3, r2
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d013      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	23c0      	movs	r3, #192	@ 0xc0
 8004de6:	029b      	lsls	r3, r3, #10
 8004de8:	401a      	ands	r2, r3
 8004dea:	23c0      	movs	r3, #192	@ 0xc0
 8004dec:	029b      	lsls	r3, r3, #10
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d10a      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004df2:	4b91      	ldr	r3, [pc, #580]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	2380      	movs	r3, #128	@ 0x80
 8004df8:	029b      	lsls	r3, r3, #10
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	2380      	movs	r3, #128	@ 0x80
 8004dfe:	029b      	lsls	r3, r3, #10
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d101      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e113      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004e08:	4b8b      	ldr	r3, [pc, #556]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e0c:	23c0      	movs	r3, #192	@ 0xc0
 8004e0e:	029b      	lsls	r3, r3, #10
 8004e10:	4013      	ands	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d049      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	23c0      	movs	r3, #192	@ 0xc0
 8004e20:	029b      	lsls	r3, r3, #10
 8004e22:	4013      	ands	r3, r2
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d004      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	4013      	ands	r3, r2
 8004e32:	d10d      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	23c0      	movs	r3, #192	@ 0xc0
 8004e3a:	029b      	lsls	r3, r3, #10
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d034      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	2380      	movs	r3, #128	@ 0x80
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	d02e      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004e50:	4b79      	ldr	r3, [pc, #484]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e54:	4a7a      	ldr	r2, [pc, #488]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e5a:	4b77      	ldr	r3, [pc, #476]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e5e:	4b76      	ldr	r3, [pc, #472]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e60:	2180      	movs	r1, #128	@ 0x80
 8004e62:	0309      	lsls	r1, r1, #12
 8004e64:	430a      	orrs	r2, r1
 8004e66:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e68:	4b73      	ldr	r3, [pc, #460]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e6c:	4b72      	ldr	r3, [pc, #456]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e6e:	4975      	ldr	r1, [pc, #468]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004e70:	400a      	ands	r2, r1
 8004e72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004e74:	4b70      	ldr	r3, [pc, #448]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	2380      	movs	r3, #128	@ 0x80
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4013      	ands	r3, r2
 8004e82:	d014      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e84:	f7fd f9a6 	bl	80021d4 <HAL_GetTick>
 8004e88:	0003      	movs	r3, r0
 8004e8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e8c:	e009      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e8e:	f7fd f9a1 	bl	80021d4 <HAL_GetTick>
 8004e92:	0002      	movs	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	4a6b      	ldr	r2, [pc, #428]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e0c6      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ea2:	4b65      	ldr	r3, [pc, #404]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ea4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ea6:	2380      	movs	r3, #128	@ 0x80
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d0ef      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	2380      	movs	r3, #128	@ 0x80
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d01f      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	23c0      	movs	r3, #192	@ 0xc0
 8004ec0:	029b      	lsls	r3, r3, #10
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	23c0      	movs	r3, #192	@ 0xc0
 8004ec6:	029b      	lsls	r3, r3, #10
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d10c      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a5e      	ldr	r2, [pc, #376]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	0019      	movs	r1, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	23c0      	movs	r3, #192	@ 0xc0
 8004edc:	039b      	lsls	r3, r3, #14
 8004ede:	401a      	ands	r2, r3
 8004ee0:	4b55      	ldr	r3, [pc, #340]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	4b54      	ldr	r3, [pc, #336]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ee8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	23c0      	movs	r3, #192	@ 0xc0
 8004ef0:	029b      	lsls	r3, r3, #10
 8004ef2:	401a      	ands	r2, r3
 8004ef4:	4b50      	ldr	r3, [pc, #320]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2220      	movs	r2, #32
 8004f00:	4013      	ands	r3, r2
 8004f02:	d01f      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	23c0      	movs	r3, #192	@ 0xc0
 8004f0a:	029b      	lsls	r3, r3, #10
 8004f0c:	401a      	ands	r2, r3
 8004f0e:	23c0      	movs	r3, #192	@ 0xc0
 8004f10:	029b      	lsls	r3, r3, #10
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004f16:	4b48      	ldr	r3, [pc, #288]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a4c      	ldr	r2, [pc, #304]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	0019      	movs	r1, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	23c0      	movs	r3, #192	@ 0xc0
 8004f26:	039b      	lsls	r3, r3, #14
 8004f28:	401a      	ands	r2, r3
 8004f2a:	4b43      	ldr	r3, [pc, #268]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	4b41      	ldr	r3, [pc, #260]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f32:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	23c0      	movs	r3, #192	@ 0xc0
 8004f3a:	029b      	lsls	r3, r3, #10
 8004f3c:	401a      	ands	r2, r3
 8004f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f40:	430a      	orrs	r2, r1
 8004f42:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f44:	2317      	movs	r3, #23
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d105      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f52:	4b39      	ldr	r3, [pc, #228]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f54:	493e      	ldr	r1, [pc, #248]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004f56:	400a      	ands	r2, r1
 8004f58:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	4013      	ands	r3, r2
 8004f62:	d009      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f64:	4b34      	ldr	r3, [pc, #208]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f68:	2203      	movs	r2, #3
 8004f6a:	4393      	bics	r3, r2
 8004f6c:	0019      	movs	r1, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	4b31      	ldr	r3, [pc, #196]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f74:	430a      	orrs	r2, r1
 8004f76:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	4013      	ands	r3, r2
 8004f80:	d009      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f82:	4b2d      	ldr	r3, [pc, #180]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f86:	220c      	movs	r2, #12
 8004f88:	4393      	bics	r3, r2
 8004f8a:	0019      	movs	r1, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	4b29      	ldr	r3, [pc, #164]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f92:	430a      	orrs	r2, r1
 8004f94:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d009      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fa0:	4b25      	ldr	r3, [pc, #148]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	0019      	movs	r1, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695a      	ldr	r2, [r3, #20]
 8004fae:	4b22      	ldr	r3, [pc, #136]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2208      	movs	r2, #8
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc2:	4a25      	ldr	r2, [pc, #148]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699a      	ldr	r2, [r3, #24]
 8004fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	2380      	movs	r3, #128	@ 0x80
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d009      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fde:	4b16      	ldr	r3, [pc, #88]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fe2:	4a17      	ldr	r2, [pc, #92]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	0019      	movs	r1, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	4b12      	ldr	r3, [pc, #72]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2240      	movs	r2, #64	@ 0x40
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d009      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005000:	4a16      	ldr	r2, [pc, #88]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005002:	4013      	ands	r3, r2
 8005004:	0019      	movs	r1, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800500a:	4b0b      	ldr	r3, [pc, #44]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800500c:	430a      	orrs	r2, r1
 800500e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2280      	movs	r2, #128	@ 0x80
 8005016:	4013      	ands	r3, r2
 8005018:	d009      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800501a:	4b07      	ldr	r3, [pc, #28]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800501c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800501e:	4a10      	ldr	r2, [pc, #64]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005020:	4013      	ands	r3, r2
 8005022:	0019      	movs	r1, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1a      	ldr	r2, [r3, #32]
 8005028:	4b03      	ldr	r3, [pc, #12]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800502a:	430a      	orrs	r2, r1
 800502c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	b006      	add	sp, #24
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021000 	.word	0x40021000
 800503c:	40007000 	.word	0x40007000
 8005040:	fffcffff 	.word	0xfffcffff
 8005044:	fff7ffff 	.word	0xfff7ffff
 8005048:	00001388 	.word	0x00001388
 800504c:	ffcfffff 	.word	0xffcfffff
 8005050:	efffffff 	.word	0xefffffff
 8005054:	fffff3ff 	.word	0xfffff3ff
 8005058:	ffffcfff 	.word	0xffffcfff
 800505c:	fbffffff 	.word	0xfbffffff
 8005060:	fff3ffff 	.word	0xfff3ffff

08005064 <HAL_RCCEx_EnableLSECSS>:
/**
  * @brief  Enables the LSE Clock Security System.
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSECSSON) ;
 8005068:	4b04      	ldr	r3, [pc, #16]	@ (800507c <HAL_RCCEx_EnableLSECSS+0x18>)
 800506a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800506c:	4b03      	ldr	r3, [pc, #12]	@ (800507c <HAL_RCCEx_EnableLSECSS+0x18>)
 800506e:	2180      	movs	r1, #128	@ 0x80
 8005070:	0189      	lsls	r1, r1, #6
 8005072:	430a      	orrs	r2, r1
 8005074:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000

08005080 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005080:	b5b0      	push	{r4, r5, r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005088:	230f      	movs	r3, #15
 800508a:	18fb      	adds	r3, r7, r3
 800508c:	2201      	movs	r2, #1
 800508e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e088      	b.n	80051ac <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2221      	movs	r2, #33	@ 0x21
 800509e:	5c9b      	ldrb	r3, [r3, r2]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d107      	bne.n	80050b6 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	2100      	movs	r1, #0
 80050ac:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	0018      	movs	r0, r3
 80050b2:	f7fc fb93 	bl	80017dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2221      	movs	r2, #33	@ 0x21
 80050ba:	2102      	movs	r1, #2
 80050bc:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	2210      	movs	r2, #16
 80050c6:	4013      	ands	r3, r2
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d05f      	beq.n	800518c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	22ca      	movs	r2, #202	@ 0xca
 80050d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2253      	movs	r2, #83	@ 0x53
 80050da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80050dc:	250f      	movs	r5, #15
 80050de:	197c      	adds	r4, r7, r5
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	0018      	movs	r0, r3
 80050e4:	f000 f890 	bl	8005208 <RTC_EnterInitMode>
 80050e8:	0003      	movs	r3, r0
 80050ea:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80050ec:	0028      	movs	r0, r5
 80050ee:	183b      	adds	r3, r7, r0
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d12c      	bne.n	8005150 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	492c      	ldr	r1, [pc, #176]	@ (80051b4 <HAL_RTC_Init+0x134>)
 8005102:	400a      	ands	r2, r1
 8005104:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6899      	ldr	r1, [r3, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	68d2      	ldr	r2, [r2, #12]
 800512c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6919      	ldr	r1, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	041a      	lsls	r2, r3, #16
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005142:	183c      	adds	r4, r7, r0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	0018      	movs	r0, r3
 8005148:	f000 f8a2 	bl	8005290 <RTC_ExitInitMode>
 800514c:	0003      	movs	r3, r0
 800514e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8005150:	230f      	movs	r3, #15
 8005152:	18fb      	adds	r3, r7, r3
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d113      	bne.n	8005182 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2103      	movs	r1, #3
 8005166:	438a      	bics	r2, r1
 8005168:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	22ff      	movs	r2, #255	@ 0xff
 8005188:	625a      	str	r2, [r3, #36]	@ 0x24
 800518a:	e003      	b.n	8005194 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800518c:	230f      	movs	r3, #15
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8005194:	230f      	movs	r3, #15
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2221      	movs	r2, #33	@ 0x21
 80051a2:	2101      	movs	r1, #1
 80051a4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80051a6:	230f      	movs	r3, #15
 80051a8:	18fb      	adds	r3, r7, r3
 80051aa:	781b      	ldrb	r3, [r3, #0]
}
 80051ac:	0018      	movs	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b004      	add	sp, #16
 80051b2:	bdb0      	pop	{r4, r5, r7, pc}
 80051b4:	ff8fffbf 	.word	0xff8fffbf

080051b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a0e      	ldr	r2, [pc, #56]	@ (8005204 <HAL_RTC_WaitForSynchro+0x4c>)
 80051ca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051cc:	f7fd f802 	bl	80021d4 <HAL_GetTick>
 80051d0:	0003      	movs	r3, r0
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051d4:	e00a      	b.n	80051ec <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051d6:	f7fc fffd 	bl	80021d4 <HAL_GetTick>
 80051da:	0002      	movs	r2, r0
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	23fa      	movs	r3, #250	@ 0xfa
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d901      	bls.n	80051ec <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e006      	b.n	80051fa <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	4013      	ands	r3, r2
 80051f6:	d0ee      	beq.n	80051d6 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	0018      	movs	r0, r3
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b004      	add	sp, #16
 8005200:	bd80      	pop	{r7, pc}
 8005202:	46c0      	nop			@ (mov r8, r8)
 8005204:	0001ff5f 	.word	0x0001ff5f

08005208 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005214:	230f      	movs	r3, #15
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	2240      	movs	r2, #64	@ 0x40
 8005224:	4013      	ands	r3, r2
 8005226:	d12c      	bne.n	8005282 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2180      	movs	r1, #128	@ 0x80
 8005234:	430a      	orrs	r2, r1
 8005236:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005238:	f7fc ffcc 	bl	80021d4 <HAL_GetTick>
 800523c:	0003      	movs	r3, r0
 800523e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005240:	e014      	b.n	800526c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005242:	f7fc ffc7 	bl	80021d4 <HAL_GetTick>
 8005246:	0002      	movs	r2, r0
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	1ad2      	subs	r2, r2, r3
 800524c:	200f      	movs	r0, #15
 800524e:	183b      	adds	r3, r7, r0
 8005250:	1839      	adds	r1, r7, r0
 8005252:	7809      	ldrb	r1, [r1, #0]
 8005254:	7019      	strb	r1, [r3, #0]
 8005256:	23fa      	movs	r3, #250	@ 0xfa
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	429a      	cmp	r2, r3
 800525c:	d906      	bls.n	800526c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2221      	movs	r2, #33	@ 0x21
 8005262:	2104      	movs	r1, #4
 8005264:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8005266:	183b      	adds	r3, r7, r0
 8005268:	2201      	movs	r2, #1
 800526a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	2240      	movs	r2, #64	@ 0x40
 8005274:	4013      	ands	r3, r2
 8005276:	d104      	bne.n	8005282 <RTC_EnterInitMode+0x7a>
 8005278:	230f      	movs	r3, #15
 800527a:	18fb      	adds	r3, r7, r3
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d1df      	bne.n	8005242 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8005282:	230f      	movs	r3, #15
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	781b      	ldrb	r3, [r3, #0]
}
 8005288:	0018      	movs	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	b004      	add	sp, #16
 800528e:	bd80      	pop	{r7, pc}

08005290 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005290:	b590      	push	{r4, r7, lr}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005298:	240f      	movs	r4, #15
 800529a:	193b      	adds	r3, r7, r4
 800529c:	2200      	movs	r2, #0
 800529e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2180      	movs	r1, #128	@ 0x80
 80052ac:	438a      	bics	r2, r1
 80052ae:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2220      	movs	r2, #32
 80052b8:	4013      	ands	r3, r2
 80052ba:	d10c      	bne.n	80052d6 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	0018      	movs	r0, r3
 80052c0:	f7ff ff7a 	bl	80051b8 <HAL_RTC_WaitForSynchro>
 80052c4:	1e03      	subs	r3, r0, #0
 80052c6:	d006      	beq.n	80052d6 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2221      	movs	r2, #33	@ 0x21
 80052cc:	2104      	movs	r1, #4
 80052ce:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80052d0:	193b      	adds	r3, r7, r4
 80052d2:	2201      	movs	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80052d6:	230f      	movs	r3, #15
 80052d8:	18fb      	adds	r3, r7, r3
 80052da:	781b      	ldrb	r3, [r3, #0]
}
 80052dc:	0018      	movs	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	b005      	add	sp, #20
 80052e2:	bd90      	pop	{r4, r7, pc}

080052e4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80052f0:	4b64      	ldr	r3, [pc, #400]	@ (8005484 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	22fa      	movs	r2, #250	@ 0xfa
 80052f6:	01d1      	lsls	r1, r2, #7
 80052f8:	0018      	movs	r0, r3
 80052fa:	f7fa ff0f 	bl	800011c <__udivsi3>
 80052fe:	0003      	movs	r3, r0
 8005300:	001a      	movs	r2, r3
 8005302:	0013      	movs	r3, r2
 8005304:	015b      	lsls	r3, r3, #5
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	189b      	adds	r3, r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	5c9b      	ldrb	r3, [r3, r2]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 800531a:	2302      	movs	r3, #2
 800531c:	e0ad      	b.n	800547a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	2101      	movs	r1, #1
 8005324:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2221      	movs	r2, #33	@ 0x21
 800532a:	2102      	movs	r1, #2
 800532c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	22ca      	movs	r2, #202	@ 0xca
 8005334:	625a      	str	r2, [r3, #36]	@ 0x24
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2253      	movs	r2, #83	@ 0x53
 800533c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	2380      	movs	r3, #128	@ 0x80
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	4013      	ands	r3, r2
 800534a:	d019      	beq.n	8005380 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	3b01      	subs	r3, #1
 8005350:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10d      	bne.n	8005374 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	22ff      	movs	r2, #255	@ 0xff
 800535e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2221      	movs	r2, #33	@ 0x21
 8005364:	2103      	movs	r1, #3
 8005366:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	2100      	movs	r1, #0
 800536e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e082      	b.n	800547a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2204      	movs	r2, #4
 800537c:	4013      	ands	r3, r2
 800537e:	d1e5      	bne.n	800534c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	493f      	ldr	r1, [pc, #252]	@ (8005488 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 800538c:	400a      	ands	r2, r1
 800538e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	22ff      	movs	r2, #255	@ 0xff
 8005398:	401a      	ands	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	493b      	ldr	r1, [pc, #236]	@ (800548c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80053a0:	430a      	orrs	r2, r1
 80053a2:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80053a4:	4b37      	ldr	r3, [pc, #220]	@ (8005484 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	22fa      	movs	r2, #250	@ 0xfa
 80053aa:	01d1      	lsls	r1, r2, #7
 80053ac:	0018      	movs	r0, r3
 80053ae:	f7fa feb5 	bl	800011c <__udivsi3>
 80053b2:	0003      	movs	r3, r0
 80053b4:	001a      	movs	r2, r3
 80053b6:	0013      	movs	r3, r2
 80053b8:	015b      	lsls	r3, r3, #5
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	189b      	adds	r3, r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10d      	bne.n	80053ec <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	22ff      	movs	r2, #255	@ 0xff
 80053d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2221      	movs	r2, #33	@ 0x21
 80053dc:	2103      	movs	r1, #3
 80053de:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	2100      	movs	r1, #0
 80053e6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e046      	b.n	800547a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	2204      	movs	r2, #4
 80053f4:	4013      	ands	r3, r2
 80053f6:	d0e5      	beq.n	80053c4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2107      	movs	r1, #7
 8005404:	438a      	bics	r2, r1
 8005406:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6899      	ldr	r1, [r3, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	430a      	orrs	r2, r1
 8005416:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005420:	4b1b      	ldr	r3, [pc, #108]	@ (8005490 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	4b1a      	ldr	r3, [pc, #104]	@ (8005490 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005426:	2180      	movs	r1, #128	@ 0x80
 8005428:	0349      	lsls	r1, r1, #13
 800542a:	430a      	orrs	r2, r1
 800542c:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800542e:	4b18      	ldr	r3, [pc, #96]	@ (8005490 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	4b17      	ldr	r3, [pc, #92]	@ (8005490 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005434:	2180      	movs	r1, #128	@ 0x80
 8005436:	0349      	lsls	r1, r1, #13
 8005438:	430a      	orrs	r2, r1
 800543a:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2180      	movs	r1, #128	@ 0x80
 8005448:	01c9      	lsls	r1, r1, #7
 800544a:	430a      	orrs	r2, r1
 800544c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2180      	movs	r1, #128	@ 0x80
 800545a:	00c9      	lsls	r1, r1, #3
 800545c:	430a      	orrs	r2, r1
 800545e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	22ff      	movs	r2, #255	@ 0xff
 8005466:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2221      	movs	r2, #33	@ 0x21
 800546c:	2101      	movs	r1, #1
 800546e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2220      	movs	r2, #32
 8005474:	2100      	movs	r1, #0
 8005476:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	0018      	movs	r0, r3
 800547c:	46bd      	mov	sp, r7
 800547e:	b006      	add	sp, #24
 8005480:	bd80      	pop	{r7, pc}
 8005482:	46c0      	nop			@ (mov r8, r8)
 8005484:	20000004 	.word	0x20000004
 8005488:	fffffbff 	.word	0xfffffbff
 800548c:	fffffb7f 	.word	0xfffffb7f
 8005490:	40010400 	.word	0x40010400

08005494 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800549c:	4b13      	ldr	r3, [pc, #76]	@ (80054ec <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 800549e:	2280      	movs	r2, #128	@ 0x80
 80054a0:	0352      	lsls	r2, r2, #13
 80054a2:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	2380      	movs	r3, #128	@ 0x80
 80054ac:	01db      	lsls	r3, r3, #7
 80054ae:	4013      	ands	r3, r2
 80054b0:	d014      	beq.n	80054dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	2380      	movs	r3, #128	@ 0x80
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4013      	ands	r3, r2
 80054be:	d00d      	beq.n	80054dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	22ff      	movs	r2, #255	@ 0xff
 80054c8:	401a      	ands	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4908      	ldr	r1, [pc, #32]	@ (80054f0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80054d0:	430a      	orrs	r2, r1
 80054d2:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	0018      	movs	r0, r3
 80054d8:	f7fb ff8c 	bl	80013f4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2221      	movs	r2, #33	@ 0x21
 80054e0:	2101      	movs	r1, #1
 80054e2:	5499      	strb	r1, [r3, r2]
}
 80054e4:	46c0      	nop			@ (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b002      	add	sp, #8
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40010400 	.word	0x40010400
 80054f0:	fffffb7f 	.word	0xfffffb7f

080054f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e044      	b.n	8005590 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d107      	bne.n	800551e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2278      	movs	r2, #120	@ 0x78
 8005512:	2100      	movs	r1, #0
 8005514:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	0018      	movs	r0, r3
 800551a:	f7fc f97f 	bl	800181c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2224      	movs	r2, #36	@ 0x24
 8005522:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2101      	movs	r1, #1
 8005530:	438a      	bics	r2, r1
 8005532:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	0018      	movs	r0, r3
 8005540:	f000 fcfe 	bl	8005f40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	0018      	movs	r0, r3
 8005548:	f000 fa5c 	bl	8005a04 <UART_SetConfig>
 800554c:	0003      	movs	r3, r0
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e01c      	b.n	8005590 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	490d      	ldr	r1, [pc, #52]	@ (8005598 <HAL_UART_Init+0xa4>)
 8005562:	400a      	ands	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	212a      	movs	r1, #42	@ 0x2a
 8005572:	438a      	bics	r2, r1
 8005574:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2101      	movs	r1, #1
 8005582:	430a      	orrs	r2, r1
 8005584:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	0018      	movs	r0, r3
 800558a:	f000 fd8d 	bl	80060a8 <UART_CheckIdleState>
 800558e:	0003      	movs	r3, r0
}
 8005590:	0018      	movs	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	b002      	add	sp, #8
 8005596:	bd80      	pop	{r7, pc}
 8005598:	ffffb7ff 	.word	0xffffb7ff

0800559c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	@ 0x28
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	1dbb      	adds	r3, r7, #6
 80055aa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	d000      	beq.n	80055b6 <HAL_UART_Transmit+0x1a>
 80055b4:	e08c      	b.n	80056d0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_UART_Transmit+0x28>
 80055bc:	1dbb      	adds	r3, r7, #6
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e084      	b.n	80056d2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	2380      	movs	r3, #128	@ 0x80
 80055ce:	015b      	lsls	r3, r3, #5
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d109      	bne.n	80055e8 <HAL_UART_Transmit+0x4c>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2201      	movs	r2, #1
 80055e0:	4013      	ands	r3, r2
 80055e2:	d001      	beq.n	80055e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e074      	b.n	80056d2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2284      	movs	r2, #132	@ 0x84
 80055ec:	2100      	movs	r1, #0
 80055ee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2221      	movs	r2, #33	@ 0x21
 80055f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055f6:	f7fc fded 	bl	80021d4 <HAL_GetTick>
 80055fa:	0003      	movs	r3, r0
 80055fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	1dba      	adds	r2, r7, #6
 8005602:	2150      	movs	r1, #80	@ 0x50
 8005604:	8812      	ldrh	r2, [r2, #0]
 8005606:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1dba      	adds	r2, r7, #6
 800560c:	2152      	movs	r1, #82	@ 0x52
 800560e:	8812      	ldrh	r2, [r2, #0]
 8005610:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	2380      	movs	r3, #128	@ 0x80
 8005618:	015b      	lsls	r3, r3, #5
 800561a:	429a      	cmp	r2, r3
 800561c:	d108      	bne.n	8005630 <HAL_UART_Transmit+0x94>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	e003      	b.n	8005638 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005638:	e02f      	b.n	800569a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	0013      	movs	r3, r2
 8005644:	2200      	movs	r2, #0
 8005646:	2180      	movs	r1, #128	@ 0x80
 8005648:	f000 fdd6 	bl	80061f8 <UART_WaitOnFlagUntilTimeout>
 800564c:	1e03      	subs	r3, r0, #0
 800564e:	d004      	beq.n	800565a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e03b      	b.n	80056d2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10b      	bne.n	8005678 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	001a      	movs	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	05d2      	lsls	r2, r2, #23
 800566c:	0dd2      	lsrs	r2, r2, #23
 800566e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	3302      	adds	r3, #2
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	e007      	b.n	8005688 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	781a      	ldrb	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3301      	adds	r3, #1
 8005686:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2252      	movs	r2, #82	@ 0x52
 800568c:	5a9b      	ldrh	r3, [r3, r2]
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b299      	uxth	r1, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2252      	movs	r2, #82	@ 0x52
 8005698:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2252      	movs	r2, #82	@ 0x52
 800569e:	5a9b      	ldrh	r3, [r3, r2]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1c9      	bne.n	800563a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	0013      	movs	r3, r2
 80056b0:	2200      	movs	r2, #0
 80056b2:	2140      	movs	r1, #64	@ 0x40
 80056b4:	f000 fda0 	bl	80061f8 <UART_WaitOnFlagUntilTimeout>
 80056b8:	1e03      	subs	r3, r0, #0
 80056ba:	d004      	beq.n	80056c6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e005      	b.n	80056d2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	e000      	b.n	80056d2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
  }
}
 80056d2:	0018      	movs	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b008      	add	sp, #32
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08a      	sub	sp, #40	@ 0x28
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	1dbb      	adds	r3, r7, #6
 80056ea:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2280      	movs	r2, #128	@ 0x80
 80056f0:	589b      	ldr	r3, [r3, r2]
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d000      	beq.n	80056f8 <HAL_UART_Receive+0x1c>
 80056f6:	e0d0      	b.n	800589a <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_UART_Receive+0x2a>
 80056fe:	1dbb      	adds	r3, r7, #6
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e0c8      	b.n	800589c <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	2380      	movs	r3, #128	@ 0x80
 8005710:	015b      	lsls	r3, r3, #5
 8005712:	429a      	cmp	r2, r3
 8005714:	d109      	bne.n	800572a <HAL_UART_Receive+0x4e>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d105      	bne.n	800572a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2201      	movs	r2, #1
 8005722:	4013      	ands	r3, r2
 8005724:	d001      	beq.n	800572a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e0b8      	b.n	800589c <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2284      	movs	r2, #132	@ 0x84
 800572e:	2100      	movs	r1, #0
 8005730:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2280      	movs	r2, #128	@ 0x80
 8005736:	2122      	movs	r1, #34	@ 0x22
 8005738:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005740:	f7fc fd48 	bl	80021d4 <HAL_GetTick>
 8005744:	0003      	movs	r3, r0
 8005746:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	1dba      	adds	r2, r7, #6
 800574c:	2158      	movs	r1, #88	@ 0x58
 800574e:	8812      	ldrh	r2, [r2, #0]
 8005750:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1dba      	adds	r2, r7, #6
 8005756:	215a      	movs	r1, #90	@ 0x5a
 8005758:	8812      	ldrh	r2, [r2, #0]
 800575a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	2380      	movs	r3, #128	@ 0x80
 8005762:	015b      	lsls	r3, r3, #5
 8005764:	429a      	cmp	r2, r3
 8005766:	d10d      	bne.n	8005784 <HAL_UART_Receive+0xa8>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d104      	bne.n	800577a <HAL_UART_Receive+0x9e>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	225c      	movs	r2, #92	@ 0x5c
 8005774:	494b      	ldr	r1, [pc, #300]	@ (80058a4 <HAL_UART_Receive+0x1c8>)
 8005776:	5299      	strh	r1, [r3, r2]
 8005778:	e02e      	b.n	80057d8 <HAL_UART_Receive+0xfc>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	225c      	movs	r2, #92	@ 0x5c
 800577e:	21ff      	movs	r1, #255	@ 0xff
 8005780:	5299      	strh	r1, [r3, r2]
 8005782:	e029      	b.n	80057d8 <HAL_UART_Receive+0xfc>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10d      	bne.n	80057a8 <HAL_UART_Receive+0xcc>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d104      	bne.n	800579e <HAL_UART_Receive+0xc2>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	225c      	movs	r2, #92	@ 0x5c
 8005798:	21ff      	movs	r1, #255	@ 0xff
 800579a:	5299      	strh	r1, [r3, r2]
 800579c:	e01c      	b.n	80057d8 <HAL_UART_Receive+0xfc>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	225c      	movs	r2, #92	@ 0x5c
 80057a2:	217f      	movs	r1, #127	@ 0x7f
 80057a4:	5299      	strh	r1, [r3, r2]
 80057a6:	e017      	b.n	80057d8 <HAL_UART_Receive+0xfc>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	2380      	movs	r3, #128	@ 0x80
 80057ae:	055b      	lsls	r3, r3, #21
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d10d      	bne.n	80057d0 <HAL_UART_Receive+0xf4>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <HAL_UART_Receive+0xea>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	225c      	movs	r2, #92	@ 0x5c
 80057c0:	217f      	movs	r1, #127	@ 0x7f
 80057c2:	5299      	strh	r1, [r3, r2]
 80057c4:	e008      	b.n	80057d8 <HAL_UART_Receive+0xfc>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	225c      	movs	r2, #92	@ 0x5c
 80057ca:	213f      	movs	r1, #63	@ 0x3f
 80057cc:	5299      	strh	r1, [r3, r2]
 80057ce:	e003      	b.n	80057d8 <HAL_UART_Receive+0xfc>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	225c      	movs	r2, #92	@ 0x5c
 80057d4:	2100      	movs	r1, #0
 80057d6:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80057d8:	2312      	movs	r3, #18
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	215c      	movs	r1, #92	@ 0x5c
 80057e0:	5a52      	ldrh	r2, [r2, r1]
 80057e2:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	2380      	movs	r3, #128	@ 0x80
 80057ea:	015b      	lsls	r3, r3, #5
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d108      	bne.n	8005802 <HAL_UART_Receive+0x126>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	61bb      	str	r3, [r7, #24]
 8005800:	e003      	b.n	800580a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005806:	2300      	movs	r3, #0
 8005808:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800580a:	e03a      	b.n	8005882 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	0013      	movs	r3, r2
 8005816:	2200      	movs	r2, #0
 8005818:	2120      	movs	r1, #32
 800581a:	f000 fced 	bl	80061f8 <UART_WaitOnFlagUntilTimeout>
 800581e:	1e03      	subs	r3, r0, #0
 8005820:	d005      	beq.n	800582e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2280      	movs	r2, #128	@ 0x80
 8005826:	2120      	movs	r1, #32
 8005828:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e036      	b.n	800589c <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10e      	bne.n	8005852 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583a:	b29b      	uxth	r3, r3
 800583c:	2212      	movs	r2, #18
 800583e:	18ba      	adds	r2, r7, r2
 8005840:	8812      	ldrh	r2, [r2, #0]
 8005842:	4013      	ands	r3, r2
 8005844:	b29a      	uxth	r2, r3
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	3302      	adds	r3, #2
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e00e      	b.n	8005870 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2212      	movs	r2, #18
 800585c:	18ba      	adds	r2, r7, r2
 800585e:	8812      	ldrh	r2, [r2, #0]
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	4013      	ands	r3, r2
 8005864:	b2da      	uxtb	r2, r3
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3301      	adds	r3, #1
 800586e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	225a      	movs	r2, #90	@ 0x5a
 8005874:	5a9b      	ldrh	r3, [r3, r2]
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b299      	uxth	r1, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	225a      	movs	r2, #90	@ 0x5a
 8005880:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	225a      	movs	r2, #90	@ 0x5a
 8005886:	5a9b      	ldrh	r3, [r3, r2]
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1be      	bne.n	800580c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2280      	movs	r2, #128	@ 0x80
 8005892:	2120      	movs	r1, #32
 8005894:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	e000      	b.n	800589c <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800589a:	2302      	movs	r3, #2
  }
}
 800589c:	0018      	movs	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	b008      	add	sp, #32
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	000001ff 	.word	0x000001ff

080058a8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b092      	sub	sp, #72	@ 0x48
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b0:	f3ef 8310 	mrs	r3, PRIMASK
 80058b4:	623b      	str	r3, [r7, #32]
  return(result);
 80058b6:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80058ba:	2301      	movs	r3, #1
 80058bc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	f383 8810 	msr	PRIMASK, r3
}
 80058c4:	46c0      	nop			@ (mov r8, r8)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	494b      	ldr	r1, [pc, #300]	@ (8005a00 <HAL_UART_AbortReceive+0x158>)
 80058d2:	400a      	ands	r2, r1
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058dc:	f383 8810 	msr	PRIMASK, r3
}
 80058e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058e2:	f3ef 8310 	mrs	r3, PRIMASK
 80058e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80058e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80058ec:	2301      	movs	r3, #1
 80058ee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f2:	f383 8810 	msr	PRIMASK, r3
}
 80058f6:	46c0      	nop			@ (mov r8, r8)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2101      	movs	r1, #1
 8005904:	438a      	bics	r2, r1
 8005906:	609a      	str	r2, [r3, #8]
 8005908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800590a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800590c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590e:	f383 8810 	msr	PRIMASK, r3
}
 8005912:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005918:	2b01      	cmp	r3, #1
 800591a:	d118      	bne.n	800594e <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800591c:	f3ef 8310 	mrs	r3, PRIMASK
 8005920:	617b      	str	r3, [r7, #20]
  return(result);
 8005922:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005926:	2301      	movs	r3, #1
 8005928:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	f383 8810 	msr	PRIMASK, r3
}
 8005930:	46c0      	nop			@ (mov r8, r8)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2110      	movs	r1, #16
 800593e:	438a      	bics	r2, r1
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005944:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	f383 8810 	msr	PRIMASK, r3
}
 800594c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2240      	movs	r2, #64	@ 0x40
 8005956:	4013      	ands	r3, r2
 8005958:	2b40      	cmp	r3, #64	@ 0x40
 800595a:	d135      	bne.n	80059c8 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800595c:	f3ef 8310 	mrs	r3, PRIMASK
 8005960:	60bb      	str	r3, [r7, #8]
  return(result);
 8005962:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005964:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005966:	2301      	movs	r3, #1
 8005968:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f383 8810 	msr	PRIMASK, r3
}
 8005970:	46c0      	nop			@ (mov r8, r8)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2140      	movs	r1, #64	@ 0x40
 800597e:	438a      	bics	r2, r1
 8005980:	609a      	str	r2, [r3, #8]
 8005982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005984:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f383 8810 	msr	PRIMASK, r3
}
 800598c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005992:	2b00      	cmp	r3, #0
 8005994:	d018      	beq.n	80059c8 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800599a:	2200      	movs	r2, #0
 800599c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059a2:	0018      	movs	r0, r3
 80059a4:	f7fd f9e8 	bl	8002d78 <HAL_DMA_Abort>
 80059a8:	1e03      	subs	r3, r0, #0
 80059aa:	d00d      	beq.n	80059c8 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059b0:	0018      	movs	r0, r3
 80059b2:	f7fd fa21 	bl	8002df8 <HAL_DMA_GetError>
 80059b6:	0003      	movs	r3, r0
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d105      	bne.n	80059c8 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2284      	movs	r2, #132	@ 0x84
 80059c0:	2110      	movs	r1, #16
 80059c2:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e017      	b.n	80059f8 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	225a      	movs	r2, #90	@ 0x5a
 80059cc:	2100      	movs	r1, #0
 80059ce:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	220f      	movs	r2, #15
 80059d6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2108      	movs	r1, #8
 80059e4:	430a      	orrs	r2, r1
 80059e6:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2280      	movs	r2, #128	@ 0x80
 80059ec:	2120      	movs	r1, #32
 80059ee:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	0018      	movs	r0, r3
 80059fa:	46bd      	mov	sp, r7
 80059fc:	b012      	add	sp, #72	@ 0x48
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	fffffedf 	.word	0xfffffedf

08005a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a04:	b5b0      	push	{r4, r5, r7, lr}
 8005a06:	b08e      	sub	sp, #56	@ 0x38
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a0c:	231a      	movs	r3, #26
 8005a0e:	2218      	movs	r2, #24
 8005a10:	189b      	adds	r3, r3, r2
 8005a12:	19db      	adds	r3, r3, r7
 8005a14:	2200      	movs	r2, #0
 8005a16:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	431a      	orrs	r2, r3
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4ac3      	ldr	r2, [pc, #780]	@ (8005d44 <UART_SetConfig+0x340>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	0019      	movs	r1, r3
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a42:	430a      	orrs	r2, r1
 8005a44:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	4abe      	ldr	r2, [pc, #760]	@ (8005d48 <UART_SetConfig+0x344>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	0019      	movs	r1, r3
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4ab8      	ldr	r2, [pc, #736]	@ (8005d4c <UART_SetConfig+0x348>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d004      	beq.n	8005a78 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a74:	4313      	orrs	r3, r2
 8005a76:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	4ab4      	ldr	r2, [pc, #720]	@ (8005d50 <UART_SetConfig+0x34c>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	0019      	movs	r1, r3
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4ab0      	ldr	r2, [pc, #704]	@ (8005d54 <UART_SetConfig+0x350>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d131      	bne.n	8005afc <UART_SetConfig+0xf8>
 8005a98:	4baf      	ldr	r3, [pc, #700]	@ (8005d58 <UART_SetConfig+0x354>)
 8005a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d01d      	beq.n	8005ae0 <UART_SetConfig+0xdc>
 8005aa4:	d823      	bhi.n	8005aee <UART_SetConfig+0xea>
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d00c      	beq.n	8005ac4 <UART_SetConfig+0xc0>
 8005aaa:	d820      	bhi.n	8005aee <UART_SetConfig+0xea>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <UART_SetConfig+0xb2>
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d00e      	beq.n	8005ad2 <UART_SetConfig+0xce>
 8005ab4:	e01b      	b.n	8005aee <UART_SetConfig+0xea>
 8005ab6:	231b      	movs	r3, #27
 8005ab8:	2218      	movs	r2, #24
 8005aba:	189b      	adds	r3, r3, r2
 8005abc:	19db      	adds	r3, r3, r7
 8005abe:	2201      	movs	r2, #1
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	e0b4      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005ac4:	231b      	movs	r3, #27
 8005ac6:	2218      	movs	r2, #24
 8005ac8:	189b      	adds	r3, r3, r2
 8005aca:	19db      	adds	r3, r3, r7
 8005acc:	2202      	movs	r2, #2
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e0ad      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005ad2:	231b      	movs	r3, #27
 8005ad4:	2218      	movs	r2, #24
 8005ad6:	189b      	adds	r3, r3, r2
 8005ad8:	19db      	adds	r3, r3, r7
 8005ada:	2204      	movs	r2, #4
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	e0a6      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005ae0:	231b      	movs	r3, #27
 8005ae2:	2218      	movs	r2, #24
 8005ae4:	189b      	adds	r3, r3, r2
 8005ae6:	19db      	adds	r3, r3, r7
 8005ae8:	2208      	movs	r2, #8
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	e09f      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005aee:	231b      	movs	r3, #27
 8005af0:	2218      	movs	r2, #24
 8005af2:	189b      	adds	r3, r3, r2
 8005af4:	19db      	adds	r3, r3, r7
 8005af6:	2210      	movs	r2, #16
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	e098      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a96      	ldr	r2, [pc, #600]	@ (8005d5c <UART_SetConfig+0x358>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d131      	bne.n	8005b6a <UART_SetConfig+0x166>
 8005b06:	4b94      	ldr	r3, [pc, #592]	@ (8005d58 <UART_SetConfig+0x354>)
 8005b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b0a:	220c      	movs	r2, #12
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2b0c      	cmp	r3, #12
 8005b10:	d01d      	beq.n	8005b4e <UART_SetConfig+0x14a>
 8005b12:	d823      	bhi.n	8005b5c <UART_SetConfig+0x158>
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d00c      	beq.n	8005b32 <UART_SetConfig+0x12e>
 8005b18:	d820      	bhi.n	8005b5c <UART_SetConfig+0x158>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <UART_SetConfig+0x120>
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d00e      	beq.n	8005b40 <UART_SetConfig+0x13c>
 8005b22:	e01b      	b.n	8005b5c <UART_SetConfig+0x158>
 8005b24:	231b      	movs	r3, #27
 8005b26:	2218      	movs	r2, #24
 8005b28:	189b      	adds	r3, r3, r2
 8005b2a:	19db      	adds	r3, r3, r7
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	701a      	strb	r2, [r3, #0]
 8005b30:	e07d      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005b32:	231b      	movs	r3, #27
 8005b34:	2218      	movs	r2, #24
 8005b36:	189b      	adds	r3, r3, r2
 8005b38:	19db      	adds	r3, r3, r7
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e076      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005b40:	231b      	movs	r3, #27
 8005b42:	2218      	movs	r2, #24
 8005b44:	189b      	adds	r3, r3, r2
 8005b46:	19db      	adds	r3, r3, r7
 8005b48:	2204      	movs	r2, #4
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	e06f      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005b4e:	231b      	movs	r3, #27
 8005b50:	2218      	movs	r2, #24
 8005b52:	189b      	adds	r3, r3, r2
 8005b54:	19db      	adds	r3, r3, r7
 8005b56:	2208      	movs	r2, #8
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	e068      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005b5c:	231b      	movs	r3, #27
 8005b5e:	2218      	movs	r2, #24
 8005b60:	189b      	adds	r3, r3, r2
 8005b62:	19db      	adds	r3, r3, r7
 8005b64:	2210      	movs	r2, #16
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	e061      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a7c      	ldr	r2, [pc, #496]	@ (8005d60 <UART_SetConfig+0x35c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d106      	bne.n	8005b82 <UART_SetConfig+0x17e>
 8005b74:	231b      	movs	r3, #27
 8005b76:	2218      	movs	r2, #24
 8005b78:	189b      	adds	r3, r3, r2
 8005b7a:	19db      	adds	r3, r3, r7
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	e055      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a77      	ldr	r2, [pc, #476]	@ (8005d64 <UART_SetConfig+0x360>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d106      	bne.n	8005b9a <UART_SetConfig+0x196>
 8005b8c:	231b      	movs	r3, #27
 8005b8e:	2218      	movs	r2, #24
 8005b90:	189b      	adds	r3, r3, r2
 8005b92:	19db      	adds	r3, r3, r7
 8005b94:	2200      	movs	r2, #0
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	e049      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a6b      	ldr	r2, [pc, #428]	@ (8005d4c <UART_SetConfig+0x348>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d13e      	bne.n	8005c22 <UART_SetConfig+0x21e>
 8005ba4:	4b6c      	ldr	r3, [pc, #432]	@ (8005d58 <UART_SetConfig+0x354>)
 8005ba6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ba8:	23c0      	movs	r3, #192	@ 0xc0
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	4013      	ands	r3, r2
 8005bae:	22c0      	movs	r2, #192	@ 0xc0
 8005bb0:	0112      	lsls	r2, r2, #4
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d027      	beq.n	8005c06 <UART_SetConfig+0x202>
 8005bb6:	22c0      	movs	r2, #192	@ 0xc0
 8005bb8:	0112      	lsls	r2, r2, #4
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d82a      	bhi.n	8005c14 <UART_SetConfig+0x210>
 8005bbe:	2280      	movs	r2, #128	@ 0x80
 8005bc0:	0112      	lsls	r2, r2, #4
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d011      	beq.n	8005bea <UART_SetConfig+0x1e6>
 8005bc6:	2280      	movs	r2, #128	@ 0x80
 8005bc8:	0112      	lsls	r2, r2, #4
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d822      	bhi.n	8005c14 <UART_SetConfig+0x210>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d004      	beq.n	8005bdc <UART_SetConfig+0x1d8>
 8005bd2:	2280      	movs	r2, #128	@ 0x80
 8005bd4:	00d2      	lsls	r2, r2, #3
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00e      	beq.n	8005bf8 <UART_SetConfig+0x1f4>
 8005bda:	e01b      	b.n	8005c14 <UART_SetConfig+0x210>
 8005bdc:	231b      	movs	r3, #27
 8005bde:	2218      	movs	r2, #24
 8005be0:	189b      	adds	r3, r3, r2
 8005be2:	19db      	adds	r3, r3, r7
 8005be4:	2200      	movs	r2, #0
 8005be6:	701a      	strb	r2, [r3, #0]
 8005be8:	e021      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005bea:	231b      	movs	r3, #27
 8005bec:	2218      	movs	r2, #24
 8005bee:	189b      	adds	r3, r3, r2
 8005bf0:	19db      	adds	r3, r3, r7
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	e01a      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005bf8:	231b      	movs	r3, #27
 8005bfa:	2218      	movs	r2, #24
 8005bfc:	189b      	adds	r3, r3, r2
 8005bfe:	19db      	adds	r3, r3, r7
 8005c00:	2204      	movs	r2, #4
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	e013      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005c06:	231b      	movs	r3, #27
 8005c08:	2218      	movs	r2, #24
 8005c0a:	189b      	adds	r3, r3, r2
 8005c0c:	19db      	adds	r3, r3, r7
 8005c0e:	2208      	movs	r2, #8
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e00c      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005c14:	231b      	movs	r3, #27
 8005c16:	2218      	movs	r2, #24
 8005c18:	189b      	adds	r3, r3, r2
 8005c1a:	19db      	adds	r3, r3, r7
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	e005      	b.n	8005c2e <UART_SetConfig+0x22a>
 8005c22:	231b      	movs	r3, #27
 8005c24:	2218      	movs	r2, #24
 8005c26:	189b      	adds	r3, r3, r2
 8005c28:	19db      	adds	r3, r3, r7
 8005c2a:	2210      	movs	r2, #16
 8005c2c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a46      	ldr	r2, [pc, #280]	@ (8005d4c <UART_SetConfig+0x348>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d000      	beq.n	8005c3a <UART_SetConfig+0x236>
 8005c38:	e09a      	b.n	8005d70 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c3a:	231b      	movs	r3, #27
 8005c3c:	2218      	movs	r2, #24
 8005c3e:	189b      	adds	r3, r3, r2
 8005c40:	19db      	adds	r3, r3, r7
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d01d      	beq.n	8005c84 <UART_SetConfig+0x280>
 8005c48:	dc20      	bgt.n	8005c8c <UART_SetConfig+0x288>
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d015      	beq.n	8005c7a <UART_SetConfig+0x276>
 8005c4e:	dc1d      	bgt.n	8005c8c <UART_SetConfig+0x288>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <UART_SetConfig+0x256>
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d005      	beq.n	8005c64 <UART_SetConfig+0x260>
 8005c58:	e018      	b.n	8005c8c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c5a:	f7ff f839 	bl	8004cd0 <HAL_RCC_GetPCLK1Freq>
 8005c5e:	0003      	movs	r3, r0
 8005c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005c62:	e01c      	b.n	8005c9e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c64:	4b3c      	ldr	r3, [pc, #240]	@ (8005d58 <UART_SetConfig+0x354>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2210      	movs	r2, #16
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d002      	beq.n	8005c74 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d68 <UART_SetConfig+0x364>)
 8005c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c72:	e014      	b.n	8005c9e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005c74:	4b3d      	ldr	r3, [pc, #244]	@ (8005d6c <UART_SetConfig+0x368>)
 8005c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005c78:	e011      	b.n	8005c9e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c7a:	f7fe ff99 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 8005c7e:	0003      	movs	r3, r0
 8005c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005c82:	e00c      	b.n	8005c9e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c84:	2380      	movs	r3, #128	@ 0x80
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005c8a:	e008      	b.n	8005c9e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005c90:	231a      	movs	r3, #26
 8005c92:	2218      	movs	r2, #24
 8005c94:	189b      	adds	r3, r3, r2
 8005c96:	19db      	adds	r3, r3, r7
 8005c98:	2201      	movs	r2, #1
 8005c9a:	701a      	strb	r2, [r3, #0]
        break;
 8005c9c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d100      	bne.n	8005ca6 <UART_SetConfig+0x2a2>
 8005ca4:	e133      	b.n	8005f0e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	0013      	movs	r3, r2
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	189b      	adds	r3, r3, r2
 8005cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d305      	bcc.n	8005cc2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d906      	bls.n	8005cd0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005cc2:	231a      	movs	r3, #26
 8005cc4:	2218      	movs	r2, #24
 8005cc6:	189b      	adds	r3, r3, r2
 8005cc8:	19db      	adds	r3, r3, r7
 8005cca:	2201      	movs	r2, #1
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	e11e      	b.n	8005f0e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	6939      	ldr	r1, [r7, #16]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	000b      	movs	r3, r1
 8005cde:	0e1b      	lsrs	r3, r3, #24
 8005ce0:	0010      	movs	r0, r2
 8005ce2:	0205      	lsls	r5, r0, #8
 8005ce4:	431d      	orrs	r5, r3
 8005ce6:	000b      	movs	r3, r1
 8005ce8:	021c      	lsls	r4, r3, #8
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	60bb      	str	r3, [r7, #8]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	68b8      	ldr	r0, [r7, #8]
 8005cf8:	68f9      	ldr	r1, [r7, #12]
 8005cfa:	1900      	adds	r0, r0, r4
 8005cfc:	4169      	adcs	r1, r5
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	2300      	movs	r3, #0
 8005d06:	607b      	str	r3, [r7, #4]
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f7fa fb7c 	bl	8000408 <__aeabi_uldivmod>
 8005d10:	0002      	movs	r2, r0
 8005d12:	000b      	movs	r3, r1
 8005d14:	0013      	movs	r3, r2
 8005d16:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d1a:	23c0      	movs	r3, #192	@ 0xc0
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d309      	bcc.n	8005d36 <UART_SetConfig+0x332>
 8005d22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d24:	2380      	movs	r3, #128	@ 0x80
 8005d26:	035b      	lsls	r3, r3, #13
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d204      	bcs.n	8005d36 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d32:	60da      	str	r2, [r3, #12]
 8005d34:	e0eb      	b.n	8005f0e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005d36:	231a      	movs	r3, #26
 8005d38:	2218      	movs	r2, #24
 8005d3a:	189b      	adds	r3, r3, r2
 8005d3c:	19db      	adds	r3, r3, r7
 8005d3e:	2201      	movs	r2, #1
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	e0e4      	b.n	8005f0e <UART_SetConfig+0x50a>
 8005d44:	efff69f3 	.word	0xefff69f3
 8005d48:	ffffcfff 	.word	0xffffcfff
 8005d4c:	40004800 	.word	0x40004800
 8005d50:	fffff4ff 	.word	0xfffff4ff
 8005d54:	40013800 	.word	0x40013800
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	40004400 	.word	0x40004400
 8005d60:	40004c00 	.word	0x40004c00
 8005d64:	40005000 	.word	0x40005000
 8005d68:	003d0900 	.word	0x003d0900
 8005d6c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	69da      	ldr	r2, [r3, #28]
 8005d74:	2380      	movs	r3, #128	@ 0x80
 8005d76:	021b      	lsls	r3, r3, #8
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d000      	beq.n	8005d7e <UART_SetConfig+0x37a>
 8005d7c:	e070      	b.n	8005e60 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8005d7e:	231b      	movs	r3, #27
 8005d80:	2218      	movs	r2, #24
 8005d82:	189b      	adds	r3, r3, r2
 8005d84:	19db      	adds	r3, r3, r7
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d822      	bhi.n	8005dd2 <UART_SetConfig+0x3ce>
 8005d8c:	009a      	lsls	r2, r3, #2
 8005d8e:	4b67      	ldr	r3, [pc, #412]	@ (8005f2c <UART_SetConfig+0x528>)
 8005d90:	18d3      	adds	r3, r2, r3
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d96:	f7fe ff9b 	bl	8004cd0 <HAL_RCC_GetPCLK1Freq>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005d9e:	e021      	b.n	8005de4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da0:	f7fe ffac 	bl	8004cfc <HAL_RCC_GetPCLK2Freq>
 8005da4:	0003      	movs	r3, r0
 8005da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005da8:	e01c      	b.n	8005de4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005daa:	4b61      	ldr	r3, [pc, #388]	@ (8005f30 <UART_SetConfig+0x52c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2210      	movs	r2, #16
 8005db0:	4013      	ands	r3, r2
 8005db2:	d002      	beq.n	8005dba <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005db4:	4b5f      	ldr	r3, [pc, #380]	@ (8005f34 <UART_SetConfig+0x530>)
 8005db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005db8:	e014      	b.n	8005de4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005dba:	4b5f      	ldr	r3, [pc, #380]	@ (8005f38 <UART_SetConfig+0x534>)
 8005dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005dbe:	e011      	b.n	8005de4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dc0:	f7fe fef6 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 8005dc4:	0003      	movs	r3, r0
 8005dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005dc8:	e00c      	b.n	8005de4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dca:	2380      	movs	r3, #128	@ 0x80
 8005dcc:	021b      	lsls	r3, r3, #8
 8005dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005dd0:	e008      	b.n	8005de4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005dd6:	231a      	movs	r3, #26
 8005dd8:	2218      	movs	r2, #24
 8005dda:	189b      	adds	r3, r3, r2
 8005ddc:	19db      	adds	r3, r3, r7
 8005dde:	2201      	movs	r2, #1
 8005de0:	701a      	strb	r2, [r3, #0]
        break;
 8005de2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d100      	bne.n	8005dec <UART_SetConfig+0x3e8>
 8005dea:	e090      	b.n	8005f0e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dee:	005a      	lsls	r2, r3, #1
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	085b      	lsrs	r3, r3, #1
 8005df6:	18d2      	adds	r2, r2, r3
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	0019      	movs	r1, r3
 8005dfe:	0010      	movs	r0, r2
 8005e00:	f7fa f98c 	bl	800011c <__udivsi3>
 8005e04:	0003      	movs	r3, r0
 8005e06:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0a:	2b0f      	cmp	r3, #15
 8005e0c:	d921      	bls.n	8005e52 <UART_SetConfig+0x44e>
 8005e0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e10:	2380      	movs	r3, #128	@ 0x80
 8005e12:	025b      	lsls	r3, r3, #9
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d21c      	bcs.n	8005e52 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	200e      	movs	r0, #14
 8005e1e:	2418      	movs	r4, #24
 8005e20:	1903      	adds	r3, r0, r4
 8005e22:	19db      	adds	r3, r3, r7
 8005e24:	210f      	movs	r1, #15
 8005e26:	438a      	bics	r2, r1
 8005e28:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2c:	085b      	lsrs	r3, r3, #1
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2207      	movs	r2, #7
 8005e32:	4013      	ands	r3, r2
 8005e34:	b299      	uxth	r1, r3
 8005e36:	1903      	adds	r3, r0, r4
 8005e38:	19db      	adds	r3, r3, r7
 8005e3a:	1902      	adds	r2, r0, r4
 8005e3c:	19d2      	adds	r2, r2, r7
 8005e3e:	8812      	ldrh	r2, [r2, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	1902      	adds	r2, r0, r4
 8005e4a:	19d2      	adds	r2, r2, r7
 8005e4c:	8812      	ldrh	r2, [r2, #0]
 8005e4e:	60da      	str	r2, [r3, #12]
 8005e50:	e05d      	b.n	8005f0e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005e52:	231a      	movs	r3, #26
 8005e54:	2218      	movs	r2, #24
 8005e56:	189b      	adds	r3, r3, r2
 8005e58:	19db      	adds	r3, r3, r7
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	e056      	b.n	8005f0e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e60:	231b      	movs	r3, #27
 8005e62:	2218      	movs	r2, #24
 8005e64:	189b      	adds	r3, r3, r2
 8005e66:	19db      	adds	r3, r3, r7
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d822      	bhi.n	8005eb4 <UART_SetConfig+0x4b0>
 8005e6e:	009a      	lsls	r2, r3, #2
 8005e70:	4b32      	ldr	r3, [pc, #200]	@ (8005f3c <UART_SetConfig+0x538>)
 8005e72:	18d3      	adds	r3, r2, r3
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e78:	f7fe ff2a 	bl	8004cd0 <HAL_RCC_GetPCLK1Freq>
 8005e7c:	0003      	movs	r3, r0
 8005e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005e80:	e021      	b.n	8005ec6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e82:	f7fe ff3b 	bl	8004cfc <HAL_RCC_GetPCLK2Freq>
 8005e86:	0003      	movs	r3, r0
 8005e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005e8a:	e01c      	b.n	8005ec6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e8c:	4b28      	ldr	r3, [pc, #160]	@ (8005f30 <UART_SetConfig+0x52c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2210      	movs	r2, #16
 8005e92:	4013      	ands	r3, r2
 8005e94:	d002      	beq.n	8005e9c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005e96:	4b27      	ldr	r3, [pc, #156]	@ (8005f34 <UART_SetConfig+0x530>)
 8005e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e9a:	e014      	b.n	8005ec6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005e9c:	4b26      	ldr	r3, [pc, #152]	@ (8005f38 <UART_SetConfig+0x534>)
 8005e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005ea0:	e011      	b.n	8005ec6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ea2:	f7fe fe85 	bl	8004bb0 <HAL_RCC_GetSysClockFreq>
 8005ea6:	0003      	movs	r3, r0
 8005ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005eaa:	e00c      	b.n	8005ec6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eac:	2380      	movs	r3, #128	@ 0x80
 8005eae:	021b      	lsls	r3, r3, #8
 8005eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005eb2:	e008      	b.n	8005ec6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005eb8:	231a      	movs	r3, #26
 8005eba:	2218      	movs	r2, #24
 8005ebc:	189b      	adds	r3, r3, r2
 8005ebe:	19db      	adds	r3, r3, r7
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	701a      	strb	r2, [r3, #0]
        break;
 8005ec4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d020      	beq.n	8005f0e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	085a      	lsrs	r2, r3, #1
 8005ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed4:	18d2      	adds	r2, r2, r3
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	0019      	movs	r1, r3
 8005edc:	0010      	movs	r0, r2
 8005ede:	f7fa f91d 	bl	800011c <__udivsi3>
 8005ee2:	0003      	movs	r3, r0
 8005ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee8:	2b0f      	cmp	r3, #15
 8005eea:	d90a      	bls.n	8005f02 <UART_SetConfig+0x4fe>
 8005eec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eee:	2380      	movs	r3, #128	@ 0x80
 8005ef0:	025b      	lsls	r3, r3, #9
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d205      	bcs.n	8005f02 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60da      	str	r2, [r3, #12]
 8005f00:	e005      	b.n	8005f0e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005f02:	231a      	movs	r3, #26
 8005f04:	2218      	movs	r2, #24
 8005f06:	189b      	adds	r3, r3, r2
 8005f08:	19db      	adds	r3, r3, r7
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	2200      	movs	r2, #0
 8005f12:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	2200      	movs	r2, #0
 8005f18:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005f1a:	231a      	movs	r3, #26
 8005f1c:	2218      	movs	r2, #24
 8005f1e:	189b      	adds	r3, r3, r2
 8005f20:	19db      	adds	r3, r3, r7
 8005f22:	781b      	ldrb	r3, [r3, #0]
}
 8005f24:	0018      	movs	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b00e      	add	sp, #56	@ 0x38
 8005f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f2c:	08006fe8 	.word	0x08006fe8
 8005f30:	40021000 	.word	0x40021000
 8005f34:	003d0900 	.word	0x003d0900
 8005f38:	00f42400 	.word	0x00f42400
 8005f3c:	0800700c 	.word	0x0800700c

08005f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d00b      	beq.n	8005f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a4a      	ldr	r2, [pc, #296]	@ (8006084 <UART_AdvFeatureConfig+0x144>)
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	0019      	movs	r1, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6e:	2201      	movs	r2, #1
 8005f70:	4013      	ands	r3, r2
 8005f72:	d00b      	beq.n	8005f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	4a43      	ldr	r2, [pc, #268]	@ (8006088 <UART_AdvFeatureConfig+0x148>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	0019      	movs	r1, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f90:	2202      	movs	r2, #2
 8005f92:	4013      	ands	r3, r2
 8005f94:	d00b      	beq.n	8005fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4a3b      	ldr	r2, [pc, #236]	@ (800608c <UART_AdvFeatureConfig+0x14c>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	0019      	movs	r1, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb2:	2204      	movs	r2, #4
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	d00b      	beq.n	8005fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	4a34      	ldr	r2, [pc, #208]	@ (8006090 <UART_AdvFeatureConfig+0x150>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd4:	2210      	movs	r2, #16
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	4a2c      	ldr	r2, [pc, #176]	@ (8006094 <UART_AdvFeatureConfig+0x154>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	0019      	movs	r1, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	d00b      	beq.n	8006014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	4a25      	ldr	r2, [pc, #148]	@ (8006098 <UART_AdvFeatureConfig+0x158>)
 8006004:	4013      	ands	r3, r2
 8006006:	0019      	movs	r1, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006018:	2240      	movs	r2, #64	@ 0x40
 800601a:	4013      	ands	r3, r2
 800601c:	d01d      	beq.n	800605a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	4a1d      	ldr	r2, [pc, #116]	@ (800609c <UART_AdvFeatureConfig+0x15c>)
 8006026:	4013      	ands	r3, r2
 8006028:	0019      	movs	r1, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800603a:	2380      	movs	r3, #128	@ 0x80
 800603c:	035b      	lsls	r3, r3, #13
 800603e:	429a      	cmp	r2, r3
 8006040:	d10b      	bne.n	800605a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	4a15      	ldr	r2, [pc, #84]	@ (80060a0 <UART_AdvFeatureConfig+0x160>)
 800604a:	4013      	ands	r3, r2
 800604c:	0019      	movs	r1, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605e:	2280      	movs	r2, #128	@ 0x80
 8006060:	4013      	ands	r3, r2
 8006062:	d00b      	beq.n	800607c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	4a0e      	ldr	r2, [pc, #56]	@ (80060a4 <UART_AdvFeatureConfig+0x164>)
 800606c:	4013      	ands	r3, r2
 800606e:	0019      	movs	r1, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]
  }
}
 800607c:	46c0      	nop			@ (mov r8, r8)
 800607e:	46bd      	mov	sp, r7
 8006080:	b002      	add	sp, #8
 8006082:	bd80      	pop	{r7, pc}
 8006084:	ffff7fff 	.word	0xffff7fff
 8006088:	fffdffff 	.word	0xfffdffff
 800608c:	fffeffff 	.word	0xfffeffff
 8006090:	fffbffff 	.word	0xfffbffff
 8006094:	ffffefff 	.word	0xffffefff
 8006098:	ffffdfff 	.word	0xffffdfff
 800609c:	ffefffff 	.word	0xffefffff
 80060a0:	ff9fffff 	.word	0xff9fffff
 80060a4:	fff7ffff 	.word	0xfff7ffff

080060a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b092      	sub	sp, #72	@ 0x48
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2284      	movs	r2, #132	@ 0x84
 80060b4:	2100      	movs	r1, #0
 80060b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060b8:	f7fc f88c 	bl	80021d4 <HAL_GetTick>
 80060bc:	0003      	movs	r3, r0
 80060be:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2208      	movs	r2, #8
 80060c8:	4013      	ands	r3, r2
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d12c      	bne.n	8006128 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d0:	2280      	movs	r2, #128	@ 0x80
 80060d2:	0391      	lsls	r1, r2, #14
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	4a46      	ldr	r2, [pc, #280]	@ (80061f0 <UART_CheckIdleState+0x148>)
 80060d8:	9200      	str	r2, [sp, #0]
 80060da:	2200      	movs	r2, #0
 80060dc:	f000 f88c 	bl	80061f8 <UART_WaitOnFlagUntilTimeout>
 80060e0:	1e03      	subs	r3, r0, #0
 80060e2:	d021      	beq.n	8006128 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060e4:	f3ef 8310 	mrs	r3, PRIMASK
 80060e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80060ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060ee:	2301      	movs	r3, #1
 80060f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f4:	f383 8810 	msr	PRIMASK, r3
}
 80060f8:	46c0      	nop			@ (mov r8, r8)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2180      	movs	r1, #128	@ 0x80
 8006106:	438a      	bics	r2, r1
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800610e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006110:	f383 8810 	msr	PRIMASK, r3
}
 8006114:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2278      	movs	r2, #120	@ 0x78
 8006120:	2100      	movs	r1, #0
 8006122:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e05f      	b.n	80061e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2204      	movs	r2, #4
 8006130:	4013      	ands	r3, r2
 8006132:	2b04      	cmp	r3, #4
 8006134:	d146      	bne.n	80061c4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006138:	2280      	movs	r2, #128	@ 0x80
 800613a:	03d1      	lsls	r1, r2, #15
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4a2c      	ldr	r2, [pc, #176]	@ (80061f0 <UART_CheckIdleState+0x148>)
 8006140:	9200      	str	r2, [sp, #0]
 8006142:	2200      	movs	r2, #0
 8006144:	f000 f858 	bl	80061f8 <UART_WaitOnFlagUntilTimeout>
 8006148:	1e03      	subs	r3, r0, #0
 800614a:	d03b      	beq.n	80061c4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800614c:	f3ef 8310 	mrs	r3, PRIMASK
 8006150:	60fb      	str	r3, [r7, #12]
  return(result);
 8006152:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
 8006156:	2301      	movs	r3, #1
 8006158:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f383 8810 	msr	PRIMASK, r3
}
 8006160:	46c0      	nop			@ (mov r8, r8)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4921      	ldr	r1, [pc, #132]	@ (80061f4 <UART_CheckIdleState+0x14c>)
 800616e:	400a      	ands	r2, r1
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006174:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f383 8810 	msr	PRIMASK, r3
}
 800617c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617e:	f3ef 8310 	mrs	r3, PRIMASK
 8006182:	61bb      	str	r3, [r7, #24]
  return(result);
 8006184:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	633b      	str	r3, [r7, #48]	@ 0x30
 8006188:	2301      	movs	r3, #1
 800618a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f383 8810 	msr	PRIMASK, r3
}
 8006192:	46c0      	nop			@ (mov r8, r8)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2101      	movs	r1, #1
 80061a0:	438a      	bics	r2, r1
 80061a2:	609a      	str	r2, [r3, #8]
 80061a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	f383 8810 	msr	PRIMASK, r3
}
 80061ae:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2280      	movs	r2, #128	@ 0x80
 80061b4:	2120      	movs	r1, #32
 80061b6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2278      	movs	r2, #120	@ 0x78
 80061bc:	2100      	movs	r1, #0
 80061be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e011      	b.n	80061e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2220      	movs	r2, #32
 80061c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2280      	movs	r2, #128	@ 0x80
 80061ce:	2120      	movs	r1, #32
 80061d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2278      	movs	r2, #120	@ 0x78
 80061e2:	2100      	movs	r1, #0
 80061e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	0018      	movs	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	b010      	add	sp, #64	@ 0x40
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	01ffffff 	.word	0x01ffffff
 80061f4:	fffffedf 	.word	0xfffffedf

080061f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	1dfb      	adds	r3, r7, #7
 8006206:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006208:	e051      	b.n	80062ae <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	3301      	adds	r3, #1
 800620e:	d04e      	beq.n	80062ae <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006210:	f7fb ffe0 	bl	80021d4 <HAL_GetTick>
 8006214:	0002      	movs	r2, r0
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	429a      	cmp	r2, r3
 800621e:	d302      	bcc.n	8006226 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e051      	b.n	80062ce <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2204      	movs	r2, #4
 8006232:	4013      	ands	r3, r2
 8006234:	d03b      	beq.n	80062ae <UART_WaitOnFlagUntilTimeout+0xb6>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b80      	cmp	r3, #128	@ 0x80
 800623a:	d038      	beq.n	80062ae <UART_WaitOnFlagUntilTimeout+0xb6>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b40      	cmp	r3, #64	@ 0x40
 8006240:	d035      	beq.n	80062ae <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	2208      	movs	r2, #8
 800624a:	4013      	ands	r3, r2
 800624c:	2b08      	cmp	r3, #8
 800624e:	d111      	bne.n	8006274 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2208      	movs	r2, #8
 8006256:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	0018      	movs	r0, r3
 800625c:	f000 f83c 	bl	80062d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2284      	movs	r2, #132	@ 0x84
 8006264:	2108      	movs	r1, #8
 8006266:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2278      	movs	r2, #120	@ 0x78
 800626c:	2100      	movs	r1, #0
 800626e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e02c      	b.n	80062ce <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69da      	ldr	r2, [r3, #28]
 800627a:	2380      	movs	r3, #128	@ 0x80
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	401a      	ands	r2, r3
 8006280:	2380      	movs	r3, #128	@ 0x80
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	429a      	cmp	r2, r3
 8006286:	d112      	bne.n	80062ae <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2280      	movs	r2, #128	@ 0x80
 800628e:	0112      	lsls	r2, r2, #4
 8006290:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	0018      	movs	r0, r3
 8006296:	f000 f81f 	bl	80062d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2284      	movs	r2, #132	@ 0x84
 800629e:	2120      	movs	r1, #32
 80062a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2278      	movs	r2, #120	@ 0x78
 80062a6:	2100      	movs	r1, #0
 80062a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e00f      	b.n	80062ce <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	4013      	ands	r3, r2
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	425a      	negs	r2, r3
 80062be:	4153      	adcs	r3, r2
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	001a      	movs	r2, r3
 80062c4:	1dfb      	adds	r3, r7, #7
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d09e      	beq.n	800620a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	0018      	movs	r0, r3
 80062d0:	46bd      	mov	sp, r7
 80062d2:	b004      	add	sp, #16
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08e      	sub	sp, #56	@ 0x38
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062e0:	f3ef 8310 	mrs	r3, PRIMASK
 80062e4:	617b      	str	r3, [r7, #20]
  return(result);
 80062e6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ea:	2301      	movs	r3, #1
 80062ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	f383 8810 	msr	PRIMASK, r3
}
 80062f4:	46c0      	nop			@ (mov r8, r8)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4926      	ldr	r1, [pc, #152]	@ (800639c <UART_EndRxTransfer+0xc4>)
 8006302:	400a      	ands	r2, r1
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006308:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	f383 8810 	msr	PRIMASK, r3
}
 8006310:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006312:	f3ef 8310 	mrs	r3, PRIMASK
 8006316:	623b      	str	r3, [r7, #32]
  return(result);
 8006318:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631a:	633b      	str	r3, [r7, #48]	@ 0x30
 800631c:	2301      	movs	r3, #1
 800631e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006322:	f383 8810 	msr	PRIMASK, r3
}
 8006326:	46c0      	nop			@ (mov r8, r8)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689a      	ldr	r2, [r3, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2101      	movs	r1, #1
 8006334:	438a      	bics	r2, r1
 8006336:	609a      	str	r2, [r3, #8]
 8006338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633e:	f383 8810 	msr	PRIMASK, r3
}
 8006342:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006348:	2b01      	cmp	r3, #1
 800634a:	d118      	bne.n	800637e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800634c:	f3ef 8310 	mrs	r3, PRIMASK
 8006350:	60bb      	str	r3, [r7, #8]
  return(result);
 8006352:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006356:	2301      	movs	r3, #1
 8006358:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f383 8810 	msr	PRIMASK, r3
}
 8006360:	46c0      	nop			@ (mov r8, r8)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2110      	movs	r1, #16
 800636e:	438a      	bics	r2, r1
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006374:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f383 8810 	msr	PRIMASK, r3
}
 800637c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2280      	movs	r2, #128	@ 0x80
 8006382:	2120      	movs	r1, #32
 8006384:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006392:	46c0      	nop			@ (mov r8, r8)
 8006394:	46bd      	mov	sp, r7
 8006396:	b00e      	add	sp, #56	@ 0x38
 8006398:	bd80      	pop	{r7, pc}
 800639a:	46c0      	nop			@ (mov r8, r8)
 800639c:	fffffedf 	.word	0xfffffedf

080063a0 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	1dbb      	adds	r3, r7, #6
 80063ae:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2280      	movs	r2, #128	@ 0x80
 80063b4:	589b      	ldr	r3, [r3, r2]
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d000      	beq.n	80063bc <HAL_UARTEx_ReceiveToIdle+0x1c>
 80063ba:	e109      	b.n	80065d0 <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_UARTEx_ReceiveToIdle+0x2a>
 80063c2:	1dbb      	adds	r3, r7, #6
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e101      	b.n	80065d2 <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	2380      	movs	r3, #128	@ 0x80
 80063d4:	015b      	lsls	r3, r3, #5
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d109      	bne.n	80063ee <HAL_UARTEx_ReceiveToIdle+0x4e>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d105      	bne.n	80063ee <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2201      	movs	r2, #1
 80063e6:	4013      	ands	r3, r2
 80063e8:	d001      	beq.n	80063ee <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e0f1      	b.n	80065d2 <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2284      	movs	r2, #132	@ 0x84
 80063f2:	2100      	movs	r1, #0
 80063f4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2280      	movs	r2, #128	@ 0x80
 80063fa:	2122      	movs	r1, #34	@ 0x22
 80063fc:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2201      	movs	r2, #1
 8006402:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800640a:	f7fb fee3 	bl	80021d4 <HAL_GetTick>
 800640e:	0003      	movs	r3, r0
 8006410:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1dba      	adds	r2, r7, #6
 8006416:	2158      	movs	r1, #88	@ 0x58
 8006418:	8812      	ldrh	r2, [r2, #0]
 800641a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	1dba      	adds	r2, r7, #6
 8006420:	215a      	movs	r1, #90	@ 0x5a
 8006422:	8812      	ldrh	r2, [r2, #0]
 8006424:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	2380      	movs	r3, #128	@ 0x80
 800642c:	015b      	lsls	r3, r3, #5
 800642e:	429a      	cmp	r2, r3
 8006430:	d10d      	bne.n	800644e <HAL_UARTEx_ReceiveToIdle+0xae>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d104      	bne.n	8006444 <HAL_UARTEx_ReceiveToIdle+0xa4>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	225c      	movs	r2, #92	@ 0x5c
 800643e:	4967      	ldr	r1, [pc, #412]	@ (80065dc <HAL_UARTEx_ReceiveToIdle+0x23c>)
 8006440:	5299      	strh	r1, [r3, r2]
 8006442:	e02e      	b.n	80064a2 <HAL_UARTEx_ReceiveToIdle+0x102>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	225c      	movs	r2, #92	@ 0x5c
 8006448:	21ff      	movs	r1, #255	@ 0xff
 800644a:	5299      	strh	r1, [r3, r2]
 800644c:	e029      	b.n	80064a2 <HAL_UARTEx_ReceiveToIdle+0x102>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10d      	bne.n	8006472 <HAL_UARTEx_ReceiveToIdle+0xd2>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d104      	bne.n	8006468 <HAL_UARTEx_ReceiveToIdle+0xc8>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	225c      	movs	r2, #92	@ 0x5c
 8006462:	21ff      	movs	r1, #255	@ 0xff
 8006464:	5299      	strh	r1, [r3, r2]
 8006466:	e01c      	b.n	80064a2 <HAL_UARTEx_ReceiveToIdle+0x102>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	225c      	movs	r2, #92	@ 0x5c
 800646c:	217f      	movs	r1, #127	@ 0x7f
 800646e:	5299      	strh	r1, [r3, r2]
 8006470:	e017      	b.n	80064a2 <HAL_UARTEx_ReceiveToIdle+0x102>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	2380      	movs	r3, #128	@ 0x80
 8006478:	055b      	lsls	r3, r3, #21
 800647a:	429a      	cmp	r2, r3
 800647c:	d10d      	bne.n	800649a <HAL_UARTEx_ReceiveToIdle+0xfa>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d104      	bne.n	8006490 <HAL_UARTEx_ReceiveToIdle+0xf0>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	225c      	movs	r2, #92	@ 0x5c
 800648a:	217f      	movs	r1, #127	@ 0x7f
 800648c:	5299      	strh	r1, [r3, r2]
 800648e:	e008      	b.n	80064a2 <HAL_UARTEx_ReceiveToIdle+0x102>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	225c      	movs	r2, #92	@ 0x5c
 8006494:	213f      	movs	r1, #63	@ 0x3f
 8006496:	5299      	strh	r1, [r3, r2]
 8006498:	e003      	b.n	80064a2 <HAL_UARTEx_ReceiveToIdle+0x102>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	225c      	movs	r2, #92	@ 0x5c
 800649e:	2100      	movs	r1, #0
 80064a0:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80064a2:	2312      	movs	r3, #18
 80064a4:	18fb      	adds	r3, r7, r3
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	215c      	movs	r1, #92	@ 0x5c
 80064aa:	5a52      	ldrh	r2, [r2, r1]
 80064ac:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	2380      	movs	r3, #128	@ 0x80
 80064b4:	015b      	lsls	r3, r3, #5
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d108      	bne.n	80064cc <HAL_UARTEx_ReceiveToIdle+0x12c>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d104      	bne.n	80064cc <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	e003      	b.n	80064d4 <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2200      	movs	r2, #0
 80064d8:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80064da:	e062      	b.n	80065a2 <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	2210      	movs	r2, #16
 80064e4:	4013      	ands	r3, r2
 80064e6:	2b10      	cmp	r3, #16
 80064e8:	d110      	bne.n	800650c <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2210      	movs	r2, #16
 80064f0:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d008      	beq.n	800650c <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2202      	movs	r2, #2
 80064fe:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2280      	movs	r2, #128	@ 0x80
 8006504:	2120      	movs	r1, #32
 8006506:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	e062      	b.n	80065d2 <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	2220      	movs	r2, #32
 8006514:	4013      	ands	r3, r2
 8006516:	2b20      	cmp	r3, #32
 8006518:	d12f      	bne.n	800657a <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10e      	bne.n	800653e <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006526:	b29b      	uxth	r3, r3
 8006528:	2212      	movs	r2, #18
 800652a:	18ba      	adds	r2, r7, r2
 800652c:	8812      	ldrh	r2, [r2, #0]
 800652e:	4013      	ands	r3, r2
 8006530:	b29a      	uxth	r2, r3
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	3302      	adds	r3, #2
 800653a:	61bb      	str	r3, [r7, #24]
 800653c:	e00e      	b.n	800655c <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2212      	movs	r2, #18
 8006548:	18ba      	adds	r2, r7, r2
 800654a:	8812      	ldrh	r2, [r2, #0]
 800654c:	b2d2      	uxtb	r2, r2
 800654e:	4013      	ands	r3, r2
 8006550:	b2da      	uxtb	r2, r3
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	3301      	adds	r3, #1
 800655a:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	3301      	adds	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	225a      	movs	r2, #90	@ 0x5a
 800656c:	5a9b      	ldrh	r3, [r3, r2]
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b299      	uxth	r1, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	225a      	movs	r2, #90	@ 0x5a
 8006578:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800657a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657c:	3301      	adds	r3, #1
 800657e:	d010      	beq.n	80065a2 <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006580:	f7fb fe28 	bl	80021d4 <HAL_GetTick>
 8006584:	0002      	movs	r2, r0
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800658c:	429a      	cmp	r2, r3
 800658e:	d302      	bcc.n	8006596 <HAL_UARTEx_ReceiveToIdle+0x1f6>
 8006590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006592:	2b00      	cmp	r3, #0
 8006594:	d105      	bne.n	80065a2 <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2280      	movs	r2, #128	@ 0x80
 800659a:	2120      	movs	r1, #32
 800659c:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e017      	b.n	80065d2 <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	225a      	movs	r2, #90	@ 0x5a
 80065a6:	5a9b      	ldrh	r3, [r3, r2]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d196      	bne.n	80064dc <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2258      	movs	r2, #88	@ 0x58
 80065b2:	5a9a      	ldrh	r2, [r3, r2]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	215a      	movs	r1, #90	@ 0x5a
 80065b8:	5a5b      	ldrh	r3, [r3, r1]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	b29a      	uxth	r2, r3
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2280      	movs	r2, #128	@ 0x80
 80065c8:	2120      	movs	r1, #32
 80065ca:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	e000      	b.n	80065d2 <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 80065d0:	2302      	movs	r3, #2
  }
}
 80065d2:	0018      	movs	r0, r3
 80065d4:	46bd      	mov	sp, r7
 80065d6:	b008      	add	sp, #32
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	46c0      	nop			@ (mov r8, r8)
 80065dc:	000001ff 	.word	0x000001ff

080065e0 <sniprintf>:
 80065e0:	b40c      	push	{r2, r3}
 80065e2:	b530      	push	{r4, r5, lr}
 80065e4:	4b18      	ldr	r3, [pc, #96]	@ (8006648 <sniprintf+0x68>)
 80065e6:	000c      	movs	r4, r1
 80065e8:	681d      	ldr	r5, [r3, #0]
 80065ea:	b09d      	sub	sp, #116	@ 0x74
 80065ec:	2900      	cmp	r1, #0
 80065ee:	da08      	bge.n	8006602 <sniprintf+0x22>
 80065f0:	238b      	movs	r3, #139	@ 0x8b
 80065f2:	2001      	movs	r0, #1
 80065f4:	602b      	str	r3, [r5, #0]
 80065f6:	4240      	negs	r0, r0
 80065f8:	b01d      	add	sp, #116	@ 0x74
 80065fa:	bc30      	pop	{r4, r5}
 80065fc:	bc08      	pop	{r3}
 80065fe:	b002      	add	sp, #8
 8006600:	4718      	bx	r3
 8006602:	2382      	movs	r3, #130	@ 0x82
 8006604:	466a      	mov	r2, sp
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	8293      	strh	r3, [r2, #20]
 800660a:	2300      	movs	r3, #0
 800660c:	9002      	str	r0, [sp, #8]
 800660e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006610:	9006      	str	r0, [sp, #24]
 8006612:	4299      	cmp	r1, r3
 8006614:	d000      	beq.n	8006618 <sniprintf+0x38>
 8006616:	1e4b      	subs	r3, r1, #1
 8006618:	9304      	str	r3, [sp, #16]
 800661a:	9307      	str	r3, [sp, #28]
 800661c:	2301      	movs	r3, #1
 800661e:	466a      	mov	r2, sp
 8006620:	425b      	negs	r3, r3
 8006622:	82d3      	strh	r3, [r2, #22]
 8006624:	0028      	movs	r0, r5
 8006626:	ab21      	add	r3, sp, #132	@ 0x84
 8006628:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800662a:	a902      	add	r1, sp, #8
 800662c:	9301      	str	r3, [sp, #4]
 800662e:	f000 f99d 	bl	800696c <_svfiprintf_r>
 8006632:	1c43      	adds	r3, r0, #1
 8006634:	da01      	bge.n	800663a <sniprintf+0x5a>
 8006636:	238b      	movs	r3, #139	@ 0x8b
 8006638:	602b      	str	r3, [r5, #0]
 800663a:	2c00      	cmp	r4, #0
 800663c:	d0dc      	beq.n	80065f8 <sniprintf+0x18>
 800663e:	2200      	movs	r2, #0
 8006640:	9b02      	ldr	r3, [sp, #8]
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	e7d8      	b.n	80065f8 <sniprintf+0x18>
 8006646:	46c0      	nop			@ (mov r8, r8)
 8006648:	20000010 	.word	0x20000010

0800664c <memset>:
 800664c:	0003      	movs	r3, r0
 800664e:	1882      	adds	r2, r0, r2
 8006650:	4293      	cmp	r3, r2
 8006652:	d100      	bne.n	8006656 <memset+0xa>
 8006654:	4770      	bx	lr
 8006656:	7019      	strb	r1, [r3, #0]
 8006658:	3301      	adds	r3, #1
 800665a:	e7f9      	b.n	8006650 <memset+0x4>

0800665c <__errno>:
 800665c:	4b01      	ldr	r3, [pc, #4]	@ (8006664 <__errno+0x8>)
 800665e:	6818      	ldr	r0, [r3, #0]
 8006660:	4770      	bx	lr
 8006662:	46c0      	nop			@ (mov r8, r8)
 8006664:	20000010 	.word	0x20000010

08006668 <__libc_init_array>:
 8006668:	b570      	push	{r4, r5, r6, lr}
 800666a:	2600      	movs	r6, #0
 800666c:	4c0c      	ldr	r4, [pc, #48]	@ (80066a0 <__libc_init_array+0x38>)
 800666e:	4d0d      	ldr	r5, [pc, #52]	@ (80066a4 <__libc_init_array+0x3c>)
 8006670:	1b64      	subs	r4, r4, r5
 8006672:	10a4      	asrs	r4, r4, #2
 8006674:	42a6      	cmp	r6, r4
 8006676:	d109      	bne.n	800668c <__libc_init_array+0x24>
 8006678:	2600      	movs	r6, #0
 800667a:	f000 fc61 	bl	8006f40 <_init>
 800667e:	4c0a      	ldr	r4, [pc, #40]	@ (80066a8 <__libc_init_array+0x40>)
 8006680:	4d0a      	ldr	r5, [pc, #40]	@ (80066ac <__libc_init_array+0x44>)
 8006682:	1b64      	subs	r4, r4, r5
 8006684:	10a4      	asrs	r4, r4, #2
 8006686:	42a6      	cmp	r6, r4
 8006688:	d105      	bne.n	8006696 <__libc_init_array+0x2e>
 800668a:	bd70      	pop	{r4, r5, r6, pc}
 800668c:	00b3      	lsls	r3, r6, #2
 800668e:	58eb      	ldr	r3, [r5, r3]
 8006690:	4798      	blx	r3
 8006692:	3601      	adds	r6, #1
 8006694:	e7ee      	b.n	8006674 <__libc_init_array+0xc>
 8006696:	00b3      	lsls	r3, r6, #2
 8006698:	58eb      	ldr	r3, [r5, r3]
 800669a:	4798      	blx	r3
 800669c:	3601      	adds	r6, #1
 800669e:	e7f2      	b.n	8006686 <__libc_init_array+0x1e>
 80066a0:	0800706c 	.word	0x0800706c
 80066a4:	0800706c 	.word	0x0800706c
 80066a8:	08007070 	.word	0x08007070
 80066ac:	0800706c 	.word	0x0800706c

080066b0 <__retarget_lock_acquire_recursive>:
 80066b0:	4770      	bx	lr

080066b2 <__retarget_lock_release_recursive>:
 80066b2:	4770      	bx	lr

080066b4 <_free_r>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	0005      	movs	r5, r0
 80066b8:	1e0c      	subs	r4, r1, #0
 80066ba:	d010      	beq.n	80066de <_free_r+0x2a>
 80066bc:	3c04      	subs	r4, #4
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	da00      	bge.n	80066c6 <_free_r+0x12>
 80066c4:	18e4      	adds	r4, r4, r3
 80066c6:	0028      	movs	r0, r5
 80066c8:	f000 f8e0 	bl	800688c <__malloc_lock>
 80066cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006744 <_free_r+0x90>)
 80066ce:	6813      	ldr	r3, [r2, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d105      	bne.n	80066e0 <_free_r+0x2c>
 80066d4:	6063      	str	r3, [r4, #4]
 80066d6:	6014      	str	r4, [r2, #0]
 80066d8:	0028      	movs	r0, r5
 80066da:	f000 f8df 	bl	800689c <__malloc_unlock>
 80066de:	bd70      	pop	{r4, r5, r6, pc}
 80066e0:	42a3      	cmp	r3, r4
 80066e2:	d908      	bls.n	80066f6 <_free_r+0x42>
 80066e4:	6820      	ldr	r0, [r4, #0]
 80066e6:	1821      	adds	r1, r4, r0
 80066e8:	428b      	cmp	r3, r1
 80066ea:	d1f3      	bne.n	80066d4 <_free_r+0x20>
 80066ec:	6819      	ldr	r1, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	1809      	adds	r1, r1, r0
 80066f2:	6021      	str	r1, [r4, #0]
 80066f4:	e7ee      	b.n	80066d4 <_free_r+0x20>
 80066f6:	001a      	movs	r2, r3
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <_free_r+0x4e>
 80066fe:	42a3      	cmp	r3, r4
 8006700:	d9f9      	bls.n	80066f6 <_free_r+0x42>
 8006702:	6811      	ldr	r1, [r2, #0]
 8006704:	1850      	adds	r0, r2, r1
 8006706:	42a0      	cmp	r0, r4
 8006708:	d10b      	bne.n	8006722 <_free_r+0x6e>
 800670a:	6820      	ldr	r0, [r4, #0]
 800670c:	1809      	adds	r1, r1, r0
 800670e:	1850      	adds	r0, r2, r1
 8006710:	6011      	str	r1, [r2, #0]
 8006712:	4283      	cmp	r3, r0
 8006714:	d1e0      	bne.n	80066d8 <_free_r+0x24>
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	1841      	adds	r1, r0, r1
 800671c:	6011      	str	r1, [r2, #0]
 800671e:	6053      	str	r3, [r2, #4]
 8006720:	e7da      	b.n	80066d8 <_free_r+0x24>
 8006722:	42a0      	cmp	r0, r4
 8006724:	d902      	bls.n	800672c <_free_r+0x78>
 8006726:	230c      	movs	r3, #12
 8006728:	602b      	str	r3, [r5, #0]
 800672a:	e7d5      	b.n	80066d8 <_free_r+0x24>
 800672c:	6820      	ldr	r0, [r4, #0]
 800672e:	1821      	adds	r1, r4, r0
 8006730:	428b      	cmp	r3, r1
 8006732:	d103      	bne.n	800673c <_free_r+0x88>
 8006734:	6819      	ldr	r1, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	1809      	adds	r1, r1, r0
 800673a:	6021      	str	r1, [r4, #0]
 800673c:	6063      	str	r3, [r4, #4]
 800673e:	6054      	str	r4, [r2, #4]
 8006740:	e7ca      	b.n	80066d8 <_free_r+0x24>
 8006742:	46c0      	nop			@ (mov r8, r8)
 8006744:	200005cc 	.word	0x200005cc

08006748 <sbrk_aligned>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	4e0f      	ldr	r6, [pc, #60]	@ (8006788 <sbrk_aligned+0x40>)
 800674c:	000d      	movs	r5, r1
 800674e:	6831      	ldr	r1, [r6, #0]
 8006750:	0004      	movs	r4, r0
 8006752:	2900      	cmp	r1, #0
 8006754:	d102      	bne.n	800675c <sbrk_aligned+0x14>
 8006756:	f000 fb95 	bl	8006e84 <_sbrk_r>
 800675a:	6030      	str	r0, [r6, #0]
 800675c:	0029      	movs	r1, r5
 800675e:	0020      	movs	r0, r4
 8006760:	f000 fb90 	bl	8006e84 <_sbrk_r>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d103      	bne.n	8006770 <sbrk_aligned+0x28>
 8006768:	2501      	movs	r5, #1
 800676a:	426d      	negs	r5, r5
 800676c:	0028      	movs	r0, r5
 800676e:	bd70      	pop	{r4, r5, r6, pc}
 8006770:	2303      	movs	r3, #3
 8006772:	1cc5      	adds	r5, r0, #3
 8006774:	439d      	bics	r5, r3
 8006776:	42a8      	cmp	r0, r5
 8006778:	d0f8      	beq.n	800676c <sbrk_aligned+0x24>
 800677a:	1a29      	subs	r1, r5, r0
 800677c:	0020      	movs	r0, r4
 800677e:	f000 fb81 	bl	8006e84 <_sbrk_r>
 8006782:	3001      	adds	r0, #1
 8006784:	d1f2      	bne.n	800676c <sbrk_aligned+0x24>
 8006786:	e7ef      	b.n	8006768 <sbrk_aligned+0x20>
 8006788:	200005c8 	.word	0x200005c8

0800678c <_malloc_r>:
 800678c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800678e:	2203      	movs	r2, #3
 8006790:	1ccb      	adds	r3, r1, #3
 8006792:	4393      	bics	r3, r2
 8006794:	3308      	adds	r3, #8
 8006796:	0005      	movs	r5, r0
 8006798:	001f      	movs	r7, r3
 800679a:	2b0c      	cmp	r3, #12
 800679c:	d234      	bcs.n	8006808 <_malloc_r+0x7c>
 800679e:	270c      	movs	r7, #12
 80067a0:	42b9      	cmp	r1, r7
 80067a2:	d833      	bhi.n	800680c <_malloc_r+0x80>
 80067a4:	0028      	movs	r0, r5
 80067a6:	f000 f871 	bl	800688c <__malloc_lock>
 80067aa:	4e37      	ldr	r6, [pc, #220]	@ (8006888 <_malloc_r+0xfc>)
 80067ac:	6833      	ldr	r3, [r6, #0]
 80067ae:	001c      	movs	r4, r3
 80067b0:	2c00      	cmp	r4, #0
 80067b2:	d12f      	bne.n	8006814 <_malloc_r+0x88>
 80067b4:	0039      	movs	r1, r7
 80067b6:	0028      	movs	r0, r5
 80067b8:	f7ff ffc6 	bl	8006748 <sbrk_aligned>
 80067bc:	0004      	movs	r4, r0
 80067be:	1c43      	adds	r3, r0, #1
 80067c0:	d15f      	bne.n	8006882 <_malloc_r+0xf6>
 80067c2:	6834      	ldr	r4, [r6, #0]
 80067c4:	9400      	str	r4, [sp, #0]
 80067c6:	9b00      	ldr	r3, [sp, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d14a      	bne.n	8006862 <_malloc_r+0xd6>
 80067cc:	2c00      	cmp	r4, #0
 80067ce:	d052      	beq.n	8006876 <_malloc_r+0xea>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	0028      	movs	r0, r5
 80067d4:	18e3      	adds	r3, r4, r3
 80067d6:	9900      	ldr	r1, [sp, #0]
 80067d8:	9301      	str	r3, [sp, #4]
 80067da:	f000 fb53 	bl	8006e84 <_sbrk_r>
 80067de:	9b01      	ldr	r3, [sp, #4]
 80067e0:	4283      	cmp	r3, r0
 80067e2:	d148      	bne.n	8006876 <_malloc_r+0xea>
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	0028      	movs	r0, r5
 80067e8:	1aff      	subs	r7, r7, r3
 80067ea:	0039      	movs	r1, r7
 80067ec:	f7ff ffac 	bl	8006748 <sbrk_aligned>
 80067f0:	3001      	adds	r0, #1
 80067f2:	d040      	beq.n	8006876 <_malloc_r+0xea>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	19db      	adds	r3, r3, r7
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	6833      	ldr	r3, [r6, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	2a00      	cmp	r2, #0
 8006800:	d133      	bne.n	800686a <_malloc_r+0xde>
 8006802:	9b00      	ldr	r3, [sp, #0]
 8006804:	6033      	str	r3, [r6, #0]
 8006806:	e019      	b.n	800683c <_malloc_r+0xb0>
 8006808:	2b00      	cmp	r3, #0
 800680a:	dac9      	bge.n	80067a0 <_malloc_r+0x14>
 800680c:	230c      	movs	r3, #12
 800680e:	602b      	str	r3, [r5, #0]
 8006810:	2000      	movs	r0, #0
 8006812:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006814:	6821      	ldr	r1, [r4, #0]
 8006816:	1bc9      	subs	r1, r1, r7
 8006818:	d420      	bmi.n	800685c <_malloc_r+0xd0>
 800681a:	290b      	cmp	r1, #11
 800681c:	d90a      	bls.n	8006834 <_malloc_r+0xa8>
 800681e:	19e2      	adds	r2, r4, r7
 8006820:	6027      	str	r7, [r4, #0]
 8006822:	42a3      	cmp	r3, r4
 8006824:	d104      	bne.n	8006830 <_malloc_r+0xa4>
 8006826:	6032      	str	r2, [r6, #0]
 8006828:	6863      	ldr	r3, [r4, #4]
 800682a:	6011      	str	r1, [r2, #0]
 800682c:	6053      	str	r3, [r2, #4]
 800682e:	e005      	b.n	800683c <_malloc_r+0xb0>
 8006830:	605a      	str	r2, [r3, #4]
 8006832:	e7f9      	b.n	8006828 <_malloc_r+0x9c>
 8006834:	6862      	ldr	r2, [r4, #4]
 8006836:	42a3      	cmp	r3, r4
 8006838:	d10e      	bne.n	8006858 <_malloc_r+0xcc>
 800683a:	6032      	str	r2, [r6, #0]
 800683c:	0028      	movs	r0, r5
 800683e:	f000 f82d 	bl	800689c <__malloc_unlock>
 8006842:	0020      	movs	r0, r4
 8006844:	2207      	movs	r2, #7
 8006846:	300b      	adds	r0, #11
 8006848:	1d23      	adds	r3, r4, #4
 800684a:	4390      	bics	r0, r2
 800684c:	1ac2      	subs	r2, r0, r3
 800684e:	4298      	cmp	r0, r3
 8006850:	d0df      	beq.n	8006812 <_malloc_r+0x86>
 8006852:	1a1b      	subs	r3, r3, r0
 8006854:	50a3      	str	r3, [r4, r2]
 8006856:	e7dc      	b.n	8006812 <_malloc_r+0x86>
 8006858:	605a      	str	r2, [r3, #4]
 800685a:	e7ef      	b.n	800683c <_malloc_r+0xb0>
 800685c:	0023      	movs	r3, r4
 800685e:	6864      	ldr	r4, [r4, #4]
 8006860:	e7a6      	b.n	80067b0 <_malloc_r+0x24>
 8006862:	9c00      	ldr	r4, [sp, #0]
 8006864:	6863      	ldr	r3, [r4, #4]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	e7ad      	b.n	80067c6 <_malloc_r+0x3a>
 800686a:	001a      	movs	r2, r3
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	42a3      	cmp	r3, r4
 8006870:	d1fb      	bne.n	800686a <_malloc_r+0xde>
 8006872:	2300      	movs	r3, #0
 8006874:	e7da      	b.n	800682c <_malloc_r+0xa0>
 8006876:	230c      	movs	r3, #12
 8006878:	0028      	movs	r0, r5
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	f000 f80e 	bl	800689c <__malloc_unlock>
 8006880:	e7c6      	b.n	8006810 <_malloc_r+0x84>
 8006882:	6007      	str	r7, [r0, #0]
 8006884:	e7da      	b.n	800683c <_malloc_r+0xb0>
 8006886:	46c0      	nop			@ (mov r8, r8)
 8006888:	200005cc 	.word	0x200005cc

0800688c <__malloc_lock>:
 800688c:	b510      	push	{r4, lr}
 800688e:	4802      	ldr	r0, [pc, #8]	@ (8006898 <__malloc_lock+0xc>)
 8006890:	f7ff ff0e 	bl	80066b0 <__retarget_lock_acquire_recursive>
 8006894:	bd10      	pop	{r4, pc}
 8006896:	46c0      	nop			@ (mov r8, r8)
 8006898:	200005c4 	.word	0x200005c4

0800689c <__malloc_unlock>:
 800689c:	b510      	push	{r4, lr}
 800689e:	4802      	ldr	r0, [pc, #8]	@ (80068a8 <__malloc_unlock+0xc>)
 80068a0:	f7ff ff07 	bl	80066b2 <__retarget_lock_release_recursive>
 80068a4:	bd10      	pop	{r4, pc}
 80068a6:	46c0      	nop			@ (mov r8, r8)
 80068a8:	200005c4 	.word	0x200005c4

080068ac <__ssputs_r>:
 80068ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ae:	688e      	ldr	r6, [r1, #8]
 80068b0:	b085      	sub	sp, #20
 80068b2:	001f      	movs	r7, r3
 80068b4:	000c      	movs	r4, r1
 80068b6:	680b      	ldr	r3, [r1, #0]
 80068b8:	9002      	str	r0, [sp, #8]
 80068ba:	9203      	str	r2, [sp, #12]
 80068bc:	42be      	cmp	r6, r7
 80068be:	d830      	bhi.n	8006922 <__ssputs_r+0x76>
 80068c0:	210c      	movs	r1, #12
 80068c2:	5e62      	ldrsh	r2, [r4, r1]
 80068c4:	2190      	movs	r1, #144	@ 0x90
 80068c6:	00c9      	lsls	r1, r1, #3
 80068c8:	420a      	tst	r2, r1
 80068ca:	d028      	beq.n	800691e <__ssputs_r+0x72>
 80068cc:	2003      	movs	r0, #3
 80068ce:	6921      	ldr	r1, [r4, #16]
 80068d0:	1a5b      	subs	r3, r3, r1
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	6963      	ldr	r3, [r4, #20]
 80068d6:	4343      	muls	r3, r0
 80068d8:	9801      	ldr	r0, [sp, #4]
 80068da:	0fdd      	lsrs	r5, r3, #31
 80068dc:	18ed      	adds	r5, r5, r3
 80068de:	1c7b      	adds	r3, r7, #1
 80068e0:	181b      	adds	r3, r3, r0
 80068e2:	106d      	asrs	r5, r5, #1
 80068e4:	42ab      	cmp	r3, r5
 80068e6:	d900      	bls.n	80068ea <__ssputs_r+0x3e>
 80068e8:	001d      	movs	r5, r3
 80068ea:	0552      	lsls	r2, r2, #21
 80068ec:	d528      	bpl.n	8006940 <__ssputs_r+0x94>
 80068ee:	0029      	movs	r1, r5
 80068f0:	9802      	ldr	r0, [sp, #8]
 80068f2:	f7ff ff4b 	bl	800678c <_malloc_r>
 80068f6:	1e06      	subs	r6, r0, #0
 80068f8:	d02c      	beq.n	8006954 <__ssputs_r+0xa8>
 80068fa:	9a01      	ldr	r2, [sp, #4]
 80068fc:	6921      	ldr	r1, [r4, #16]
 80068fe:	f000 fade 	bl	8006ebe <memcpy>
 8006902:	89a2      	ldrh	r2, [r4, #12]
 8006904:	4b18      	ldr	r3, [pc, #96]	@ (8006968 <__ssputs_r+0xbc>)
 8006906:	401a      	ands	r2, r3
 8006908:	2380      	movs	r3, #128	@ 0x80
 800690a:	4313      	orrs	r3, r2
 800690c:	81a3      	strh	r3, [r4, #12]
 800690e:	9b01      	ldr	r3, [sp, #4]
 8006910:	6126      	str	r6, [r4, #16]
 8006912:	18f6      	adds	r6, r6, r3
 8006914:	6026      	str	r6, [r4, #0]
 8006916:	003e      	movs	r6, r7
 8006918:	6165      	str	r5, [r4, #20]
 800691a:	1aed      	subs	r5, r5, r3
 800691c:	60a5      	str	r5, [r4, #8]
 800691e:	42be      	cmp	r6, r7
 8006920:	d900      	bls.n	8006924 <__ssputs_r+0x78>
 8006922:	003e      	movs	r6, r7
 8006924:	0032      	movs	r2, r6
 8006926:	9903      	ldr	r1, [sp, #12]
 8006928:	6820      	ldr	r0, [r4, #0]
 800692a:	f000 fa99 	bl	8006e60 <memmove>
 800692e:	2000      	movs	r0, #0
 8006930:	68a3      	ldr	r3, [r4, #8]
 8006932:	1b9b      	subs	r3, r3, r6
 8006934:	60a3      	str	r3, [r4, #8]
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	199b      	adds	r3, r3, r6
 800693a:	6023      	str	r3, [r4, #0]
 800693c:	b005      	add	sp, #20
 800693e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006940:	002a      	movs	r2, r5
 8006942:	9802      	ldr	r0, [sp, #8]
 8006944:	f000 fac4 	bl	8006ed0 <_realloc_r>
 8006948:	1e06      	subs	r6, r0, #0
 800694a:	d1e0      	bne.n	800690e <__ssputs_r+0x62>
 800694c:	6921      	ldr	r1, [r4, #16]
 800694e:	9802      	ldr	r0, [sp, #8]
 8006950:	f7ff feb0 	bl	80066b4 <_free_r>
 8006954:	230c      	movs	r3, #12
 8006956:	2001      	movs	r0, #1
 8006958:	9a02      	ldr	r2, [sp, #8]
 800695a:	4240      	negs	r0, r0
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	89a2      	ldrh	r2, [r4, #12]
 8006960:	3334      	adds	r3, #52	@ 0x34
 8006962:	4313      	orrs	r3, r2
 8006964:	81a3      	strh	r3, [r4, #12]
 8006966:	e7e9      	b.n	800693c <__ssputs_r+0x90>
 8006968:	fffffb7f 	.word	0xfffffb7f

0800696c <_svfiprintf_r>:
 800696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800696e:	b0a1      	sub	sp, #132	@ 0x84
 8006970:	9003      	str	r0, [sp, #12]
 8006972:	001d      	movs	r5, r3
 8006974:	898b      	ldrh	r3, [r1, #12]
 8006976:	000f      	movs	r7, r1
 8006978:	0016      	movs	r6, r2
 800697a:	061b      	lsls	r3, r3, #24
 800697c:	d511      	bpl.n	80069a2 <_svfiprintf_r+0x36>
 800697e:	690b      	ldr	r3, [r1, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10e      	bne.n	80069a2 <_svfiprintf_r+0x36>
 8006984:	2140      	movs	r1, #64	@ 0x40
 8006986:	f7ff ff01 	bl	800678c <_malloc_r>
 800698a:	6038      	str	r0, [r7, #0]
 800698c:	6138      	str	r0, [r7, #16]
 800698e:	2800      	cmp	r0, #0
 8006990:	d105      	bne.n	800699e <_svfiprintf_r+0x32>
 8006992:	230c      	movs	r3, #12
 8006994:	9a03      	ldr	r2, [sp, #12]
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	2001      	movs	r0, #1
 800699a:	4240      	negs	r0, r0
 800699c:	e0cf      	b.n	8006b3e <_svfiprintf_r+0x1d2>
 800699e:	2340      	movs	r3, #64	@ 0x40
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	2300      	movs	r3, #0
 80069a4:	ac08      	add	r4, sp, #32
 80069a6:	6163      	str	r3, [r4, #20]
 80069a8:	3320      	adds	r3, #32
 80069aa:	7663      	strb	r3, [r4, #25]
 80069ac:	3310      	adds	r3, #16
 80069ae:	76a3      	strb	r3, [r4, #26]
 80069b0:	9507      	str	r5, [sp, #28]
 80069b2:	0035      	movs	r5, r6
 80069b4:	782b      	ldrb	r3, [r5, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <_svfiprintf_r+0x52>
 80069ba:	2b25      	cmp	r3, #37	@ 0x25
 80069bc:	d148      	bne.n	8006a50 <_svfiprintf_r+0xe4>
 80069be:	1bab      	subs	r3, r5, r6
 80069c0:	9305      	str	r3, [sp, #20]
 80069c2:	42b5      	cmp	r5, r6
 80069c4:	d00b      	beq.n	80069de <_svfiprintf_r+0x72>
 80069c6:	0032      	movs	r2, r6
 80069c8:	0039      	movs	r1, r7
 80069ca:	9803      	ldr	r0, [sp, #12]
 80069cc:	f7ff ff6e 	bl	80068ac <__ssputs_r>
 80069d0:	3001      	adds	r0, #1
 80069d2:	d100      	bne.n	80069d6 <_svfiprintf_r+0x6a>
 80069d4:	e0ae      	b.n	8006b34 <_svfiprintf_r+0x1c8>
 80069d6:	6963      	ldr	r3, [r4, #20]
 80069d8:	9a05      	ldr	r2, [sp, #20]
 80069da:	189b      	adds	r3, r3, r2
 80069dc:	6163      	str	r3, [r4, #20]
 80069de:	782b      	ldrb	r3, [r5, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d100      	bne.n	80069e6 <_svfiprintf_r+0x7a>
 80069e4:	e0a6      	b.n	8006b34 <_svfiprintf_r+0x1c8>
 80069e6:	2201      	movs	r2, #1
 80069e8:	2300      	movs	r3, #0
 80069ea:	4252      	negs	r2, r2
 80069ec:	6062      	str	r2, [r4, #4]
 80069ee:	a904      	add	r1, sp, #16
 80069f0:	3254      	adds	r2, #84	@ 0x54
 80069f2:	1852      	adds	r2, r2, r1
 80069f4:	1c6e      	adds	r6, r5, #1
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	60e3      	str	r3, [r4, #12]
 80069fa:	60a3      	str	r3, [r4, #8]
 80069fc:	7013      	strb	r3, [r2, #0]
 80069fe:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006a00:	4b54      	ldr	r3, [pc, #336]	@ (8006b54 <_svfiprintf_r+0x1e8>)
 8006a02:	2205      	movs	r2, #5
 8006a04:	0018      	movs	r0, r3
 8006a06:	7831      	ldrb	r1, [r6, #0]
 8006a08:	9305      	str	r3, [sp, #20]
 8006a0a:	f000 fa4d 	bl	8006ea8 <memchr>
 8006a0e:	1c75      	adds	r5, r6, #1
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d11f      	bne.n	8006a54 <_svfiprintf_r+0xe8>
 8006a14:	6822      	ldr	r2, [r4, #0]
 8006a16:	06d3      	lsls	r3, r2, #27
 8006a18:	d504      	bpl.n	8006a24 <_svfiprintf_r+0xb8>
 8006a1a:	2353      	movs	r3, #83	@ 0x53
 8006a1c:	a904      	add	r1, sp, #16
 8006a1e:	185b      	adds	r3, r3, r1
 8006a20:	2120      	movs	r1, #32
 8006a22:	7019      	strb	r1, [r3, #0]
 8006a24:	0713      	lsls	r3, r2, #28
 8006a26:	d504      	bpl.n	8006a32 <_svfiprintf_r+0xc6>
 8006a28:	2353      	movs	r3, #83	@ 0x53
 8006a2a:	a904      	add	r1, sp, #16
 8006a2c:	185b      	adds	r3, r3, r1
 8006a2e:	212b      	movs	r1, #43	@ 0x2b
 8006a30:	7019      	strb	r1, [r3, #0]
 8006a32:	7833      	ldrb	r3, [r6, #0]
 8006a34:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a36:	d016      	beq.n	8006a66 <_svfiprintf_r+0xfa>
 8006a38:	0035      	movs	r5, r6
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	200a      	movs	r0, #10
 8006a3e:	68e3      	ldr	r3, [r4, #12]
 8006a40:	782a      	ldrb	r2, [r5, #0]
 8006a42:	1c6e      	adds	r6, r5, #1
 8006a44:	3a30      	subs	r2, #48	@ 0x30
 8006a46:	2a09      	cmp	r2, #9
 8006a48:	d950      	bls.n	8006aec <_svfiprintf_r+0x180>
 8006a4a:	2900      	cmp	r1, #0
 8006a4c:	d111      	bne.n	8006a72 <_svfiprintf_r+0x106>
 8006a4e:	e017      	b.n	8006a80 <_svfiprintf_r+0x114>
 8006a50:	3501      	adds	r5, #1
 8006a52:	e7af      	b.n	80069b4 <_svfiprintf_r+0x48>
 8006a54:	9b05      	ldr	r3, [sp, #20]
 8006a56:	6822      	ldr	r2, [r4, #0]
 8006a58:	1ac0      	subs	r0, r0, r3
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4083      	lsls	r3, r0
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	002e      	movs	r6, r5
 8006a62:	6023      	str	r3, [r4, #0]
 8006a64:	e7cc      	b.n	8006a00 <_svfiprintf_r+0x94>
 8006a66:	9b07      	ldr	r3, [sp, #28]
 8006a68:	1d19      	adds	r1, r3, #4
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	9107      	str	r1, [sp, #28]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	db01      	blt.n	8006a76 <_svfiprintf_r+0x10a>
 8006a72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a74:	e004      	b.n	8006a80 <_svfiprintf_r+0x114>
 8006a76:	425b      	negs	r3, r3
 8006a78:	60e3      	str	r3, [r4, #12]
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	6023      	str	r3, [r4, #0]
 8006a80:	782b      	ldrb	r3, [r5, #0]
 8006a82:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a84:	d10c      	bne.n	8006aa0 <_svfiprintf_r+0x134>
 8006a86:	786b      	ldrb	r3, [r5, #1]
 8006a88:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a8a:	d134      	bne.n	8006af6 <_svfiprintf_r+0x18a>
 8006a8c:	9b07      	ldr	r3, [sp, #28]
 8006a8e:	3502      	adds	r5, #2
 8006a90:	1d1a      	adds	r2, r3, #4
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	9207      	str	r2, [sp, #28]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	da01      	bge.n	8006a9e <_svfiprintf_r+0x132>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	425b      	negs	r3, r3
 8006a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aa0:	4e2d      	ldr	r6, [pc, #180]	@ (8006b58 <_svfiprintf_r+0x1ec>)
 8006aa2:	2203      	movs	r2, #3
 8006aa4:	0030      	movs	r0, r6
 8006aa6:	7829      	ldrb	r1, [r5, #0]
 8006aa8:	f000 f9fe 	bl	8006ea8 <memchr>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d006      	beq.n	8006abe <_svfiprintf_r+0x152>
 8006ab0:	2340      	movs	r3, #64	@ 0x40
 8006ab2:	1b80      	subs	r0, r0, r6
 8006ab4:	4083      	lsls	r3, r0
 8006ab6:	6822      	ldr	r2, [r4, #0]
 8006ab8:	3501      	adds	r5, #1
 8006aba:	4313      	orrs	r3, r2
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	7829      	ldrb	r1, [r5, #0]
 8006ac0:	2206      	movs	r2, #6
 8006ac2:	4826      	ldr	r0, [pc, #152]	@ (8006b5c <_svfiprintf_r+0x1f0>)
 8006ac4:	1c6e      	adds	r6, r5, #1
 8006ac6:	7621      	strb	r1, [r4, #24]
 8006ac8:	f000 f9ee 	bl	8006ea8 <memchr>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d038      	beq.n	8006b42 <_svfiprintf_r+0x1d6>
 8006ad0:	4b23      	ldr	r3, [pc, #140]	@ (8006b60 <_svfiprintf_r+0x1f4>)
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d122      	bne.n	8006b1c <_svfiprintf_r+0x1b0>
 8006ad6:	2207      	movs	r2, #7
 8006ad8:	9b07      	ldr	r3, [sp, #28]
 8006ada:	3307      	adds	r3, #7
 8006adc:	4393      	bics	r3, r2
 8006ade:	3308      	adds	r3, #8
 8006ae0:	9307      	str	r3, [sp, #28]
 8006ae2:	6963      	ldr	r3, [r4, #20]
 8006ae4:	9a04      	ldr	r2, [sp, #16]
 8006ae6:	189b      	adds	r3, r3, r2
 8006ae8:	6163      	str	r3, [r4, #20]
 8006aea:	e762      	b.n	80069b2 <_svfiprintf_r+0x46>
 8006aec:	4343      	muls	r3, r0
 8006aee:	0035      	movs	r5, r6
 8006af0:	2101      	movs	r1, #1
 8006af2:	189b      	adds	r3, r3, r2
 8006af4:	e7a4      	b.n	8006a40 <_svfiprintf_r+0xd4>
 8006af6:	2300      	movs	r3, #0
 8006af8:	200a      	movs	r0, #10
 8006afa:	0019      	movs	r1, r3
 8006afc:	3501      	adds	r5, #1
 8006afe:	6063      	str	r3, [r4, #4]
 8006b00:	782a      	ldrb	r2, [r5, #0]
 8006b02:	1c6e      	adds	r6, r5, #1
 8006b04:	3a30      	subs	r2, #48	@ 0x30
 8006b06:	2a09      	cmp	r2, #9
 8006b08:	d903      	bls.n	8006b12 <_svfiprintf_r+0x1a6>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0c8      	beq.n	8006aa0 <_svfiprintf_r+0x134>
 8006b0e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b10:	e7c6      	b.n	8006aa0 <_svfiprintf_r+0x134>
 8006b12:	4341      	muls	r1, r0
 8006b14:	0035      	movs	r5, r6
 8006b16:	2301      	movs	r3, #1
 8006b18:	1889      	adds	r1, r1, r2
 8006b1a:	e7f1      	b.n	8006b00 <_svfiprintf_r+0x194>
 8006b1c:	aa07      	add	r2, sp, #28
 8006b1e:	9200      	str	r2, [sp, #0]
 8006b20:	0021      	movs	r1, r4
 8006b22:	003a      	movs	r2, r7
 8006b24:	4b0f      	ldr	r3, [pc, #60]	@ (8006b64 <_svfiprintf_r+0x1f8>)
 8006b26:	9803      	ldr	r0, [sp, #12]
 8006b28:	e000      	b.n	8006b2c <_svfiprintf_r+0x1c0>
 8006b2a:	bf00      	nop
 8006b2c:	9004      	str	r0, [sp, #16]
 8006b2e:	9b04      	ldr	r3, [sp, #16]
 8006b30:	3301      	adds	r3, #1
 8006b32:	d1d6      	bne.n	8006ae2 <_svfiprintf_r+0x176>
 8006b34:	89bb      	ldrh	r3, [r7, #12]
 8006b36:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006b38:	065b      	lsls	r3, r3, #25
 8006b3a:	d500      	bpl.n	8006b3e <_svfiprintf_r+0x1d2>
 8006b3c:	e72c      	b.n	8006998 <_svfiprintf_r+0x2c>
 8006b3e:	b021      	add	sp, #132	@ 0x84
 8006b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b42:	aa07      	add	r2, sp, #28
 8006b44:	9200      	str	r2, [sp, #0]
 8006b46:	0021      	movs	r1, r4
 8006b48:	003a      	movs	r2, r7
 8006b4a:	4b06      	ldr	r3, [pc, #24]	@ (8006b64 <_svfiprintf_r+0x1f8>)
 8006b4c:	9803      	ldr	r0, [sp, #12]
 8006b4e:	f000 f87b 	bl	8006c48 <_printf_i>
 8006b52:	e7eb      	b.n	8006b2c <_svfiprintf_r+0x1c0>
 8006b54:	08007030 	.word	0x08007030
 8006b58:	08007036 	.word	0x08007036
 8006b5c:	0800703a 	.word	0x0800703a
 8006b60:	00000000 	.word	0x00000000
 8006b64:	080068ad 	.word	0x080068ad

08006b68 <_printf_common>:
 8006b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b6a:	0016      	movs	r6, r2
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	688a      	ldr	r2, [r1, #8]
 8006b70:	690b      	ldr	r3, [r1, #16]
 8006b72:	000c      	movs	r4, r1
 8006b74:	9000      	str	r0, [sp, #0]
 8006b76:	4293      	cmp	r3, r2
 8006b78:	da00      	bge.n	8006b7c <_printf_common+0x14>
 8006b7a:	0013      	movs	r3, r2
 8006b7c:	0022      	movs	r2, r4
 8006b7e:	6033      	str	r3, [r6, #0]
 8006b80:	3243      	adds	r2, #67	@ 0x43
 8006b82:	7812      	ldrb	r2, [r2, #0]
 8006b84:	2a00      	cmp	r2, #0
 8006b86:	d001      	beq.n	8006b8c <_printf_common+0x24>
 8006b88:	3301      	adds	r3, #1
 8006b8a:	6033      	str	r3, [r6, #0]
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	069b      	lsls	r3, r3, #26
 8006b90:	d502      	bpl.n	8006b98 <_printf_common+0x30>
 8006b92:	6833      	ldr	r3, [r6, #0]
 8006b94:	3302      	adds	r3, #2
 8006b96:	6033      	str	r3, [r6, #0]
 8006b98:	6822      	ldr	r2, [r4, #0]
 8006b9a:	2306      	movs	r3, #6
 8006b9c:	0015      	movs	r5, r2
 8006b9e:	401d      	ands	r5, r3
 8006ba0:	421a      	tst	r2, r3
 8006ba2:	d027      	beq.n	8006bf4 <_printf_common+0x8c>
 8006ba4:	0023      	movs	r3, r4
 8006ba6:	3343      	adds	r3, #67	@ 0x43
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	1e5a      	subs	r2, r3, #1
 8006bac:	4193      	sbcs	r3, r2
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	0692      	lsls	r2, r2, #26
 8006bb2:	d430      	bmi.n	8006c16 <_printf_common+0xae>
 8006bb4:	0022      	movs	r2, r4
 8006bb6:	9901      	ldr	r1, [sp, #4]
 8006bb8:	9800      	ldr	r0, [sp, #0]
 8006bba:	9d08      	ldr	r5, [sp, #32]
 8006bbc:	3243      	adds	r2, #67	@ 0x43
 8006bbe:	47a8      	blx	r5
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d025      	beq.n	8006c10 <_printf_common+0xa8>
 8006bc4:	2206      	movs	r2, #6
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	2500      	movs	r5, #0
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d105      	bne.n	8006bdc <_printf_common+0x74>
 8006bd0:	6833      	ldr	r3, [r6, #0]
 8006bd2:	68e5      	ldr	r5, [r4, #12]
 8006bd4:	1aed      	subs	r5, r5, r3
 8006bd6:	43eb      	mvns	r3, r5
 8006bd8:	17db      	asrs	r3, r3, #31
 8006bda:	401d      	ands	r5, r3
 8006bdc:	68a3      	ldr	r3, [r4, #8]
 8006bde:	6922      	ldr	r2, [r4, #16]
 8006be0:	4293      	cmp	r3, r2
 8006be2:	dd01      	ble.n	8006be8 <_printf_common+0x80>
 8006be4:	1a9b      	subs	r3, r3, r2
 8006be6:	18ed      	adds	r5, r5, r3
 8006be8:	2600      	movs	r6, #0
 8006bea:	42b5      	cmp	r5, r6
 8006bec:	d120      	bne.n	8006c30 <_printf_common+0xc8>
 8006bee:	2000      	movs	r0, #0
 8006bf0:	e010      	b.n	8006c14 <_printf_common+0xac>
 8006bf2:	3501      	adds	r5, #1
 8006bf4:	68e3      	ldr	r3, [r4, #12]
 8006bf6:	6832      	ldr	r2, [r6, #0]
 8006bf8:	1a9b      	subs	r3, r3, r2
 8006bfa:	42ab      	cmp	r3, r5
 8006bfc:	ddd2      	ble.n	8006ba4 <_printf_common+0x3c>
 8006bfe:	0022      	movs	r2, r4
 8006c00:	2301      	movs	r3, #1
 8006c02:	9901      	ldr	r1, [sp, #4]
 8006c04:	9800      	ldr	r0, [sp, #0]
 8006c06:	9f08      	ldr	r7, [sp, #32]
 8006c08:	3219      	adds	r2, #25
 8006c0a:	47b8      	blx	r7
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d1f0      	bne.n	8006bf2 <_printf_common+0x8a>
 8006c10:	2001      	movs	r0, #1
 8006c12:	4240      	negs	r0, r0
 8006c14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c16:	2030      	movs	r0, #48	@ 0x30
 8006c18:	18e1      	adds	r1, r4, r3
 8006c1a:	3143      	adds	r1, #67	@ 0x43
 8006c1c:	7008      	strb	r0, [r1, #0]
 8006c1e:	0021      	movs	r1, r4
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	3145      	adds	r1, #69	@ 0x45
 8006c24:	7809      	ldrb	r1, [r1, #0]
 8006c26:	18a2      	adds	r2, r4, r2
 8006c28:	3243      	adds	r2, #67	@ 0x43
 8006c2a:	3302      	adds	r3, #2
 8006c2c:	7011      	strb	r1, [r2, #0]
 8006c2e:	e7c1      	b.n	8006bb4 <_printf_common+0x4c>
 8006c30:	0022      	movs	r2, r4
 8006c32:	2301      	movs	r3, #1
 8006c34:	9901      	ldr	r1, [sp, #4]
 8006c36:	9800      	ldr	r0, [sp, #0]
 8006c38:	9f08      	ldr	r7, [sp, #32]
 8006c3a:	321a      	adds	r2, #26
 8006c3c:	47b8      	blx	r7
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d0e6      	beq.n	8006c10 <_printf_common+0xa8>
 8006c42:	3601      	adds	r6, #1
 8006c44:	e7d1      	b.n	8006bea <_printf_common+0x82>
	...

08006c48 <_printf_i>:
 8006c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c4a:	b08b      	sub	sp, #44	@ 0x2c
 8006c4c:	9206      	str	r2, [sp, #24]
 8006c4e:	000a      	movs	r2, r1
 8006c50:	3243      	adds	r2, #67	@ 0x43
 8006c52:	9307      	str	r3, [sp, #28]
 8006c54:	9005      	str	r0, [sp, #20]
 8006c56:	9203      	str	r2, [sp, #12]
 8006c58:	7e0a      	ldrb	r2, [r1, #24]
 8006c5a:	000c      	movs	r4, r1
 8006c5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c5e:	2a78      	cmp	r2, #120	@ 0x78
 8006c60:	d809      	bhi.n	8006c76 <_printf_i+0x2e>
 8006c62:	2a62      	cmp	r2, #98	@ 0x62
 8006c64:	d80b      	bhi.n	8006c7e <_printf_i+0x36>
 8006c66:	2a00      	cmp	r2, #0
 8006c68:	d100      	bne.n	8006c6c <_printf_i+0x24>
 8006c6a:	e0ba      	b.n	8006de2 <_printf_i+0x19a>
 8006c6c:	497a      	ldr	r1, [pc, #488]	@ (8006e58 <_printf_i+0x210>)
 8006c6e:	9104      	str	r1, [sp, #16]
 8006c70:	2a58      	cmp	r2, #88	@ 0x58
 8006c72:	d100      	bne.n	8006c76 <_printf_i+0x2e>
 8006c74:	e08e      	b.n	8006d94 <_printf_i+0x14c>
 8006c76:	0025      	movs	r5, r4
 8006c78:	3542      	adds	r5, #66	@ 0x42
 8006c7a:	702a      	strb	r2, [r5, #0]
 8006c7c:	e022      	b.n	8006cc4 <_printf_i+0x7c>
 8006c7e:	0010      	movs	r0, r2
 8006c80:	3863      	subs	r0, #99	@ 0x63
 8006c82:	2815      	cmp	r0, #21
 8006c84:	d8f7      	bhi.n	8006c76 <_printf_i+0x2e>
 8006c86:	f7f9 fa3f 	bl	8000108 <__gnu_thumb1_case_shi>
 8006c8a:	0016      	.short	0x0016
 8006c8c:	fff6001f 	.word	0xfff6001f
 8006c90:	fff6fff6 	.word	0xfff6fff6
 8006c94:	001ffff6 	.word	0x001ffff6
 8006c98:	fff6fff6 	.word	0xfff6fff6
 8006c9c:	fff6fff6 	.word	0xfff6fff6
 8006ca0:	0036009f 	.word	0x0036009f
 8006ca4:	fff6007e 	.word	0xfff6007e
 8006ca8:	00b0fff6 	.word	0x00b0fff6
 8006cac:	0036fff6 	.word	0x0036fff6
 8006cb0:	fff6fff6 	.word	0xfff6fff6
 8006cb4:	0082      	.short	0x0082
 8006cb6:	0025      	movs	r5, r4
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	3542      	adds	r5, #66	@ 0x42
 8006cbc:	1d11      	adds	r1, r2, #4
 8006cbe:	6019      	str	r1, [r3, #0]
 8006cc0:	6813      	ldr	r3, [r2, #0]
 8006cc2:	702b      	strb	r3, [r5, #0]
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e09e      	b.n	8006e06 <_printf_i+0x1be>
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	6809      	ldr	r1, [r1, #0]
 8006ccc:	1d02      	adds	r2, r0, #4
 8006cce:	060d      	lsls	r5, r1, #24
 8006cd0:	d50b      	bpl.n	8006cea <_printf_i+0xa2>
 8006cd2:	6806      	ldr	r6, [r0, #0]
 8006cd4:	601a      	str	r2, [r3, #0]
 8006cd6:	2e00      	cmp	r6, #0
 8006cd8:	da03      	bge.n	8006ce2 <_printf_i+0x9a>
 8006cda:	232d      	movs	r3, #45	@ 0x2d
 8006cdc:	9a03      	ldr	r2, [sp, #12]
 8006cde:	4276      	negs	r6, r6
 8006ce0:	7013      	strb	r3, [r2, #0]
 8006ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8006e58 <_printf_i+0x210>)
 8006ce4:	270a      	movs	r7, #10
 8006ce6:	9304      	str	r3, [sp, #16]
 8006ce8:	e018      	b.n	8006d1c <_printf_i+0xd4>
 8006cea:	6806      	ldr	r6, [r0, #0]
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	0649      	lsls	r1, r1, #25
 8006cf0:	d5f1      	bpl.n	8006cd6 <_printf_i+0x8e>
 8006cf2:	b236      	sxth	r6, r6
 8006cf4:	e7ef      	b.n	8006cd6 <_printf_i+0x8e>
 8006cf6:	6808      	ldr	r0, [r1, #0]
 8006cf8:	6819      	ldr	r1, [r3, #0]
 8006cfa:	c940      	ldmia	r1!, {r6}
 8006cfc:	0605      	lsls	r5, r0, #24
 8006cfe:	d402      	bmi.n	8006d06 <_printf_i+0xbe>
 8006d00:	0640      	lsls	r0, r0, #25
 8006d02:	d500      	bpl.n	8006d06 <_printf_i+0xbe>
 8006d04:	b2b6      	uxth	r6, r6
 8006d06:	6019      	str	r1, [r3, #0]
 8006d08:	4b53      	ldr	r3, [pc, #332]	@ (8006e58 <_printf_i+0x210>)
 8006d0a:	270a      	movs	r7, #10
 8006d0c:	9304      	str	r3, [sp, #16]
 8006d0e:	2a6f      	cmp	r2, #111	@ 0x6f
 8006d10:	d100      	bne.n	8006d14 <_printf_i+0xcc>
 8006d12:	3f02      	subs	r7, #2
 8006d14:	0023      	movs	r3, r4
 8006d16:	2200      	movs	r2, #0
 8006d18:	3343      	adds	r3, #67	@ 0x43
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	6863      	ldr	r3, [r4, #4]
 8006d1e:	60a3      	str	r3, [r4, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	db06      	blt.n	8006d32 <_printf_i+0xea>
 8006d24:	2104      	movs	r1, #4
 8006d26:	6822      	ldr	r2, [r4, #0]
 8006d28:	9d03      	ldr	r5, [sp, #12]
 8006d2a:	438a      	bics	r2, r1
 8006d2c:	6022      	str	r2, [r4, #0]
 8006d2e:	4333      	orrs	r3, r6
 8006d30:	d00c      	beq.n	8006d4c <_printf_i+0x104>
 8006d32:	9d03      	ldr	r5, [sp, #12]
 8006d34:	0030      	movs	r0, r6
 8006d36:	0039      	movs	r1, r7
 8006d38:	f7f9 fa76 	bl	8000228 <__aeabi_uidivmod>
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	3d01      	subs	r5, #1
 8006d40:	5c5b      	ldrb	r3, [r3, r1]
 8006d42:	702b      	strb	r3, [r5, #0]
 8006d44:	0033      	movs	r3, r6
 8006d46:	0006      	movs	r6, r0
 8006d48:	429f      	cmp	r7, r3
 8006d4a:	d9f3      	bls.n	8006d34 <_printf_i+0xec>
 8006d4c:	2f08      	cmp	r7, #8
 8006d4e:	d109      	bne.n	8006d64 <_printf_i+0x11c>
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	07db      	lsls	r3, r3, #31
 8006d54:	d506      	bpl.n	8006d64 <_printf_i+0x11c>
 8006d56:	6862      	ldr	r2, [r4, #4]
 8006d58:	6923      	ldr	r3, [r4, #16]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	dc02      	bgt.n	8006d64 <_printf_i+0x11c>
 8006d5e:	2330      	movs	r3, #48	@ 0x30
 8006d60:	3d01      	subs	r5, #1
 8006d62:	702b      	strb	r3, [r5, #0]
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	1b5b      	subs	r3, r3, r5
 8006d68:	6123      	str	r3, [r4, #16]
 8006d6a:	9b07      	ldr	r3, [sp, #28]
 8006d6c:	0021      	movs	r1, r4
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	9805      	ldr	r0, [sp, #20]
 8006d72:	9b06      	ldr	r3, [sp, #24]
 8006d74:	aa09      	add	r2, sp, #36	@ 0x24
 8006d76:	f7ff fef7 	bl	8006b68 <_printf_common>
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	d148      	bne.n	8006e10 <_printf_i+0x1c8>
 8006d7e:	2001      	movs	r0, #1
 8006d80:	4240      	negs	r0, r0
 8006d82:	b00b      	add	sp, #44	@ 0x2c
 8006d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d86:	2220      	movs	r2, #32
 8006d88:	6809      	ldr	r1, [r1, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	6022      	str	r2, [r4, #0]
 8006d8e:	2278      	movs	r2, #120	@ 0x78
 8006d90:	4932      	ldr	r1, [pc, #200]	@ (8006e5c <_printf_i+0x214>)
 8006d92:	9104      	str	r1, [sp, #16]
 8006d94:	0021      	movs	r1, r4
 8006d96:	3145      	adds	r1, #69	@ 0x45
 8006d98:	700a      	strb	r2, [r1, #0]
 8006d9a:	6819      	ldr	r1, [r3, #0]
 8006d9c:	6822      	ldr	r2, [r4, #0]
 8006d9e:	c940      	ldmia	r1!, {r6}
 8006da0:	0610      	lsls	r0, r2, #24
 8006da2:	d402      	bmi.n	8006daa <_printf_i+0x162>
 8006da4:	0650      	lsls	r0, r2, #25
 8006da6:	d500      	bpl.n	8006daa <_printf_i+0x162>
 8006da8:	b2b6      	uxth	r6, r6
 8006daa:	6019      	str	r1, [r3, #0]
 8006dac:	07d3      	lsls	r3, r2, #31
 8006dae:	d502      	bpl.n	8006db6 <_printf_i+0x16e>
 8006db0:	2320      	movs	r3, #32
 8006db2:	4313      	orrs	r3, r2
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	2e00      	cmp	r6, #0
 8006db8:	d001      	beq.n	8006dbe <_printf_i+0x176>
 8006dba:	2710      	movs	r7, #16
 8006dbc:	e7aa      	b.n	8006d14 <_printf_i+0xcc>
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	4393      	bics	r3, r2
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	e7f8      	b.n	8006dba <_printf_i+0x172>
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	680d      	ldr	r5, [r1, #0]
 8006dcc:	1d10      	adds	r0, r2, #4
 8006dce:	6949      	ldr	r1, [r1, #20]
 8006dd0:	6018      	str	r0, [r3, #0]
 8006dd2:	6813      	ldr	r3, [r2, #0]
 8006dd4:	062e      	lsls	r6, r5, #24
 8006dd6:	d501      	bpl.n	8006ddc <_printf_i+0x194>
 8006dd8:	6019      	str	r1, [r3, #0]
 8006dda:	e002      	b.n	8006de2 <_printf_i+0x19a>
 8006ddc:	066d      	lsls	r5, r5, #25
 8006dde:	d5fb      	bpl.n	8006dd8 <_printf_i+0x190>
 8006de0:	8019      	strh	r1, [r3, #0]
 8006de2:	2300      	movs	r3, #0
 8006de4:	9d03      	ldr	r5, [sp, #12]
 8006de6:	6123      	str	r3, [r4, #16]
 8006de8:	e7bf      	b.n	8006d6a <_printf_i+0x122>
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	1d11      	adds	r1, r2, #4
 8006dee:	6019      	str	r1, [r3, #0]
 8006df0:	6815      	ldr	r5, [r2, #0]
 8006df2:	2100      	movs	r1, #0
 8006df4:	0028      	movs	r0, r5
 8006df6:	6862      	ldr	r2, [r4, #4]
 8006df8:	f000 f856 	bl	8006ea8 <memchr>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d001      	beq.n	8006e04 <_printf_i+0x1bc>
 8006e00:	1b40      	subs	r0, r0, r5
 8006e02:	6060      	str	r0, [r4, #4]
 8006e04:	6863      	ldr	r3, [r4, #4]
 8006e06:	6123      	str	r3, [r4, #16]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	9a03      	ldr	r2, [sp, #12]
 8006e0c:	7013      	strb	r3, [r2, #0]
 8006e0e:	e7ac      	b.n	8006d6a <_printf_i+0x122>
 8006e10:	002a      	movs	r2, r5
 8006e12:	6923      	ldr	r3, [r4, #16]
 8006e14:	9906      	ldr	r1, [sp, #24]
 8006e16:	9805      	ldr	r0, [sp, #20]
 8006e18:	9d07      	ldr	r5, [sp, #28]
 8006e1a:	47a8      	blx	r5
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d0ae      	beq.n	8006d7e <_printf_i+0x136>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	079b      	lsls	r3, r3, #30
 8006e24:	d415      	bmi.n	8006e52 <_printf_i+0x20a>
 8006e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e28:	68e0      	ldr	r0, [r4, #12]
 8006e2a:	4298      	cmp	r0, r3
 8006e2c:	daa9      	bge.n	8006d82 <_printf_i+0x13a>
 8006e2e:	0018      	movs	r0, r3
 8006e30:	e7a7      	b.n	8006d82 <_printf_i+0x13a>
 8006e32:	0022      	movs	r2, r4
 8006e34:	2301      	movs	r3, #1
 8006e36:	9906      	ldr	r1, [sp, #24]
 8006e38:	9805      	ldr	r0, [sp, #20]
 8006e3a:	9e07      	ldr	r6, [sp, #28]
 8006e3c:	3219      	adds	r2, #25
 8006e3e:	47b0      	blx	r6
 8006e40:	3001      	adds	r0, #1
 8006e42:	d09c      	beq.n	8006d7e <_printf_i+0x136>
 8006e44:	3501      	adds	r5, #1
 8006e46:	68e3      	ldr	r3, [r4, #12]
 8006e48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	42ab      	cmp	r3, r5
 8006e4e:	dcf0      	bgt.n	8006e32 <_printf_i+0x1ea>
 8006e50:	e7e9      	b.n	8006e26 <_printf_i+0x1de>
 8006e52:	2500      	movs	r5, #0
 8006e54:	e7f7      	b.n	8006e46 <_printf_i+0x1fe>
 8006e56:	46c0      	nop			@ (mov r8, r8)
 8006e58:	08007041 	.word	0x08007041
 8006e5c:	08007052 	.word	0x08007052

08006e60 <memmove>:
 8006e60:	b510      	push	{r4, lr}
 8006e62:	4288      	cmp	r0, r1
 8006e64:	d902      	bls.n	8006e6c <memmove+0xc>
 8006e66:	188b      	adds	r3, r1, r2
 8006e68:	4298      	cmp	r0, r3
 8006e6a:	d308      	bcc.n	8006e7e <memmove+0x1e>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d007      	beq.n	8006e82 <memmove+0x22>
 8006e72:	5ccc      	ldrb	r4, [r1, r3]
 8006e74:	54c4      	strb	r4, [r0, r3]
 8006e76:	3301      	adds	r3, #1
 8006e78:	e7f9      	b.n	8006e6e <memmove+0xe>
 8006e7a:	5c8b      	ldrb	r3, [r1, r2]
 8006e7c:	5483      	strb	r3, [r0, r2]
 8006e7e:	3a01      	subs	r2, #1
 8006e80:	d2fb      	bcs.n	8006e7a <memmove+0x1a>
 8006e82:	bd10      	pop	{r4, pc}

08006e84 <_sbrk_r>:
 8006e84:	2300      	movs	r3, #0
 8006e86:	b570      	push	{r4, r5, r6, lr}
 8006e88:	4d06      	ldr	r5, [pc, #24]	@ (8006ea4 <_sbrk_r+0x20>)
 8006e8a:	0004      	movs	r4, r0
 8006e8c:	0008      	movs	r0, r1
 8006e8e:	602b      	str	r3, [r5, #0]
 8006e90:	f7fa fd60 	bl	8001954 <_sbrk>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d103      	bne.n	8006ea0 <_sbrk_r+0x1c>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d000      	beq.n	8006ea0 <_sbrk_r+0x1c>
 8006e9e:	6023      	str	r3, [r4, #0]
 8006ea0:	bd70      	pop	{r4, r5, r6, pc}
 8006ea2:	46c0      	nop			@ (mov r8, r8)
 8006ea4:	200005c0 	.word	0x200005c0

08006ea8 <memchr>:
 8006ea8:	b2c9      	uxtb	r1, r1
 8006eaa:	1882      	adds	r2, r0, r2
 8006eac:	4290      	cmp	r0, r2
 8006eae:	d101      	bne.n	8006eb4 <memchr+0xc>
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	4770      	bx	lr
 8006eb4:	7803      	ldrb	r3, [r0, #0]
 8006eb6:	428b      	cmp	r3, r1
 8006eb8:	d0fb      	beq.n	8006eb2 <memchr+0xa>
 8006eba:	3001      	adds	r0, #1
 8006ebc:	e7f6      	b.n	8006eac <memchr+0x4>

08006ebe <memcpy>:
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d100      	bne.n	8006ec8 <memcpy+0xa>
 8006ec6:	bd10      	pop	{r4, pc}
 8006ec8:	5ccc      	ldrb	r4, [r1, r3]
 8006eca:	54c4      	strb	r4, [r0, r3]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	e7f8      	b.n	8006ec2 <memcpy+0x4>

08006ed0 <_realloc_r>:
 8006ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ed2:	0006      	movs	r6, r0
 8006ed4:	000c      	movs	r4, r1
 8006ed6:	0015      	movs	r5, r2
 8006ed8:	2900      	cmp	r1, #0
 8006eda:	d105      	bne.n	8006ee8 <_realloc_r+0x18>
 8006edc:	0011      	movs	r1, r2
 8006ede:	f7ff fc55 	bl	800678c <_malloc_r>
 8006ee2:	0004      	movs	r4, r0
 8006ee4:	0020      	movs	r0, r4
 8006ee6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ee8:	2a00      	cmp	r2, #0
 8006eea:	d103      	bne.n	8006ef4 <_realloc_r+0x24>
 8006eec:	f7ff fbe2 	bl	80066b4 <_free_r>
 8006ef0:	002c      	movs	r4, r5
 8006ef2:	e7f7      	b.n	8006ee4 <_realloc_r+0x14>
 8006ef4:	f000 f81c 	bl	8006f30 <_malloc_usable_size_r>
 8006ef8:	0007      	movs	r7, r0
 8006efa:	4285      	cmp	r5, r0
 8006efc:	d802      	bhi.n	8006f04 <_realloc_r+0x34>
 8006efe:	0843      	lsrs	r3, r0, #1
 8006f00:	42ab      	cmp	r3, r5
 8006f02:	d3ef      	bcc.n	8006ee4 <_realloc_r+0x14>
 8006f04:	0029      	movs	r1, r5
 8006f06:	0030      	movs	r0, r6
 8006f08:	f7ff fc40 	bl	800678c <_malloc_r>
 8006f0c:	9001      	str	r0, [sp, #4]
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d101      	bne.n	8006f16 <_realloc_r+0x46>
 8006f12:	9c01      	ldr	r4, [sp, #4]
 8006f14:	e7e6      	b.n	8006ee4 <_realloc_r+0x14>
 8006f16:	002a      	movs	r2, r5
 8006f18:	42bd      	cmp	r5, r7
 8006f1a:	d900      	bls.n	8006f1e <_realloc_r+0x4e>
 8006f1c:	003a      	movs	r2, r7
 8006f1e:	0021      	movs	r1, r4
 8006f20:	9801      	ldr	r0, [sp, #4]
 8006f22:	f7ff ffcc 	bl	8006ebe <memcpy>
 8006f26:	0021      	movs	r1, r4
 8006f28:	0030      	movs	r0, r6
 8006f2a:	f7ff fbc3 	bl	80066b4 <_free_r>
 8006f2e:	e7f0      	b.n	8006f12 <_realloc_r+0x42>

08006f30 <_malloc_usable_size_r>:
 8006f30:	1f0b      	subs	r3, r1, #4
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	1f18      	subs	r0, r3, #4
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	da01      	bge.n	8006f3e <_malloc_usable_size_r+0xe>
 8006f3a:	580b      	ldr	r3, [r1, r0]
 8006f3c:	18c0      	adds	r0, r0, r3
 8006f3e:	4770      	bx	lr

08006f40 <_init>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	46c0      	nop			@ (mov r8, r8)
 8006f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f46:	bc08      	pop	{r3}
 8006f48:	469e      	mov	lr, r3
 8006f4a:	4770      	bx	lr

08006f4c <_fini>:
 8006f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4e:	46c0      	nop			@ (mov r8, r8)
 8006f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f52:	bc08      	pop	{r3}
 8006f54:	469e      	mov	lr, r3
 8006f56:	4770      	bx	lr
