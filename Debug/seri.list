
seri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009130  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080091f0  080091f0  0000a1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009394  08009394  0000b064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009394  08009394  0000a394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800939c  0800939c  0000b064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800939c  0800939c  0000a39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093a0  080093a0  0000a3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080093a4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a8  20000064  08009408  0000b064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000160c  08009408  0000b60c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da4c  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dc9  00000000  00000000  00028ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  0002d8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014e5  00000000  00000000  0002f3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab47  00000000  00000000  000308a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000210c8  00000000  00000000  0004b3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad7b  00000000  00000000  0006c4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010722f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006514  00000000  00000000  00107274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0010d788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080091d8 	.word	0x080091d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	080091d8 	.word	0x080091d8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4699      	mov	r9, r3
 800045e:	0c03      	lsrs	r3, r0, #16
 8000460:	469c      	mov	ip, r3
 8000462:	0413      	lsls	r3, r2, #16
 8000464:	4647      	mov	r7, r8
 8000466:	0c1b      	lsrs	r3, r3, #16
 8000468:	001d      	movs	r5, r3
 800046a:	000e      	movs	r6, r1
 800046c:	4661      	mov	r1, ip
 800046e:	0404      	lsls	r4, r0, #16
 8000470:	0c24      	lsrs	r4, r4, #16
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	0c10      	lsrs	r0, r2, #16
 8000478:	434b      	muls	r3, r1
 800047a:	4365      	muls	r5, r4
 800047c:	4341      	muls	r1, r0
 800047e:	4360      	muls	r0, r4
 8000480:	0c2c      	lsrs	r4, r5, #16
 8000482:	18c0      	adds	r0, r0, r3
 8000484:	1824      	adds	r4, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	42a3      	cmp	r3, r4
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	@ 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4356      	muls	r6, r2
 800049a:	0c23      	lsrs	r3, r4, #16
 800049c:	042d      	lsls	r5, r5, #16
 800049e:	0c2d      	lsrs	r5, r5, #16
 80004a0:	1989      	adds	r1, r1, r6
 80004a2:	4463      	add	r3, ip
 80004a4:	0424      	lsls	r4, r4, #16
 80004a6:	1960      	adds	r0, r4, r5
 80004a8:	18c9      	adds	r1, r1, r3
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 f8ba 	bl	800064c <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f8b5 	bl	800064c <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	d434      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ea:	469b      	mov	fp, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	465a      	mov	r2, fp
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83b      	bhi.n	8000578 <__udivmoddi4+0xc4>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e079      	b.n	80005fa <__udivmoddi4+0x146>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e076      	b.n	8000600 <__udivmoddi4+0x14c>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e029      	b.n	8000580 <__udivmoddi4+0xcc>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	469b      	mov	fp, r3
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	4652      	mov	r2, sl
 800055e:	40da      	lsrs	r2, r3
 8000560:	4641      	mov	r1, r8
 8000562:	0013      	movs	r3, r2
 8000564:	464a      	mov	r2, r9
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	4642      	mov	r2, r8
 800056c:	431f      	orrs	r7, r3
 800056e:	4653      	mov	r3, sl
 8000570:	4093      	lsls	r3, r2
 8000572:	001e      	movs	r6, r3
 8000574:	42af      	cmp	r7, r5
 8000576:	d9c3      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000578:	2200      	movs	r2, #0
 800057a:	2300      	movs	r3, #0
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4643      	mov	r3, r8
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0d8      	beq.n	8000538 <__udivmoddi4+0x84>
 8000586:	07fb      	lsls	r3, r7, #31
 8000588:	0872      	lsrs	r2, r6, #1
 800058a:	431a      	orrs	r2, r3
 800058c:	4646      	mov	r6, r8
 800058e:	087b      	lsrs	r3, r7, #1
 8000590:	e00e      	b.n	80005b0 <__udivmoddi4+0xfc>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d101      	bne.n	800059a <__udivmoddi4+0xe6>
 8000596:	42a2      	cmp	r2, r4
 8000598:	d80c      	bhi.n	80005b4 <__udivmoddi4+0x100>
 800059a:	1aa4      	subs	r4, r4, r2
 800059c:	419d      	sbcs	r5, r3
 800059e:	2001      	movs	r0, #1
 80005a0:	1924      	adds	r4, r4, r4
 80005a2:	416d      	adcs	r5, r5
 80005a4:	2100      	movs	r1, #0
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1824      	adds	r4, r4, r0
 80005aa:	414d      	adcs	r5, r1
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d006      	beq.n	80005be <__udivmoddi4+0x10a>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d9ee      	bls.n	8000592 <__udivmoddi4+0xde>
 80005b4:	3e01      	subs	r6, #1
 80005b6:	1924      	adds	r4, r4, r4
 80005b8:	416d      	adcs	r5, r5
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d1f8      	bne.n	80005b0 <__udivmoddi4+0xfc>
 80005be:	9800      	ldr	r0, [sp, #0]
 80005c0:	9901      	ldr	r1, [sp, #4]
 80005c2:	465b      	mov	r3, fp
 80005c4:	1900      	adds	r0, r0, r4
 80005c6:	4169      	adcs	r1, r5
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db24      	blt.n	8000616 <__udivmoddi4+0x162>
 80005cc:	002b      	movs	r3, r5
 80005ce:	465a      	mov	r2, fp
 80005d0:	4644      	mov	r4, r8
 80005d2:	40d3      	lsrs	r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	40e2      	lsrs	r2, r4
 80005d8:	001c      	movs	r4, r3
 80005da:	465b      	mov	r3, fp
 80005dc:	0015      	movs	r5, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db2a      	blt.n	8000638 <__udivmoddi4+0x184>
 80005e2:	0026      	movs	r6, r4
 80005e4:	409e      	lsls	r6, r3
 80005e6:	0033      	movs	r3, r6
 80005e8:	0026      	movs	r6, r4
 80005ea:	4647      	mov	r7, r8
 80005ec:	40be      	lsls	r6, r7
 80005ee:	0032      	movs	r2, r6
 80005f0:	1a80      	subs	r0, r0, r2
 80005f2:	4199      	sbcs	r1, r3
 80005f4:	9000      	str	r0, [sp, #0]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	e79e      	b.n	8000538 <__udivmoddi4+0x84>
 80005fa:	42a3      	cmp	r3, r4
 80005fc:	d8bc      	bhi.n	8000578 <__udivmoddi4+0xc4>
 80005fe:	e782      	b.n	8000506 <__udivmoddi4+0x52>
 8000600:	4642      	mov	r2, r8
 8000602:	2320      	movs	r3, #32
 8000604:	2100      	movs	r1, #0
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	2200      	movs	r2, #0
 800060a:	9100      	str	r1, [sp, #0]
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	40da      	lsrs	r2, r3
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	e785      	b.n	8000522 <__udivmoddi4+0x6e>
 8000616:	4642      	mov	r2, r8
 8000618:	2320      	movs	r3, #32
 800061a:	1a9b      	subs	r3, r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	4646      	mov	r6, r8
 8000620:	409a      	lsls	r2, r3
 8000622:	0023      	movs	r3, r4
 8000624:	40f3      	lsrs	r3, r6
 8000626:	4644      	mov	r4, r8
 8000628:	4313      	orrs	r3, r2
 800062a:	002a      	movs	r2, r5
 800062c:	40e2      	lsrs	r2, r4
 800062e:	001c      	movs	r4, r3
 8000630:	465b      	mov	r3, fp
 8000632:	0015      	movs	r5, r2
 8000634:	2b00      	cmp	r3, #0
 8000636:	dad4      	bge.n	80005e2 <__udivmoddi4+0x12e>
 8000638:	4642      	mov	r2, r8
 800063a:	002f      	movs	r7, r5
 800063c:	2320      	movs	r3, #32
 800063e:	0026      	movs	r6, r4
 8000640:	4097      	lsls	r7, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	40de      	lsrs	r6, r3
 8000646:	003b      	movs	r3, r7
 8000648:	4333      	orrs	r3, r6
 800064a:	e7cd      	b.n	80005e8 <__udivmoddi4+0x134>

0800064c <__clzdi2>:
 800064c:	b510      	push	{r4, lr}
 800064e:	2900      	cmp	r1, #0
 8000650:	d103      	bne.n	800065a <__clzdi2+0xe>
 8000652:	f000 f807 	bl	8000664 <__clzsi2>
 8000656:	3020      	adds	r0, #32
 8000658:	e002      	b.n	8000660 <__clzdi2+0x14>
 800065a:	0008      	movs	r0, r1
 800065c:	f000 f802 	bl	8000664 <__clzsi2>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)

08000664 <__clzsi2>:
 8000664:	211c      	movs	r1, #28
 8000666:	2301      	movs	r3, #1
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0xe>
 800066e:	0c00      	lsrs	r0, r0, #16
 8000670:	3910      	subs	r1, #16
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	4298      	cmp	r0, r3
 8000676:	d301      	bcc.n	800067c <__clzsi2+0x18>
 8000678:	0a00      	lsrs	r0, r0, #8
 800067a:	3908      	subs	r1, #8
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0x22>
 8000682:	0900      	lsrs	r0, r0, #4
 8000684:	3904      	subs	r1, #4
 8000686:	a202      	add	r2, pc, #8	@ (adr r2, 8000690 <__clzsi2+0x2c>)
 8000688:	5c10      	ldrb	r0, [r2, r0]
 800068a:	1840      	adds	r0, r0, r1
 800068c:	4770      	bx	lr
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	02020304 	.word	0x02020304
 8000694:	01010101 	.word	0x01010101
	...

080006a0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	003b      	movs	r3, r7
 80006a8:	0018      	movs	r0, r3
 80006aa:	2308      	movs	r3, #8
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f008 f8ac 	bl	800880c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80006b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000760 <MX_ADC_Init+0xc0>)
 80006b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000764 <MX_ADC_Init+0xc4>)
 80006b8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80006ba:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <MX_ADC_Init+0xc0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80006c0:	4b27      	ldr	r3, [pc, #156]	@ (8000760 <MX_ADC_Init+0xc0>)
 80006c2:	22c0      	movs	r2, #192	@ 0xc0
 80006c4:	0612      	lsls	r2, r2, #24
 80006c6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <MX_ADC_Init+0xc0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80006ce:	4b24      	ldr	r3, [pc, #144]	@ (8000760 <MX_ADC_Init+0xc0>)
 80006d0:	2207      	movs	r2, #7
 80006d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80006d4:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <MX_ADC_Init+0xc0>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006da:	4b21      	ldr	r3, [pc, #132]	@ (8000760 <MX_ADC_Init+0xc0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <MX_ADC_Init+0xc0>)
 80006e2:	2220      	movs	r2, #32
 80006e4:	2100      	movs	r1, #0
 80006e6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <MX_ADC_Init+0xc0>)
 80006ea:	2221      	movs	r2, #33	@ 0x21
 80006ec:	2100      	movs	r1, #0
 80006ee:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <MX_ADC_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <MX_ADC_Init+0xc0>)
 80006f8:	22c2      	movs	r2, #194	@ 0xc2
 80006fa:	32ff      	adds	r2, #255	@ 0xff
 80006fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80006fe:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_ADC_Init+0xc0>)
 8000700:	222c      	movs	r2, #44	@ 0x2c
 8000702:	2100      	movs	r1, #0
 8000704:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <MX_ADC_Init+0xc0>)
 8000708:	2204      	movs	r2, #4
 800070a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_ADC_Init+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000712:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <MX_ADC_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000718:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_ADC_Init+0xc0>)
 800071a:	2201      	movs	r2, #1
 800071c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <MX_ADC_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000724:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_ADC_Init+0xc0>)
 8000726:	0018      	movs	r0, r3
 8000728:	f002 f87c 	bl	8002824 <HAL_ADC_Init>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000730:	f000 ff76 	bl	8001620 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000734:	003b      	movs	r3, r7
 8000736:	2201      	movs	r2, #1
 8000738:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800073a:	003b      	movs	r3, r7
 800073c:	2280      	movs	r2, #128	@ 0x80
 800073e:	0152      	lsls	r2, r2, #5
 8000740:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000742:	003a      	movs	r2, r7
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_ADC_Init+0xc0>)
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f002 fb1b 	bl	8002d84 <HAL_ADC_ConfigChannel>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000752:	f000 ff65 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b002      	add	sp, #8
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	20000080 	.word	0x20000080
 8000764:	40012400 	.word	0x40012400

08000768 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b089      	sub	sp, #36	@ 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	240c      	movs	r4, #12
 8000772:	193b      	adds	r3, r7, r4
 8000774:	0018      	movs	r0, r3
 8000776:	2314      	movs	r3, #20
 8000778:	001a      	movs	r2, r3
 800077a:	2100      	movs	r1, #0
 800077c:	f008 f846 	bl	800880c <memset>
  if(adcHandle->Instance==ADC1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a14      	ldr	r2, [pc, #80]	@ (80007d8 <HAL_ADC_MspInit+0x70>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d122      	bne.n	80007d0 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800078a:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <HAL_ADC_MspInit+0x74>)
 800078c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <HAL_ADC_MspInit+0x74>)
 8000790:	2180      	movs	r1, #128	@ 0x80
 8000792:	0089      	lsls	r1, r1, #2
 8000794:	430a      	orrs	r2, r1
 8000796:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <HAL_ADC_MspInit+0x74>)
 800079a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <HAL_ADC_MspInit+0x74>)
 800079e:	2101      	movs	r1, #1
 80007a0:	430a      	orrs	r2, r1
 80007a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007a4:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <HAL_ADC_MspInit+0x74>)
 80007a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007a8:	2201      	movs	r2, #1
 80007aa:	4013      	ands	r3, r2
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC_IN0_Pin;
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	2201      	movs	r2, #1
 80007b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2203      	movs	r2, #3
 80007ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_IN0_GPIO_Port, &GPIO_InitStruct);
 80007c2:	193a      	adds	r2, r7, r4
 80007c4:	23a0      	movs	r3, #160	@ 0xa0
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	0011      	movs	r1, r2
 80007ca:	0018      	movs	r0, r3
 80007cc:	f002 fdc4 	bl	8003358 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007d0:	46c0      	nop			@ (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b009      	add	sp, #36	@ 0x24
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	40012400 	.word	0x40012400
 80007dc:	40021000 	.word	0x40021000

080007e0 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80007e4:	46c0      	nop			@ (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <PreSleepProcessing>:
/* USER CODE END 2 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b002      	add	sp, #8
 80007f8:	bd80      	pop	{r7, pc}

080007fa <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b002      	add	sp, #8
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4a06      	ldr	r2, [pc, #24]	@ (8000834 <vApplicationGetIdleTaskMemory+0x28>)
 800081c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	4a05      	ldr	r2, [pc, #20]	@ (8000838 <vApplicationGetIdleTaskMemory+0x2c>)
 8000822:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2280      	movs	r2, #128	@ 0x80
 8000828:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b004      	add	sp, #16
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	200000e0 	.word	0x200000e0
 8000838:	20000180 	.word	0x20000180

0800083c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b089      	sub	sp, #36	@ 0x24
 8000840:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4a09      	ldr	r2, [pc, #36]	@ (800086c <MX_FREERTOS_Init+0x30>)
 8000846:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000848:	c313      	stmia	r3!, {r0, r1, r4}
 800084a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800084c:	c313      	stmia	r3!, {r0, r1, r4}
 800084e:	6812      	ldr	r2, [r2, #0]
 8000850:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2100      	movs	r1, #0
 8000856:	0018      	movs	r0, r3
 8000858:	f006 fd59 	bl	800730e <osThreadCreate>
 800085c:	0002      	movs	r2, r0
 800085e:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <MX_FREERTOS_Init+0x34>)
 8000860:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b009      	add	sp, #36	@ 0x24
 8000868:	bd90      	pop	{r4, r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	080091fc 	.word	0x080091fc
 8000870:	200000dc 	.word	0x200000dc

08000874 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f006 fd93 	bl	80073a8 <osDelay>
 8000882:	e7fb      	b.n	800087c <StartDefaultTask+0x8>

08000884 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b089      	sub	sp, #36	@ 0x24
 8000888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	240c      	movs	r4, #12
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	2314      	movs	r3, #20
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f007 ffb9 	bl	800880c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b2d      	ldr	r3, [pc, #180]	@ (8000950 <MX_GPIO_Init+0xcc>)
 800089c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800089e:	4b2c      	ldr	r3, [pc, #176]	@ (8000950 <MX_GPIO_Init+0xcc>)
 80008a0:	2104      	movs	r1, #4
 80008a2:	430a      	orrs	r2, r1
 80008a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <MX_GPIO_Init+0xcc>)
 80008a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008aa:	2204      	movs	r2, #4
 80008ac:	4013      	ands	r3, r2
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <MX_GPIO_Init+0xcc>)
 80008b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008b6:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <MX_GPIO_Init+0xcc>)
 80008b8:	2101      	movs	r1, #1
 80008ba:	430a      	orrs	r2, r1
 80008bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008be:	4b24      	ldr	r3, [pc, #144]	@ (8000950 <MX_GPIO_Init+0xcc>)
 80008c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c2:	2201      	movs	r2, #1
 80008c4:	4013      	ands	r3, r2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <MX_GPIO_Init+0xcc>)
 80008cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008ce:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <MX_GPIO_Init+0xcc>)
 80008d0:	2102      	movs	r1, #2
 80008d2:	430a      	orrs	r2, r1
 80008d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_GPIO_Init+0xcc>)
 80008d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008da:	2202      	movs	r2, #2
 80008dc:	4013      	ands	r3, r2
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_LED_GPIO_Port, DBG_LED_Pin, GPIO_PIN_RESET);
 80008e2:	23a0      	movs	r3, #160	@ 0xa0
 80008e4:	05db      	lsls	r3, r3, #23
 80008e6:	2200      	movs	r2, #0
 80008e8:	2120      	movs	r1, #32
 80008ea:	0018      	movs	r0, r3
 80008ec:	f002 ff94 	bl	8003818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80008f0:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <MX_GPIO_Init+0xd0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	2121      	movs	r1, #33	@ 0x21
 80008f6:	0018      	movs	r0, r3
 80008f8:	f002 ff8e 	bl	8003818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DBG_LED_Pin */
  GPIO_InitStruct.Pin = DBG_LED_Pin;
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	2220      	movs	r2, #32
 8000900:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2201      	movs	r2, #1
 8000906:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DBG_LED_GPIO_Port, &GPIO_InitStruct);
 8000914:	193a      	adds	r2, r7, r4
 8000916:	23a0      	movs	r3, #160	@ 0xa0
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f002 fd1b 	bl	8003358 <HAL_GPIO_Init>

  /*Configure GPIO pins : VBAT_MEAS_EN_Pin I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin;
 8000922:	0021      	movs	r1, r4
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2221      	movs	r2, #33	@ 0x21
 8000928:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2201      	movs	r2, #1
 800092e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	187b      	adds	r3, r7, r1
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <MX_GPIO_Init+0xd0>)
 8000940:	0019      	movs	r1, r3
 8000942:	0010      	movs	r0, r2
 8000944:	f002 fd08 	bl	8003358 <HAL_GPIO_Init>

}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b009      	add	sp, #36	@ 0x24
 800094e:	bd90      	pop	{r4, r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	50000400 	.word	0x50000400

08000958 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800095c:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <MX_I2C1_Init+0x78>)
 800095e:	4a1d      	ldr	r2, [pc, #116]	@ (80009d4 <MX_I2C1_Init+0x7c>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000962:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <MX_I2C1_Init+0x78>)
 8000964:	22c1      	movs	r2, #193	@ 0xc1
 8000966:	00d2      	lsls	r2, r2, #3
 8000968:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800096a:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <MX_I2C1_Init+0x78>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000970:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <MX_I2C1_Init+0x78>)
 8000972:	2201      	movs	r2, #1
 8000974:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000976:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <MX_I2C1_Init+0x78>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <MX_I2C1_Init+0x78>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000982:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <MX_I2C1_Init+0x78>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <MX_I2C1_Init+0x78>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <MX_I2C1_Init+0x78>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_I2C1_Init+0x78>)
 8000996:	0018      	movs	r0, r3
 8000998:	f002 ff5c 	bl	8003854 <HAL_I2C_Init>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a0:	f000 fe3e 	bl	8001620 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a4:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <MX_I2C1_Init+0x78>)
 80009a6:	2100      	movs	r1, #0
 80009a8:	0018      	movs	r0, r3
 80009aa:	f003 fe2b 	bl	8004604 <HAL_I2CEx_ConfigAnalogFilter>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80009b2:	f000 fe35 	bl	8001620 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_I2C1_Init+0x78>)
 80009b8:	2100      	movs	r1, #0
 80009ba:	0018      	movs	r0, r3
 80009bc:	f003 fe6e 	bl	800469c <HAL_I2CEx_ConfigDigitalFilter>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80009c4:	f000 fe2c 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	20000380 	.word	0x20000380
 80009d4:	40005400 	.word	0x40005400

080009d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b089      	sub	sp, #36	@ 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	240c      	movs	r4, #12
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	0018      	movs	r0, r3
 80009e6:	2314      	movs	r3, #20
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f007 ff0e 	bl	800880c <memset>
  if(i2cHandle->Instance==I2C1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a17      	ldr	r2, [pc, #92]	@ (8000a54 <HAL_I2C_MspInit+0x7c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d128      	bne.n	8000a4c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <HAL_I2C_MspInit+0x80>)
 80009fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <HAL_I2C_MspInit+0x80>)
 8000a00:	2102      	movs	r1, #2
 8000a02:	430a      	orrs	r2, r1
 8000a04:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <HAL_I2C_MspInit+0x80>)
 8000a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a12:	0021      	movs	r1, r4
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	22c0      	movs	r2, #192	@ 0xc0
 8000a18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2212      	movs	r2, #18
 8000a1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2203      	movs	r2, #3
 8000a2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2201      	movs	r2, #1
 8000a30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	4a09      	ldr	r2, [pc, #36]	@ (8000a5c <HAL_I2C_MspInit+0x84>)
 8000a36:	0019      	movs	r1, r3
 8000a38:	0010      	movs	r0, r2
 8000a3a:	f002 fc8d 	bl	8003358 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <HAL_I2C_MspInit+0x80>)
 8000a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a42:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <HAL_I2C_MspInit+0x80>)
 8000a44:	2180      	movs	r1, #128	@ 0x80
 8000a46:	0389      	lsls	r1, r1, #14
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b009      	add	sp, #36	@ 0x24
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	40005400 	.word	0x40005400
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	50000400 	.word	0x50000400

08000a60 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a9c <HAL_I2C_MspDeInit+0x3c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d10f      	bne.n	8000a92 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <HAL_I2C_MspDeInit+0x40>)
 8000a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_I2C_MspDeInit+0x40>)
 8000a78:	490a      	ldr	r1, [pc, #40]	@ (8000aa4 <HAL_I2C_MspDeInit+0x44>)
 8000a7a:	400a      	ands	r2, r1
 8000a7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <HAL_I2C_MspDeInit+0x48>)
 8000a80:	2140      	movs	r1, #64	@ 0x40
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 fde6 	bl	8003654 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <HAL_I2C_MspDeInit+0x48>)
 8000a8a:	2180      	movs	r1, #128	@ 0x80
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f002 fde1 	bl	8003654 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	ffdfffff 	.word	0xffdfffff
 8000aa8:	50000400 	.word	0x50000400

08000aac <verify_uart_ready>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// UART state verification function
static bool verify_uart_ready(UART_HandleTypeDef *huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  return (huart != NULL);  // Simplified check for now
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	4193      	sbcs	r3, r2
 8000aba:	b2db      	uxtb	r3, r3
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <dbg_print>:

// Debug logging helpers over huart1 (115200 baud)
static void dbg_print(const char *s)
{
 8000ac4:	b5b0      	push	{r4, r5, r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if (!s) return;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d01e      	beq.n	8000b10 <dbg_print+0x4c>
  size_t n = strlen(s);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff fb17 	bl	8000108 <strlen>
 8000ada:	0003      	movs	r3, r0
 8000adc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)s, (uint16_t)n, 100);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	250b      	movs	r5, #11
 8000ae4:	197c      	adds	r4, r7, r5
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	480b      	ldr	r0, [pc, #44]	@ (8000b18 <dbg_print+0x54>)
 8000aea:	2364      	movs	r3, #100	@ 0x64
 8000aec:	f005 fbcc 	bl	8006288 <HAL_UART_Transmit>
 8000af0:	0003      	movs	r3, r0
 8000af2:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8000af4:	197b      	adds	r3, r7, r5
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00a      	beq.n	8000b12 <dbg_print+0x4e>
    // UART failed, try to recover
    HAL_UART_DeInit(&huart1);
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <dbg_print+0x54>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f005 fb84 	bl	800620c <HAL_UART_DeInit>
    HAL_Delay(10);
 8000b04:	200a      	movs	r0, #10
 8000b06:	f001 fe61 	bl	80027cc <HAL_Delay>
    MX_USART1_UART_Init();
 8000b0a:	f000 ff11 	bl	8001930 <MX_USART1_UART_Init>
 8000b0e:	e000      	b.n	8000b12 <dbg_print+0x4e>
  if (!s) return;
 8000b10:	46c0      	nop			@ (mov r8, r8)
  }
}
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b004      	add	sp, #16
 8000b16:	bdb0      	pop	{r4, r5, r7, pc}
 8000b18:	20000644 	.word	0x20000644

08000b1c <dbg_print_line>:
static void dbg_print_line(const char *s)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if (!s) return;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d008      	beq.n	8000b3c <dbg_print_line+0x20>
  dbg_print(s);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff ffc9 	bl	8000ac4 <dbg_print>
  dbg_print("\r\n");
 8000b32:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <dbg_print_line+0x28>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff ffc5 	bl	8000ac4 <dbg_print>
 8000b3a:	e000      	b.n	8000b3e <dbg_print_line+0x22>
  if (!s) return;
 8000b3c:	46c0      	nop			@ (mov r8, r8)
}
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	08009218 	.word	0x08009218

08000b48 <find_char_after>:

char find_char_after(const char *str, const char *keyword) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
    if (!str || !keyword) return '\0';
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <find_char_after+0x16>
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <find_char_after+0x1a>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e02a      	b.n	8000bb8 <find_char_after+0x70>

    // Simple substring search
    const char *p = str;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	617b      	str	r3, [r7, #20]
    const char *k;

    while (*p) {
 8000b66:	e022      	b.n	8000bae <find_char_after+0x66>
        const char *s = p;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	60fb      	str	r3, [r7, #12]
        k = keyword;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	613b      	str	r3, [r7, #16]
        while (*s && *k && *s == *k) {
 8000b70:	e005      	b.n	8000b7e <find_char_after+0x36>
            s++;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3301      	adds	r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
            k++;
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
        while (*s && *k && *s == *k) {
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d009      	beq.n	8000b9a <find_char_after+0x52>
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d005      	beq.n	8000b9a <find_char_after+0x52>
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d0eb      	beq.n	8000b72 <find_char_after+0x2a>
        }
        if (*k == '\0') {
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d102      	bne.n	8000ba8 <find_char_after+0x60>
            // Found full keyword, return next char if available
            return *s ? *s : '\0';
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	e007      	b.n	8000bb8 <find_char_after+0x70>
        }
        p++;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
    while (*p) {
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1d8      	bne.n	8000b68 <find_char_after+0x20>
    }
    return '\0'; // Not found
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b006      	add	sp, #24
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <join>:
	  }
}


int join(UART_HandleTypeDef *huart)
{
 8000bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc2:	b0c7      	sub	sp, #284	@ 0x11c
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	6078      	str	r0, [r7, #4]
  if (is_connected) { dbg_print_line("JOIN:skip"); return 1; }
 8000bc8:	4b5e      	ldr	r3, [pc, #376]	@ (8000d44 <join+0x184>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d005      	beq.n	8000bdc <join+0x1c>
 8000bd0:	4b5d      	ldr	r3, [pc, #372]	@ (8000d48 <join+0x188>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f7ff ffa2 	bl	8000b1c <dbg_print_line>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e0af      	b.n	8000d3c <join+0x17c>
  dbg_print_line("JOIN:start");
 8000bdc:	4b5b      	ldr	r3, [pc, #364]	@ (8000d4c <join+0x18c>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff ff9c 	bl	8000b1c <dbg_print_line>
	HAL_UART_Transmit(&huart2, (uint8_t*)"AT\r\n", 4, 300);
 8000be4:	2396      	movs	r3, #150	@ 0x96
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4959      	ldr	r1, [pc, #356]	@ (8000d50 <join+0x190>)
 8000bea:	485a      	ldr	r0, [pc, #360]	@ (8000d54 <join+0x194>)
 8000bec:	2204      	movs	r2, #4
 8000bee:	f005 fb4b 	bl	8006288 <HAL_UART_Transmit>
	HAL_Delay(300); // let OK come back!
 8000bf2:	2396      	movs	r3, #150	@ 0x96
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 fde8 	bl	80027cc <HAL_Delay>
	uint16_t total_rcv = 0;
 8000bfc:	2385      	movs	r3, #133	@ 0x85
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	2200      	movs	r2, #0
 8000c04:	801a      	strh	r2, [r3, #0]
	int16_t total_expected =11;
 8000c06:	2387      	movs	r3, #135	@ 0x87
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	220b      	movs	r2, #11
 8000c0e:	801a      	strh	r2, [r3, #0]
	uint8_t rxbuf[256] = {0};
 8000c10:	4b51      	ldr	r3, [pc, #324]	@ (8000d58 <join+0x198>)
 8000c12:	2288      	movs	r2, #136	@ 0x88
 8000c14:	0052      	lsls	r2, r2, #1
 8000c16:	189b      	adds	r3, r3, r2
 8000c18:	19db      	adds	r3, r3, r7
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2380      	movs	r3, #128	@ 0x80
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	001a      	movs	r2, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	f007 fdf2 	bl	800880c <memset>
	HAL_UART_Transmit(&huart2, (uint8_t*)"AT+JOIN\r\n", 9, 300);
 8000c28:	2396      	movs	r3, #150	@ 0x96
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	494b      	ldr	r1, [pc, #300]	@ (8000d5c <join+0x19c>)
 8000c2e:	4849      	ldr	r0, [pc, #292]	@ (8000d54 <join+0x194>)
 8000c30:	2209      	movs	r2, #9
 8000c32:	f005 fb29 	bl	8006288 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rxbuf, 4, 100);
 8000c36:	2308      	movs	r3, #8
 8000c38:	18f9      	adds	r1, r7, r3
 8000c3a:	4846      	ldr	r0, [pc, #280]	@ (8000d54 <join+0x194>)
 8000c3c:	2364      	movs	r3, #100	@ 0x64
 8000c3e:	2204      	movs	r2, #4
 8000c40:	f005 fbc2 	bl	80063c8 <HAL_UART_Receive>
	__HAL_UART_FLUSH_DRREGISTER(&huart2);
 8000c44:	4b43      	ldr	r3, [pc, #268]	@ (8000d54 <join+0x194>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	699a      	ldr	r2, [r3, #24]
 8000c4a:	4b42      	ldr	r3, [pc, #264]	@ (8000d54 <join+0x194>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2108      	movs	r1, #8
 8000c50:	430a      	orrs	r2, r1
 8000c52:	619a      	str	r2, [r3, #24]
 8000c54:	4b3f      	ldr	r3, [pc, #252]	@ (8000d54 <join+0x194>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	699a      	ldr	r2, [r3, #24]
 8000c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d54 <join+0x194>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2110      	movs	r1, #16
 8000c60:	430a      	orrs	r2, r1
 8000c62:	619a      	str	r2, [r3, #24]
	__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8000c64:	4b3b      	ldr	r3, [pc, #236]	@ (8000d54 <join+0x194>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2210      	movs	r2, #16
 8000c6a:	621a      	str	r2, [r3, #32]

	while (total_expected > 0)
 8000c6c:	e019      	b.n	8000ca2 <join+0xe2>
	{
		  HAL_UARTEx_ReceiveToIdle(&huart2, rxbuf + total_rcv, 100, &total_rcv, 10000);
 8000c6e:	2085      	movs	r0, #133	@ 0x85
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	183b      	adds	r3, r7, r0
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	001a      	movs	r2, r3
 8000c78:	2308      	movs	r3, #8
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	1899      	adds	r1, r3, r2
 8000c7e:	0004      	movs	r4, r0
 8000c80:	183b      	adds	r3, r7, r0
 8000c82:	4834      	ldr	r0, [pc, #208]	@ (8000d54 <join+0x194>)
 8000c84:	4a36      	ldr	r2, [pc, #216]	@ (8000d60 <join+0x1a0>)
 8000c86:	9200      	str	r2, [sp, #0]
 8000c88:	2264      	movs	r2, #100	@ 0x64
 8000c8a:	f006 f9ff 	bl	800708c <HAL_UARTEx_ReceiveToIdle>
		  total_expected -= total_rcv;
 8000c8e:	2187      	movs	r1, #135	@ 0x87
 8000c90:	0049      	lsls	r1, r1, #1
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	881a      	ldrh	r2, [r3, #0]
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	801a      	strh	r2, [r3, #0]
	while (total_expected > 0)
 8000ca2:	2387      	movs	r3, #135	@ 0x87
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	2200      	movs	r2, #0
 8000caa:	5e9b      	ldrsh	r3, [r3, r2]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	dcde      	bgt.n	8000c6e <join+0xae>
	}

	__HAL_UART_FLUSH_DRREGISTER(&huart2);
 8000cb0:	4b28      	ldr	r3, [pc, #160]	@ (8000d54 <join+0x194>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	699a      	ldr	r2, [r3, #24]
 8000cb6:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <join+0x194>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2108      	movs	r1, #8
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	619a      	str	r2, [r3, #24]
 8000cc0:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <join+0x194>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	699a      	ldr	r2, [r3, #24]
 8000cc6:	4b23      	ldr	r3, [pc, #140]	@ (8000d54 <join+0x194>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2110      	movs	r1, #16
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	619a      	str	r2, [r3, #24]
	__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8000cd0:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <join+0x194>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2210      	movs	r2, #16
 8000cd6:	621a      	str	r2, [r3, #32]

	char result = find_char_after((const char*)rxbuf, "JOIN: [");
 8000cd8:	250e      	movs	r5, #14
 8000cda:	35ff      	adds	r5, #255	@ 0xff
 8000cdc:	197c      	adds	r4, r7, r5
 8000cde:	4a21      	ldr	r2, [pc, #132]	@ (8000d64 <join+0x1a4>)
 8000ce0:	2608      	movs	r6, #8
 8000ce2:	19bb      	adds	r3, r7, r6
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff ff2e 	bl	8000b48 <find_char_after>
 8000cec:	0003      	movs	r3, r0
 8000cee:	7023      	strb	r3, [r4, #0]
	char error14 = find_char_after((const char*)rxbuf, "\nERROR 1");
 8000cf0:	2386      	movs	r3, #134	@ 0x86
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	18fc      	adds	r4, r7, r3
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d68 <join+0x1a8>)
 8000cf8:	19bb      	adds	r3, r7, r6
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff23 	bl	8000b48 <find_char_after>
 8000d02:	0003      	movs	r3, r0
 8000d04:	7023      	strb	r3, [r4, #0]
	if (result == 'O' || error14 == '4')
 8000d06:	197b      	adds	r3, r7, r5
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b4f      	cmp	r3, #79	@ 0x4f
 8000d0c:	d005      	beq.n	8000d1a <join+0x15a>
 8000d0e:	2386      	movs	r3, #134	@ 0x86
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b34      	cmp	r3, #52	@ 0x34
 8000d18:	d108      	bne.n	8000d2c <join+0x16c>
	{
		is_connected = 1;
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <join+0x184>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
    dbg_print_line("JOIN:success");
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <join+0x1ac>)
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fefa 	bl	8000b1c <dbg_print_line>
    return 1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e007      	b.n	8000d3c <join+0x17c>
		__NOP(); // success
	}
	else
	{
		is_connected = 0;
 8000d2c:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <join+0x184>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
    dbg_print_line("JOIN:fail");
 8000d32:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <join+0x1b0>)
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff fef1 	bl	8000b1c <dbg_print_line>
    return 0;
 8000d3a:	2300      	movs	r3, #0
		__NOP(); // fail
	}
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b045      	add	sp, #276	@ 0x114
 8000d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d44:	200003d4 	.word	0x200003d4
 8000d48:	08009230 	.word	0x08009230
 8000d4c:	0800923c 	.word	0x0800923c
 8000d50:	0800921c 	.word	0x0800921c
 8000d54:	200006cc 	.word	0x200006cc
 8000d58:	fffffef8 	.word	0xfffffef8
 8000d5c:	08009248 	.word	0x08009248
 8000d60:	00002710 	.word	0x00002710
 8000d64:	08009254 	.word	0x08009254
 8000d68:	0800925c 	.word	0x0800925c
 8000d6c:	08009268 	.word	0x08009268
 8000d70:	08009278 	.word	0x08009278

08000d74 <lorawan_set_battery_level>:
		  return 1;
	  }
}

int lorawan_set_battery_level(UART_HandleTypeDef *huart, uint8_t battery_level)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	@ 0x30
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	000a      	movs	r2, r1
 8000d7e:	1cfb      	adds	r3, r7, #3
 8000d80:	701a      	strb	r2, [r3, #0]
    char cmd[32];   // enough space for command
    int len = snprintf(cmd, sizeof(cmd), "AT+BAT %u\r\n", battery_level);
 8000d82:	1cfb      	adds	r3, r7, #3
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	4a22      	ldr	r2, [pc, #136]	@ (8000e10 <lorawan_set_battery_level+0x9c>)
 8000d88:	210c      	movs	r1, #12
 8000d8a:	1878      	adds	r0, r7, r1
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	f007 fd07 	bl	80087a0 <sniprintf>
 8000d92:	0003      	movs	r3, r0
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (len <= 0 || len >= sizeof(cmd)) {
 8000d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	dd02      	ble.n	8000da2 <lorawan_set_battery_level+0x2e>
 8000d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d9e:	2b1f      	cmp	r3, #31
 8000da0:	d902      	bls.n	8000da8 <lorawan_set_battery_level+0x34>
        return -1; // encoding error or buffer too small
 8000da2:	2301      	movs	r3, #1
 8000da4:	425b      	negs	r3, r3
 8000da6:	e02f      	b.n	8000e08 <lorawan_set_battery_level+0x94>
    }

    // Flush / clear UART
    HAL_UART_AbortReceive(huart);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	0018      	movs	r0, r3
 8000dac:	f005 fbf2 	bl	8006594 <HAL_UART_AbortReceive>
    __HAL_UART_FLUSH_DRREGISTER(huart);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	699a      	ldr	r2, [r3, #24]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2108      	movs	r1, #8
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	619a      	str	r2, [r3, #24]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	699a      	ldr	r2, [r3, #24]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2110      	movs	r1, #16
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	619a      	str	r2, [r3, #24]
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2210      	movs	r2, #16
 8000dd6:	621a      	str	r2, [r3, #32]
    __HAL_UART_CLEAR_FLAG(huart,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	220f      	movs	r2, #15
 8000dde:	621a      	str	r2, [r3, #32]
        UART_CLEAR_OREF | UART_CLEAR_FEF | UART_CLEAR_PEF | UART_CLEAR_NEF);

    // Transmit command
    if (HAL_UART_Transmit(huart, (uint8_t*)cmd, (uint16_t)len, 300) != HAL_OK) {
 8000de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	2396      	movs	r3, #150	@ 0x96
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	210c      	movs	r1, #12
 8000dea:	1879      	adds	r1, r7, r1
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f005 fa4b 	bl	8006288 <HAL_UART_Transmit>
 8000df2:	1e03      	subs	r3, r0, #0
 8000df4:	d002      	beq.n	8000dfc <lorawan_set_battery_level+0x88>
        return -2; // TX error
 8000df6:	2302      	movs	r3, #2
 8000df8:	425b      	negs	r3, r3
 8000dfa:	e005      	b.n	8000e08 <lorawan_set_battery_level+0x94>
    }

    HAL_Delay(300);
 8000dfc:	2396      	movs	r3, #150	@ 0x96
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	0018      	movs	r0, r3
 8000e02:	f001 fce3 	bl	80027cc <HAL_Delay>
    return 0; // success
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b00c      	add	sp, #48	@ 0x30
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	08009290 	.word	0x08009290

08000e14 <LoRaWAN_set_fport>:


static void LoRaWAN_set_fport(int fPort) {
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b089      	sub	sp, #36	@ 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    char cmd[20];  // plenty big for "ATS 629=255\r\n"
    int n = snprintf(cmd, sizeof(cmd), "ATS 629=%d\r\n", fPort);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a0d      	ldr	r2, [pc, #52]	@ (8000e54 <LoRaWAN_set_fport+0x40>)
 8000e20:	2408      	movs	r4, #8
 8000e22:	1938      	adds	r0, r7, r4
 8000e24:	2114      	movs	r1, #20
 8000e26:	f007 fcbb 	bl	80087a0 <sniprintf>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	61fb      	str	r3, [r7, #28]
    if (n > 0 && n < (int)sizeof(cmd)) {
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	dd0a      	ble.n	8000e4a <LoRaWAN_set_fport+0x36>
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	2b13      	cmp	r3, #19
 8000e38:	dc07      	bgt.n	8000e4a <LoRaWAN_set_fport+0x36>
        HAL_UART_Transmit(&huart2, (uint8_t*)cmd, (uint16_t)n, 300);
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	2396      	movs	r3, #150	@ 0x96
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	1939      	adds	r1, r7, r4
 8000e44:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <LoRaWAN_set_fport+0x44>)
 8000e46:	f005 fa1f 	bl	8006288 <HAL_UART_Transmit>
    }
}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b009      	add	sp, #36	@ 0x24
 8000e50:	bd90      	pop	{r4, r7, pc}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	0800929c 	.word	0x0800929c
 8000e58:	200006cc 	.word	0x200006cc

08000e5c <LoRaWAN_SendHex>:


void LoRaWAN_SendHex(const uint8_t *payload, size_t length, int fPort)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	@ 0x30
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
    static const char HEX[16] = "0123456789ABCDEF";
    static const char prefix[] = "AT+SEND \"";
    static const char suffix[] = "\"\r\n";

    if (!payload || length == 0) return;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <LoRaWAN_SendHex+0x14>
 8000e6e:	e084      	b.n	8000f7a <LoRaWAN_SendHex+0x11e>
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d100      	bne.n	8000e78 <LoRaWAN_SendHex+0x1c>
 8000e76:	e080      	b.n	8000f7a <LoRaWAN_SendHex+0x11e>

    // Max wire size = len*2 hex + 8(prefix) + 3(suffix)
    // 242B -> 484 + 11 = 495 bytes fits in 512
    static uint8_t txbuf[512];

    const size_t prefix_len = sizeof(prefix) - 1;
 8000e78:	2309      	movs	r3, #9
 8000e7a:	61fb      	str	r3, [r7, #28]
    const size_t suffix_len = sizeof(suffix) - 1;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	61bb      	str	r3, [r7, #24]
    const size_t need = prefix_len + (length * 2u) + suffix_len;
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	005a      	lsls	r2, r3, #1
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	18d3      	adds	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	18d3      	adds	r3, r2, r3
 8000e8c:	617b      	str	r3, [r7, #20]

    if (need > sizeof(txbuf)) {
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	2380      	movs	r3, #128	@ 0x80
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d872      	bhi.n	8000f7e <LoRaWAN_SendHex+0x122>
        // Payload too large for our static buffer; don't send a truncated command
        return;
    }

    size_t idx = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Copy prefix
    for (size_t i = 0; i < prefix_len; ++i) txbuf[idx++] = (uint8_t)prefix[i];
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ea0:	e00b      	b.n	8000eba <LoRaWAN_SendHex+0x5e>
 8000ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ea4:	1c5a      	adds	r2, r3, #1
 8000ea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000ea8:	4937      	ldr	r1, [pc, #220]	@ (8000f88 <LoRaWAN_SendHex+0x12c>)
 8000eaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000eac:	188a      	adds	r2, r1, r2
 8000eae:	7811      	ldrb	r1, [r2, #0]
 8000eb0:	4a36      	ldr	r2, [pc, #216]	@ (8000f8c <LoRaWAN_SendHex+0x130>)
 8000eb2:	54d1      	strb	r1, [r2, r3]
 8000eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d3ef      	bcc.n	8000ea2 <LoRaWAN_SendHex+0x46>

    // Hex-encode payload
    for (size_t i = 0; i < length; ++i) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ec6:	e020      	b.n	8000f0a <LoRaWAN_SendHex+0xae>
        uint8_t b = payload[i];
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ecc:	18d2      	adds	r2, r2, r3
 8000ece:	2013      	movs	r0, #19
 8000ed0:	183b      	adds	r3, r7, r0
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	701a      	strb	r2, [r3, #0]
        txbuf[idx++] = (uint8_t)HEX[b >> 4];
 8000ed6:	183b      	adds	r3, r7, r0
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	0019      	movs	r1, r3
 8000ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8000f90 <LoRaWAN_SendHex+0x134>)
 8000ee8:	5c51      	ldrb	r1, [r2, r1]
 8000eea:	4a28      	ldr	r2, [pc, #160]	@ (8000f8c <LoRaWAN_SendHex+0x130>)
 8000eec:	54d1      	strb	r1, [r2, r3]
        txbuf[idx++] = (uint8_t)HEX[b & 0x0F];
 8000eee:	183b      	adds	r3, r7, r0
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef8:	1c59      	adds	r1, r3, #1
 8000efa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8000efc:	4924      	ldr	r1, [pc, #144]	@ (8000f90 <LoRaWAN_SendHex+0x134>)
 8000efe:	5c89      	ldrb	r1, [r1, r2]
 8000f00:	4a22      	ldr	r2, [pc, #136]	@ (8000f8c <LoRaWAN_SendHex+0x130>)
 8000f02:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < length; ++i) {
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f06:	3301      	adds	r3, #1
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d3da      	bcc.n	8000ec8 <LoRaWAN_SendHex+0x6c>
    }

    // Copy suffix
    for (size_t i = 0; i < suffix_len; ++i) txbuf[idx++] = (uint8_t)suffix[i];
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
 8000f16:	e00b      	b.n	8000f30 <LoRaWAN_SendHex+0xd4>
 8000f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000f1e:	491d      	ldr	r1, [pc, #116]	@ (8000f94 <LoRaWAN_SendHex+0x138>)
 8000f20:	6a3a      	ldr	r2, [r7, #32]
 8000f22:	188a      	adds	r2, r1, r2
 8000f24:	7811      	ldrb	r1, [r2, #0]
 8000f26:	4a19      	ldr	r2, [pc, #100]	@ (8000f8c <LoRaWAN_SendHex+0x130>)
 8000f28:	54d1      	strb	r1, [r2, r3]
 8000f2a:	6a3b      	ldr	r3, [r7, #32]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	623b      	str	r3, [r7, #32]
 8000f30:	6a3a      	ldr	r2, [r7, #32]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d3ef      	bcc.n	8000f18 <LoRaWAN_SendHex+0xbc>

  // dbg_print_u32("SEND:len", (uint32_t)length);
  HAL_UART_Transmit(&huart2, (uint8_t*)"AT\r\n", 4, 300);  // WAKE MODULE!
 8000f38:	2396      	movs	r3, #150	@ 0x96
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4916      	ldr	r1, [pc, #88]	@ (8000f98 <LoRaWAN_SendHex+0x13c>)
 8000f3e:	4817      	ldr	r0, [pc, #92]	@ (8000f9c <LoRaWAN_SendHex+0x140>)
 8000f40:	2204      	movs	r2, #4
 8000f42:	f005 f9a1 	bl	8006288 <HAL_UART_Transmit>
  HAL_Delay(400); // Giving it enough ttime to wake up
 8000f46:	23c8      	movs	r3, #200	@ 0xc8
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f001 fc3e 	bl	80027cc <HAL_Delay>

  // Set FPort from the function argument (dynamic)
  LoRaWAN_set_fport(fPort);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff ff5e 	bl	8000e14 <LoRaWAN_set_fport>
  HAL_Delay(300);
 8000f58:	2396      	movs	r3, #150	@ 0x96
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f001 fc35 	bl	80027cc <HAL_Delay>

  HAL_UART_Transmit(&huart2, txbuf, (uint16_t)idx, 300); // SEND THE DATA!
 8000f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	2396      	movs	r3, #150	@ 0x96
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4908      	ldr	r1, [pc, #32]	@ (8000f8c <LoRaWAN_SendHex+0x130>)
 8000f6c:	480b      	ldr	r0, [pc, #44]	@ (8000f9c <LoRaWAN_SendHex+0x140>)
 8000f6e:	f005 f98b 	bl	8006288 <HAL_UART_Transmit>

  // Return to fPort 1, probably not needed, but lets do it anyhow
  LoRaWAN_set_fport(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f7ff ff4e 	bl	8000e14 <LoRaWAN_set_fport>
 8000f78:	e002      	b.n	8000f80 <LoRaWAN_SendHex+0x124>
    if (!payload || length == 0) return;
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	e000      	b.n	8000f80 <LoRaWAN_SendHex+0x124>
        return;
 8000f7e:	46c0      	nop			@ (mov r8, r8)
  // HAL_Delay(300); // Not sure if i need this
}
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b00c      	add	sp, #48	@ 0x30
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	080092d4 	.word	0x080092d4
 8000f8c:	200003dc 	.word	0x200003dc
 8000f90:	080092e0 	.word	0x080092e0
 8000f94:	080092f0 	.word	0x080092f0
 8000f98:	0800921c 	.word	0x0800921c
 8000f9c:	200006cc 	.word	0x200006cc

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa6:	f001 fbd5 	bl	8002754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000faa:	f000 f93d 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fae:	f7ff fc69 	bl	8000884 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fb2:	f000 fcf1 	bl	8001998 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000fb6:	f000 fcbb 	bl	8001930 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000fba:	f000 fb3b 	bl	8001634 <MX_RTC_Init>
  MX_I2C1_Init();
 8000fbe:	f7ff fccb 	bl	8000958 <MX_I2C1_Init>
  MX_ADC_Init();
 8000fc2:	f7ff fb6d 	bl	80006a0 <MX_ADC_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000fc6:	f7ff fc39 	bl	800083c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fca:	f006 f998 	bl	80072fe <osKernelStart>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fce:	b672      	cpsid	i
}
 8000fd0:	46c0      	nop			@ (mov r8, r8)

    /* USER CODE BEGIN 3 */

	  uint16_t ticks;
	  __disable_irq();
	  ticks = wakeup_counter;
 8000fd2:	2116      	movs	r1, #22
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	4a86      	ldr	r2, [pc, #536]	@ (80011f0 <main+0x250>)
 8000fd8:	8812      	ldrh	r2, [r2, #0]
 8000fda:	801a      	strh	r2, [r3, #0]
	  wakeup_counter = 0;
 8000fdc:	4b84      	ldr	r3, [pc, #528]	@ (80011f0 <main+0x250>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000fe2:	b662      	cpsie	i
}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
	  __enable_irq();

	  wakes_accum += ticks;
 8000fe6:	4b83      	ldr	r3, [pc, #524]	@ (80011f4 <main+0x254>)
 8000fe8:	881a      	ldrh	r2, [r3, #0]
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	18d3      	adds	r3, r2, r3
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4b80      	ldr	r3, [pc, #512]	@ (80011f4 <main+0x254>)
 8000ff4:	801a      	strh	r2, [r3, #0]

	  // dbg_print_u32("Loop:wakes_accum", wakes_accum);
	  // dbg_print_u32("Loop:WAKEUPS_PER_CYCLE", WAKEUPS_PER_CYCLE);

	  bool do_transmit = first_run || (wakes_accum >= WAKEUPS_PER_CYCLE);
 8000ff6:	4b80      	ldr	r3, [pc, #512]	@ (80011f8 <main+0x258>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d104      	bne.n	8001008 <main+0x68>
 8000ffe:	4b7d      	ldr	r3, [pc, #500]	@ (80011f4 <main+0x254>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	2214      	movs	r2, #20
 8001004:	4293      	cmp	r3, r2
 8001006:	d301      	bcc.n	800100c <main+0x6c>
 8001008:	2201      	movs	r2, #1
 800100a:	e000      	b.n	800100e <main+0x6e>
 800100c:	2200      	movs	r2, #0
 800100e:	2315      	movs	r3, #21
 8001010:	18fb      	adds	r3, r7, r3
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	781a      	ldrb	r2, [r3, #0]
 8001016:	2101      	movs	r1, #1
 8001018:	400a      	ands	r2, r1
 800101a:	701a      	strb	r2, [r3, #0]
  
  // Verify UART is ready after wake-up
  if (!verify_uart_ready(&huart1) || !verify_uart_ready(&huart2)) {
 800101c:	4b77      	ldr	r3, [pc, #476]	@ (80011fc <main+0x25c>)
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff fd44 	bl	8000aac <verify_uart_ready>
 8001024:	0003      	movs	r3, r0
 8001026:	001a      	movs	r2, r3
 8001028:	2301      	movs	r3, #1
 800102a:	4053      	eors	r3, r2
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10a      	bne.n	8001048 <main+0xa8>
 8001032:	4b73      	ldr	r3, [pc, #460]	@ (8001200 <main+0x260>)
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff fd39 	bl	8000aac <verify_uart_ready>
 800103a:	0003      	movs	r3, r0
 800103c:	001a      	movs	r2, r3
 800103e:	2301      	movs	r3, #1
 8001040:	4053      	eors	r3, r2
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <main+0xb0>
    dbg_print_line("UART:reinit_failed");
 8001048:	4b6e      	ldr	r3, [pc, #440]	@ (8001204 <main+0x264>)
 800104a:	0018      	movs	r0, r3
 800104c:	f7ff fd66 	bl	8000b1c <dbg_print_line>
    // Additional recovery could be added here if needed
  }
  
  if (!do_transmit) { dbg_print_line("Loop:no_tx"); }
 8001050:	2315      	movs	r3, #21
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	4053      	eors	r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <main+0xc8>
 8001060:	4b69      	ldr	r3, [pc, #420]	@ (8001208 <main+0x268>)
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff fd5a 	bl	8000b1c <dbg_print_line>
  if (do_transmit)
 8001068:	2315      	movs	r3, #21
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d100      	bne.n	8001074 <main+0xd4>
 8001072:	e0ba      	b.n	80011ea <main+0x24a>
  {
    wakeup_counter = 0;   // reset for next cycle
 8001074:	4b5e      	ldr	r3, [pc, #376]	@ (80011f0 <main+0x250>)
 8001076:	2200      	movs	r2, #0
 8001078:	801a      	strh	r2, [r3, #0]
    wakes_accum = 0;
 800107a:	4b5e      	ldr	r3, [pc, #376]	@ (80011f4 <main+0x254>)
 800107c:	2200      	movs	r2, #0
 800107e:	801a      	strh	r2, [r3, #0]
    first_run = false;
 8001080:	4b5d      	ldr	r3, [pc, #372]	@ (80011f8 <main+0x258>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
    // dbg_print_u32("Loop:WAKEUPS_PER_CYCLE", WAKEUPS_PER_CYCLE);
    if (is_connected == 0)
 8001086:	4b61      	ldr	r3, [pc, #388]	@ (800120c <main+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d103      	bne.n	8001096 <main+0xf6>
    {
      join(&huart2);
 800108e:	4b5c      	ldr	r3, [pc, #368]	@ (8001200 <main+0x260>)
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff fd95 	bl	8000bc0 <join>
    }

    // Get I2C Data
    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8001096:	4b5e      	ldr	r3, [pc, #376]	@ (8001210 <main+0x270>)
 8001098:	2201      	movs	r2, #1
 800109a:	2120      	movs	r1, #32
 800109c:	0018      	movs	r0, r3
 800109e:	f002 fbbb 	bl	8003818 <HAL_GPIO_WritePin>
    HAL_Delay(1000); // sensor power-up and stabilization
 80010a2:	23fa      	movs	r3, #250	@ 0xfa
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	0018      	movs	r0, r3
 80010a8:	f001 fb90 	bl	80027cc <HAL_Delay>
    scan_i2c_bus();
 80010ac:	f000 ffa2 	bl	8001ff4 <scan_i2c_bus>
    int i2c_success = sensor_init_and_read();
 80010b0:	f000 ffc8 	bl	8002044 <sensor_init_and_read>
 80010b4:	0003      	movs	r3, r0
 80010b6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80010b8:	4b55      	ldr	r3, [pc, #340]	@ (8001210 <main+0x270>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	2120      	movs	r1, #32
 80010be:	0018      	movs	r0, r3
 80010c0:	f002 fbaa 	bl	8003818 <HAL_GPIO_WritePin>

    // Format data and send
    uint8_t payload[5] = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	0018      	movs	r0, r3
 80010c8:	2305      	movs	r3, #5
 80010ca:	001a      	movs	r2, r3
 80010cc:	2100      	movs	r1, #0
 80010ce:	f007 fb9d 	bl	800880c <memset>
    if (i2c_success == 0)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d146      	bne.n	8001166 <main+0x1c6>
    {
      HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin, GPIO_PIN_SET);
 80010d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001210 <main+0x270>)
 80010da:	2201      	movs	r2, #1
 80010dc:	2121      	movs	r1, #33	@ 0x21
 80010de:	0018      	movs	r0, r3
 80010e0:	f002 fb9a 	bl	8003818 <HAL_GPIO_WritePin>
      HAL_Delay(300);
 80010e4:	2396      	movs	r3, #150	@ 0x96
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	0018      	movs	r0, r3
 80010ea:	f001 fb6f 	bl	80027cc <HAL_Delay>
      int aproxBatteryTemp_c = ((calculated_temp_1 - 55) / 10);
 80010ee:	4b49      	ldr	r3, [pc, #292]	@ (8001214 <main+0x274>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	5e9b      	ldrsh	r3, [r3, r2]
 80010f4:	3b37      	subs	r3, #55	@ 0x37
 80010f6:	210a      	movs	r1, #10
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff f8a1 	bl	8000240 <__divsi3>
 80010fe:	0003      	movs	r3, r0
 8001100:	60fb      	str	r3, [r7, #12]
      uint8_t battery = vbat_measure_and_encode(&hadc, ADC_CHANNEL_0, aproxBatteryTemp_c, /*external_power_present=*/false);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	b21a      	sxth	r2, r3
 8001106:	250b      	movs	r5, #11
 8001108:	197c      	adds	r4, r7, r5
 800110a:	4843      	ldr	r0, [pc, #268]	@ (8001218 <main+0x278>)
 800110c:	2300      	movs	r3, #0
 800110e:	2101      	movs	r1, #1
 8001110:	f000 fede 	bl	8001ed0 <vbat_measure_and_encode>
 8001114:	0003      	movs	r3, r0
 8001116:	7023      	strb	r3, [r4, #0]
      HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8001118:	4b3d      	ldr	r3, [pc, #244]	@ (8001210 <main+0x270>)
 800111a:	2200      	movs	r2, #0
 800111c:	2121      	movs	r1, #33	@ 0x21
 800111e:	0018      	movs	r0, r3
 8001120:	f002 fb7a 	bl	8003818 <HAL_GPIO_WritePin>
      lorawan_set_battery_level(&huart2, battery);
 8001124:	197b      	adds	r3, r7, r5
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	4b35      	ldr	r3, [pc, #212]	@ (8001200 <main+0x260>)
 800112a:	0011      	movs	r1, r2
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff fe21 	bl	8000d74 <lorawan_set_battery_level>

      payload[0] = (uint8_t)(calculated_temp_1 >> 8);
 8001132:	4b38      	ldr	r3, [pc, #224]	@ (8001214 <main+0x274>)
 8001134:	2200      	movs	r2, #0
 8001136:	5e9b      	ldrsh	r3, [r3, r2]
 8001138:	121b      	asrs	r3, r3, #8
 800113a:	b21b      	sxth	r3, r3
 800113c:	b2da      	uxtb	r2, r3
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	701a      	strb	r2, [r3, #0]
      payload[1] = (uint8_t)(calculated_temp_1 & 0xFF);
 8001142:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <main+0x274>)
 8001144:	2200      	movs	r2, #0
 8001146:	5e9b      	ldrsh	r3, [r3, r2]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	705a      	strb	r2, [r3, #1]
      payload[2] = calculated_hum_1;
 800114e:	4b33      	ldr	r3, [pc, #204]	@ (800121c <main+0x27c>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	709a      	strb	r2, [r3, #2]
      LoRaWAN_SendHex(payload, 3, 1);
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2201      	movs	r2, #1
 800115c:	2103      	movs	r1, #3
 800115e:	0018      	movs	r0, r3
 8001160:	f7ff fe7c 	bl	8000e5c <LoRaWAN_SendHex>
 8001164:	e041      	b.n	80011ea <main+0x24a>
    {
    	// We FAILED to get a good reading for whatever reason
    	// We need to specify why soon...

    	// 1,2,3 all are sensor failures and will not contain data
    	if (i2c_success == 1 || i2c_success == 2 || i2c_success == 3)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d005      	beq.n	8001178 <main+0x1d8>
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d002      	beq.n	8001178 <main+0x1d8>
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	2b03      	cmp	r3, #3
 8001176:	d109      	bne.n	800118c <main+0x1ec>
    	{
			uint8_t code = (uint8_t)i2c_success;
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	1cfb      	adds	r3, r7, #3
 800117e:	701a      	strb	r2, [r3, #0]
			LoRaWAN_SendHex(&code, 1, 10);
 8001180:	1cfb      	adds	r3, r7, #3
 8001182:	220a      	movs	r2, #10
 8001184:	2101      	movs	r1, #1
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff fe68 	bl	8000e5c <LoRaWAN_SendHex>

    	}
    	// if i2c_success is 4, then the sensors returned data, but do not agree on the correct temp
    	if (i2c_success == 4)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b04      	cmp	r3, #4
 8001190:	d12b      	bne.n	80011ea <main+0x24a>
    	{
    		//add the dis-agreed sensor info to payload

    		payload[0] = (uint8_t)(calculated_temp_1 >> 8);
 8001192:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <main+0x274>)
 8001194:	2200      	movs	r2, #0
 8001196:	5e9b      	ldrsh	r3, [r3, r2]
 8001198:	121b      	asrs	r3, r3, #8
 800119a:	b21b      	sxth	r3, r3
 800119c:	b2da      	uxtb	r2, r3
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	701a      	strb	r2, [r3, #0]
    		payload[1] = (uint8_t)(calculated_temp_1 & 0xFF);
 80011a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <main+0x274>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	5e9b      	ldrsh	r3, [r3, r2]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	705a      	strb	r2, [r3, #1]
    		payload[2] = calculated_hum_1;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <main+0x27c>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	709a      	strb	r2, [r3, #2]

    		payload[3] = (uint8_t)(calculated_temp_2 >> 8);
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <main+0x280>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	5e9b      	ldrsh	r3, [r3, r2]
 80011be:	121b      	asrs	r3, r3, #8
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	70da      	strb	r2, [r3, #3]
		    payload[4] = (uint8_t)(calculated_temp_2 & 0xFF);
 80011c8:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <main+0x280>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	5e9b      	ldrsh	r3, [r3, r2]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	711a      	strb	r2, [r3, #4]
		    payload[5] = calculated_hum_2;
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <main+0x284>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	715a      	strb	r2, [r3, #5]
    		LoRaWAN_SendHex(payload, 6, 11); // send both dis-agreed values and an error
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	220b      	movs	r2, #11
 80011e2:	2106      	movs	r1, #6
 80011e4:	0018      	movs	r0, r3
 80011e6:	f7ff fe39 	bl	8000e5c <LoRaWAN_SendHex>
    	}

    }
  }
  // Always go back to deep sleep to allow next RTC wake
  EnterDeepSleepMode();
 80011ea:	f000 f96d 	bl	80014c8 <EnterDeepSleepMode>
  {
 80011ee:	e6ee      	b.n	8000fce <main+0x2e>
 80011f0:	200003d8 	.word	0x200003d8
 80011f4:	200003da 	.word	0x200003da
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000644 	.word	0x20000644
 8001200:	200006cc 	.word	0x200006cc
 8001204:	080092ac 	.word	0x080092ac
 8001208:	080092c0 	.word	0x080092c0
 800120c:	200003d4 	.word	0x200003d4
 8001210:	50000400 	.word	0x50000400
 8001214:	2000075e 	.word	0x2000075e
 8001218:	20000080 	.word	0x20000080
 800121c:	20000760 	.word	0x20000760
 8001220:	20000762 	.word	0x20000762
 8001224:	20000764 	.word	0x20000764

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b09f      	sub	sp, #124	@ 0x7c
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	2440      	movs	r4, #64	@ 0x40
 8001230:	193b      	adds	r3, r7, r4
 8001232:	0018      	movs	r0, r3
 8001234:	2338      	movs	r3, #56	@ 0x38
 8001236:	001a      	movs	r2, r3
 8001238:	2100      	movs	r1, #0
 800123a:	f007 fae7 	bl	800880c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123e:	232c      	movs	r3, #44	@ 0x2c
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	0018      	movs	r0, r3
 8001244:	2314      	movs	r3, #20
 8001246:	001a      	movs	r2, r3
 8001248:	2100      	movs	r1, #0
 800124a:	f007 fadf 	bl	800880c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	0018      	movs	r0, r3
 8001252:	2328      	movs	r3, #40	@ 0x28
 8001254:	001a      	movs	r2, r3
 8001256:	2100      	movs	r1, #0
 8001258:	f007 fad8 	bl	800880c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800125c:	4b32      	ldr	r3, [pc, #200]	@ (8001328 <SystemClock_Config+0x100>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a32      	ldr	r2, [pc, #200]	@ (800132c <SystemClock_Config+0x104>)
 8001262:	401a      	ands	r2, r3
 8001264:	4b30      	ldr	r3, [pc, #192]	@ (8001328 <SystemClock_Config+0x100>)
 8001266:	2180      	movs	r1, #128	@ 0x80
 8001268:	0109      	lsls	r1, r1, #4
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800126e:	f003 fa61 	bl	8004734 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001272:	4b2f      	ldr	r3, [pc, #188]	@ (8001330 <SystemClock_Config+0x108>)
 8001274:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001276:	4b2e      	ldr	r3, [pc, #184]	@ (8001330 <SystemClock_Config+0x108>)
 8001278:	492c      	ldr	r1, [pc, #176]	@ (800132c <SystemClock_Config+0x104>)
 800127a:	400a      	ands	r2, r1
 800127c:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800127e:	193b      	adds	r3, r7, r4
 8001280:	2214      	movs	r2, #20
 8001282:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001284:	193b      	adds	r3, r7, r4
 8001286:	2280      	movs	r2, #128	@ 0x80
 8001288:	0052      	lsls	r2, r2, #1
 800128a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800128c:	0021      	movs	r1, r4
 800128e:	187b      	adds	r3, r7, r1
 8001290:	2201      	movs	r2, #1
 8001292:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001294:	187b      	adds	r3, r7, r1
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800129a:	187b      	adds	r3, r7, r1
 800129c:	22a0      	movs	r2, #160	@ 0xa0
 800129e:	0212      	lsls	r2, r2, #8
 80012a0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2200      	movs	r2, #0
 80012a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	0018      	movs	r0, r3
 80012ac:	f003 fb1c 	bl	80048e8 <HAL_RCC_OscConfig>
 80012b0:	1e03      	subs	r3, r0, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012b4:	f000 f9b4 	bl	8001620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	212c      	movs	r1, #44	@ 0x2c
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	220f      	movs	r2, #15
 80012be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2100      	movs	r1, #0
 80012dc:	0018      	movs	r0, r3
 80012de:	f003 fed7 	bl	8005090 <HAL_RCC_ClockConfig>
 80012e2:	1e03      	subs	r3, r0, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012e6:	f000 f99b 	bl	8001620 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	222b      	movs	r2, #43	@ 0x2b
 80012ee:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2280      	movs	r2, #128	@ 0x80
 8001306:	0252      	lsls	r2, r2, #9
 8001308:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	0018      	movs	r0, r3
 800130e:	f004 f8f5 	bl	80054fc <HAL_RCCEx_PeriphCLKConfig>
 8001312:	1e03      	subs	r3, r0, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001316:	f000 f983 	bl	8001620 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 800131a:	f004 fa8d 	bl	8005838 <HAL_RCCEx_EnableLSECSS>
}
 800131e:	46c0      	nop			@ (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b01f      	add	sp, #124	@ 0x7c
 8001324:	bd90      	pop	{r4, r7, pc}
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	40007000 	.word	0x40007000
 800132c:	ffffe7ff 	.word	0xffffe7ff
 8001330:	40021000 	.word	0x40021000

08001334 <configWakeupTime>:

/* USER CODE BEGIN 4 */

void configWakeupTime()
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
  // Optional visual indicator that we (re)armed the wake-up
  uint32_t wakeup_timer_value = (uint32_t)SLEEP_INTERVAL_SECONDS * 2048u - 1u;  // 32 seconds default
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <configWakeupTime+0x30>)
 800133c:	607b      	str	r3, [r7, #4]
  // Deactivate previous timer before re-arming (HAL recommendation when changing value)
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <configWakeupTime+0x34>)
 8001340:	0018      	movs	r0, r3
 8001342:	f004 fc91 	bl	8005c68 <HAL_RTCEx_DeactivateWakeUpTimer>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_timer_value, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <configWakeupTime+0x34>)
 800134a:	2200      	movs	r2, #0
 800134c:	0018      	movs	r0, r3
 800134e:	f004 fbb3 	bl	8005ab8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001352:	1e03      	subs	r3, r0, #0
 8001354:	d001      	beq.n	800135a <configWakeupTime+0x26>
  {
    Error_Handler();
 8001356:	f000 f963 	bl	8001620 <Error_Handler>
  }
}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			@ (mov r8, r8)
 8001364:	0000efff 	.word	0x0000efff
 8001368:	200005dc 	.word	0x200005dc

0800136c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Increment counter - process LoRaWAN based on SLEEP_TIME_MINUTES setting */

  wakeup_counter++;
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <HAL_RTCEx_WakeUpTimerEventCallback+0x34>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	3301      	adds	r3, #1
 800137c:	b29a      	uxth	r2, r3
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <HAL_RTCEx_WakeUpTimerEventCallback+0x34>)
 8001380:	801a      	strh	r2, [r3, #0]
  
  /* Clear the wake-up timer flag to acknowledge the interrupt */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	22ff      	movs	r2, #255	@ 0xff
 800138a:	401a      	ands	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4904      	ldr	r1, [pc, #16]	@ (80013a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x38>)
 8001392:	430a      	orrs	r2, r1
 8001394:	60da      	str	r2, [r3, #12]
}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	200003d8 	.word	0x200003d8
 80013a4:	fffffb7f 	.word	0xfffffb7f

080013a8 <ConfigureGPIOForLowPower>:
/**
  * @brief  Configure GPIOs for ultra-low power consumption
  * @retval None
  */
void ConfigureGPIOForLowPower(void)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b08b      	sub	sp, #44	@ 0x2c
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	2414      	movs	r4, #20
 80013b0:	193b      	adds	r3, r7, r4
 80013b2:	0018      	movs	r0, r3
 80013b4:	2314      	movs	r3, #20
 80013b6:	001a      	movs	r2, r3
 80013b8:	2100      	movs	r1, #0
 80013ba:	f007 fa27 	bl	800880c <memset>
  
  /* Enable all GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b3a      	ldr	r3, [pc, #232]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 80013c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013c2:	4b39      	ldr	r3, [pc, #228]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	430a      	orrs	r2, r1
 80013c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013ca:	4b37      	ldr	r3, [pc, #220]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 80013cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ce:	2201      	movs	r2, #1
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	4b34      	ldr	r3, [pc, #208]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 80013d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013da:	4b33      	ldr	r3, [pc, #204]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 80013dc:	2102      	movs	r1, #2
 80013de:	430a      	orrs	r2, r1
 80013e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013e2:	4b31      	ldr	r3, [pc, #196]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 80013e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e6:	2202      	movs	r2, #2
 80013e8:	4013      	ands	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	4b2e      	ldr	r3, [pc, #184]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 80013f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013f2:	4b2d      	ldr	r3, [pc, #180]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 80013f4:	2104      	movs	r1, #4
 80013f6:	430a      	orrs	r2, r1
 80013f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013fa:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 80013fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013fe:	2204      	movs	r2, #4
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001406:	4b28      	ldr	r3, [pc, #160]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 8001408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800140a:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 800140c:	2108      	movs	r1, #8
 800140e:	430a      	orrs	r2, r1
 8001410:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001412:	4b25      	ldr	r3, [pc, #148]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 8001414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001416:	2208      	movs	r2, #8
 8001418:	4013      	ands	r3, r2
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141e:	4b22      	ldr	r3, [pc, #136]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 8001420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 8001424:	2180      	movs	r1, #128	@ 0x80
 8001426:	430a      	orrs	r2, r1
 8001428:	62da      	str	r2, [r3, #44]	@ 0x2c
 800142a:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <ConfigureGPIOForLowPower+0x100>)
 800142c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800142e:	2280      	movs	r2, #128	@ 0x80
 8001430:	4013      	ands	r3, r2
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]
  
  /* Configure all GPIO pins as analog to reduce power consumption */
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001436:	193b      	adds	r3, r7, r4
 8001438:	2203      	movs	r2, #3
 800143a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	193b      	adds	r3, r7, r4
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  
  /* Configure GPIOA pins (except UART pins PA2, PA3 and PA9, PA10) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | 
 8001442:	193b      	adds	r3, r7, r4
 8001444:	4a19      	ldr	r2, [pc, #100]	@ (80014ac <ConfigureGPIOForLowPower+0x104>)
 8001446:	601a      	str	r2, [r3, #0]
                        GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | 
                        GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	193a      	adds	r2, r7, r4
 800144a:	23a0      	movs	r3, #160	@ 0xa0
 800144c:	05db      	lsls	r3, r3, #23
 800144e:	0011      	movs	r1, r2
 8001450:	0018      	movs	r0, r3
 8001452:	f001 ff81 	bl	8003358 <HAL_GPIO_Init>
  
  /* Configure all GPIOB pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8001456:	193b      	adds	r3, r7, r4
 8001458:	4a15      	ldr	r2, [pc, #84]	@ (80014b0 <ConfigureGPIOForLowPower+0x108>)
 800145a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	193b      	adds	r3, r7, r4
 800145e:	4a15      	ldr	r2, [pc, #84]	@ (80014b4 <ConfigureGPIOForLowPower+0x10c>)
 8001460:	0019      	movs	r1, r3
 8001462:	0010      	movs	r0, r2
 8001464:	f001 ff78 	bl	8003358 <HAL_GPIO_Init>
  
  /* Configure GPIOC pins (except PC14, PC15 for LSE crystal) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | 
 8001468:	193b      	adds	r3, r7, r4
 800146a:	4a13      	ldr	r2, [pc, #76]	@ (80014b8 <ConfigureGPIOForLowPower+0x110>)
 800146c:	601a      	str	r2, [r3, #0]
                        GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | 
                        GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | 
                        GPIO_PIN_12 | GPIO_PIN_13;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146e:	193b      	adds	r3, r7, r4
 8001470:	4a12      	ldr	r2, [pc, #72]	@ (80014bc <ConfigureGPIOForLowPower+0x114>)
 8001472:	0019      	movs	r1, r3
 8001474:	0010      	movs	r0, r2
 8001476:	f001 ff6f 	bl	8003358 <HAL_GPIO_Init>
  
  /* Configure all GPIOD pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800147a:	193b      	adds	r3, r7, r4
 800147c:	4a0c      	ldr	r2, [pc, #48]	@ (80014b0 <ConfigureGPIOForLowPower+0x108>)
 800147e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001480:	193b      	adds	r3, r7, r4
 8001482:	4a0f      	ldr	r2, [pc, #60]	@ (80014c0 <ConfigureGPIOForLowPower+0x118>)
 8001484:	0019      	movs	r1, r3
 8001486:	0010      	movs	r0, r2
 8001488:	f001 ff66 	bl	8003358 <HAL_GPIO_Init>
  
  /* Configure all GPIOH pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800148c:	0021      	movs	r1, r4
 800148e:	187b      	adds	r3, r7, r1
 8001490:	4a07      	ldr	r2, [pc, #28]	@ (80014b0 <ConfigureGPIOForLowPower+0x108>)
 8001492:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001494:	187b      	adds	r3, r7, r1
 8001496:	4a0b      	ldr	r2, [pc, #44]	@ (80014c4 <ConfigureGPIOForLowPower+0x11c>)
 8001498:	0019      	movs	r1, r3
 800149a:	0010      	movs	r0, r2
 800149c:	f001 ff5c 	bl	8003358 <HAL_GPIO_Init>
}
 80014a0:	46c0      	nop			@ (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b00b      	add	sp, #44	@ 0x2c
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	0000f9f3 	.word	0x0000f9f3
 80014b0:	0000ffff 	.word	0x0000ffff
 80014b4:	50000400 	.word	0x50000400
 80014b8:	00003fff 	.word	0x00003fff
 80014bc:	50000800 	.word	0x50000800
 80014c0:	50000c00 	.word	0x50000c00
 80014c4:	50001c00 	.word	0x50001c00

080014c8 <EnterDeepSleepMode>:
/**
  * @brief  Enter Deep Sleep Mode using STOP mode with RTC wake-up
  * @retval None
  */
void EnterDeepSleepMode(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
  /* Properly deinitialize UARTs before sleep */
  HAL_UART_DeInit(&huart1);
 80014ce:	4b42      	ldr	r3, [pc, #264]	@ (80015d8 <EnterDeepSleepMode+0x110>)
 80014d0:	0018      	movs	r0, r3
 80014d2:	f004 fe9b 	bl	800620c <HAL_UART_DeInit>
//  HAL_UART_DeInit(&huart2);
  HAL_I2C_DeInit(&hi2c1);
 80014d6:	4b41      	ldr	r3, [pc, #260]	@ (80015dc <EnterDeepSleepMode+0x114>)
 80014d8:	0018      	movs	r0, r3
 80014da:	f002 fa61 	bl	80039a0 <HAL_I2C_DeInit>
  
  /* Configure all GPIOs for ultra-low power */
  ConfigureGPIOForLowPower();
 80014de:	f7ff ff63 	bl	80013a8 <ConfigureGPIOForLowPower>
  
  /* Disable unnecessary peripheral clocks */
  __HAL_RCC_I2C1_CLK_DISABLE();
 80014e2:	4b3f      	ldr	r3, [pc, #252]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 80014e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014e6:	4b3e      	ldr	r3, [pc, #248]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 80014e8:	493e      	ldr	r1, [pc, #248]	@ (80015e4 <EnterDeepSleepMode+0x11c>)
 80014ea:	400a      	ands	r2, r1
 80014ec:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_USART1_CLK_DISABLE();
 80014ee:	4b3c      	ldr	r3, [pc, #240]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 80014f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014f2:	4b3b      	ldr	r3, [pc, #236]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 80014f4:	493c      	ldr	r1, [pc, #240]	@ (80015e8 <EnterDeepSleepMode+0x120>)
 80014f6:	400a      	ands	r2, r1
 80014f8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_USART2_CLK_DISABLE();
 80014fa:	4b39      	ldr	r3, [pc, #228]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 80014fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014fe:	4b38      	ldr	r3, [pc, #224]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 8001500:	493a      	ldr	r1, [pc, #232]	@ (80015ec <EnterDeepSleepMode+0x124>)
 8001502:	400a      	ands	r2, r1
 8001504:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8001506:	4b36      	ldr	r3, [pc, #216]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 8001508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800150a:	4b35      	ldr	r3, [pc, #212]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 800150c:	2102      	movs	r1, #2
 800150e:	438a      	bics	r2, r1
 8001510:	62da      	str	r2, [r3, #44]	@ 0x2c
//  __HAL_RCC_GPIOC_CLK_DISABLE(); // DO NOT DISABLE GPIO C, That is what the Crystal is connected to!!!
  __HAL_RCC_GPIOD_CLK_DISABLE();
 8001512:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 8001514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001516:	4b32      	ldr	r3, [pc, #200]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 8001518:	2108      	movs	r1, #8
 800151a:	438a      	bics	r2, r1
 800151c:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800151e:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 8001520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001522:	4b2f      	ldr	r3, [pc, #188]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 8001524:	2180      	movs	r1, #128	@ 0x80
 8001526:	438a      	bics	r2, r1
 8001528:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Suspend SysTick to avoid wake-up from SysTick interrupt */
  HAL_SuspendTick();
 800152a:	f000 f985 	bl	8001838 <HAL_SuspendTick>
  
  /* Clear any pending wake-up flags before sleeping */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800152e:	4b30      	ldr	r3, [pc, #192]	@ (80015f0 <EnterDeepSleepMode+0x128>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b2f      	ldr	r3, [pc, #188]	@ (80015f0 <EnterDeepSleepMode+0x128>)
 8001534:	2104      	movs	r1, #4
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800153a:	4b2e      	ldr	r3, [pc, #184]	@ (80015f4 <EnterDeepSleepMode+0x12c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	22ff      	movs	r2, #255	@ 0xff
 8001542:	401a      	ands	r2, r3
 8001544:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <EnterDeepSleepMode+0x12c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	492b      	ldr	r1, [pc, #172]	@ (80015f8 <EnterDeepSleepMode+0x130>)
 800154a:	430a      	orrs	r2, r1
 800154c:	60da      	str	r2, [r3, #12]
  
  /* Restart the RTC wake-up timer for next wake-up */
  configWakeupTime();
 800154e:	f7ff fef1 	bl	8001334 <configWakeupTime>
  
  /* Enter STOP Mode with Low Power Regulator */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001552:	2101      	movs	r1, #1
 8001554:	2001      	movs	r0, #1
 8001556:	f003 f96b 	bl	8004830 <HAL_PWR_EnterSTOPMode>
  
  /* === DEVICE IS NOW IN DEEP SLEEP === */
  /* === WAKE UP OCCURS HERE === */
  
  /* Upon wake-up, the system clock needs to be reconfigured */
  SystemClock_Config();
 800155a:	f7ff fe65 	bl	8001228 <SystemClock_Config>
  
  /* Re-enable peripheral clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 8001560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 8001564:	2101      	movs	r1, #1
 8001566:	430a      	orrs	r2, r1
 8001568:	62da      	str	r2, [r3, #44]	@ 0x2c
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 800156c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156e:	2201      	movs	r2, #1
 8001570:	4013      	ands	r3, r2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 8001578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800157a:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 800157c:	2102      	movs	r1, #2
 800157e:	430a      	orrs	r2, r1
 8001580:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001582:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 8001584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001586:	2202      	movs	r2, #2
 8001588:	4013      	ands	r3, r2
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_I2C1_CLK_ENABLE();
 800158e:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 8001590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 8001594:	2180      	movs	r1, #128	@ 0x80
 8001596:	0389      	lsls	r1, r1, #14
 8001598:	430a      	orrs	r2, r1
 800159a:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_USART1_CLK_ENABLE();
 800159c:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 800159e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015a0:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 80015a2:	2180      	movs	r1, #128	@ 0x80
 80015a4:	01c9      	lsls	r1, r1, #7
 80015a6:	430a      	orrs	r2, r1
 80015a8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_USART2_CLK_ENABLE();
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 80015ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <EnterDeepSleepMode+0x118>)
 80015b0:	2180      	movs	r1, #128	@ 0x80
 80015b2:	0289      	lsls	r1, r1, #10
 80015b4:	430a      	orrs	r2, r1
 80015b6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Restore GPIO configuration for normal operation */
  MX_GPIO_Init();
 80015b8:	f7ff f964 	bl	8000884 <MX_GPIO_Init>
  
  /* Re-initialize peripherals with proper sequence */
  MX_I2C1_Init();
 80015bc:	f7ff f9cc 	bl	8000958 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80015c0:	f000 f9b6 	bl	8001930 <MX_USART1_UART_Init>
//  MX_USART2_UART_Init();
  
  /* Resume SysTick */
  HAL_ResumeTick();
 80015c4:	f000 f948 	bl	8001858 <HAL_ResumeTick>
  
  /* Add longer delay for UART stabilization */
  HAL_Delay(100);
 80015c8:	2064      	movs	r0, #100	@ 0x64
 80015ca:	f001 f8ff 	bl	80027cc <HAL_Delay>
}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b002      	add	sp, #8
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	20000644 	.word	0x20000644
 80015dc:	20000380 	.word	0x20000380
 80015e0:	40021000 	.word	0x40021000
 80015e4:	ffdfffff 	.word	0xffdfffff
 80015e8:	ffffbfff 	.word	0xffffbfff
 80015ec:	fffdffff 	.word	0xfffdffff
 80015f0:	40007000 	.word	0x40007000
 80015f4:	200005dc 	.word	0x200005dc
 80015f8:	fffffb7f 	.word	0xfffffb7f

080015fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a04      	ldr	r2, [pc, #16]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800160e:	f001 f8c1 	bl	8002794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	40001400 	.word	0x40001400

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
//  while (1)
//  {
//  }
  HAL_NVIC_SystemReset();
 8001628:	f001 fe47 	bl	80032ba <HAL_NVIC_SystemReset>
  /* USER CODE END Error_Handler_Debug */
}
 800162c:	46c0      	nop			@ (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001638:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <MX_RTC_Init+0x60>)
 800163a:	4a17      	ldr	r2, [pc, #92]	@ (8001698 <MX_RTC_Init+0x64>)
 800163c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <MX_RTC_Init+0x60>)
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <MX_RTC_Init+0x60>)
 8001646:	227f      	movs	r2, #127	@ 0x7f
 8001648:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800164a:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <MX_RTC_Init+0x60>)
 800164c:	22ff      	movs	r2, #255	@ 0xff
 800164e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001650:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <MX_RTC_Init+0x60>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001656:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <MX_RTC_Init+0x60>)
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800165c:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <MX_RTC_Init+0x60>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <MX_RTC_Init+0x60>)
 8001664:	2200      	movs	r2, #0
 8001666:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001668:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <MX_RTC_Init+0x60>)
 800166a:	0018      	movs	r0, r3
 800166c:	f004 f8f2 	bl	8005854 <HAL_RTC_Init>
 8001670:	1e03      	subs	r3, r0, #0
 8001672:	d001      	beq.n	8001678 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001674:	f7ff ffd4 	bl	8001620 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <MX_RTC_Init+0x60>)
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	0018      	movs	r0, r3
 8001680:	f004 fa1a 	bl	8005ab8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001684:	1e03      	subs	r3, r0, #0
 8001686:	d001      	beq.n	800168c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001688:	f7ff ffca 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800168c:	46c0      	nop			@ (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	200005dc 	.word	0x200005dc
 8001698:	40002800 	.word	0x40002800

0800169c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <HAL_RTC_MspInit+0x38>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d10e      	bne.n	80016cc <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016ae:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <HAL_RTC_MspInit+0x3c>)
 80016b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <HAL_RTC_MspInit+0x3c>)
 80016b4:	2180      	movs	r1, #128	@ 0x80
 80016b6:	02c9      	lsls	r1, r1, #11
 80016b8:	430a      	orrs	r2, r1
 80016ba:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 3, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2103      	movs	r1, #3
 80016c0:	2002      	movs	r0, #2
 80016c2:	f001 fdd5 	bl	8003270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80016c6:	2002      	movs	r0, #2
 80016c8:	f001 fde7 	bl	800329a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80016cc:	46c0      	nop			@ (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40002800 	.word	0x40002800
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80016e2:	003b      	movs	r3, r7
 80016e4:	0018      	movs	r0, r3
 80016e6:	2308      	movs	r3, #8
 80016e8:	001a      	movs	r2, r3
 80016ea:	2100      	movs	r1, #0
 80016ec:	f007 f88e 	bl	800880c <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <HAL_MspInit+0x5c>)
 80016f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016f4:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <HAL_MspInit+0x5c>)
 80016f6:	2101      	movs	r1, #1
 80016f8:	430a      	orrs	r2, r1
 80016fa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <HAL_MspInit+0x5c>)
 80016fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001700:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <HAL_MspInit+0x5c>)
 8001702:	2180      	movs	r1, #128	@ 0x80
 8001704:	0549      	lsls	r1, r1, #21
 8001706:	430a      	orrs	r2, r1
 8001708:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800170a:	2302      	movs	r3, #2
 800170c:	425b      	negs	r3, r3
 800170e:	2200      	movs	r2, #0
 8001710:	2103      	movs	r1, #3
 8001712:	0018      	movs	r0, r3
 8001714:	f001 fdac 	bl	8003270 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8001718:	003b      	movs	r3, r7
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800171e:	003b      	movs	r3, r7
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001724:	003b      	movs	r3, r7
 8001726:	0018      	movs	r0, r3
 8001728:	f003 f812 	bl	8004750 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800172c:	f003 f872 	bl	8004814 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001730:	46c0      	nop			@ (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b002      	add	sp, #8
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b5b0      	push	{r4, r5, r7, lr}
 800173e:	b08c      	sub	sp, #48	@ 0x30
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	0019      	movs	r1, r3
 800174a:	2012      	movs	r0, #18
 800174c:	f001 fd90 	bl	8003270 <HAL_NVIC_SetPriority>
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001750:	2012      	movs	r0, #18
 8001752:	f001 fda2 	bl	800329a <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001756:	4b32      	ldr	r3, [pc, #200]	@ (8001820 <HAL_InitTick+0xe4>)
 8001758:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800175a:	4b31      	ldr	r3, [pc, #196]	@ (8001820 <HAL_InitTick+0xe4>)
 800175c:	2120      	movs	r1, #32
 800175e:	430a      	orrs	r2, r1
 8001760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001762:	2308      	movs	r3, #8
 8001764:	18fa      	adds	r2, r7, r3
 8001766:	240c      	movs	r4, #12
 8001768:	193b      	adds	r3, r7, r4
 800176a:	0011      	movs	r1, r2
 800176c:	0018      	movs	r0, r3
 800176e:	f003 fe93 	bl	8005498 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001772:	193b      	adds	r3, r7, r4
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	2b00      	cmp	r3, #0
 800177c:	d104      	bne.n	8001788 <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800177e:	f003 fe5f 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8001782:	0003      	movs	r3, r0
 8001784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001786:	e004      	b.n	8001792 <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001788:	f003 fe5a 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 800178c:	0003      	movs	r3, r0
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001794:	4923      	ldr	r1, [pc, #140]	@ (8001824 <HAL_InitTick+0xe8>)
 8001796:	0018      	movs	r0, r3
 8001798:	f7fe fcc8 	bl	800012c <__udivsi3>
 800179c:	0003      	movs	r3, r0
 800179e:	3b01      	subs	r3, #1
 80017a0:	623b      	str	r3, [r7, #32]

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80017a2:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <HAL_InitTick+0xec>)
 80017a4:	4a21      	ldr	r2, [pc, #132]	@ (800182c <HAL_InitTick+0xf0>)
 80017a6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80017a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <HAL_InitTick+0xec>)
 80017aa:	4a21      	ldr	r2, [pc, #132]	@ (8001830 <HAL_InitTick+0xf4>)
 80017ac:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <HAL_InitTick+0xec>)
 80017b0:	6a3a      	ldr	r2, [r7, #32]
 80017b2:	605a      	str	r2, [r3, #4]
  htim7.Init.ClockDivision = 0;
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <HAL_InitTick+0xec>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <HAL_InitTick+0xec>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 80017c0:	252b      	movs	r5, #43	@ 0x2b
 80017c2:	197c      	adds	r4, r7, r5
 80017c4:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <HAL_InitTick+0xec>)
 80017c6:	0018      	movs	r0, r3
 80017c8:	f004 fae2 	bl	8005d90 <HAL_TIM_Base_Init>
 80017cc:	0003      	movs	r3, r0
 80017ce:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80017d0:	197b      	adds	r3, r7, r5
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d11b      	bne.n	8001810 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80017d8:	197c      	adds	r4, r7, r5
 80017da:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <HAL_InitTick+0xec>)
 80017dc:	0018      	movs	r0, r3
 80017de:	f004 fb1f 	bl	8005e20 <HAL_TIM_Base_Start_IT>
 80017e2:	0003      	movs	r3, r0
 80017e4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80017e6:	197b      	adds	r3, r7, r5
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d110      	bne.n	8001810 <HAL_InitTick+0xd4>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d809      	bhi.n	8001808 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	0019      	movs	r1, r3
 80017fa:	2012      	movs	r0, #18
 80017fc:	f001 fd38 	bl	8003270 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <HAL_InitTick+0xf8>)
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	e003      	b.n	8001810 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001808:	232b      	movs	r3, #43	@ 0x2b
 800180a:	18fb      	adds	r3, r7, r3
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8001810:	232b      	movs	r3, #43	@ 0x2b
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	781b      	ldrb	r3, [r3, #0]
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b00c      	add	sp, #48	@ 0x30
 800181c:	bdb0      	pop	{r4, r5, r7, pc}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	40021000 	.word	0x40021000
 8001824:	000f4240 	.word	0x000f4240
 8001828:	20000600 	.word	0x20000600
 800182c:	40001400 	.word	0x40001400
 8001830:	000003e7 	.word	0x000003e7
 8001834:	20000008 	.word	0x20000008

08001838 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM7 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Disable TIM7 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim7, TIM_IT_UPDATE);
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <HAL_SuspendTick+0x1c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <HAL_SuspendTick+0x1c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2101      	movs	r1, #1
 8001848:	438a      	bics	r2, r1
 800184a:	60da      	str	r2, [r3, #12]
}
 800184c:	46c0      	nop			@ (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			@ (mov r8, r8)
 8001854:	20000600 	.word	0x20000600

08001858 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM7 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Enable TIM7 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <HAL_ResumeTick+0x1c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	4b04      	ldr	r3, [pc, #16]	@ (8001874 <HAL_ResumeTick+0x1c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2101      	movs	r1, #1
 8001868:	430a      	orrs	r2, r1
 800186a:	60da      	str	r2, [r3, #12]
}
 800186c:	46c0      	nop			@ (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	20000600 	.word	0x20000600

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800187c:	46c0      	nop			@ (mov r8, r8)
 800187e:	e7fd      	b.n	800187c <NMI_Handler+0x4>

08001880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001884:	46c0      	nop			@ (mov r8, r8)
 8001886:	e7fd      	b.n	8001884 <HardFault_Handler+0x4>

08001888 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800188c:	4b03      	ldr	r3, [pc, #12]	@ (800189c <RTC_IRQHandler+0x14>)
 800188e:	0018      	movs	r0, r3
 8001890:	f004 fa4e 	bl	8005d30 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001894:	46c0      	nop			@ (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	200005dc 	.word	0x200005dc

080018a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <TIM7_IRQHandler+0x14>)
 80018a6:	0018      	movs	r0, r3
 80018a8:	f004 fb0c 	bl	8005ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018ac:	46c0      	nop			@ (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	20000600 	.word	0x20000600

080018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c0:	4a14      	ldr	r2, [pc, #80]	@ (8001914 <_sbrk+0x5c>)
 80018c2:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <_sbrk+0x60>)
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018cc:	4b13      	ldr	r3, [pc, #76]	@ (800191c <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <_sbrk+0x64>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	@ (8001920 <_sbrk+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	18d3      	adds	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d207      	bcs.n	80018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e8:	f007 f802 	bl	80088f0 <__errno>
 80018ec:	0003      	movs	r3, r0
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	425b      	negs	r3, r3
 80018f6:	e009      	b.n	800190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fe:	4b07      	ldr	r3, [pc, #28]	@ (800191c <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	18d2      	adds	r2, r2, r3
 8001906:	4b05      	ldr	r3, [pc, #20]	@ (800191c <_sbrk+0x64>)
 8001908:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b006      	add	sp, #24
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20005000 	.word	0x20005000
 8001918:	00000400 	.word	0x00000400
 800191c:	20000640 	.word	0x20000640
 8001920:	20001610 	.word	0x20001610

08001924 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001934:	4b16      	ldr	r3, [pc, #88]	@ (8001990 <MX_USART1_UART_Init+0x60>)
 8001936:	4a17      	ldr	r2, [pc, #92]	@ (8001994 <MX_USART1_UART_Init+0x64>)
 8001938:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <MX_USART1_UART_Init+0x60>)
 800193c:	2296      	movs	r2, #150	@ 0x96
 800193e:	0192      	lsls	r2, r2, #6
 8001940:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001942:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <MX_USART1_UART_Init+0x60>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <MX_USART1_UART_Init+0x60>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <MX_USART1_UART_Init+0x60>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001954:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <MX_USART1_UART_Init+0x60>)
 8001956:	220c      	movs	r2, #12
 8001958:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195a:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <MX_USART1_UART_Init+0x60>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <MX_USART1_UART_Init+0x60>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001966:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <MX_USART1_UART_Init+0x60>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <MX_USART1_UART_Init+0x60>)
 800196e:	2220      	movs	r2, #32
 8001970:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001972:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <MX_USART1_UART_Init+0x60>)
 8001974:	2280      	movs	r2, #128	@ 0x80
 8001976:	0192      	lsls	r2, r2, #6
 8001978:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800197a:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <MX_USART1_UART_Init+0x60>)
 800197c:	0018      	movs	r0, r3
 800197e:	f004 fbf1 	bl	8006164 <HAL_UART_Init>
 8001982:	1e03      	subs	r3, r0, #0
 8001984:	d001      	beq.n	800198a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001986:	f7ff fe4b 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000644 	.word	0x20000644
 8001994:	40013800 	.word	0x40013800

08001998 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800199c:	4b14      	ldr	r3, [pc, #80]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 800199e:	4a15      	ldr	r2, [pc, #84]	@ (80019f4 <MX_USART2_UART_Init+0x5c>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80019a2:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019a4:	2296      	movs	r2, #150	@ 0x96
 80019a6:	0192      	lsls	r2, r2, #6
 80019a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <MX_USART2_UART_Init+0x58>)
 80019dc:	0018      	movs	r0, r3
 80019de:	f004 fbc1 	bl	8006164 <HAL_UART_Init>
 80019e2:	1e03      	subs	r3, r0, #0
 80019e4:	d001      	beq.n	80019ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019e6:	f7ff fe1b 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200006cc 	.word	0x200006cc
 80019f4:	40004400 	.word	0x40004400

080019f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b08b      	sub	sp, #44	@ 0x2c
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	2414      	movs	r4, #20
 8001a02:	193b      	adds	r3, r7, r4
 8001a04:	0018      	movs	r0, r3
 8001a06:	2314      	movs	r3, #20
 8001a08:	001a      	movs	r2, r3
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	f006 fefe 	bl	800880c <memset>
  if(uartHandle->Instance==USART1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a30      	ldr	r2, [pc, #192]	@ (8001ad8 <HAL_UART_MspInit+0xe0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12b      	bne.n	8001a72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a1a:	4b30      	ldr	r3, [pc, #192]	@ (8001adc <HAL_UART_MspInit+0xe4>)
 8001a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001adc <HAL_UART_MspInit+0xe4>)
 8001a20:	2180      	movs	r1, #128	@ 0x80
 8001a22:	01c9      	lsls	r1, r1, #7
 8001a24:	430a      	orrs	r2, r1
 8001a26:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	4b2c      	ldr	r3, [pc, #176]	@ (8001adc <HAL_UART_MspInit+0xe4>)
 8001a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001adc <HAL_UART_MspInit+0xe4>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	430a      	orrs	r2, r1
 8001a32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a34:	4b29      	ldr	r3, [pc, #164]	@ (8001adc <HAL_UART_MspInit+0xe4>)
 8001a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a40:	193b      	adds	r3, r7, r4
 8001a42:	22c0      	movs	r2, #192	@ 0xc0
 8001a44:	00d2      	lsls	r2, r2, #3
 8001a46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	0021      	movs	r1, r4
 8001a4a:	187b      	adds	r3, r7, r1
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	187b      	adds	r3, r7, r1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001a5c:	187b      	adds	r3, r7, r1
 8001a5e:	2204      	movs	r2, #4
 8001a60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	187a      	adds	r2, r7, r1
 8001a64:	23a0      	movs	r3, #160	@ 0xa0
 8001a66:	05db      	lsls	r3, r3, #23
 8001a68:	0011      	movs	r1, r2
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f001 fc74 	bl	8003358 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a70:	e02e      	b.n	8001ad0 <HAL_UART_MspInit+0xd8>
  else if(uartHandle->Instance==USART2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae0 <HAL_UART_MspInit+0xe8>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d129      	bne.n	8001ad0 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a7c:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <HAL_UART_MspInit+0xe4>)
 8001a7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a80:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <HAL_UART_MspInit+0xe4>)
 8001a82:	2180      	movs	r1, #128	@ 0x80
 8001a84:	0289      	lsls	r1, r1, #10
 8001a86:	430a      	orrs	r2, r1
 8001a88:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	4b14      	ldr	r3, [pc, #80]	@ (8001adc <HAL_UART_MspInit+0xe4>)
 8001a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a8e:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <HAL_UART_MspInit+0xe4>)
 8001a90:	2101      	movs	r1, #1
 8001a92:	430a      	orrs	r2, r1
 8001a94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_UART_MspInit+0xe4>)
 8001a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aa2:	2114      	movs	r1, #20
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	2202      	movs	r2, #2
 8001aae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	2204      	movs	r2, #4
 8001ac0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	187a      	adds	r2, r7, r1
 8001ac4:	23a0      	movs	r3, #160	@ 0xa0
 8001ac6:	05db      	lsls	r3, r3, #23
 8001ac8:	0011      	movs	r1, r2
 8001aca:	0018      	movs	r0, r3
 8001acc:	f001 fc44 	bl	8003358 <HAL_GPIO_Init>
}
 8001ad0:	46c0      	nop			@ (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b00b      	add	sp, #44	@ 0x2c
 8001ad6:	bd90      	pop	{r4, r7, pc}
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40004400 	.word	0x40004400

08001ae4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a13      	ldr	r2, [pc, #76]	@ (8001b40 <HAL_UART_MspDeInit+0x5c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10e      	bne.n	8001b14 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001af6:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <HAL_UART_MspDeInit+0x60>)
 8001af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_UART_MspDeInit+0x60>)
 8001afc:	4912      	ldr	r1, [pc, #72]	@ (8001b48 <HAL_UART_MspDeInit+0x64>)
 8001afe:	400a      	ands	r2, r1
 8001b00:	635a      	str	r2, [r3, #52]	@ 0x34

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001b02:	23c0      	movs	r3, #192	@ 0xc0
 8001b04:	00da      	lsls	r2, r3, #3
 8001b06:	23a0      	movs	r3, #160	@ 0xa0
 8001b08:	05db      	lsls	r3, r3, #23
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f001 fda1 	bl	8003654 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001b12:	e010      	b.n	8001b36 <HAL_UART_MspDeInit+0x52>
  else if(uartHandle->Instance==USART2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0c      	ldr	r2, [pc, #48]	@ (8001b4c <HAL_UART_MspDeInit+0x68>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d10b      	bne.n	8001b36 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_UART_MspDeInit+0x60>)
 8001b20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b22:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <HAL_UART_MspDeInit+0x60>)
 8001b24:	490a      	ldr	r1, [pc, #40]	@ (8001b50 <HAL_UART_MspDeInit+0x6c>)
 8001b26:	400a      	ands	r2, r1
 8001b28:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001b2a:	23a0      	movs	r3, #160	@ 0xa0
 8001b2c:	05db      	lsls	r3, r3, #23
 8001b2e:	210c      	movs	r1, #12
 8001b30:	0018      	movs	r0, r3
 8001b32:	f001 fd8f 	bl	8003654 <HAL_GPIO_DeInit>
}
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b002      	add	sp, #8
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	40013800 	.word	0x40013800
 8001b44:	40021000 	.word	0x40021000
 8001b48:	ffffbfff 	.word	0xffffbfff
 8001b4c:	40004400 	.word	0x40004400
 8001b50:	fffdffff 	.word	0xfffdffff

08001b54 <vbat_gate>:
#include "vbat_lorawan.h"

/* ---- Internal helpers --------------------------------------------------- */

static inline void vbat_gate(bool enable)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	701a      	strb	r2, [r3, #0]
#if VBAT_MEAS_EN_ACTIVE_HIGH
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin,
 8001b60:	1dfb      	adds	r3, r7, #7
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	001a      	movs	r2, r3
 8001b66:	23a0      	movs	r3, #160	@ 0xa0
 8001b68:	05db      	lsls	r3, r3, #23
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f001 fe53 	bl	8003818 <HAL_GPIO_WritePin>
                      enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
#else
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin,
                      enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
}
 8001b72:	46c0      	nop			@ (mov r8, r8)
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b002      	add	sp, #8
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <adc_read_counts>:

static bool adc_read_counts(ADC_HandleTypeDef *hadc, uint32_t channel, uint16_t *out_counts)
{
 8001b7a:	b590      	push	{r4, r7, lr}
 8001b7c:	b087      	sub	sp, #28
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
    if (!hadc || !out_counts) return false;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <adc_read_counts+0x18>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <adc_read_counts+0x1c>
 8001b92:	2300      	movs	r3, #0
 8001b94:	e03b      	b.n	8001c0e <adc_read_counts+0x94>

    ADC_ChannelConfTypeDef s = {0};
 8001b96:	2410      	movs	r4, #16
 8001b98:	193b      	adds	r3, r7, r4
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	f006 fe33 	bl	800880c <memset>
    s.Channel = channel;
 8001ba6:	0021      	movs	r1, r4
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	601a      	str	r2, [r3, #0]
#if defined(ADC_RANK_CHANNEL_NUMBER)
    s.Rank    = ADC_RANK_CHANNEL_NUMBER;
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	2280      	movs	r2, #128	@ 0x80
 8001bb2:	0152      	lsls	r2, r2, #5
 8001bb4:	605a      	str	r2, [r3, #4]
#endif
    /* NOTE (STM32L0): sampling time is set globally in hadc.Init.SamplingTime */

    if (HAL_ADC_ConfigChannel(hadc, &s) != HAL_OK) return false;
 8001bb6:	187a      	adds	r2, r7, r1
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	0011      	movs	r1, r2
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f001 f8e1 	bl	8002d84 <HAL_ADC_ConfigChannel>
 8001bc2:	1e03      	subs	r3, r0, #0
 8001bc4:	d001      	beq.n	8001bca <adc_read_counts+0x50>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e021      	b.n	8001c0e <adc_read_counts+0x94>
    if (HAL_ADC_Start(hadc) != HAL_OK) return false;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f000 ff9d 	bl	8002b0c <HAL_ADC_Start>
 8001bd2:	1e03      	subs	r3, r0, #0
 8001bd4:	d001      	beq.n	8001bda <adc_read_counts+0x60>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e019      	b.n	8001c0e <adc_read_counts+0x94>
    if (HAL_ADC_PollForConversion(hadc, 5) != HAL_OK) { (void)HAL_ADC_Stop(hadc); return false; }
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2105      	movs	r1, #5
 8001bde:	0018      	movs	r0, r3
 8001be0:	f001 f828 	bl	8002c34 <HAL_ADC_PollForConversion>
 8001be4:	1e03      	subs	r3, r0, #0
 8001be6:	d005      	beq.n	8001bf4 <adc_read_counts+0x7a>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	0018      	movs	r0, r3
 8001bec:	f000 ffe2 	bl	8002bb4 <HAL_ADC_Stop>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e00c      	b.n	8001c0e <adc_read_counts+0x94>

    *out_counts = (uint16_t)HAL_ADC_GetValue(hadc);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f001 f8b8 	bl	8002d6c <HAL_ADC_GetValue>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	801a      	strh	r2, [r3, #0]
    (void)HAL_ADC_Stop(hadc);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 ffd4 	bl	8002bb4 <HAL_ADC_Stop>
    return true;
 8001c0c:	2301      	movs	r3, #1
}
 8001c0e:	0018      	movs	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b007      	add	sp, #28
 8001c14:	bd90      	pop	{r4, r7, pc}

08001c16 <vbat_cold_compensation_mv>:


/* ---- Public API --------------------------------------------------------- */

uint16_t vbat_cold_compensation_mv(int16_t temp_c)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	1dbb      	adds	r3, r7, #6
 8001c20:	801a      	strh	r2, [r3, #0]
    if (temp_c >= 0) return 0;
 8001c22:	1dbb      	adds	r3, r7, #6
 8001c24:	2200      	movs	r2, #0
 8001c26:	5e9b      	ldrsh	r3, [r3, r2]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db01      	blt.n	8001c30 <vbat_cold_compensation_mv+0x1a>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e00e      	b.n	8001c4e <vbat_cold_compensation_mv+0x38>
    /* 4 mV per °C below zero, capped at +200 mV */
    uint32_t add = (uint32_t)((-temp_c) * 4);
 8001c30:	1dbb      	adds	r3, r7, #6
 8001c32:	2200      	movs	r2, #0
 8001c34:	5e9a      	ldrsh	r2, [r3, r2]
 8001c36:	0013      	movs	r3, r2
 8001c38:	079b      	lsls	r3, r3, #30
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	60fb      	str	r3, [r7, #12]
    if (add > 200U) add = 200U;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2bc8      	cmp	r3, #200	@ 0xc8
 8001c44:	d901      	bls.n	8001c4a <vbat_cold_compensation_mv+0x34>
 8001c46:	23c8      	movs	r3, #200	@ 0xc8
 8001c48:	60fb      	str	r3, [r7, #12]
    return (uint16_t)add;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	b29b      	uxth	r3, r3
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b004      	add	sp, #16
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <vbat_read_mv>:

bool vbat_read_mv(ADC_HandleTypeDef *hadc, uint32_t adc_channel, uint16_t *vbat_mv_out)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b08a      	sub	sp, #40	@ 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
    if (!hadc || !vbat_mv_out) return false;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <vbat_read_mv+0x18>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <vbat_read_mv+0x1c>
 8001c70:	2300      	movs	r3, #0
 8001c72:	e06c      	b.n	8001d4e <vbat_read_mv+0xf6>

    vbat_gate(true);
 8001c74:	2001      	movs	r0, #1
 8001c76:	f7ff ff6d 	bl	8001b54 <vbat_gate>
    HAL_Delay(VBAT_SETTLE_MS);
 8001c7a:	2004      	movs	r0, #4
 8001c7c:	f000 fda6 	bl	80027cc <HAL_Delay>

    uint32_t acc = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t s   = 0;
 8001c84:	2312      	movs	r3, #18
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	2200      	movs	r2, #0
 8001c8a:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < VBAT_SAMPLES; i++) {
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
 8001c90:	e01c      	b.n	8001ccc <vbat_read_mv+0x74>
        if (!adc_read_counts(hadc, adc_channel, &s)) { vbat_gate(false); return false; }
 8001c92:	2312      	movs	r3, #18
 8001c94:	18fa      	adds	r2, r7, r3
 8001c96:	68b9      	ldr	r1, [r7, #8]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f7ff ff6d 	bl	8001b7a <adc_read_counts>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	001a      	movs	r2, r3
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	4053      	eors	r3, r2
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d004      	beq.n	8001cb8 <vbat_read_mv+0x60>
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff ff50 	bl	8001b54 <vbat_gate>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e04a      	b.n	8001d4e <vbat_read_mv+0xf6>
        acc += s;
 8001cb8:	2312      	movs	r3, #18
 8001cba:	18fb      	adds	r3, r7, r3
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	001a      	movs	r2, r3
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	189b      	adds	r3, r3, r2
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    for (uint32_t i = 0; i < VBAT_SAMPLES; i++) {
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	623b      	str	r3, [r7, #32]
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	2b07      	cmp	r3, #7
 8001cd0:	d9df      	bls.n	8001c92 <vbat_read_mv+0x3a>
    }

    vbat_gate(false);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7ff ff3e 	bl	8001b54 <vbat_gate>

    uint32_t avg_counts = acc / VBAT_SAMPLES;
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	08db      	lsrs	r3, r3, #3
 8001cdc:	617b      	str	r3, [r7, #20]

    /* mv = counts * Vref / ADC_MAX * divider_factor; round properly */
    uint64_t mv = (uint64_t)avg_counts * (uint64_t)VREF_mV;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	001c      	movs	r4, r3
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	001d      	movs	r5, r3
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d58 <vbat_read_mv+0x100>)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	0020      	movs	r0, r4
 8001cec:	0029      	movs	r1, r5
 8001cee:	f7fe fbb3 	bl	8000458 <__aeabi_lmul>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	000b      	movs	r3, r1
 8001cf6:	61ba      	str	r2, [r7, #24]
 8001cf8:	61fb      	str	r3, [r7, #28]
    mv = (mv + (ADC_MAX_COUNTS/2)) / (uint64_t)ADC_MAX_COUNTS;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	4817      	ldr	r0, [pc, #92]	@ (8001d5c <vbat_read_mv+0x104>)
 8001d00:	2100      	movs	r1, #0
 8001d02:	1880      	adds	r0, r0, r2
 8001d04:	4159      	adcs	r1, r3
 8001d06:	4a16      	ldr	r2, [pc, #88]	@ (8001d60 <vbat_read_mv+0x108>)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f7fe fb85 	bl	8000418 <__aeabi_uldivmod>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	000b      	movs	r3, r1
 8001d12:	61ba      	str	r2, [r7, #24]
 8001d14:	61fb      	str	r3, [r7, #28]
    mv *= VBAT_DIV_NUM;
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	1892      	adds	r2, r2, r2
 8001d1c:	415b      	adcs	r3, r3
 8001d1e:	61ba      	str	r2, [r7, #24]
 8001d20:	61fb      	str	r3, [r7, #28]

    if (mv > 0xFFFFU) mv = 0xFFFFU;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d107      	bne.n	8001d38 <vbat_read_mv+0xe0>
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d108      	bne.n	8001d40 <vbat_read_mv+0xe8>
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	2380      	movs	r3, #128	@ 0x80
 8001d32:	025b      	lsls	r3, r3, #9
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d303      	bcc.n	8001d40 <vbat_read_mv+0xe8>
 8001d38:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <vbat_read_mv+0x10c>)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61ba      	str	r2, [r7, #24]
 8001d3e:	61fb      	str	r3, [r7, #28]
    *vbat_mv_out = (uint16_t)mv;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	1c13      	adds	r3, r2, #0
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	801a      	strh	r2, [r3, #0]
    return true;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b00a      	add	sp, #40	@ 0x28
 8001d54:	bdb0      	pop	{r4, r5, r7, pc}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	00000ce4 	.word	0x00000ce4
 8001d5c:	000007ff 	.word	0x000007ff
 8001d60:	00000fff 	.word	0x00000fff
 8001d64:	0000ffff 	.word	0x0000ffff

08001d68 <lorawan_encode_battery>:

uint8_t lorawan_encode_battery(uint16_t vbat_mv,
                               int16_t  temp_c,
                               bool     external_power_present,
                               bool     measurement_ok)
{
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b090      	sub	sp, #64	@ 0x40
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	0005      	movs	r5, r0
 8001d70:	000c      	movs	r4, r1
 8001d72:	0010      	movs	r0, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	1dbb      	adds	r3, r7, #6
 8001d78:	1c2a      	adds	r2, r5, #0
 8001d7a:	801a      	strh	r2, [r3, #0]
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	1c22      	adds	r2, r4, #0
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	1cfb      	adds	r3, r7, #3
 8001d84:	1c02      	adds	r2, r0, #0
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	1cbb      	adds	r3, r7, #2
 8001d8a:	1c0a      	adds	r2, r1, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
    if (external_power_present) return 0;   /* 0 = external power */
 8001d8e:	1cfb      	adds	r3, r7, #3
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <lorawan_encode_battery+0x32>
 8001d96:	2300      	movs	r3, #0
 8001d98:	e08c      	b.n	8001eb4 <lorawan_encode_battery+0x14c>
    if (!measurement_ok)       return 255;  /* 255 = cannot measure */
 8001d9a:	1cbb      	adds	r3, r7, #2
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4053      	eors	r3, r2
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <lorawan_encode_battery+0x44>
 8001da8:	23ff      	movs	r3, #255	@ 0xff
 8001daa:	e083      	b.n	8001eb4 <lorawan_encode_battery+0x14c>

    uint32_t v = (uint32_t)vbat_mv + (uint32_t)vbat_cold_compensation_mv(temp_c);
 8001dac:	1dbb      	adds	r3, r7, #6
 8001dae:	881c      	ldrh	r4, [r3, #0]
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	2200      	movs	r2, #0
 8001db4:	5e9b      	ldrsh	r3, [r3, r2]
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7ff ff2d 	bl	8001c16 <vbat_cold_compensation_mv>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	18e3      	adds	r3, r4, r3
 8001dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (v > 5000U) v = 5000U; /* clamp */
 8001dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dc4:	4a3d      	ldr	r2, [pc, #244]	@ (8001ebc <lorawan_encode_battery+0x154>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <lorawan_encode_battery+0x66>
 8001dca:	4b3c      	ldr	r3, [pc, #240]	@ (8001ebc <lorawan_encode_battery+0x154>)
 8001dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (v >= VBAT_SEG1_MIN_mV) {
 8001dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dd0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ec0 <lorawan_encode_battery+0x158>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d925      	bls.n	8001e22 <lorawan_encode_battery+0xba>
        /* 3.30–3.60 V → 200..254 (55 steps over 300 mV) */
        const uint32_t span_mv = (VBAT_SEG1_MAX_mV - VBAT_SEG1_MIN_mV);    /* 300 */
 8001dd6:	2396      	movs	r3, #150	@ 0x96
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
        const uint32_t span_lv = (LORA_SEG1_MAX - LORA_SEG1_MIN);          /* 54 */
 8001ddc:	2336      	movs	r3, #54	@ 0x36
 8001dde:	613b      	str	r3, [r7, #16]
        uint32_t dv = (v > VBAT_SEG1_MAX_mV) ? span_mv : (v - VBAT_SEG1_MIN_mV);
 8001de0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001de2:	23e1      	movs	r3, #225	@ 0xe1
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d804      	bhi.n	8001df4 <lorawan_encode_battery+0x8c>
 8001dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dec:	4a35      	ldr	r2, [pc, #212]	@ (8001ec4 <lorawan_encode_battery+0x15c>)
 8001dee:	4694      	mov	ip, r2
 8001df0:	4463      	add	r3, ip
 8001df2:	e000      	b.n	8001df6 <lorawan_encode_battery+0x8e>
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	60fb      	str	r3, [r7, #12]
        uint32_t lvl = LORA_SEG1_MIN + (dv * span_lv + (span_mv/2)) / span_mv;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	435a      	muls	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	18d3      	adds	r3, r2, r3
 8001e04:	6979      	ldr	r1, [r7, #20]
 8001e06:	0018      	movs	r0, r3
 8001e08:	f7fe f990 	bl	800012c <__udivsi3>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	33c8      	adds	r3, #200	@ 0xc8
 8001e10:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (lvl > LORA_SEG1_MAX) lvl = LORA_SEG1_MAX;
 8001e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e14:	2bfe      	cmp	r3, #254	@ 0xfe
 8001e16:	d901      	bls.n	8001e1c <lorawan_encode_battery+0xb4>
 8001e18:	23fe      	movs	r3, #254	@ 0xfe
 8001e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
        return (uint8_t)lvl;
 8001e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	e048      	b.n	8001eb4 <lorawan_encode_battery+0x14c>
    } else if (v >= VBAT_SEG2_MIN_mV) {
 8001e22:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e24:	23af      	movs	r3, #175	@ 0xaf
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d31e      	bcc.n	8001e6a <lorawan_encode_battery+0x102>
        /* 2.80–3.30 V → 50..199 (150 steps over 500 mV) */
        const uint32_t span_mv = (VBAT_SEG1_MIN_mV - VBAT_SEG2_MIN_mV);    /* 500 */
 8001e2c:	23fa      	movs	r3, #250	@ 0xfa
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	623b      	str	r3, [r7, #32]
        const uint32_t span_lv = (LORA_SEG2_MAX - LORA_SEG2_MIN);          /* 149 */
 8001e32:	2395      	movs	r3, #149	@ 0x95
 8001e34:	61fb      	str	r3, [r7, #28]
        uint32_t dv = v - VBAT_SEG2_MIN_mV;
 8001e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e38:	4a23      	ldr	r2, [pc, #140]	@ (8001ec8 <lorawan_encode_battery+0x160>)
 8001e3a:	4694      	mov	ip, r2
 8001e3c:	4463      	add	r3, ip
 8001e3e:	61bb      	str	r3, [r7, #24]
        uint32_t lvl = LORA_SEG2_MIN + (dv * span_lv + (span_mv/2)) / span_mv;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	435a      	muls	r2, r3
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	085b      	lsrs	r3, r3, #1
 8001e4a:	18d3      	adds	r3, r2, r3
 8001e4c:	6a39      	ldr	r1, [r7, #32]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f7fe f96c 	bl	800012c <__udivsi3>
 8001e54:	0003      	movs	r3, r0
 8001e56:	3332      	adds	r3, #50	@ 0x32
 8001e58:	637b      	str	r3, [r7, #52]	@ 0x34
        if (lvl > LORA_SEG2_MAX) lvl = LORA_SEG2_MAX;
 8001e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8001e5e:	d901      	bls.n	8001e64 <lorawan_encode_battery+0xfc>
 8001e60:	23c7      	movs	r3, #199	@ 0xc7
 8001e62:	637b      	str	r3, [r7, #52]	@ 0x34
        return (uint8_t)lvl;
 8001e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	e024      	b.n	8001eb4 <lorawan_encode_battery+0x14c>
    } else if (v >= VBAT_SEG3_MIN_mV) {
 8001e6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e6c:	23fa      	movs	r3, #250	@ 0xfa
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d31e      	bcc.n	8001eb2 <lorawan_encode_battery+0x14a>
        /* 2.00–2.80 V → 1..49 (49 steps over 800 mV) */
        const uint32_t span_mv = (VBAT_SEG2_MIN_mV - VBAT_SEG3_MIN_mV);    /* 800 */
 8001e74:	23c8      	movs	r3, #200	@ 0xc8
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const uint32_t span_lv = (LORA_SEG3_MAX - LORA_SEG3_MIN);          /* 48 */
 8001e7a:	2330      	movs	r3, #48	@ 0x30
 8001e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint32_t dv = v - VBAT_SEG3_MIN_mV;
 8001e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e80:	4a12      	ldr	r2, [pc, #72]	@ (8001ecc <lorawan_encode_battery+0x164>)
 8001e82:	4694      	mov	ip, r2
 8001e84:	4463      	add	r3, ip
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t lvl = LORA_SEG3_MIN + (dv * span_lv + (span_mv/2)) / span_mv;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e8c:	435a      	muls	r2, r3
 8001e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e90:	085b      	lsrs	r3, r3, #1
 8001e92:	18d3      	adds	r3, r2, r3
 8001e94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001e96:	0018      	movs	r0, r3
 8001e98:	f7fe f948 	bl	800012c <__udivsi3>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (lvl > LORA_SEG3_MAX) lvl = LORA_SEG3_MAX;
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea4:	2b31      	cmp	r3, #49	@ 0x31
 8001ea6:	d901      	bls.n	8001eac <lorawan_encode_battery+0x144>
 8001ea8:	2331      	movs	r3, #49	@ 0x31
 8001eaa:	633b      	str	r3, [r7, #48]	@ 0x30
        return (uint8_t)lvl;
 8001eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	e000      	b.n	8001eb4 <lorawan_encode_battery+0x14c>
    } else {
        /* <2.00 V */
        return 1;
 8001eb2:	2301      	movs	r3, #1
    }
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b010      	add	sp, #64	@ 0x40
 8001eba:	bdb0      	pop	{r4, r5, r7, pc}
 8001ebc:	00001388 	.word	0x00001388
 8001ec0:	00000ce3 	.word	0x00000ce3
 8001ec4:	fffff31c 	.word	0xfffff31c
 8001ec8:	fffff510 	.word	0xfffff510
 8001ecc:	fffff830 	.word	0xfffff830

08001ed0 <vbat_measure_and_encode>:

uint8_t vbat_measure_and_encode(ADC_HandleTypeDef *hadc,
                                uint32_t adc_channel,
                                int16_t  temp_c,
                                bool     external_power_present)
{
 8001ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	0019      	movs	r1, r3
 8001edc:	1dbb      	adds	r3, r7, #6
 8001ede:	801a      	strh	r2, [r3, #0]
 8001ee0:	1d7b      	adds	r3, r7, #5
 8001ee2:	1c0a      	adds	r2, r1, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
    uint16_t mv = 0;
 8001ee6:	2514      	movs	r5, #20
 8001ee8:	197b      	adds	r3, r7, r5
 8001eea:	2200      	movs	r2, #0
 8001eec:	801a      	strh	r2, [r3, #0]
    bool ok = vbat_read_mv(hadc, adc_channel, &mv);
 8001eee:	2617      	movs	r6, #23
 8001ef0:	19bc      	adds	r4, r7, r6
 8001ef2:	197a      	adds	r2, r7, r5
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7ff fead 	bl	8001c58 <vbat_read_mv>
 8001efe:	0003      	movs	r3, r0
 8001f00:	7023      	strb	r3, [r4, #0]
    return lorawan_encode_battery(mv, temp_c, external_power_present, ok);
 8001f02:	197b      	adds	r3, r7, r5
 8001f04:	8818      	ldrh	r0, [r3, #0]
 8001f06:	19bb      	adds	r3, r7, r6
 8001f08:	781c      	ldrb	r4, [r3, #0]
 8001f0a:	1d7b      	adds	r3, r7, #5
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	1dbb      	adds	r3, r7, #6
 8001f10:	2100      	movs	r1, #0
 8001f12:	5e59      	ldrsh	r1, [r3, r1]
 8001f14:	0023      	movs	r3, r4
 8001f16:	f7ff ff27 	bl	8001d68 <lorawan_encode_battery>
 8001f1a:	0003      	movs	r3, r0
}
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b007      	add	sp, #28
 8001f22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f24 <sht4x_temp_centi_from_ticks>:
#include <stdbool.h>

extern I2C_HandleTypeDef hi2c1;

// was: static inline int16_t sht4x_temp_centi_from_ticks(uint16_t t_ticks)
int16_t sht4x_temp_centi_from_ticks(uint16_t t_ticks) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	1dbb      	adds	r3, r7, #6
 8001f2e:	801a      	strh	r2, [r3, #0]
    uint32_t num = 17500u * (uint32_t)t_ticks + 32767u;  // nearest rounding
 8001f30:	1dbb      	adds	r3, r7, #6
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	4a10      	ldr	r2, [pc, #64]	@ (8001f78 <sht4x_temp_centi_from_ticks+0x54>)
 8001f36:	4353      	muls	r3, r2
 8001f38:	4a10      	ldr	r2, [pc, #64]	@ (8001f7c <sht4x_temp_centi_from_ticks+0x58>)
 8001f3a:	4694      	mov	ip, r2
 8001f3c:	4463      	add	r3, ip
 8001f3e:	60bb      	str	r3, [r7, #8]
    int32_t centi = (int32_t)(num / 65535u) - 4500;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	490f      	ldr	r1, [pc, #60]	@ (8001f80 <sht4x_temp_centi_from_ticks+0x5c>)
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7fe f8f1 	bl	800012c <__udivsi3>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f84 <sht4x_temp_centi_from_ticks+0x60>)
 8001f4e:	4694      	mov	ip, r2
 8001f50:	4463      	add	r3, ip
 8001f52:	60fb      	str	r3, [r7, #12]
    if (centi < -4500) centi = -4500;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4a0b      	ldr	r2, [pc, #44]	@ (8001f84 <sht4x_temp_centi_from_ticks+0x60>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	da01      	bge.n	8001f60 <sht4x_temp_centi_from_ticks+0x3c>
 8001f5c:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <sht4x_temp_centi_from_ticks+0x60>)
 8001f5e:	60fb      	str	r3, [r7, #12]
    if (centi > 13000) centi = 13000;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4a09      	ldr	r2, [pc, #36]	@ (8001f88 <sht4x_temp_centi_from_ticks+0x64>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	dd01      	ble.n	8001f6c <sht4x_temp_centi_from_ticks+0x48>
 8001f68:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <sht4x_temp_centi_from_ticks+0x64>)
 8001f6a:	60fb      	str	r3, [r7, #12]
    return (int16_t)centi;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	b21b      	sxth	r3, r3
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b004      	add	sp, #16
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	0000445c 	.word	0x0000445c
 8001f7c:	00007fff 	.word	0x00007fff
 8001f80:	0000ffff 	.word	0x0000ffff
 8001f84:	ffffee6c 	.word	0xffffee6c
 8001f88:	000032c8 	.word	0x000032c8

08001f8c <sht4x_rh_centi_from_ticks>:

// was: static inline uint16_t sht4x_rh_centi_from_ticks(uint16_t rh_ticks)
uint16_t sht4x_rh_centi_from_ticks(uint16_t rh_ticks) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	0002      	movs	r2, r0
 8001f94:	1dbb      	adds	r3, r7, #6
 8001f96:	801a      	strh	r2, [r3, #0]
    uint32_t num = 12500u * (uint32_t)rh_ticks + 32767u; // nearest rounding
 8001f98:	1dbb      	adds	r3, r7, #6
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	4a10      	ldr	r2, [pc, #64]	@ (8001fe0 <sht4x_rh_centi_from_ticks+0x54>)
 8001f9e:	4353      	muls	r3, r2
 8001fa0:	4a10      	ldr	r2, [pc, #64]	@ (8001fe4 <sht4x_rh_centi_from_ticks+0x58>)
 8001fa2:	4694      	mov	ip, r2
 8001fa4:	4463      	add	r3, ip
 8001fa6:	60bb      	str	r3, [r7, #8]
    int32_t centi = (int32_t)(num / 65535u) - 600;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	490f      	ldr	r1, [pc, #60]	@ (8001fe8 <sht4x_rh_centi_from_ticks+0x5c>)
 8001fac:	0018      	movs	r0, r3
 8001fae:	f7fe f8bd 	bl	800012c <__udivsi3>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001fec <sht4x_rh_centi_from_ticks+0x60>)
 8001fb6:	4694      	mov	ip, r2
 8001fb8:	4463      	add	r3, ip
 8001fba:	60fb      	str	r3, [r7, #12]
    if (centi < 0)      centi = 0;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	da01      	bge.n	8001fc6 <sht4x_rh_centi_from_ticks+0x3a>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
    if (centi > 10000)  centi = 10000;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4a09      	ldr	r2, [pc, #36]	@ (8001ff0 <sht4x_rh_centi_from_ticks+0x64>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	dd01      	ble.n	8001fd2 <sht4x_rh_centi_from_ticks+0x46>
 8001fce:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <sht4x_rh_centi_from_ticks+0x64>)
 8001fd0:	60fb      	str	r3, [r7, #12]
    return (uint16_t)centi;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	b29b      	uxth	r3, r3
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b004      	add	sp, #16
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	000030d4 	.word	0x000030d4
 8001fe4:	00007fff 	.word	0x00007fff
 8001fe8:	0000ffff 	.word	0x0000ffff
 8001fec:	fffffda8 	.word	0xfffffda8
 8001ff0:	00002710 	.word	0x00002710

08001ff4 <scan_i2c_bus>:
uint16_t calculated_hum_2;

int16_t i2c_error_code = 0;

void scan_i2c_bus(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
    // re-set these to false because we want to check every time for safety
    has_sensor_1 = false;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <scan_i2c_bus+0x44>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
    has_sensor_2 = false;
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800203c <scan_i2c_bus+0x48>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]

    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x44 << 1, 1, 10) == HAL_OK) has_sensor_1 = true;
 8002004:	480e      	ldr	r0, [pc, #56]	@ (8002040 <scan_i2c_bus+0x4c>)
 8002006:	230a      	movs	r3, #10
 8002008:	2201      	movs	r2, #1
 800200a:	2188      	movs	r1, #136	@ 0x88
 800200c:	f001 ff2a 	bl	8003e64 <HAL_I2C_IsDeviceReady>
 8002010:	1e03      	subs	r3, r0, #0
 8002012:	d102      	bne.n	800201a <scan_i2c_bus+0x26>
 8002014:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <scan_i2c_bus+0x44>)
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x46 << 1, 1, 10) == HAL_OK) has_sensor_2 = true;
 800201a:	4809      	ldr	r0, [pc, #36]	@ (8002040 <scan_i2c_bus+0x4c>)
 800201c:	230a      	movs	r3, #10
 800201e:	2201      	movs	r2, #1
 8002020:	218c      	movs	r1, #140	@ 0x8c
 8002022:	f001 ff1f 	bl	8003e64 <HAL_I2C_IsDeviceReady>
 8002026:	1e03      	subs	r3, r0, #0
 8002028:	d102      	bne.n	8002030 <scan_i2c_bus+0x3c>
 800202a:	4b04      	ldr	r3, [pc, #16]	@ (800203c <scan_i2c_bus+0x48>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
}
 8002030:	46c0      	nop			@ (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	20000754 	.word	0x20000754
 800203c:	20000755 	.word	0x20000755
 8002040:	20000380 	.word	0x20000380

08002044 <sensor_init_and_read>:

int sensor_init_and_read(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
    // If either sensor is missing => error
    if (!has_sensor_1 || !has_sensor_2) {
 800204a:	4b5c      	ldr	r3, [pc, #368]	@ (80021bc <sensor_init_and_read+0x178>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2201      	movs	r2, #1
 8002050:	4053      	eors	r3, r2
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d106      	bne.n	8002066 <sensor_init_and_read+0x22>
 8002058:	4b59      	ldr	r3, [pc, #356]	@ (80021c0 <sensor_init_and_read+0x17c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2201      	movs	r2, #1
 800205e:	4053      	eors	r3, r2
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d004      	beq.n	8002070 <sensor_init_and_read+0x2c>
        i2c_error_code = NO_SENSORS_FOUND;
 8002066:	4b57      	ldr	r3, [pc, #348]	@ (80021c4 <sensor_init_and_read+0x180>)
 8002068:	2201      	movs	r2, #1
 800206a:	801a      	strh	r2, [r3, #0]
        return 1; // sensor 1 or 2 not found
 800206c:	2301      	movs	r3, #1
 800206e:	e0a0      	b.n	80021b2 <sensor_init_and_read+0x16e>
    }

    i2c_error_code = NO_ERROR;
 8002070:	4b54      	ldr	r3, [pc, #336]	@ (80021c4 <sensor_init_and_read+0x180>)
 8002072:	2200      	movs	r2, #0
 8002074:	801a      	strh	r2, [r3, #0]
    HAL_Delay(100);
 8002076:	2064      	movs	r0, #100	@ 0x64
 8002078:	f000 fba8 	bl	80027cc <HAL_Delay>

    if (has_sensor_1) {
 800207c:	4b4f      	ldr	r3, [pc, #316]	@ (80021bc <sensor_init_and_read+0x178>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01c      	beq.n	80020be <sensor_init_and_read+0x7a>
        sht4x_init(SHT43_I2C_ADDR_44);
 8002084:	2044      	movs	r0, #68	@ 0x44
 8002086:	f000 fa8b 	bl	80025a0 <sht4x_init>
        sht4x_soft_reset();
 800208a:	f000 fafd 	bl	8002688 <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 800208e:	4b4e      	ldr	r3, [pc, #312]	@ (80021c8 <sensor_init_and_read+0x184>)
 8002090:	0018      	movs	r0, r3
 8002092:	f000 fa5b 	bl	800254c <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT43_I2C_ADDR_44);
 8002096:	2044      	movs	r0, #68	@ 0x44
 8002098:	f000 fa82 	bl	80025a0 <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 800209c:	4a4b      	ldr	r2, [pc, #300]	@ (80021cc <sensor_init_and_read+0x188>)
 800209e:	4b4c      	ldr	r3, [pc, #304]	@ (80021d0 <sensor_init_and_read+0x18c>)
 80020a0:	0011      	movs	r1, r2
 80020a2:	0018      	movs	r0, r3
 80020a4:	f000 fa8c 	bl	80025c0 <sht4x_measure_high_precision_ticks>
 80020a8:	0003      	movs	r3, r0
 80020aa:	001a      	movs	r2, r3
 80020ac:	4b45      	ldr	r3, [pc, #276]	@ (80021c4 <sensor_init_and_read+0x180>)
 80020ae:	801a      	strh	r2, [r3, #0]
        if (i2c_error_code) return 2; // hard fault on read
 80020b0:	4b44      	ldr	r3, [pc, #272]	@ (80021c4 <sensor_init_and_read+0x180>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	5e9b      	ldrsh	r3, [r3, r2]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <sensor_init_and_read+0x7a>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e079      	b.n	80021b2 <sensor_init_and_read+0x16e>
    }

    if (has_sensor_2) {
 80020be:	4b40      	ldr	r3, [pc, #256]	@ (80021c0 <sensor_init_and_read+0x17c>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d01c      	beq.n	8002100 <sensor_init_and_read+0xbc>
        sht4x_init(SHT40_I2C_ADDR_46);
 80020c6:	2046      	movs	r0, #70	@ 0x46
 80020c8:	f000 fa6a 	bl	80025a0 <sht4x_init>
        sht4x_soft_reset();
 80020cc:	f000 fadc 	bl	8002688 <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 80020d0:	4b3d      	ldr	r3, [pc, #244]	@ (80021c8 <sensor_init_and_read+0x184>)
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 fa3a 	bl	800254c <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT40_I2C_ADDR_46);
 80020d8:	2046      	movs	r0, #70	@ 0x46
 80020da:	f000 fa61 	bl	80025a0 <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 80020de:	4a3d      	ldr	r2, [pc, #244]	@ (80021d4 <sensor_init_and_read+0x190>)
 80020e0:	4b3d      	ldr	r3, [pc, #244]	@ (80021d8 <sensor_init_and_read+0x194>)
 80020e2:	0011      	movs	r1, r2
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 fa6b 	bl	80025c0 <sht4x_measure_high_precision_ticks>
 80020ea:	0003      	movs	r3, r0
 80020ec:	001a      	movs	r2, r3
 80020ee:	4b35      	ldr	r3, [pc, #212]	@ (80021c4 <sensor_init_and_read+0x180>)
 80020f0:	801a      	strh	r2, [r3, #0]
        if (i2c_error_code) return 3; // hard fault on read
 80020f2:	4b34      	ldr	r3, [pc, #208]	@ (80021c4 <sensor_init_and_read+0x180>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	5e9b      	ldrsh	r3, [r3, r2]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <sensor_init_and_read+0xbc>
 80020fc:	2303      	movs	r3, #3
 80020fe:	e058      	b.n	80021b2 <sensor_init_and_read+0x16e>
    }

    // Convert using exact integer math with rounding (centi-units)
    calculated_temp_1 = sht4x_temp_centi_from_ticks(temp_ticks_1);  // °C×100
 8002100:	4b33      	ldr	r3, [pc, #204]	@ (80021d0 <sensor_init_and_read+0x18c>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	0018      	movs	r0, r3
 8002106:	f7ff ff0d 	bl	8001f24 <sht4x_temp_centi_from_ticks>
 800210a:	0003      	movs	r3, r0
 800210c:	001a      	movs	r2, r3
 800210e:	4b33      	ldr	r3, [pc, #204]	@ (80021dc <sensor_init_and_read+0x198>)
 8002110:	801a      	strh	r2, [r3, #0]
    calculated_temp_2 = sht4x_temp_centi_from_ticks(temp_ticks_2);  // °C×100
 8002112:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <sensor_init_and_read+0x194>)
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	0018      	movs	r0, r3
 8002118:	f7ff ff04 	bl	8001f24 <sht4x_temp_centi_from_ticks>
 800211c:	0003      	movs	r3, r0
 800211e:	001a      	movs	r2, r3
 8002120:	4b2f      	ldr	r3, [pc, #188]	@ (80021e0 <sensor_init_and_read+0x19c>)
 8002122:	801a      	strh	r2, [r3, #0]
    calculated_hum_1  = sht4x_rh_centi_from_ticks(hum_ticks_1);     // %×100
 8002124:	4b29      	ldr	r3, [pc, #164]	@ (80021cc <sensor_init_and_read+0x188>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff ff2f 	bl	8001f8c <sht4x_rh_centi_from_ticks>
 800212e:	0003      	movs	r3, r0
 8002130:	001a      	movs	r2, r3
 8002132:	4b2c      	ldr	r3, [pc, #176]	@ (80021e4 <sensor_init_and_read+0x1a0>)
 8002134:	801a      	strh	r2, [r3, #0]
    calculated_hum_2  = sht4x_rh_centi_from_ticks(hum_ticks_2);     // %×100
 8002136:	4b27      	ldr	r3, [pc, #156]	@ (80021d4 <sensor_init_and_read+0x190>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	0018      	movs	r0, r3
 800213c:	f7ff ff26 	bl	8001f8c <sht4x_rh_centi_from_ticks>
 8002140:	0003      	movs	r3, r0
 8002142:	001a      	movs	r2, r3
 8002144:	4b28      	ldr	r3, [pc, #160]	@ (80021e8 <sensor_init_and_read+0x1a4>)
 8002146:	801a      	strh	r2, [r3, #0]

    // Compute absolute temperature delta in centi-degrees
    int16_t temp_diff  = (int16_t)(calculated_temp_1 - calculated_temp_2);
 8002148:	4b24      	ldr	r3, [pc, #144]	@ (80021dc <sensor_init_and_read+0x198>)
 800214a:	2200      	movs	r2, #0
 800214c:	5e9b      	ldrsh	r3, [r3, r2]
 800214e:	b29a      	uxth	r2, r3
 8002150:	4b23      	ldr	r3, [pc, #140]	@ (80021e0 <sensor_init_and_read+0x19c>)
 8002152:	2100      	movs	r1, #0
 8002154:	5e5b      	ldrsh	r3, [r3, r1]
 8002156:	b29b      	uxth	r3, r3
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	b29a      	uxth	r2, r3
 800215c:	1dbb      	adds	r3, r7, #6
 800215e:	801a      	strh	r2, [r3, #0]
    uint16_t temp_delta = (temp_diff < 0) ? (uint16_t)(-temp_diff) : (uint16_t)temp_diff;
 8002160:	1dbb      	adds	r3, r7, #6
 8002162:	2200      	movs	r2, #0
 8002164:	5e9b      	ldrsh	r3, [r3, r2]
 8002166:	2b00      	cmp	r3, #0
 8002168:	da04      	bge.n	8002174 <sensor_init_and_read+0x130>
 800216a:	1dbb      	adds	r3, r7, #6
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	425b      	negs	r3, r3
 8002170:	b29b      	uxth	r3, r3
 8002172:	e001      	b.n	8002178 <sensor_init_and_read+0x134>
 8002174:	1dbb      	adds	r3, r7, #6
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	1d3a      	adds	r2, r7, #4
 800217a:	8013      	strh	r3, [r2, #0]

    // If the difference between the two temp sensors is greater than 5.00 °C
    if (temp_delta > 500) {
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	881a      	ldrh	r2, [r3, #0]
 8002180:	23fa      	movs	r3, #250	@ 0xfa
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	429a      	cmp	r2, r3
 8002186:	d901      	bls.n	800218c <sensor_init_and_read+0x148>
        return 4;
 8002188:	2304      	movs	r3, #4
 800218a:	e012      	b.n	80021b2 <sensor_init_and_read+0x16e>
    }

    // If you need +55.00 °C offset for transmission, do it here without
    // polluting the stored/calculated values:
    calculated_temp_1 = calculated_temp_1 + 5500;
 800218c:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <sensor_init_and_read+0x198>)
 800218e:	2200      	movs	r2, #0
 8002190:	5e9b      	ldrsh	r3, [r3, r2]
 8002192:	b29b      	uxth	r3, r3
 8002194:	4a15      	ldr	r2, [pc, #84]	@ (80021ec <sensor_init_and_read+0x1a8>)
 8002196:	4694      	mov	ip, r2
 8002198:	4463      	add	r3, ip
 800219a:	b29b      	uxth	r3, r3
 800219c:	b21a      	sxth	r2, r3
 800219e:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <sensor_init_and_read+0x198>)
 80021a0:	801a      	strh	r2, [r3, #0]
    // (use tx_temp_* to build your payload)

    if (i2c_error_code) {
 80021a2:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <sensor_init_and_read+0x180>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	5e9b      	ldrsh	r3, [r3, r2]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <sensor_init_and_read+0x16c>
        return 1;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <sensor_init_and_read+0x16e>
    }
    return 0;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	0018      	movs	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b002      	add	sp, #8
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			@ (mov r8, r8)
 80021bc:	20000754 	.word	0x20000754
 80021c0:	20000755 	.word	0x20000755
 80021c4:	20000766 	.word	0x20000766
 80021c8:	00002710 	.word	0x00002710
 80021cc:	20000758 	.word	0x20000758
 80021d0:	20000756 	.word	0x20000756
 80021d4:	2000075c 	.word	0x2000075c
 80021d8:	2000075a 	.word	0x2000075a
 80021dc:	2000075e 	.word	0x2000075e
 80021e0:	20000762 	.word	0x20000762
 80021e4:	20000760 	.word	0x20000760
 80021e8:	20000764 	.word	0x20000764
 80021ec:	0000157c 	.word	0x0000157c

080021f0 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	b21a      	sxth	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3301      	adds	r3, #1
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b21b      	sxth	r3, r3
 800220a:	4313      	orrs	r3, r2
 800220c:	b21b      	sxth	r3, r3
 800220e:	b29b      	uxth	r3, r3
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	b002      	add	sp, #8
 8002216:	bd80      	pop	{r7, pc}

08002218 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	000a      	movs	r2, r1
 8002222:	1cbb      	adds	r3, r7, #2
 8002224:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8002226:	230d      	movs	r3, #13
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	22ff      	movs	r2, #255	@ 0xff
 800222c:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800222e:	230e      	movs	r3, #14
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	2200      	movs	r2, #0
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	e038      	b.n	80022aa <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8002238:	230e      	movs	r3, #14
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	18d3      	adds	r3, r2, r3
 8002242:	7819      	ldrb	r1, [r3, #0]
 8002244:	220d      	movs	r2, #13
 8002246:	18bb      	adds	r3, r7, r2
 8002248:	18ba      	adds	r2, r7, r2
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	404a      	eors	r2, r1
 800224e:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8002250:	230c      	movs	r3, #12
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	2208      	movs	r2, #8
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e01c      	b.n	8002294 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 800225a:	210d      	movs	r1, #13
 800225c:	187b      	adds	r3, r7, r1
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b25b      	sxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	da0a      	bge.n	800227c <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8002266:	187b      	adds	r3, r7, r1
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b25b      	sxtb	r3, r3
 800226c:	18db      	adds	r3, r3, r3
 800226e:	b25b      	sxtb	r3, r3
 8002270:	2231      	movs	r2, #49	@ 0x31
 8002272:	4053      	eors	r3, r2
 8002274:	b25a      	sxtb	r2, r3
 8002276:	187b      	adds	r3, r7, r1
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e005      	b.n	8002288 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 800227c:	230d      	movs	r3, #13
 800227e:	18fa      	adds	r2, r7, r3
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	18db      	adds	r3, r3, r3
 8002286:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8002288:	220c      	movs	r2, #12
 800228a:	18bb      	adds	r3, r7, r2
 800228c:	18ba      	adds	r2, r7, r2
 800228e:	7812      	ldrb	r2, [r2, #0]
 8002290:	3a01      	subs	r2, #1
 8002292:	701a      	strb	r2, [r3, #0]
 8002294:	230c      	movs	r3, #12
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1dd      	bne.n	800225a <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800229e:	220e      	movs	r2, #14
 80022a0:	18bb      	adds	r3, r7, r2
 80022a2:	18ba      	adds	r2, r7, r2
 80022a4:	8812      	ldrh	r2, [r2, #0]
 80022a6:	3201      	adds	r2, #1
 80022a8:	801a      	strh	r2, [r3, #0]
 80022aa:	230e      	movs	r3, #14
 80022ac:	18fa      	adds	r2, r7, r3
 80022ae:	1cbb      	adds	r3, r7, #2
 80022b0:	8812      	ldrh	r2, [r2, #0]
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d3bf      	bcc.n	8002238 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 80022b8:	230d      	movs	r3, #13
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	781b      	ldrb	r3, [r3, #0]
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b004      	add	sp, #16
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	0008      	movs	r0, r1
 80022d0:	0011      	movs	r1, r2
 80022d2:	1cbb      	adds	r3, r7, #2
 80022d4:	1c02      	adds	r2, r0, #0
 80022d6:	801a      	strh	r2, [r3, #0]
 80022d8:	1c7b      	adds	r3, r7, #1
 80022da:	1c0a      	adds	r2, r1, #0
 80022dc:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 80022de:	1cbb      	adds	r3, r7, #2
 80022e0:	881a      	ldrh	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	0011      	movs	r1, r2
 80022e6:	0018      	movs	r0, r3
 80022e8:	f7ff ff96 	bl	8002218 <sensirion_i2c_generate_crc>
 80022ec:	0003      	movs	r3, r0
 80022ee:	001a      	movs	r2, r3
 80022f0:	1c7b      	adds	r3, r7, #1
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d001      	beq.n	80022fc <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b002      	add	sp, #8
 8002304:	bd80      	pop	{r7, pc}

08002306 <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	0008      	movs	r0, r1
 8002310:	0011      	movs	r1, r2
 8002312:	1cbb      	adds	r3, r7, #2
 8002314:	1c02      	adds	r2, r0, #0
 8002316:	801a      	strh	r2, [r3, #0]
 8002318:	1c7b      	adds	r3, r7, #1
 800231a:	1c0a      	adds	r2, r1, #0
 800231c:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 800231e:	1cbb      	adds	r3, r7, #2
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	1cba      	adds	r2, r7, #2
 8002324:	1c59      	adds	r1, r3, #1
 8002326:	8011      	strh	r1, [r2, #0]
 8002328:	001a      	movs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	189b      	adds	r3, r3, r2
 800232e:	1c7a      	adds	r2, r7, #1
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	701a      	strb	r2, [r3, #0]
    return offset;
 8002334:	1cbb      	adds	r3, r7, #2
 8002336:	881b      	ldrh	r3, [r3, #0]
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}

08002340 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6039      	str	r1, [r7, #0]
 8002348:	0011      	movs	r1, r2
 800234a:	1dfb      	adds	r3, r7, #7
 800234c:	1c02      	adds	r2, r0, #0
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	1c0a      	adds	r2, r1, #0
 8002354:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	1dfb      	adds	r3, r7, #7
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	0018      	movs	r0, r3
 8002364:	f000 f8c4 	bl	80024f0 <sensirion_i2c_hal_write>
 8002368:	0003      	movs	r3, r0
}
 800236a:	0018      	movs	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	b002      	add	sp, #8
 8002370:	bd80      	pop	{r7, pc}

08002372 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8002372:	b5b0      	push	{r4, r5, r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	0011      	movs	r1, r2
 800237c:	1dfb      	adds	r3, r7, #7
 800237e:	1c02      	adds	r2, r0, #0
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	1c0a      	adds	r2, r1, #0
 8002386:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	085b      	lsrs	r3, r3, #1
 800238e:	b29b      	uxth	r3, r3
 8002390:	220a      	movs	r2, #10
 8002392:	18ba      	adds	r2, r7, r2
 8002394:	1c19      	adds	r1, r3, #0
 8002396:	1c0b      	adds	r3, r1, #0
 8002398:	18db      	adds	r3, r3, r3
 800239a:	185b      	adds	r3, r3, r1
 800239c:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	2201      	movs	r2, #1
 80023a4:	4013      	ands	r3, r2
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 80023ac:	2304      	movs	r3, #4
 80023ae:	e06c      	b.n	800248a <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 80023b0:	230a      	movs	r3, #10
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	6839      	ldr	r1, [r7, #0]
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	0018      	movs	r0, r3
 80023c0:	f000 f868 	bl	8002494 <sensirion_i2c_hal_read>
 80023c4:	0003      	movs	r3, r0
 80023c6:	001a      	movs	r2, r3
 80023c8:	2108      	movs	r1, #8
 80023ca:	187b      	adds	r3, r7, r1
 80023cc:	801a      	strh	r2, [r3, #0]
    if (error) {
 80023ce:	000a      	movs	r2, r1
 80023d0:	18bb      	adds	r3, r7, r2
 80023d2:	2100      	movs	r1, #0
 80023d4:	5e5b      	ldrsh	r3, [r3, r1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <sensirion_i2c_read_data_inplace+0x70>
        return error;
 80023da:	18bb      	adds	r3, r7, r2
 80023dc:	2200      	movs	r2, #0
 80023de:	5e9b      	ldrsh	r3, [r3, r2]
 80023e0:	e053      	b.n	800248a <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80023e2:	230e      	movs	r3, #14
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2200      	movs	r2, #0
 80023e8:	801a      	strh	r2, [r3, #0]
 80023ea:	230c      	movs	r3, #12
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2200      	movs	r2, #0
 80023f0:	801a      	strh	r2, [r3, #0]
 80023f2:	e041      	b.n	8002478 <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80023f4:	210e      	movs	r1, #14
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	3302      	adds	r3, #2
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	001a      	movs	r2, r3
 800240c:	2102      	movs	r1, #2
 800240e:	f7ff ff5a 	bl	80022c6 <sensirion_i2c_check_crc>
 8002412:	0003      	movs	r3, r0
 8002414:	001a      	movs	r2, r3
 8002416:	2108      	movs	r1, #8
 8002418:	187b      	adds	r3, r7, r1
 800241a:	801a      	strh	r2, [r3, #0]
        if (error) {
 800241c:	000a      	movs	r2, r1
 800241e:	18bb      	adds	r3, r7, r2
 8002420:	2100      	movs	r1, #0
 8002422:	5e5b      	ldrsh	r3, [r3, r1]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 8002428:	18bb      	adds	r3, r7, r2
 800242a:	2200      	movs	r2, #0
 800242c:	5e9b      	ldrsh	r3, [r3, r2]
 800242e:	e02c      	b.n	800248a <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 8002430:	240e      	movs	r4, #14
 8002432:	193b      	adds	r3, r7, r4
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	18d2      	adds	r2, r2, r3
 800243a:	250c      	movs	r5, #12
 800243c:	197b      	adds	r3, r7, r5
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	1979      	adds	r1, r7, r5
 8002442:	1c58      	adds	r0, r3, #1
 8002444:	8008      	strh	r0, [r1, #0]
 8002446:	0019      	movs	r1, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	185b      	adds	r3, r3, r1
 800244c:	7812      	ldrb	r2, [r2, #0]
 800244e:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8002450:	193b      	adds	r3, r7, r4
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	18d2      	adds	r2, r2, r3
 800245a:	197b      	adds	r3, r7, r5
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	1979      	adds	r1, r7, r5
 8002460:	1c58      	adds	r0, r3, #1
 8002462:	8008      	strh	r0, [r1, #0]
 8002464:	0019      	movs	r1, r3
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	185b      	adds	r3, r3, r1
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800246e:	193b      	adds	r3, r7, r4
 8002470:	193a      	adds	r2, r7, r4
 8002472:	8812      	ldrh	r2, [r2, #0]
 8002474:	3203      	adds	r2, #3
 8002476:	801a      	strh	r2, [r3, #0]
 8002478:	230e      	movs	r3, #14
 800247a:	18fa      	adds	r2, r7, r3
 800247c:	230a      	movs	r3, #10
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	8812      	ldrh	r2, [r2, #0]
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d3b5      	bcc.n	80023f4 <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 8002488:	2300      	movs	r3, #0
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b004      	add	sp, #16
 8002490:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002494 <sensirion_i2c_hal_read>:

void sensirion_i2c_hal_free(void) {
    /* nothing to free */
}

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 8002494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002496:	b087      	sub	sp, #28
 8002498:	af02      	add	r7, sp, #8
 800249a:	6039      	str	r1, [r7, #0]
 800249c:	0011      	movs	r1, r2
 800249e:	1dfb      	adds	r3, r7, #7
 80024a0:	1c02      	adds	r2, r0, #0
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	1dbb      	adds	r3, r7, #6
 80024a6:	1c0a      	adds	r2, r1, #0
 80024a8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1), data, count, 1000);
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	18db      	adds	r3, r3, r3
 80024b2:	b299      	uxth	r1, r3
 80024b4:	1dbb      	adds	r3, r7, #6
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b29d      	uxth	r5, r3
 80024ba:	260f      	movs	r6, #15
 80024bc:	19bc      	adds	r4, r7, r6
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	480a      	ldr	r0, [pc, #40]	@ (80024ec <sensirion_i2c_hal_read+0x58>)
 80024c2:	23fa      	movs	r3, #250	@ 0xfa
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	002b      	movs	r3, r5
 80024ca:	f001 fbc3 	bl	8003c54 <HAL_I2C_Master_Receive>
 80024ce:	0003      	movs	r3, r0
 80024d0:	7023      	strb	r3, [r4, #0]
    return (status == HAL_OK) ? 0 : -1;
 80024d2:	19bb      	adds	r3, r7, r6
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <sensirion_i2c_hal_read+0x4a>
 80024da:	2300      	movs	r3, #0
 80024dc:	e001      	b.n	80024e2 <sensirion_i2c_hal_read+0x4e>
 80024de:	2301      	movs	r3, #1
 80024e0:	425b      	negs	r3, r3
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b005      	add	sp, #20
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	20000380 	.word	0x20000380

080024f0 <sensirion_i2c_hal_write>:

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint8_t count) {
 80024f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	6039      	str	r1, [r7, #0]
 80024f8:	0011      	movs	r1, r2
 80024fa:	1dfb      	adds	r3, r7, #7
 80024fc:	1c02      	adds	r2, r0, #0
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	1dbb      	adds	r3, r7, #6
 8002502:	1c0a      	adds	r2, r1, #0
 8002504:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1), (uint8_t*)data, count, 1000);
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	18db      	adds	r3, r3, r3
 800250e:	b299      	uxth	r1, r3
 8002510:	1dbb      	adds	r3, r7, #6
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b29d      	uxth	r5, r3
 8002516:	260f      	movs	r6, #15
 8002518:	19bc      	adds	r4, r7, r6
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	480a      	ldr	r0, [pc, #40]	@ (8002548 <sensirion_i2c_hal_write+0x58>)
 800251e:	23fa      	movs	r3, #250	@ 0xfa
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	002b      	movs	r3, r5
 8002526:	f001 fa6b 	bl	8003a00 <HAL_I2C_Master_Transmit>
 800252a:	0003      	movs	r3, r0
 800252c:	7023      	strb	r3, [r4, #0]
    return (status == HAL_OK) ? 0 : -1;
 800252e:	19bb      	adds	r3, r7, r6
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <sensirion_i2c_hal_write+0x4a>
 8002536:	2300      	movs	r3, #0
 8002538:	e001      	b.n	800253e <sensirion_i2c_hal_write+0x4e>
 800253a:	2301      	movs	r3, #1
 800253c:	425b      	negs	r3, r3
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b005      	add	sp, #20
 8002544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	20000380 	.word	0x20000380

0800254c <sensirion_i2c_hal_sleep_usec>:

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	22fa      	movs	r2, #250	@ 0xfa
 8002558:	0091      	lsls	r1, r2, #2
 800255a:	0018      	movs	r0, r3
 800255c:	f7fd fde6 	bl	800012c <__udivsi3>
 8002560:	0003      	movs	r3, r0
 8002562:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	22fa      	movs	r2, #250	@ 0xfa
 8002568:	0091      	lsls	r1, r2, #2
 800256a:	0018      	movs	r0, r3
 800256c:	f7fd fe64 	bl	8000238 <__aeabi_uidivmod>
 8002570:	1e0b      	subs	r3, r1, #0
 8002572:	d002      	beq.n	800257a <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3301      	adds	r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_GetHalVersion() < 0x01010100) {
 800257a:	f000 f94b 	bl	8002814 <HAL_GetHalVersion>
 800257e:	0003      	movs	r3, r0
 8002580:	4a06      	ldr	r2, [pc, #24]	@ (800259c <sensirion_i2c_hal_sleep_usec+0x50>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d802      	bhi.n	800258c <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3301      	adds	r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	0018      	movs	r0, r3
 8002590:	f000 f91c 	bl	80027cc <HAL_Delay>
}
 8002594:	46c0      	nop			@ (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b004      	add	sp, #16
 800259a:	bd80      	pop	{r7, pc}
 800259c:	010100ff 	.word	0x010100ff

080025a0 <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	0002      	movs	r2, r0
 80025a8:	1dfb      	adds	r3, r7, #7
 80025aa:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 80025ac:	4b03      	ldr	r3, [pc, #12]	@ (80025bc <sht4x_init+0x1c>)
 80025ae:	1dfa      	adds	r2, r7, #7
 80025b0:	7812      	ldrb	r2, [r2, #0]
 80025b2:	701a      	strb	r2, [r3, #0]
}
 80025b4:	46c0      	nop			@ (mov r8, r8)
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b002      	add	sp, #8
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	2000076e 	.word	0x2000076e

080025c0 <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 80025c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 80025ca:	2516      	movs	r5, #22
 80025cc:	197b      	adds	r3, r7, r5
 80025ce:	2200      	movs	r2, #0
 80025d0:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 80025d2:	4b2a      	ldr	r3, [pc, #168]	@ (800267c <sht4x_measure_high_precision_ticks+0xbc>)
 80025d4:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 80025d6:	260e      	movs	r6, #14
 80025d8:	19bb      	adds	r3, r7, r6
 80025da:	2200      	movs	r2, #0
 80025dc:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 80025de:	19bc      	adds	r4, r7, r6
 80025e0:	19bb      	adds	r3, r7, r6
 80025e2:	8819      	ldrh	r1, [r3, #0]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	22fd      	movs	r2, #253	@ 0xfd
 80025e8:	0018      	movs	r0, r3
 80025ea:	f7ff fe8c 	bl	8002306 <sensirion_i2c_add_command8_to_buffer>
 80025ee:	0003      	movs	r3, r0
 80025f0:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 80025f2:	4b23      	ldr	r3, [pc, #140]	@ (8002680 <sht4x_measure_high_precision_ticks+0xc0>)
 80025f4:	7818      	ldrb	r0, [r3, #0]
 80025f6:	197c      	adds	r4, r7, r5
 80025f8:	19bb      	adds	r3, r7, r6
 80025fa:	881a      	ldrh	r2, [r3, #0]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	0019      	movs	r1, r3
 8002600:	f7ff fe9e 	bl	8002340 <sensirion_i2c_write_data>
 8002604:	0003      	movs	r3, r0
 8002606:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8002608:	197b      	adds	r3, r7, r5
 800260a:	2200      	movs	r2, #0
 800260c:	5e9b      	ldrsh	r3, [r3, r2]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 8002612:	197b      	adds	r3, r7, r5
 8002614:	2200      	movs	r2, #0
 8002616:	5e9b      	ldrsh	r3, [r3, r2]
 8002618:	e02c      	b.n	8002674 <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 800261a:	4b1a      	ldr	r3, [pc, #104]	@ (8002684 <sht4x_measure_high_precision_ticks+0xc4>)
 800261c:	0018      	movs	r0, r3
 800261e:	f7ff ff95 	bl	800254c <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 8002622:	4b17      	ldr	r3, [pc, #92]	@ (8002680 <sht4x_measure_high_precision_ticks+0xc0>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2516      	movs	r5, #22
 8002628:	197c      	adds	r4, r7, r5
 800262a:	6939      	ldr	r1, [r7, #16]
 800262c:	2204      	movs	r2, #4
 800262e:	0018      	movs	r0, r3
 8002630:	f7ff fe9f 	bl	8002372 <sensirion_i2c_read_data_inplace>
 8002634:	0003      	movs	r3, r0
 8002636:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8002638:	197b      	adds	r3, r7, r5
 800263a:	2200      	movs	r2, #0
 800263c:	5e9b      	ldrsh	r3, [r3, r2]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 8002642:	197b      	adds	r3, r7, r5
 8002644:	2200      	movs	r2, #0
 8002646:	5e9b      	ldrsh	r3, [r3, r2]
 8002648:	e014      	b.n	8002674 <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	0018      	movs	r0, r3
 800264e:	f7ff fdcf 	bl	80021f0 <sensirion_common_bytes_to_uint16_t>
 8002652:	0003      	movs	r3, r0
 8002654:	001a      	movs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	3302      	adds	r3, #2
 800265e:	0018      	movs	r0, r3
 8002660:	f7ff fdc6 	bl	80021f0 <sensirion_common_bytes_to_uint16_t>
 8002664:	0003      	movs	r3, r0
 8002666:	001a      	movs	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	801a      	strh	r2, [r3, #0]
    return local_error;
 800266c:	2316      	movs	r3, #22
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	2200      	movs	r2, #0
 8002672:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b007      	add	sp, #28
 800267a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800267c:	20000768 	.word	0x20000768
 8002680:	2000076e 	.word	0x2000076e
 8002684:	00002710 	.word	0x00002710

08002688 <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 8002688:	b5b0      	push	{r4, r5, r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 800268e:	250e      	movs	r5, #14
 8002690:	197b      	adds	r3, r7, r5
 8002692:	2200      	movs	r2, #0
 8002694:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8002696:	4b17      	ldr	r3, [pc, #92]	@ (80026f4 <sht4x_soft_reset+0x6c>)
 8002698:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 800269a:	1dbb      	adds	r3, r7, #6
 800269c:	2200      	movs	r2, #0
 800269e:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 80026a0:	1dbc      	adds	r4, r7, #6
 80026a2:	1dbb      	adds	r3, r7, #6
 80026a4:	8819      	ldrh	r1, [r3, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2294      	movs	r2, #148	@ 0x94
 80026aa:	0018      	movs	r0, r3
 80026ac:	f7ff fe2b 	bl	8002306 <sensirion_i2c_add_command8_to_buffer>
 80026b0:	0003      	movs	r3, r0
 80026b2:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 80026b4:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <sht4x_soft_reset+0x70>)
 80026b6:	7818      	ldrb	r0, [r3, #0]
 80026b8:	197c      	adds	r4, r7, r5
 80026ba:	1dbb      	adds	r3, r7, #6
 80026bc:	881a      	ldrh	r2, [r3, #0]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	0019      	movs	r1, r3
 80026c2:	f7ff fe3d 	bl	8002340 <sensirion_i2c_write_data>
 80026c6:	0003      	movs	r3, r0
 80026c8:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 80026ca:	197b      	adds	r3, r7, r5
 80026cc:	2200      	movs	r2, #0
 80026ce:	5e9b      	ldrsh	r3, [r3, r2]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <sht4x_soft_reset+0x54>
        return local_error;
 80026d4:	197b      	adds	r3, r7, r5
 80026d6:	2200      	movs	r2, #0
 80026d8:	5e9b      	ldrsh	r3, [r3, r2]
 80026da:	e007      	b.n	80026ec <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80026dc:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <sht4x_soft_reset+0x74>)
 80026de:	0018      	movs	r0, r3
 80026e0:	f7ff ff34 	bl	800254c <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80026e4:	230e      	movs	r3, #14
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	2200      	movs	r2, #0
 80026ea:	5e9b      	ldrsh	r3, [r3, r2]
}
 80026ec:	0018      	movs	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b004      	add	sp, #16
 80026f2:	bdb0      	pop	{r4, r5, r7, pc}
 80026f4:	20000768 	.word	0x20000768
 80026f8:	2000076e 	.word	0x2000076e
 80026fc:	00002710 	.word	0x00002710

08002700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002700:	480d      	ldr	r0, [pc, #52]	@ (8002738 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002702:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002704:	f7ff f90e 	bl	8001924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002708:	480c      	ldr	r0, [pc, #48]	@ (800273c <LoopForever+0x6>)
  ldr r1, =_edata
 800270a:	490d      	ldr	r1, [pc, #52]	@ (8002740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800270c:	4a0d      	ldr	r2, [pc, #52]	@ (8002744 <LoopForever+0xe>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002710:	e002      	b.n	8002718 <LoopCopyDataInit>

08002712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002716:	3304      	adds	r3, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800271c:	d3f9      	bcc.n	8002712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271e:	4a0a      	ldr	r2, [pc, #40]	@ (8002748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002720:	4c0a      	ldr	r4, [pc, #40]	@ (800274c <LoopForever+0x16>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002724:	e001      	b.n	800272a <LoopFillZerobss>

08002726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002728:	3204      	adds	r2, #4

0800272a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800272c:	d3fb      	bcc.n	8002726 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800272e:	f006 f8e5 	bl	80088fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002732:	f7fe fc35 	bl	8000fa0 <main>

08002736 <LoopForever>:

LoopForever:
    b LoopForever
 8002736:	e7fe      	b.n	8002736 <LoopForever>
   ldr   r0, =_estack
 8002738:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800273c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002740:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002744:	080093a4 	.word	0x080093a4
  ldr r2, =_sbss
 8002748:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800274c:	2000160c 	.word	0x2000160c

08002750 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002750:	e7fe      	b.n	8002750 <ADC1_COMP_IRQHandler>
	...

08002754 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800275a:	1dfb      	adds	r3, r7, #7
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002760:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <HAL_Init+0x3c>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <HAL_Init+0x3c>)
 8002766:	2140      	movs	r1, #64	@ 0x40
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800276c:	2003      	movs	r0, #3
 800276e:	f7fe ffe5 	bl	800173c <HAL_InitTick>
 8002772:	1e03      	subs	r3, r0, #0
 8002774:	d003      	beq.n	800277e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002776:	1dfb      	adds	r3, r7, #7
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	e001      	b.n	8002782 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800277e:	f7fe ffad 	bl	80016dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	781b      	ldrb	r3, [r3, #0]
}
 8002786:	0018      	movs	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	b002      	add	sp, #8
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	40022000 	.word	0x40022000

08002794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_IncTick+0x1c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	001a      	movs	r2, r3
 800279e:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <HAL_IncTick+0x20>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	18d2      	adds	r2, r2, r3
 80027a4:	4b03      	ldr	r3, [pc, #12]	@ (80027b4 <HAL_IncTick+0x20>)
 80027a6:	601a      	str	r2, [r3, #0]
}
 80027a8:	46c0      	nop			@ (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			@ (mov r8, r8)
 80027b0:	2000000c 	.word	0x2000000c
 80027b4:	20000770 	.word	0x20000770

080027b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  return uwTick;
 80027bc:	4b02      	ldr	r3, [pc, #8]	@ (80027c8 <HAL_GetTick+0x10>)
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	20000770 	.word	0x20000770

080027cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d4:	f7ff fff0 	bl	80027b8 <HAL_GetTick>
 80027d8:	0003      	movs	r3, r0
 80027da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	3301      	adds	r3, #1
 80027e4:	d005      	beq.n	80027f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <HAL_Delay+0x44>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	001a      	movs	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	189b      	adds	r3, r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	f7ff ffe0 	bl	80027b8 <HAL_GetTick>
 80027f8:	0002      	movs	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	429a      	cmp	r2, r3
 8002802:	d8f7      	bhi.n	80027f4 <HAL_Delay+0x28>
  {
  }
}
 8002804:	46c0      	nop			@ (mov r8, r8)
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b004      	add	sp, #16
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			@ (mov r8, r8)
 8002810:	2000000c 	.word	0x2000000c

08002814 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8002818:	4b01      	ldr	r3, [pc, #4]	@ (8002820 <HAL_GetHalVersion+0xc>)
}
 800281a:	0018      	movs	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	010a0700 	.word	0x010a0700

08002824 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e159      	b.n	8002aea <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10a      	bne.n	8002854 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2250      	movs	r2, #80	@ 0x50
 8002848:	2100      	movs	r1, #0
 800284a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	0018      	movs	r0, r3
 8002850:	f7fd ff8a 	bl	8000768 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002858:	2210      	movs	r2, #16
 800285a:	4013      	ands	r3, r2
 800285c:	2b10      	cmp	r3, #16
 800285e:	d005      	beq.n	800286c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2204      	movs	r2, #4
 8002868:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800286a:	d00b      	beq.n	8002884 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002870:	2210      	movs	r2, #16
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2250      	movs	r2, #80	@ 0x50
 800287c:	2100      	movs	r1, #0
 800287e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e132      	b.n	8002aea <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002888:	4a9a      	ldr	r2, [pc, #616]	@ (8002af4 <HAL_ADC_Init+0x2d0>)
 800288a:	4013      	ands	r3, r2
 800288c:	2202      	movs	r2, #2
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2203      	movs	r2, #3
 800289c:	4013      	ands	r3, r2
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d108      	bne.n	80028b4 <HAL_ADC_Init+0x90>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2201      	movs	r2, #1
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_Init+0x90>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_ADC_Init+0x92>
 80028b4:	2300      	movs	r3, #0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d149      	bne.n	800294e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	23c0      	movs	r3, #192	@ 0xc0
 80028c0:	061b      	lsls	r3, r3, #24
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d00b      	beq.n	80028de <HAL_ADC_Init+0xba>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	2380      	movs	r3, #128	@ 0x80
 80028cc:	05db      	lsls	r3, r3, #23
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d005      	beq.n	80028de <HAL_ADC_Init+0xba>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	429a      	cmp	r2, r3
 80028dc:	d111      	bne.n	8002902 <HAL_ADC_Init+0xde>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	0092      	lsls	r2, r2, #2
 80028ea:	0892      	lsrs	r2, r2, #2
 80028ec:	611a      	str	r2, [r3, #16]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6919      	ldr	r1, [r3, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	611a      	str	r2, [r3, #16]
 8002900:	e014      	b.n	800292c <HAL_ADC_Init+0x108>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0092      	lsls	r2, r2, #2
 800290e:	0892      	lsrs	r2, r2, #2
 8002910:	611a      	str	r2, [r3, #16]
 8002912:	4b79      	ldr	r3, [pc, #484]	@ (8002af8 <HAL_ADC_Init+0x2d4>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4b78      	ldr	r3, [pc, #480]	@ (8002af8 <HAL_ADC_Init+0x2d4>)
 8002918:	4978      	ldr	r1, [pc, #480]	@ (8002afc <HAL_ADC_Init+0x2d8>)
 800291a:	400a      	ands	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	4b76      	ldr	r3, [pc, #472]	@ (8002af8 <HAL_ADC_Init+0x2d4>)
 8002920:	6819      	ldr	r1, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	4b74      	ldr	r3, [pc, #464]	@ (8002af8 <HAL_ADC_Init+0x2d4>)
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2118      	movs	r1, #24
 8002938:	438a      	bics	r2, r1
 800293a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68d9      	ldr	r1, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800294e:	4b6a      	ldr	r3, [pc, #424]	@ (8002af8 <HAL_ADC_Init+0x2d4>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b69      	ldr	r3, [pc, #420]	@ (8002af8 <HAL_ADC_Init+0x2d4>)
 8002954:	496a      	ldr	r1, [pc, #424]	@ (8002b00 <HAL_ADC_Init+0x2dc>)
 8002956:	400a      	ands	r2, r1
 8002958:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800295a:	4b67      	ldr	r3, [pc, #412]	@ (8002af8 <HAL_ADC_Init+0x2d4>)
 800295c:	6819      	ldr	r1, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002962:	065a      	lsls	r2, r3, #25
 8002964:	4b64      	ldr	r3, [pc, #400]	@ (8002af8 <HAL_ADC_Init+0x2d4>)
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	055b      	lsls	r3, r3, #21
 8002974:	4013      	ands	r3, r2
 8002976:	d108      	bne.n	800298a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2180      	movs	r1, #128	@ 0x80
 8002984:	0549      	lsls	r1, r1, #21
 8002986:	430a      	orrs	r2, r1
 8002988:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	495b      	ldr	r1, [pc, #364]	@ (8002b04 <HAL_ADC_Init+0x2e0>)
 8002996:	400a      	ands	r2, r1
 8002998:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68d9      	ldr	r1, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d101      	bne.n	80029b0 <HAL_ADC_Init+0x18c>
 80029ac:	2304      	movs	r3, #4
 80029ae:	e000      	b.n	80029b2 <HAL_ADC_Init+0x18e>
 80029b0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80029b2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2020      	movs	r0, #32
 80029b8:	5c1b      	ldrb	r3, [r3, r0]
 80029ba:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80029bc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	202c      	movs	r0, #44	@ 0x2c
 80029c2:	5c1b      	ldrb	r3, [r3, r0]
 80029c4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80029c6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80029cc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80029d4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80029dc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ea:	23c2      	movs	r3, #194	@ 0xc2
 80029ec:	33ff      	adds	r3, #255	@ 0xff
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d00b      	beq.n	8002a0a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68d9      	ldr	r1, [r3, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2221      	movs	r2, #33	@ 0x21
 8002a0e:	5c9b      	ldrb	r3, [r3, r2]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d11a      	bne.n	8002a4a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	5c9b      	ldrb	r3, [r3, r2]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2180      	movs	r1, #128	@ 0x80
 8002a2a:	0249      	lsls	r1, r1, #9
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	60da      	str	r2, [r3, #12]
 8002a30:	e00b      	b.n	8002a4a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a36:	2220      	movs	r2, #32
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a42:	2201      	movs	r2, #1
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d11f      	bne.n	8002a92 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	492a      	ldr	r1, [pc, #168]	@ (8002b08 <HAL_ADC_Init+0x2e4>)
 8002a5e:	400a      	ands	r2, r1
 8002a60:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6919      	ldr	r1, [r3, #16]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002a70:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8002a76:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	611a      	str	r2, [r3, #16]
 8002a90:	e00e      	b.n	8002ab0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d107      	bne.n	8002ab0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2101      	movs	r1, #1
 8002aac:	438a      	bics	r2, r1
 8002aae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2107      	movs	r1, #7
 8002abc:	438a      	bics	r2, r1
 8002abe:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6959      	ldr	r1, [r3, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	2203      	movs	r2, #3
 8002ade:	4393      	bics	r3, r2
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b002      	add	sp, #8
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	fffffefd 	.word	0xfffffefd
 8002af8:	40012708 	.word	0x40012708
 8002afc:	ffc3ffff 	.word	0xffc3ffff
 8002b00:	fdffffff 	.word	0xfdffffff
 8002b04:	fffe0219 	.word	0xfffe0219
 8002b08:	fffffc03 	.word	0xfffffc03

08002b0c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b14:	230f      	movs	r3, #15
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2204      	movs	r2, #4
 8002b24:	4013      	ands	r3, r2
 8002b26:	d138      	bne.n	8002b9a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2250      	movs	r2, #80	@ 0x50
 8002b2c:	5c9b      	ldrb	r3, [r3, r2]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_Start+0x2a>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e038      	b.n	8002ba8 <HAL_ADC_Start+0x9c>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2250      	movs	r2, #80	@ 0x50
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d007      	beq.n	8002b56 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002b46:	230f      	movs	r3, #15
 8002b48:	18fc      	adds	r4, r7, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 f9b9 	bl	8002ec4 <ADC_Enable>
 8002b52:	0003      	movs	r3, r0
 8002b54:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b56:	230f      	movs	r3, #15
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d120      	bne.n	8002ba2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b64:	4a12      	ldr	r2, [pc, #72]	@ (8002bb0 <HAL_ADC_Start+0xa4>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	2280      	movs	r2, #128	@ 0x80
 8002b6a:	0052      	lsls	r2, r2, #1
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2250      	movs	r2, #80	@ 0x50
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	221c      	movs	r2, #28
 8002b86:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2104      	movs	r1, #4
 8002b94:	430a      	orrs	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	e003      	b.n	8002ba2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b9a:	230f      	movs	r3, #15
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ba2:	230f      	movs	r3, #15
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	781b      	ldrb	r3, [r3, #0]
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b005      	add	sp, #20
 8002bae:	bd90      	pop	{r4, r7, pc}
 8002bb0:	fffff0fe 	.word	0xfffff0fe

08002bb4 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002bb4:	b5b0      	push	{r4, r5, r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bbc:	230f      	movs	r3, #15
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2250      	movs	r2, #80	@ 0x50
 8002bc8:	5c9b      	ldrb	r3, [r3, r2]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_Stop+0x1e>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e029      	b.n	8002c26 <HAL_ADC_Stop+0x72>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2250      	movs	r2, #80	@ 0x50
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002bda:	250f      	movs	r5, #15
 8002bdc:	197c      	adds	r4, r7, r5
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	0018      	movs	r0, r3
 8002be2:	f000 fa3e 	bl	8003062 <ADC_ConversionStop>
 8002be6:	0003      	movs	r3, r0
 8002be8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002bea:	197b      	adds	r3, r7, r5
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d112      	bne.n	8002c18 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002bf2:	197c      	adds	r4, r7, r5
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f000 f9cc 	bl	8002f94 <ADC_Disable>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c00:	197b      	adds	r3, r7, r5
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d107      	bne.n	8002c18 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0c:	4a08      	ldr	r2, [pc, #32]	@ (8002c30 <HAL_ADC_Stop+0x7c>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2201      	movs	r2, #1
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2250      	movs	r2, #80	@ 0x50
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002c20:	230f      	movs	r3, #15
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	781b      	ldrb	r3, [r3, #0]
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b004      	add	sp, #16
 8002c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	fffffefe 	.word	0xfffffefe

08002c34 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d102      	bne.n	8002c54 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002c4e:	2308      	movs	r3, #8
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e014      	b.n	8002c7e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d10b      	bne.n	8002c7a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c66:	2220      	movs	r2, #32
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2250      	movs	r2, #80	@ 0x50
 8002c72:	2100      	movs	r1, #0
 8002c74:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e072      	b.n	8002d60 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002c7a:	230c      	movs	r3, #12
 8002c7c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c7e:	f7ff fd9b 	bl	80027b8 <HAL_GetTick>
 8002c82:	0003      	movs	r3, r0
 8002c84:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002c86:	e01f      	b.n	8002cc8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	d01c      	beq.n	8002cc8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <HAL_ADC_PollForConversion+0x70>
 8002c94:	f7ff fd90 	bl	80027b8 <HAL_GetTick>
 8002c98:	0002      	movs	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d211      	bcs.n	8002cc8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4013      	ands	r3, r2
 8002cae:	d10b      	bne.n	8002cc8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2250      	movs	r2, #80	@ 0x50
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e04b      	b.n	8002d60 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d0d9      	beq.n	8002c88 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd8:	2280      	movs	r2, #128	@ 0x80
 8002cda:	0092      	lsls	r2, r2, #2
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	23c0      	movs	r3, #192	@ 0xc0
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	4013      	ands	r3, r2
 8002cee:	d12e      	bne.n	8002d4e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d129      	bne.n	8002d4e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2208      	movs	r2, #8
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d122      	bne.n	8002d4e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	4013      	ands	r3, r2
 8002d12:	d110      	bne.n	8002d36 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	210c      	movs	r1, #12
 8002d20:	438a      	bics	r2, r1
 8002d22:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	4a0f      	ldr	r2, [pc, #60]	@ (8002d68 <HAL_ADC_PollForConversion+0x134>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d34:	e00b      	b.n	8002d4e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d46:	2201      	movs	r2, #1
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b004      	add	sp, #16
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	fffffefe 	.word	0xfffffefe

08002d6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2250      	movs	r2, #80	@ 0x50
 8002d92:	5c9b      	ldrb	r3, [r3, r2]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x18>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e085      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x124>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2250      	movs	r2, #80	@ 0x50
 8002da0:	2101      	movs	r1, #1
 8002da2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2204      	movs	r2, #4
 8002dac:	4013      	ands	r3, r2
 8002dae:	d00b      	beq.n	8002dc8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db4:	2220      	movs	r2, #32
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2250      	movs	r2, #80	@ 0x50
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e06f      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	4a38      	ldr	r2, [pc, #224]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x12c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d035      	beq.n	8002e3e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	035b      	lsls	r3, r3, #13
 8002dde:	0b5a      	lsrs	r2, r3, #13
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	@ 0x80
 8002dee:	02db      	lsls	r3, r3, #11
 8002df0:	4013      	ands	r3, r2
 8002df2:	d009      	beq.n	8002e08 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002df4:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x130>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x130>)
 8002dfa:	2180      	movs	r1, #128	@ 0x80
 8002dfc:	0409      	lsls	r1, r1, #16
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002e02:	200a      	movs	r0, #10
 8002e04:	f000 f97a 	bl	80030fc <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	2380      	movs	r3, #128	@ 0x80
 8002e0e:	029b      	lsls	r3, r3, #10
 8002e10:	4013      	ands	r3, r2
 8002e12:	d006      	beq.n	8002e22 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002e14:	4b27      	ldr	r3, [pc, #156]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x130>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b26      	ldr	r3, [pc, #152]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x130>)
 8002e1a:	2180      	movs	r1, #128	@ 0x80
 8002e1c:	03c9      	lsls	r1, r1, #15
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	2380      	movs	r3, #128	@ 0x80
 8002e28:	025b      	lsls	r3, r3, #9
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d037      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8002e2e:	4b21      	ldr	r3, [pc, #132]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x130>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4b20      	ldr	r3, [pc, #128]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x130>)
 8002e34:	2180      	movs	r1, #128	@ 0x80
 8002e36:	0449      	lsls	r1, r1, #17
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e02f      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	035b      	lsls	r3, r3, #13
 8002e4a:	0b5b      	lsrs	r3, r3, #13
 8002e4c:	43d9      	mvns	r1, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	400a      	ands	r2, r1
 8002e54:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	2380      	movs	r3, #128	@ 0x80
 8002e5c:	02db      	lsls	r3, r3, #11
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d005      	beq.n	8002e6e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002e62:	4b14      	ldr	r3, [pc, #80]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x130>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x130>)
 8002e68:	4913      	ldr	r1, [pc, #76]	@ (8002eb8 <HAL_ADC_ConfigChannel+0x134>)
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	2380      	movs	r3, #128	@ 0x80
 8002e74:	029b      	lsls	r3, r3, #10
 8002e76:	4013      	ands	r3, r2
 8002e78:	d005      	beq.n	8002e86 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x130>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x130>)
 8002e80:	490e      	ldr	r1, [pc, #56]	@ (8002ebc <HAL_ADC_ConfigChannel+0x138>)
 8002e82:	400a      	ands	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	2380      	movs	r3, #128	@ 0x80
 8002e8c:	025b      	lsls	r3, r3, #9
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d005      	beq.n	8002e9e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8002e92:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x130>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b07      	ldr	r3, [pc, #28]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x130>)
 8002e98:	4909      	ldr	r1, [pc, #36]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x13c>)
 8002e9a:	400a      	ands	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2250      	movs	r2, #80	@ 0x50
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b002      	add	sp, #8
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	00001001 	.word	0x00001001
 8002eb4:	40012708 	.word	0x40012708
 8002eb8:	ff7fffff 	.word	0xff7fffff
 8002ebc:	ffbfffff 	.word	0xffbfffff
 8002ec0:	feffffff 	.word	0xfeffffff

08002ec4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d108      	bne.n	8002ef0 <ADC_Enable+0x2c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <ADC_Enable+0x2c>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <ADC_Enable+0x2e>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d146      	bne.n	8002f84 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4a24      	ldr	r2, [pc, #144]	@ (8002f90 <ADC_Enable+0xcc>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	d00d      	beq.n	8002f1e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f06:	2210      	movs	r2, #16
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f12:	2201      	movs	r2, #1
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e033      	b.n	8002f86 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2101      	movs	r1, #1
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f000 f8e4 	bl	80030fc <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f34:	f7ff fc40 	bl	80027b8 <HAL_GetTick>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f3c:	e01b      	b.n	8002f76 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f3e:	f7ff fc3b 	bl	80027b8 <HAL_GetTick>
 8002f42:	0002      	movs	r2, r0
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b0a      	cmp	r3, #10
 8002f4a:	d914      	bls.n	8002f76 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2201      	movs	r2, #1
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d00d      	beq.n	8002f76 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5e:	2210      	movs	r2, #16
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e007      	b.n	8002f86 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d1dc      	bne.n	8002f3e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	0018      	movs	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b004      	add	sp, #16
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	80000017 	.word	0x80000017

08002f94 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d108      	bne.n	8002fc0 <ADC_Disable+0x2c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <ADC_Disable+0x2c>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <ADC_Disable+0x2e>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d048      	beq.n	8003058 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2205      	movs	r2, #5
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d110      	bne.n	8002ff6 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2102      	movs	r1, #2
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fec:	f7ff fbe4 	bl	80027b8 <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ff4:	e029      	b.n	800304a <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003006:	2201      	movs	r2, #1
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e023      	b.n	800305a <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003012:	f7ff fbd1 	bl	80027b8 <HAL_GetTick>
 8003016:	0002      	movs	r2, r0
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b0a      	cmp	r3, #10
 800301e:	d914      	bls.n	800304a <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2201      	movs	r2, #1
 8003028:	4013      	ands	r3, r2
 800302a:	2b01      	cmp	r3, #1
 800302c:	d10d      	bne.n	800304a <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003032:	2210      	movs	r2, #16
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303e:	2201      	movs	r2, #1
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e007      	b.n	800305a <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2201      	movs	r2, #1
 8003052:	4013      	ands	r3, r2
 8003054:	2b01      	cmp	r3, #1
 8003056:	d0dc      	beq.n	8003012 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b004      	add	sp, #16
 8003060:	bd80      	pop	{r7, pc}

08003062 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2204      	movs	r2, #4
 8003076:	4013      	ands	r3, r2
 8003078:	d03a      	beq.n	80030f0 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2204      	movs	r2, #4
 8003082:	4013      	ands	r3, r2
 8003084:	2b04      	cmp	r3, #4
 8003086:	d10d      	bne.n	80030a4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2202      	movs	r2, #2
 8003090:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8003092:	d107      	bne.n	80030a4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2110      	movs	r1, #16
 80030a0:	430a      	orrs	r2, r1
 80030a2:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030a4:	f7ff fb88 	bl	80027b8 <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80030ac:	e01a      	b.n	80030e4 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030ae:	f7ff fb83 	bl	80027b8 <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b0a      	cmp	r3, #10
 80030ba:	d913      	bls.n	80030e4 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2204      	movs	r2, #4
 80030c4:	4013      	ands	r3, r2
 80030c6:	d00d      	beq.n	80030e4 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030cc:	2210      	movs	r2, #16
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	2201      	movs	r2, #1
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e006      	b.n	80030f2 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2204      	movs	r2, #4
 80030ec:	4013      	ands	r3, r2
 80030ee:	d1de      	bne.n	80030ae <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	0018      	movs	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b004      	add	sp, #16
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003104:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <ADC_DelayMicroSecond+0x38>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	490b      	ldr	r1, [pc, #44]	@ (8003138 <ADC_DelayMicroSecond+0x3c>)
 800310a:	0018      	movs	r0, r3
 800310c:	f7fd f80e 	bl	800012c <__udivsi3>
 8003110:	0003      	movs	r3, r0
 8003112:	001a      	movs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4353      	muls	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800311a:	e002      	b.n	8003122 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3b01      	subs	r3, #1
 8003120:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f9      	bne.n	800311c <ADC_DelayMicroSecond+0x20>
  }
}
 8003128:	46c0      	nop			@ (mov r8, r8)
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b004      	add	sp, #16
 8003130:	bd80      	pop	{r7, pc}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	20000004 	.word	0x20000004
 8003138:	000f4240 	.word	0x000f4240

0800313c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	0002      	movs	r2, r0
 8003144:	1dfb      	adds	r3, r7, #7
 8003146:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003148:	1dfb      	adds	r3, r7, #7
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b7f      	cmp	r3, #127	@ 0x7f
 800314e:	d809      	bhi.n	8003164 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003150:	1dfb      	adds	r3, r7, #7
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	001a      	movs	r2, r3
 8003156:	231f      	movs	r3, #31
 8003158:	401a      	ands	r2, r3
 800315a:	4b04      	ldr	r3, [pc, #16]	@ (800316c <__NVIC_EnableIRQ+0x30>)
 800315c:	2101      	movs	r1, #1
 800315e:	4091      	lsls	r1, r2
 8003160:	000a      	movs	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
  }
}
 8003164:	46c0      	nop			@ (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b002      	add	sp, #8
 800316a:	bd80      	pop	{r7, pc}
 800316c:	e000e100 	.word	0xe000e100

08003170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	0002      	movs	r2, r0
 8003178:	6039      	str	r1, [r7, #0]
 800317a:	1dfb      	adds	r3, r7, #7
 800317c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800317e:	1dfb      	adds	r3, r7, #7
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b7f      	cmp	r3, #127	@ 0x7f
 8003184:	d828      	bhi.n	80031d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003186:	4a2f      	ldr	r2, [pc, #188]	@ (8003244 <__NVIC_SetPriority+0xd4>)
 8003188:	1dfb      	adds	r3, r7, #7
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	b25b      	sxtb	r3, r3
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	33c0      	adds	r3, #192	@ 0xc0
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	589b      	ldr	r3, [r3, r2]
 8003196:	1dfa      	adds	r2, r7, #7
 8003198:	7812      	ldrb	r2, [r2, #0]
 800319a:	0011      	movs	r1, r2
 800319c:	2203      	movs	r2, #3
 800319e:	400a      	ands	r2, r1
 80031a0:	00d2      	lsls	r2, r2, #3
 80031a2:	21ff      	movs	r1, #255	@ 0xff
 80031a4:	4091      	lsls	r1, r2
 80031a6:	000a      	movs	r2, r1
 80031a8:	43d2      	mvns	r2, r2
 80031aa:	401a      	ands	r2, r3
 80031ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	019b      	lsls	r3, r3, #6
 80031b2:	22ff      	movs	r2, #255	@ 0xff
 80031b4:	401a      	ands	r2, r3
 80031b6:	1dfb      	adds	r3, r7, #7
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	0018      	movs	r0, r3
 80031bc:	2303      	movs	r3, #3
 80031be:	4003      	ands	r3, r0
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031c4:	481f      	ldr	r0, [pc, #124]	@ (8003244 <__NVIC_SetPriority+0xd4>)
 80031c6:	1dfb      	adds	r3, r7, #7
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	b25b      	sxtb	r3, r3
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	430a      	orrs	r2, r1
 80031d0:	33c0      	adds	r3, #192	@ 0xc0
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80031d6:	e031      	b.n	800323c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003248 <__NVIC_SetPriority+0xd8>)
 80031da:	1dfb      	adds	r3, r7, #7
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	0019      	movs	r1, r3
 80031e0:	230f      	movs	r3, #15
 80031e2:	400b      	ands	r3, r1
 80031e4:	3b08      	subs	r3, #8
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	3306      	adds	r3, #6
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	18d3      	adds	r3, r2, r3
 80031ee:	3304      	adds	r3, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	1dfa      	adds	r2, r7, #7
 80031f4:	7812      	ldrb	r2, [r2, #0]
 80031f6:	0011      	movs	r1, r2
 80031f8:	2203      	movs	r2, #3
 80031fa:	400a      	ands	r2, r1
 80031fc:	00d2      	lsls	r2, r2, #3
 80031fe:	21ff      	movs	r1, #255	@ 0xff
 8003200:	4091      	lsls	r1, r2
 8003202:	000a      	movs	r2, r1
 8003204:	43d2      	mvns	r2, r2
 8003206:	401a      	ands	r2, r3
 8003208:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	019b      	lsls	r3, r3, #6
 800320e:	22ff      	movs	r2, #255	@ 0xff
 8003210:	401a      	ands	r2, r3
 8003212:	1dfb      	adds	r3, r7, #7
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	0018      	movs	r0, r3
 8003218:	2303      	movs	r3, #3
 800321a:	4003      	ands	r3, r0
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003220:	4809      	ldr	r0, [pc, #36]	@ (8003248 <__NVIC_SetPriority+0xd8>)
 8003222:	1dfb      	adds	r3, r7, #7
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	001c      	movs	r4, r3
 8003228:	230f      	movs	r3, #15
 800322a:	4023      	ands	r3, r4
 800322c:	3b08      	subs	r3, #8
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	430a      	orrs	r2, r1
 8003232:	3306      	adds	r3, #6
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	18c3      	adds	r3, r0, r3
 8003238:	3304      	adds	r3, #4
 800323a:	601a      	str	r2, [r3, #0]
}
 800323c:	46c0      	nop			@ (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b003      	add	sp, #12
 8003242:	bd90      	pop	{r4, r7, pc}
 8003244:	e000e100 	.word	0xe000e100
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003250:	f3bf 8f4f 	dsb	sy
}
 8003254:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003256:	4b04      	ldr	r3, [pc, #16]	@ (8003268 <__NVIC_SystemReset+0x1c>)
 8003258:	4a04      	ldr	r2, [pc, #16]	@ (800326c <__NVIC_SystemReset+0x20>)
 800325a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800325c:	f3bf 8f4f 	dsb	sy
}
 8003260:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	e7fd      	b.n	8003262 <__NVIC_SystemReset+0x16>
 8003266:	46c0      	nop			@ (mov r8, r8)
 8003268:	e000ed00 	.word	0xe000ed00
 800326c:	05fa0004 	.word	0x05fa0004

08003270 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	210f      	movs	r1, #15
 800327c:	187b      	adds	r3, r7, r1
 800327e:	1c02      	adds	r2, r0, #0
 8003280:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	187b      	adds	r3, r7, r1
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	b25b      	sxtb	r3, r3
 800328a:	0011      	movs	r1, r2
 800328c:	0018      	movs	r0, r3
 800328e:	f7ff ff6f 	bl	8003170 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b004      	add	sp, #16
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	0002      	movs	r2, r0
 80032a2:	1dfb      	adds	r3, r7, #7
 80032a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a6:	1dfb      	adds	r3, r7, #7
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	b25b      	sxtb	r3, r3
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7ff ff45 	bl	800313c <__NVIC_EnableIRQ>
}
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b002      	add	sp, #8
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80032be:	f7ff ffc5 	bl	800324c <__NVIC_SystemReset>

080032c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ca:	230f      	movs	r3, #15
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2225      	movs	r2, #37	@ 0x25
 80032d6:	5c9b      	ldrb	r3, [r3, r2]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d008      	beq.n	80032f0 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2204      	movs	r2, #4
 80032e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	@ 0x24
 80032e8:	2100      	movs	r1, #0
 80032ea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e024      	b.n	800333a <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	210e      	movs	r1, #14
 80032fc:	438a      	bics	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2101      	movs	r1, #1
 800330c:	438a      	bics	r2, r1
 800330e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003314:	221c      	movs	r2, #28
 8003316:	401a      	ands	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331c:	2101      	movs	r1, #1
 800331e:	4091      	lsls	r1, r2
 8003320:	000a      	movs	r2, r1
 8003322:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2225      	movs	r2, #37	@ 0x25
 8003328:	2101      	movs	r1, #1
 800332a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2224      	movs	r2, #36	@ 0x24
 8003330:	2100      	movs	r1, #0
 8003332:	5499      	strb	r1, [r3, r2]

    return status;
 8003334:	230f      	movs	r3, #15
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	781b      	ldrb	r3, [r3, #0]
  }
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b004      	add	sp, #16
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800334e:	0018      	movs	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	b002      	add	sp, #8
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800336e:	e155      	b.n	800361c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4091      	lsls	r1, r2
 800337a:	000a      	movs	r2, r1
 800337c:	4013      	ands	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d100      	bne.n	8003388 <HAL_GPIO_Init+0x30>
 8003386:	e146      	b.n	8003616 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2203      	movs	r2, #3
 800338e:	4013      	ands	r3, r2
 8003390:	2b01      	cmp	r3, #1
 8003392:	d005      	beq.n	80033a0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2203      	movs	r2, #3
 800339a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800339c:	2b02      	cmp	r3, #2
 800339e:	d130      	bne.n	8003402 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	2203      	movs	r2, #3
 80033ac:	409a      	lsls	r2, r3
 80033ae:	0013      	movs	r3, r2
 80033b0:	43da      	mvns	r2, r3
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	409a      	lsls	r2, r3
 80033c2:	0013      	movs	r3, r2
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033d6:	2201      	movs	r2, #1
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	409a      	lsls	r2, r3
 80033dc:	0013      	movs	r3, r2
 80033de:	43da      	mvns	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	2201      	movs	r2, #1
 80033ee:	401a      	ands	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	409a      	lsls	r2, r3
 80033f4:	0013      	movs	r3, r2
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2203      	movs	r2, #3
 8003408:	4013      	ands	r3, r2
 800340a:	2b03      	cmp	r3, #3
 800340c:	d017      	beq.n	800343e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	2203      	movs	r2, #3
 800341a:	409a      	lsls	r2, r3
 800341c:	0013      	movs	r3, r2
 800341e:	43da      	mvns	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	409a      	lsls	r2, r3
 8003430:	0013      	movs	r3, r2
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2203      	movs	r2, #3
 8003444:	4013      	ands	r3, r2
 8003446:	2b02      	cmp	r3, #2
 8003448:	d123      	bne.n	8003492 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	08da      	lsrs	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3208      	adds	r2, #8
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	58d3      	ldr	r3, [r2, r3]
 8003456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2207      	movs	r2, #7
 800345c:	4013      	ands	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	220f      	movs	r2, #15
 8003462:	409a      	lsls	r2, r3
 8003464:	0013      	movs	r3, r2
 8003466:	43da      	mvns	r2, r3
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2107      	movs	r1, #7
 8003476:	400b      	ands	r3, r1
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	409a      	lsls	r2, r3
 800347c:	0013      	movs	r3, r2
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	08da      	lsrs	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3208      	adds	r2, #8
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	6939      	ldr	r1, [r7, #16]
 8003490:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	2203      	movs	r2, #3
 800349e:	409a      	lsls	r2, r3
 80034a0:	0013      	movs	r3, r2
 80034a2:	43da      	mvns	r2, r3
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2203      	movs	r2, #3
 80034b0:	401a      	ands	r2, r3
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	409a      	lsls	r2, r3
 80034b8:	0013      	movs	r3, r2
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	23c0      	movs	r3, #192	@ 0xc0
 80034cc:	029b      	lsls	r3, r3, #10
 80034ce:	4013      	ands	r3, r2
 80034d0:	d100      	bne.n	80034d4 <HAL_GPIO_Init+0x17c>
 80034d2:	e0a0      	b.n	8003616 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d4:	4b57      	ldr	r3, [pc, #348]	@ (8003634 <HAL_GPIO_Init+0x2dc>)
 80034d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034d8:	4b56      	ldr	r3, [pc, #344]	@ (8003634 <HAL_GPIO_Init+0x2dc>)
 80034da:	2101      	movs	r1, #1
 80034dc:	430a      	orrs	r2, r1
 80034de:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80034e0:	4a55      	ldr	r2, [pc, #340]	@ (8003638 <HAL_GPIO_Init+0x2e0>)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	3302      	adds	r3, #2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	589b      	ldr	r3, [r3, r2]
 80034ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2203      	movs	r2, #3
 80034f2:	4013      	ands	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	220f      	movs	r2, #15
 80034f8:	409a      	lsls	r2, r3
 80034fa:	0013      	movs	r3, r2
 80034fc:	43da      	mvns	r2, r3
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	23a0      	movs	r3, #160	@ 0xa0
 8003508:	05db      	lsls	r3, r3, #23
 800350a:	429a      	cmp	r2, r3
 800350c:	d01f      	beq.n	800354e <HAL_GPIO_Init+0x1f6>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a4a      	ldr	r2, [pc, #296]	@ (800363c <HAL_GPIO_Init+0x2e4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d019      	beq.n	800354a <HAL_GPIO_Init+0x1f2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a49      	ldr	r2, [pc, #292]	@ (8003640 <HAL_GPIO_Init+0x2e8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <HAL_GPIO_Init+0x1ee>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a48      	ldr	r2, [pc, #288]	@ (8003644 <HAL_GPIO_Init+0x2ec>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00d      	beq.n	8003542 <HAL_GPIO_Init+0x1ea>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a47      	ldr	r2, [pc, #284]	@ (8003648 <HAL_GPIO_Init+0x2f0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d007      	beq.n	800353e <HAL_GPIO_Init+0x1e6>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a46      	ldr	r2, [pc, #280]	@ (800364c <HAL_GPIO_Init+0x2f4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d101      	bne.n	800353a <HAL_GPIO_Init+0x1e2>
 8003536:	2305      	movs	r3, #5
 8003538:	e00a      	b.n	8003550 <HAL_GPIO_Init+0x1f8>
 800353a:	2306      	movs	r3, #6
 800353c:	e008      	b.n	8003550 <HAL_GPIO_Init+0x1f8>
 800353e:	2304      	movs	r3, #4
 8003540:	e006      	b.n	8003550 <HAL_GPIO_Init+0x1f8>
 8003542:	2303      	movs	r3, #3
 8003544:	e004      	b.n	8003550 <HAL_GPIO_Init+0x1f8>
 8003546:	2302      	movs	r3, #2
 8003548:	e002      	b.n	8003550 <HAL_GPIO_Init+0x1f8>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_GPIO_Init+0x1f8>
 800354e:	2300      	movs	r3, #0
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	2103      	movs	r1, #3
 8003554:	400a      	ands	r2, r1
 8003556:	0092      	lsls	r2, r2, #2
 8003558:	4093      	lsls	r3, r2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003560:	4935      	ldr	r1, [pc, #212]	@ (8003638 <HAL_GPIO_Init+0x2e0>)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	089b      	lsrs	r3, r3, #2
 8003566:	3302      	adds	r3, #2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800356e:	4b38      	ldr	r3, [pc, #224]	@ (8003650 <HAL_GPIO_Init+0x2f8>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	43da      	mvns	r2, r3
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	2380      	movs	r3, #128	@ 0x80
 8003584:	035b      	lsls	r3, r3, #13
 8003586:	4013      	ands	r3, r2
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003592:	4b2f      	ldr	r3, [pc, #188]	@ (8003650 <HAL_GPIO_Init+0x2f8>)
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003598:	4b2d      	ldr	r3, [pc, #180]	@ (8003650 <HAL_GPIO_Init+0x2f8>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	43da      	mvns	r2, r3
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	2380      	movs	r3, #128	@ 0x80
 80035ae:	039b      	lsls	r3, r3, #14
 80035b0:	4013      	ands	r3, r2
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035bc:	4b24      	ldr	r3, [pc, #144]	@ (8003650 <HAL_GPIO_Init+0x2f8>)
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80035c2:	4b23      	ldr	r3, [pc, #140]	@ (8003650 <HAL_GPIO_Init+0x2f8>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	43da      	mvns	r2, r3
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	2380      	movs	r3, #128	@ 0x80
 80035d8:	029b      	lsls	r3, r3, #10
 80035da:	4013      	ands	r3, r2
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80035e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003650 <HAL_GPIO_Init+0x2f8>)
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ec:	4b18      	ldr	r3, [pc, #96]	@ (8003650 <HAL_GPIO_Init+0x2f8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	43da      	mvns	r2, r3
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	2380      	movs	r3, #128	@ 0x80
 8003602:	025b      	lsls	r3, r3, #9
 8003604:	4013      	ands	r3, r2
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003610:	4b0f      	ldr	r3, [pc, #60]	@ (8003650 <HAL_GPIO_Init+0x2f8>)
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3301      	adds	r3, #1
 800361a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	40da      	lsrs	r2, r3
 8003624:	1e13      	subs	r3, r2, #0
 8003626:	d000      	beq.n	800362a <HAL_GPIO_Init+0x2d2>
 8003628:	e6a2      	b.n	8003370 <HAL_GPIO_Init+0x18>
  }
}
 800362a:	46c0      	nop			@ (mov r8, r8)
 800362c:	46c0      	nop			@ (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b006      	add	sp, #24
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	40010000 	.word	0x40010000
 800363c:	50000400 	.word	0x50000400
 8003640:	50000800 	.word	0x50000800
 8003644:	50000c00 	.word	0x50000c00
 8003648:	50001000 	.word	0x50001000
 800364c:	50001c00 	.word	0x50001c00
 8003650:	40010400 	.word	0x40010400

08003654 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800366a:	e0bc      	b.n	80037e6 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800366c:	2201      	movs	r2, #1
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	409a      	lsls	r2, r3
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d100      	bne.n	8003680 <HAL_GPIO_DeInit+0x2c>
 800367e:	e0af      	b.n	80037e0 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8003680:	4a5e      	ldr	r2, [pc, #376]	@ (80037fc <HAL_GPIO_DeInit+0x1a8>)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	089b      	lsrs	r3, r3, #2
 8003686:	3302      	adds	r3, #2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	589b      	ldr	r3, [r3, r2]
 800368c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2203      	movs	r2, #3
 8003692:	4013      	ands	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	220f      	movs	r2, #15
 8003698:	409a      	lsls	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4013      	ands	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	23a0      	movs	r3, #160	@ 0xa0
 80036a4:	05db      	lsls	r3, r3, #23
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d01f      	beq.n	80036ea <HAL_GPIO_DeInit+0x96>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a54      	ldr	r2, [pc, #336]	@ (8003800 <HAL_GPIO_DeInit+0x1ac>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d019      	beq.n	80036e6 <HAL_GPIO_DeInit+0x92>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a53      	ldr	r2, [pc, #332]	@ (8003804 <HAL_GPIO_DeInit+0x1b0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <HAL_GPIO_DeInit+0x8e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a52      	ldr	r2, [pc, #328]	@ (8003808 <HAL_GPIO_DeInit+0x1b4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00d      	beq.n	80036de <HAL_GPIO_DeInit+0x8a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a51      	ldr	r2, [pc, #324]	@ (800380c <HAL_GPIO_DeInit+0x1b8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d007      	beq.n	80036da <HAL_GPIO_DeInit+0x86>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a50      	ldr	r2, [pc, #320]	@ (8003810 <HAL_GPIO_DeInit+0x1bc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_GPIO_DeInit+0x82>
 80036d2:	2305      	movs	r3, #5
 80036d4:	e00a      	b.n	80036ec <HAL_GPIO_DeInit+0x98>
 80036d6:	2306      	movs	r3, #6
 80036d8:	e008      	b.n	80036ec <HAL_GPIO_DeInit+0x98>
 80036da:	2304      	movs	r3, #4
 80036dc:	e006      	b.n	80036ec <HAL_GPIO_DeInit+0x98>
 80036de:	2303      	movs	r3, #3
 80036e0:	e004      	b.n	80036ec <HAL_GPIO_DeInit+0x98>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e002      	b.n	80036ec <HAL_GPIO_DeInit+0x98>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_GPIO_DeInit+0x98>
 80036ea:	2300      	movs	r3, #0
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	2103      	movs	r1, #3
 80036f0:	400a      	ands	r2, r1
 80036f2:	0092      	lsls	r2, r2, #2
 80036f4:	4093      	lsls	r3, r2
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d132      	bne.n	8003762 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80036fc:	4b45      	ldr	r3, [pc, #276]	@ (8003814 <HAL_GPIO_DeInit+0x1c0>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	43d9      	mvns	r1, r3
 8003704:	4b43      	ldr	r3, [pc, #268]	@ (8003814 <HAL_GPIO_DeInit+0x1c0>)
 8003706:	400a      	ands	r2, r1
 8003708:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800370a:	4b42      	ldr	r3, [pc, #264]	@ (8003814 <HAL_GPIO_DeInit+0x1c0>)
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	43d9      	mvns	r1, r3
 8003712:	4b40      	ldr	r3, [pc, #256]	@ (8003814 <HAL_GPIO_DeInit+0x1c0>)
 8003714:	400a      	ands	r2, r1
 8003716:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003718:	4b3e      	ldr	r3, [pc, #248]	@ (8003814 <HAL_GPIO_DeInit+0x1c0>)
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	43d9      	mvns	r1, r3
 8003720:	4b3c      	ldr	r3, [pc, #240]	@ (8003814 <HAL_GPIO_DeInit+0x1c0>)
 8003722:	400a      	ands	r2, r1
 8003724:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003726:	4b3b      	ldr	r3, [pc, #236]	@ (8003814 <HAL_GPIO_DeInit+0x1c0>)
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	43d9      	mvns	r1, r3
 800372e:	4b39      	ldr	r3, [pc, #228]	@ (8003814 <HAL_GPIO_DeInit+0x1c0>)
 8003730:	400a      	ands	r2, r1
 8003732:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2203      	movs	r2, #3
 8003738:	4013      	ands	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	220f      	movs	r2, #15
 800373e:	409a      	lsls	r2, r3
 8003740:	0013      	movs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003744:	4a2d      	ldr	r2, [pc, #180]	@ (80037fc <HAL_GPIO_DeInit+0x1a8>)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	089b      	lsrs	r3, r3, #2
 800374a:	3302      	adds	r3, #2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	589a      	ldr	r2, [r3, r2]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	43d9      	mvns	r1, r3
 8003754:	4829      	ldr	r0, [pc, #164]	@ (80037fc <HAL_GPIO_DeInit+0x1a8>)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	400a      	ands	r2, r1
 800375c:	3302      	adds	r3, #2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	2103      	movs	r1, #3
 800376c:	4099      	lsls	r1, r3
 800376e:	000b      	movs	r3, r1
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	08da      	lsrs	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3208      	adds	r2, #8
 800377e:	0092      	lsls	r2, r2, #2
 8003780:	58d3      	ldr	r3, [r2, r3]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	2107      	movs	r1, #7
 8003786:	400a      	ands	r2, r1
 8003788:	0092      	lsls	r2, r2, #2
 800378a:	210f      	movs	r1, #15
 800378c:	4091      	lsls	r1, r2
 800378e:	000a      	movs	r2, r1
 8003790:	43d1      	mvns	r1, r2
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	08d2      	lsrs	r2, r2, #3
 8003796:	4019      	ands	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3208      	adds	r2, #8
 800379c:	0092      	lsls	r2, r2, #2
 800379e:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	0052      	lsls	r2, r2, #1
 80037a8:	2103      	movs	r1, #3
 80037aa:	4091      	lsls	r1, r2
 80037ac:	000a      	movs	r2, r1
 80037ae:	43d2      	mvns	r2, r2
 80037b0:	401a      	ands	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2101      	movs	r1, #1
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4091      	lsls	r1, r2
 80037c0:	000a      	movs	r2, r1
 80037c2:	43d2      	mvns	r2, r2
 80037c4:	401a      	ands	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	0052      	lsls	r2, r2, #1
 80037d2:	2103      	movs	r1, #3
 80037d4:	4091      	lsls	r1, r2
 80037d6:	000a      	movs	r2, r1
 80037d8:	43d2      	mvns	r2, r2
 80037da:	401a      	ands	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	609a      	str	r2, [r3, #8]
    }
    position++;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	3301      	adds	r3, #1
 80037e4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	40da      	lsrs	r2, r3
 80037ec:	1e13      	subs	r3, r2, #0
 80037ee:	d000      	beq.n	80037f2 <HAL_GPIO_DeInit+0x19e>
 80037f0:	e73c      	b.n	800366c <HAL_GPIO_DeInit+0x18>
  }
}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b006      	add	sp, #24
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40010000 	.word	0x40010000
 8003800:	50000400 	.word	0x50000400
 8003804:	50000800 	.word	0x50000800
 8003808:	50000c00 	.word	0x50000c00
 800380c:	50001000 	.word	0x50001000
 8003810:	50001c00 	.word	0x50001c00
 8003814:	40010400 	.word	0x40010400

08003818 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	0008      	movs	r0, r1
 8003822:	0011      	movs	r1, r2
 8003824:	1cbb      	adds	r3, r7, #2
 8003826:	1c02      	adds	r2, r0, #0
 8003828:	801a      	strh	r2, [r3, #0]
 800382a:	1c7b      	adds	r3, r7, #1
 800382c:	1c0a      	adds	r2, r1, #0
 800382e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003830:	1c7b      	adds	r3, r7, #1
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d004      	beq.n	8003842 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003838:	1cbb      	adds	r3, r7, #2
 800383a:	881a      	ldrh	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003840:	e003      	b.n	800384a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003842:	1cbb      	adds	r3, r7, #2
 8003844:	881a      	ldrh	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800384a:	46c0      	nop			@ (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	b002      	add	sp, #8
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e08f      	b.n	8003986 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2241      	movs	r2, #65	@ 0x41
 800386a:	5c9b      	ldrb	r3, [r3, r2]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d107      	bne.n	8003882 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2240      	movs	r2, #64	@ 0x40
 8003876:	2100      	movs	r1, #0
 8003878:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	0018      	movs	r0, r3
 800387e:	f7fd f8ab 	bl	80009d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2241      	movs	r2, #65	@ 0x41
 8003886:	2124      	movs	r1, #36	@ 0x24
 8003888:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2101      	movs	r1, #1
 8003896:	438a      	bics	r2, r1
 8003898:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	493b      	ldr	r1, [pc, #236]	@ (8003990 <HAL_I2C_Init+0x13c>)
 80038a4:	400a      	ands	r2, r1
 80038a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4938      	ldr	r1, [pc, #224]	@ (8003994 <HAL_I2C_Init+0x140>)
 80038b4:	400a      	ands	r2, r1
 80038b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d108      	bne.n	80038d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2180      	movs	r1, #128	@ 0x80
 80038ca:	0209      	lsls	r1, r1, #8
 80038cc:	430a      	orrs	r2, r1
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	e007      	b.n	80038e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2184      	movs	r1, #132	@ 0x84
 80038dc:	0209      	lsls	r1, r1, #8
 80038de:	430a      	orrs	r2, r1
 80038e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d109      	bne.n	80038fe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2180      	movs	r1, #128	@ 0x80
 80038f6:	0109      	lsls	r1, r1, #4
 80038f8:	430a      	orrs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	e007      	b.n	800390e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4923      	ldr	r1, [pc, #140]	@ (8003998 <HAL_I2C_Init+0x144>)
 800390a:	400a      	ands	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4920      	ldr	r1, [pc, #128]	@ (800399c <HAL_I2C_Init+0x148>)
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	491a      	ldr	r1, [pc, #104]	@ (8003994 <HAL_I2C_Init+0x140>)
 800392a:	400a      	ands	r2, r1
 800392c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	431a      	orrs	r2, r3
 8003938:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69d9      	ldr	r1, [r3, #28]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1a      	ldr	r2, [r3, #32]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2101      	movs	r1, #1
 8003964:	430a      	orrs	r2, r1
 8003966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2241      	movs	r2, #65	@ 0x41
 8003972:	2120      	movs	r1, #32
 8003974:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2242      	movs	r2, #66	@ 0x42
 8003980:	2100      	movs	r1, #0
 8003982:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b002      	add	sp, #8
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	f0ffffff 	.word	0xf0ffffff
 8003994:	ffff7fff 	.word	0xffff7fff
 8003998:	fffff7ff 	.word	0xfffff7ff
 800399c:	02008000 	.word	0x02008000

080039a0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e022      	b.n	80039f8 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2241      	movs	r2, #65	@ 0x41
 80039b6:	2124      	movs	r1, #36	@ 0x24
 80039b8:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2101      	movs	r1, #1
 80039c6:	438a      	bics	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7fd f847 	bl	8000a60 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2241      	movs	r2, #65	@ 0x41
 80039dc:	2100      	movs	r1, #0
 80039de:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2242      	movs	r2, #66	@ 0x42
 80039ea:	2100      	movs	r1, #0
 80039ec:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2240      	movs	r2, #64	@ 0x40
 80039f2:	2100      	movs	r1, #0
 80039f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b089      	sub	sp, #36	@ 0x24
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	0008      	movs	r0, r1
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	230a      	movs	r3, #10
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	1c02      	adds	r2, r0, #0
 8003a14:	801a      	strh	r2, [r3, #0]
 8003a16:	2308      	movs	r3, #8
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	1c0a      	adds	r2, r1, #0
 8003a1c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2241      	movs	r2, #65	@ 0x41
 8003a22:	5c9b      	ldrb	r3, [r3, r2]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d000      	beq.n	8003a2c <HAL_I2C_Master_Transmit+0x2c>
 8003a2a:	e10a      	b.n	8003c42 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2240      	movs	r2, #64	@ 0x40
 8003a30:	5c9b      	ldrb	r3, [r3, r2]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_I2C_Master_Transmit+0x3a>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e104      	b.n	8003c44 <HAL_I2C_Master_Transmit+0x244>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2240      	movs	r2, #64	@ 0x40
 8003a3e:	2101      	movs	r1, #1
 8003a40:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a42:	f7fe feb9 	bl	80027b8 <HAL_GetTick>
 8003a46:	0003      	movs	r3, r0
 8003a48:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a4a:	2380      	movs	r3, #128	@ 0x80
 8003a4c:	0219      	lsls	r1, r3, #8
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2319      	movs	r3, #25
 8003a56:	2201      	movs	r2, #1
 8003a58:	f000 fb22 	bl	80040a0 <I2C_WaitOnFlagUntilTimeout>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0ef      	b.n	8003c44 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2241      	movs	r2, #65	@ 0x41
 8003a68:	2121      	movs	r1, #33	@ 0x21
 8003a6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2242      	movs	r2, #66	@ 0x42
 8003a70:	2110      	movs	r1, #16
 8003a72:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2208      	movs	r2, #8
 8003a84:	18ba      	adds	r2, r7, r2
 8003a86:	8812      	ldrh	r2, [r2, #0]
 8003a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2bff      	cmp	r3, #255	@ 0xff
 8003a98:	d906      	bls.n	8003aa8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	22ff      	movs	r2, #255	@ 0xff
 8003a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003aa0:	2380      	movs	r3, #128	@ 0x80
 8003aa2:	045b      	lsls	r3, r3, #17
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e007      	b.n	8003ab8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003ab2:	2380      	movs	r3, #128	@ 0x80
 8003ab4:	049b      	lsls	r3, r3, #18
 8003ab6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d027      	beq.n	8003b10 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	3301      	adds	r3, #1
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	697c      	ldr	r4, [r7, #20]
 8003afc:	230a      	movs	r3, #10
 8003afe:	18fb      	adds	r3, r7, r3
 8003b00:	8819      	ldrh	r1, [r3, #0]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	4b51      	ldr	r3, [pc, #324]	@ (8003c4c <HAL_I2C_Master_Transmit+0x24c>)
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	0023      	movs	r3, r4
 8003b0a:	f000 fd41 	bl	8004590 <I2C_TransferConfig>
 8003b0e:	e06f      	b.n	8003bf0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	697c      	ldr	r4, [r7, #20]
 8003b18:	230a      	movs	r3, #10
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	8819      	ldrh	r1, [r3, #0]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	4b4a      	ldr	r3, [pc, #296]	@ (8003c4c <HAL_I2C_Master_Transmit+0x24c>)
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	0023      	movs	r3, r4
 8003b26:	f000 fd33 	bl	8004590 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003b2a:	e061      	b.n	8003bf0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 fb0c 	bl	8004150 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b38:	1e03      	subs	r3, r0, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e081      	b.n	8003c44 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	781a      	ldrb	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d03a      	beq.n	8003bf0 <HAL_I2C_Master_Transmit+0x1f0>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d136      	bne.n	8003bf0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	0013      	movs	r3, r2
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2180      	movs	r1, #128	@ 0x80
 8003b90:	f000 fa86 	bl	80040a0 <I2C_WaitOnFlagUntilTimeout>
 8003b94:	1e03      	subs	r3, r0, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e053      	b.n	8003c44 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2bff      	cmp	r3, #255	@ 0xff
 8003ba4:	d911      	bls.n	8003bca <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	22ff      	movs	r2, #255	@ 0xff
 8003baa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	2380      	movs	r3, #128	@ 0x80
 8003bb4:	045c      	lsls	r4, r3, #17
 8003bb6:	230a      	movs	r3, #10
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	8819      	ldrh	r1, [r3, #0]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	0023      	movs	r3, r4
 8003bc4:	f000 fce4 	bl	8004590 <I2C_TransferConfig>
 8003bc8:	e012      	b.n	8003bf0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	2380      	movs	r3, #128	@ 0x80
 8003bdc:	049c      	lsls	r4, r3, #18
 8003bde:	230a      	movs	r3, #10
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	8819      	ldrh	r1, [r3, #0]
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	2300      	movs	r3, #0
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	0023      	movs	r3, r4
 8003bec:	f000 fcd0 	bl	8004590 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d198      	bne.n	8003b2c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 faeb 	bl	80041dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c06:	1e03      	subs	r3, r0, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e01a      	b.n	8003c44 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2220      	movs	r2, #32
 8003c14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	490b      	ldr	r1, [pc, #44]	@ (8003c50 <HAL_I2C_Master_Transmit+0x250>)
 8003c22:	400a      	ands	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2241      	movs	r2, #65	@ 0x41
 8003c2a:	2120      	movs	r1, #32
 8003c2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2242      	movs	r2, #66	@ 0x42
 8003c32:	2100      	movs	r1, #0
 8003c34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2240      	movs	r2, #64	@ 0x40
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e000      	b.n	8003c44 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003c42:	2302      	movs	r3, #2
  }
}
 8003c44:	0018      	movs	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b007      	add	sp, #28
 8003c4a:	bd90      	pop	{r4, r7, pc}
 8003c4c:	80002000 	.word	0x80002000
 8003c50:	fe00e800 	.word	0xfe00e800

08003c54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003c54:	b590      	push	{r4, r7, lr}
 8003c56:	b089      	sub	sp, #36	@ 0x24
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	0008      	movs	r0, r1
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	0019      	movs	r1, r3
 8003c62:	230a      	movs	r3, #10
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	1c02      	adds	r2, r0, #0
 8003c68:	801a      	strh	r2, [r3, #0]
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	1c0a      	adds	r2, r1, #0
 8003c70:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2241      	movs	r2, #65	@ 0x41
 8003c76:	5c9b      	ldrb	r3, [r3, r2]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d000      	beq.n	8003c80 <HAL_I2C_Master_Receive+0x2c>
 8003c7e:	e0e8      	b.n	8003e52 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2240      	movs	r2, #64	@ 0x40
 8003c84:	5c9b      	ldrb	r3, [r3, r2]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_I2C_Master_Receive+0x3a>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e0e2      	b.n	8003e54 <HAL_I2C_Master_Receive+0x200>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2240      	movs	r2, #64	@ 0x40
 8003c92:	2101      	movs	r1, #1
 8003c94:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c96:	f7fe fd8f 	bl	80027b8 <HAL_GetTick>
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c9e:	2380      	movs	r3, #128	@ 0x80
 8003ca0:	0219      	lsls	r1, r3, #8
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	2319      	movs	r3, #25
 8003caa:	2201      	movs	r2, #1
 8003cac:	f000 f9f8 	bl	80040a0 <I2C_WaitOnFlagUntilTimeout>
 8003cb0:	1e03      	subs	r3, r0, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0cd      	b.n	8003e54 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2241      	movs	r2, #65	@ 0x41
 8003cbc:	2122      	movs	r1, #34	@ 0x22
 8003cbe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2242      	movs	r2, #66	@ 0x42
 8003cc4:	2110      	movs	r1, #16
 8003cc6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2208      	movs	r2, #8
 8003cd8:	18ba      	adds	r2, r7, r2
 8003cda:	8812      	ldrh	r2, [r2, #0]
 8003cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2bff      	cmp	r3, #255	@ 0xff
 8003cec:	d911      	bls.n	8003d12 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	2380      	movs	r3, #128	@ 0x80
 8003cfc:	045c      	lsls	r4, r3, #17
 8003cfe:	230a      	movs	r3, #10
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	8819      	ldrh	r1, [r3, #0]
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	4b55      	ldr	r3, [pc, #340]	@ (8003e5c <HAL_I2C_Master_Receive+0x208>)
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	0023      	movs	r3, r4
 8003d0c:	f000 fc40 	bl	8004590 <I2C_TransferConfig>
 8003d10:	e076      	b.n	8003e00 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	2380      	movs	r3, #128	@ 0x80
 8003d24:	049c      	lsls	r4, r3, #18
 8003d26:	230a      	movs	r3, #10
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	8819      	ldrh	r1, [r3, #0]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e5c <HAL_I2C_Master_Receive+0x208>)
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	0023      	movs	r3, r4
 8003d34:	f000 fc2c 	bl	8004590 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003d38:	e062      	b.n	8003e00 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f000 fa8f 	bl	8004264 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d46:	1e03      	subs	r3, r0, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e082      	b.n	8003e54 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d03a      	beq.n	8003e00 <HAL_I2C_Master_Receive+0x1ac>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d136      	bne.n	8003e00 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	0013      	movs	r3, r2
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2180      	movs	r1, #128	@ 0x80
 8003da0:	f000 f97e 	bl	80040a0 <I2C_WaitOnFlagUntilTimeout>
 8003da4:	1e03      	subs	r3, r0, #0
 8003da6:	d001      	beq.n	8003dac <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e053      	b.n	8003e54 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2bff      	cmp	r3, #255	@ 0xff
 8003db4:	d911      	bls.n	8003dda <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	22ff      	movs	r2, #255	@ 0xff
 8003dba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	2380      	movs	r3, #128	@ 0x80
 8003dc4:	045c      	lsls	r4, r3, #17
 8003dc6:	230a      	movs	r3, #10
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	8819      	ldrh	r1, [r3, #0]
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	0023      	movs	r3, r4
 8003dd4:	f000 fbdc 	bl	8004590 <I2C_TransferConfig>
 8003dd8:	e012      	b.n	8003e00 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	2380      	movs	r3, #128	@ 0x80
 8003dec:	049c      	lsls	r4, r3, #18
 8003dee:	230a      	movs	r3, #10
 8003df0:	18fb      	adds	r3, r7, r3
 8003df2:	8819      	ldrh	r1, [r3, #0]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	2300      	movs	r3, #0
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	0023      	movs	r3, r4
 8003dfc:	f000 fbc8 	bl	8004590 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d197      	bne.n	8003d3a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	0018      	movs	r0, r3
 8003e12:	f000 f9e3 	bl	80041dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e16:	1e03      	subs	r3, r0, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e01a      	b.n	8003e54 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2220      	movs	r2, #32
 8003e24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	490b      	ldr	r1, [pc, #44]	@ (8003e60 <HAL_I2C_Master_Receive+0x20c>)
 8003e32:	400a      	ands	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2241      	movs	r2, #65	@ 0x41
 8003e3a:	2120      	movs	r1, #32
 8003e3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2242      	movs	r2, #66	@ 0x42
 8003e42:	2100      	movs	r1, #0
 8003e44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2240      	movs	r2, #64	@ 0x40
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b007      	add	sp, #28
 8003e5a:	bd90      	pop	{r4, r7, pc}
 8003e5c:	80002400 	.word	0x80002400
 8003e60:	fe00e800 	.word	0xfe00e800

08003e64 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	@ 0x28
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	230a      	movs	r3, #10
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	1c0a      	adds	r2, r1, #0
 8003e76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2241      	movs	r2, #65	@ 0x41
 8003e80:	5c9b      	ldrb	r3, [r3, r2]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d000      	beq.n	8003e8a <HAL_I2C_IsDeviceReady+0x26>
 8003e88:	e0df      	b.n	800404a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699a      	ldr	r2, [r3, #24]
 8003e90:	2380      	movs	r3, #128	@ 0x80
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	401a      	ands	r2, r3
 8003e96:	2380      	movs	r3, #128	@ 0x80
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d101      	bne.n	8003ea2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e0d4      	b.n	800404c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2240      	movs	r2, #64	@ 0x40
 8003ea6:	5c9b      	ldrb	r3, [r3, r2]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_I2C_IsDeviceReady+0x4c>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e0cd      	b.n	800404c <HAL_I2C_IsDeviceReady+0x1e8>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2240      	movs	r2, #64	@ 0x40
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2241      	movs	r2, #65	@ 0x41
 8003ebc:	2124      	movs	r1, #36	@ 0x24
 8003ebe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d107      	bne.n	8003ede <HAL_I2C_IsDeviceReady+0x7a>
 8003ece:	230a      	movs	r3, #10
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	059b      	lsls	r3, r3, #22
 8003ed6:	0d9b      	lsrs	r3, r3, #22
 8003ed8:	4a5e      	ldr	r2, [pc, #376]	@ (8004054 <HAL_I2C_IsDeviceReady+0x1f0>)
 8003eda:	431a      	orrs	r2, r3
 8003edc:	e006      	b.n	8003eec <HAL_I2C_IsDeviceReady+0x88>
 8003ede:	230a      	movs	r3, #10
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	059b      	lsls	r3, r3, #22
 8003ee6:	0d9b      	lsrs	r3, r3, #22
 8003ee8:	4a5b      	ldr	r2, [pc, #364]	@ (8004058 <HAL_I2C_IsDeviceReady+0x1f4>)
 8003eea:	431a      	orrs	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fe fc61 	bl	80027b8 <HAL_GetTick>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2220      	movs	r2, #32
 8003f02:	4013      	ands	r3, r2
 8003f04:	3b20      	subs	r3, #32
 8003f06:	425a      	negs	r2, r3
 8003f08:	4153      	adcs	r3, r2
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	231f      	movs	r3, #31
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2210      	movs	r2, #16
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	3b10      	subs	r3, #16
 8003f1e:	425a      	negs	r2, r3
 8003f20:	4153      	adcs	r3, r2
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	231e      	movs	r3, #30
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f2a:	e035      	b.n	8003f98 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	d01a      	beq.n	8003f68 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7fe fc41 	bl	80027b8 <HAL_GetTick>
 8003f36:	0002      	movs	r2, r0
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <HAL_I2C_IsDeviceReady+0xe4>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10f      	bne.n	8003f68 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2241      	movs	r2, #65	@ 0x41
 8003f4c:	2120      	movs	r1, #32
 8003f4e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f54:	2220      	movs	r2, #32
 8003f56:	431a      	orrs	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2240      	movs	r2, #64	@ 0x40
 8003f60:	2100      	movs	r1, #0
 8003f62:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e071      	b.n	800404c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	4013      	ands	r3, r2
 8003f72:	3b20      	subs	r3, #32
 8003f74:	425a      	negs	r2, r3
 8003f76:	4153      	adcs	r3, r2
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	231f      	movs	r3, #31
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2210      	movs	r2, #16
 8003f88:	4013      	ands	r3, r2
 8003f8a:	3b10      	subs	r3, #16
 8003f8c:	425a      	negs	r2, r3
 8003f8e:	4153      	adcs	r3, r2
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	231e      	movs	r3, #30
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f98:	231f      	movs	r3, #31
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d104      	bne.n	8003fac <HAL_I2C_IsDeviceReady+0x148>
 8003fa2:	231e      	movs	r3, #30
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0bf      	beq.n	8003f2c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	2210      	movs	r2, #16
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d01a      	beq.n	8003ff0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	0013      	movs	r3, r2
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2120      	movs	r1, #32
 8003fc8:	f000 f86a 	bl	80040a0 <I2C_WaitOnFlagUntilTimeout>
 8003fcc:	1e03      	subs	r3, r0, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e03b      	b.n	800404c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2241      	movs	r2, #65	@ 0x41
 8003fe0:	2120      	movs	r1, #32
 8003fe2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2240      	movs	r2, #64	@ 0x40
 8003fe8:	2100      	movs	r1, #0
 8003fea:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	e02d      	b.n	800404c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	0013      	movs	r3, r2
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2120      	movs	r1, #32
 8003ffe:	f000 f84f 	bl	80040a0 <I2C_WaitOnFlagUntilTimeout>
 8004002:	1e03      	subs	r3, r0, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e020      	b.n	800404c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2210      	movs	r2, #16
 8004010:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2220      	movs	r2, #32
 8004018:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	3301      	adds	r3, #1
 800401e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	d900      	bls.n	800402a <HAL_I2C_IsDeviceReady+0x1c6>
 8004028:	e74d      	b.n	8003ec6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2241      	movs	r2, #65	@ 0x41
 800402e:	2120      	movs	r1, #32
 8004030:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004036:	2220      	movs	r2, #32
 8004038:	431a      	orrs	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2240      	movs	r2, #64	@ 0x40
 8004042:	2100      	movs	r1, #0
 8004044:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
  }
}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	b008      	add	sp, #32
 8004052:	bd80      	pop	{r7, pc}
 8004054:	02002000 	.word	0x02002000
 8004058:	02002800 	.word	0x02002800

0800405c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2202      	movs	r2, #2
 800406c:	4013      	ands	r3, r2
 800406e:	2b02      	cmp	r3, #2
 8004070:	d103      	bne.n	800407a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2200      	movs	r2, #0
 8004078:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2201      	movs	r2, #1
 8004082:	4013      	ands	r3, r2
 8004084:	2b01      	cmp	r3, #1
 8004086:	d007      	beq.n	8004098 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2101      	movs	r1, #1
 8004094:	430a      	orrs	r2, r1
 8004096:	619a      	str	r2, [r3, #24]
  }
}
 8004098:	46c0      	nop			@ (mov r8, r8)
 800409a:	46bd      	mov	sp, r7
 800409c:	b002      	add	sp, #8
 800409e:	bd80      	pop	{r7, pc}

080040a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040b0:	e03a      	b.n	8004128 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	6839      	ldr	r1, [r7, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	0018      	movs	r0, r3
 80040ba:	f000 f971 	bl	80043a0 <I2C_IsErrorOccurred>
 80040be:	1e03      	subs	r3, r0, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e040      	b.n	8004148 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	d02d      	beq.n	8004128 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040cc:	f7fe fb74 	bl	80027b8 <HAL_GetTick>
 80040d0:	0002      	movs	r2, r0
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d302      	bcc.n	80040e2 <I2C_WaitOnFlagUntilTimeout+0x42>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d122      	bne.n	8004128 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	4013      	ands	r3, r2
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	425a      	negs	r2, r3
 80040f2:	4153      	adcs	r3, r2
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	001a      	movs	r2, r3
 80040f8:	1dfb      	adds	r3, r7, #7
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d113      	bne.n	8004128 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004104:	2220      	movs	r2, #32
 8004106:	431a      	orrs	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2241      	movs	r2, #65	@ 0x41
 8004110:	2120      	movs	r1, #32
 8004112:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2242      	movs	r2, #66	@ 0x42
 8004118:	2100      	movs	r1, #0
 800411a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2240      	movs	r2, #64	@ 0x40
 8004120:	2100      	movs	r1, #0
 8004122:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e00f      	b.n	8004148 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	4013      	ands	r3, r2
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	425a      	negs	r2, r3
 8004138:	4153      	adcs	r3, r2
 800413a:	b2db      	uxtb	r3, r3
 800413c:	001a      	movs	r2, r3
 800413e:	1dfb      	adds	r3, r7, #7
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d0b5      	beq.n	80040b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	0018      	movs	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	b004      	add	sp, #16
 800414e:	bd80      	pop	{r7, pc}

08004150 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800415c:	e032      	b.n	80041c4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	0018      	movs	r0, r3
 8004166:	f000 f91b 	bl	80043a0 <I2C_IsErrorOccurred>
 800416a:	1e03      	subs	r3, r0, #0
 800416c:	d001      	beq.n	8004172 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e030      	b.n	80041d4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	3301      	adds	r3, #1
 8004176:	d025      	beq.n	80041c4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004178:	f7fe fb1e 	bl	80027b8 <HAL_GetTick>
 800417c:	0002      	movs	r2, r0
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	429a      	cmp	r2, r3
 8004186:	d302      	bcc.n	800418e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d11a      	bne.n	80041c4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	2202      	movs	r2, #2
 8004196:	4013      	ands	r3, r2
 8004198:	2b02      	cmp	r3, #2
 800419a:	d013      	beq.n	80041c4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a0:	2220      	movs	r2, #32
 80041a2:	431a      	orrs	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2241      	movs	r2, #65	@ 0x41
 80041ac:	2120      	movs	r1, #32
 80041ae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2242      	movs	r2, #66	@ 0x42
 80041b4:	2100      	movs	r1, #0
 80041b6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2240      	movs	r2, #64	@ 0x40
 80041bc:	2100      	movs	r1, #0
 80041be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e007      	b.n	80041d4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2202      	movs	r2, #2
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d1c5      	bne.n	800415e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	0018      	movs	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b004      	add	sp, #16
 80041da:	bd80      	pop	{r7, pc}

080041dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041e8:	e02f      	b.n	800424a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 f8d5 	bl	80043a0 <I2C_IsErrorOccurred>
 80041f6:	1e03      	subs	r3, r0, #0
 80041f8:	d001      	beq.n	80041fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e02d      	b.n	800425a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fe:	f7fe fadb 	bl	80027b8 <HAL_GetTick>
 8004202:	0002      	movs	r2, r0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	429a      	cmp	r2, r3
 800420c:	d302      	bcc.n	8004214 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d11a      	bne.n	800424a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	2220      	movs	r2, #32
 800421c:	4013      	ands	r3, r2
 800421e:	2b20      	cmp	r3, #32
 8004220:	d013      	beq.n	800424a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004226:	2220      	movs	r2, #32
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2241      	movs	r2, #65	@ 0x41
 8004232:	2120      	movs	r1, #32
 8004234:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2242      	movs	r2, #66	@ 0x42
 800423a:	2100      	movs	r1, #0
 800423c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2240      	movs	r2, #64	@ 0x40
 8004242:	2100      	movs	r1, #0
 8004244:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e007      	b.n	800425a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2220      	movs	r2, #32
 8004252:	4013      	ands	r3, r2
 8004254:	2b20      	cmp	r3, #32
 8004256:	d1c8      	bne.n	80041ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	0018      	movs	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	b004      	add	sp, #16
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004270:	2317      	movs	r3, #23
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004278:	e07b      	b.n	8004372 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	0018      	movs	r0, r3
 8004282:	f000 f88d 	bl	80043a0 <I2C_IsErrorOccurred>
 8004286:	1e03      	subs	r3, r0, #0
 8004288:	d003      	beq.n	8004292 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800428a:	2317      	movs	r3, #23
 800428c:	18fb      	adds	r3, r7, r3
 800428e:	2201      	movs	r2, #1
 8004290:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2220      	movs	r2, #32
 800429a:	4013      	ands	r3, r2
 800429c:	2b20      	cmp	r3, #32
 800429e:	d140      	bne.n	8004322 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80042a0:	2117      	movs	r1, #23
 80042a2:	187b      	adds	r3, r7, r1
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d13b      	bne.n	8004322 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2204      	movs	r2, #4
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d106      	bne.n	80042c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80042c0:	187b      	adds	r3, r7, r1
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2210      	movs	r2, #16
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d123      	bne.n	800431c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2210      	movs	r2, #16
 80042da:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2204      	movs	r2, #4
 80042e0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2220      	movs	r2, #32
 80042e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4929      	ldr	r1, [pc, #164]	@ (800439c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80042f6:	400a      	ands	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2241      	movs	r2, #65	@ 0x41
 80042fe:	2120      	movs	r1, #32
 8004300:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2242      	movs	r2, #66	@ 0x42
 8004306:	2100      	movs	r1, #0
 8004308:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2240      	movs	r2, #64	@ 0x40
 800430e:	2100      	movs	r1, #0
 8004310:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004312:	2317      	movs	r3, #23
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e002      	b.n	8004322 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004322:	f7fe fa49 	bl	80027b8 <HAL_GetTick>
 8004326:	0002      	movs	r2, r0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d11c      	bne.n	8004372 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004338:	2017      	movs	r0, #23
 800433a:	183b      	adds	r3, r7, r0
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d117      	bne.n	8004372 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2204      	movs	r2, #4
 800434a:	4013      	ands	r3, r2
 800434c:	2b04      	cmp	r3, #4
 800434e:	d010      	beq.n	8004372 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004354:	2220      	movs	r2, #32
 8004356:	431a      	orrs	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2241      	movs	r2, #65	@ 0x41
 8004360:	2120      	movs	r1, #32
 8004362:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2240      	movs	r2, #64	@ 0x40
 8004368:	2100      	movs	r1, #0
 800436a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800436c:	183b      	adds	r3, r7, r0
 800436e:	2201      	movs	r2, #1
 8004370:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	2204      	movs	r2, #4
 800437a:	4013      	ands	r3, r2
 800437c:	2b04      	cmp	r3, #4
 800437e:	d005      	beq.n	800438c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004380:	2317      	movs	r3, #23
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d100      	bne.n	800438c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800438a:	e776      	b.n	800427a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800438c:	2317      	movs	r3, #23
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	781b      	ldrb	r3, [r3, #0]
}
 8004392:	0018      	movs	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	b006      	add	sp, #24
 8004398:	bd80      	pop	{r7, pc}
 800439a:	46c0      	nop			@ (mov r8, r8)
 800439c:	fe00e800 	.word	0xfe00e800

080043a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	@ 0x28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ac:	2327      	movs	r3, #39	@ 0x27
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	2210      	movs	r2, #16
 80043c8:	4013      	ands	r3, r2
 80043ca:	d100      	bne.n	80043ce <I2C_IsErrorOccurred+0x2e>
 80043cc:	e079      	b.n	80044c2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2210      	movs	r2, #16
 80043d4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043d6:	e057      	b.n	8004488 <I2C_IsErrorOccurred+0xe8>
 80043d8:	2227      	movs	r2, #39	@ 0x27
 80043da:	18bb      	adds	r3, r7, r2
 80043dc:	18ba      	adds	r2, r7, r2
 80043de:	7812      	ldrb	r2, [r2, #0]
 80043e0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	3301      	adds	r3, #1
 80043e6:	d04f      	beq.n	8004488 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043e8:	f7fe f9e6 	bl	80027b8 <HAL_GetTick>
 80043ec:	0002      	movs	r2, r0
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d302      	bcc.n	80043fe <I2C_IsErrorOccurred+0x5e>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d144      	bne.n	8004488 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	2380      	movs	r3, #128	@ 0x80
 8004406:	01db      	lsls	r3, r3, #7
 8004408:	4013      	ands	r3, r2
 800440a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800440c:	2013      	movs	r0, #19
 800440e:	183b      	adds	r3, r7, r0
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	2142      	movs	r1, #66	@ 0x42
 8004414:	5c52      	ldrb	r2, [r2, r1]
 8004416:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	2380      	movs	r3, #128	@ 0x80
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	401a      	ands	r2, r3
 8004424:	2380      	movs	r3, #128	@ 0x80
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	429a      	cmp	r2, r3
 800442a:	d126      	bne.n	800447a <I2C_IsErrorOccurred+0xda>
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	2380      	movs	r3, #128	@ 0x80
 8004430:	01db      	lsls	r3, r3, #7
 8004432:	429a      	cmp	r2, r3
 8004434:	d021      	beq.n	800447a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004436:	183b      	adds	r3, r7, r0
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b20      	cmp	r3, #32
 800443c:	d01d      	beq.n	800447a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2180      	movs	r1, #128	@ 0x80
 800444a:	01c9      	lsls	r1, r1, #7
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004450:	f7fe f9b2 	bl	80027b8 <HAL_GetTick>
 8004454:	0003      	movs	r3, r0
 8004456:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004458:	e00f      	b.n	800447a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800445a:	f7fe f9ad 	bl	80027b8 <HAL_GetTick>
 800445e:	0002      	movs	r2, r0
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b19      	cmp	r3, #25
 8004466:	d908      	bls.n	800447a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	2220      	movs	r2, #32
 800446c:	4313      	orrs	r3, r2
 800446e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004470:	2327      	movs	r3, #39	@ 0x27
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	2201      	movs	r2, #1
 8004476:	701a      	strb	r2, [r3, #0]

              break;
 8004478:	e006      	b.n	8004488 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2220      	movs	r2, #32
 8004482:	4013      	ands	r3, r2
 8004484:	2b20      	cmp	r3, #32
 8004486:	d1e8      	bne.n	800445a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2220      	movs	r2, #32
 8004490:	4013      	ands	r3, r2
 8004492:	2b20      	cmp	r3, #32
 8004494:	d004      	beq.n	80044a0 <I2C_IsErrorOccurred+0x100>
 8004496:	2327      	movs	r3, #39	@ 0x27
 8004498:	18fb      	adds	r3, r7, r3
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d09b      	beq.n	80043d8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044a0:	2327      	movs	r3, #39	@ 0x27
 80044a2:	18fb      	adds	r3, r7, r3
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d103      	bne.n	80044b2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2220      	movs	r2, #32
 80044b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	2204      	movs	r2, #4
 80044b6:	4313      	orrs	r3, r2
 80044b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044ba:	2327      	movs	r3, #39	@ 0x27
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	2201      	movs	r2, #1
 80044c0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	2380      	movs	r3, #128	@ 0x80
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	4013      	ands	r3, r2
 80044d2:	d00c      	beq.n	80044ee <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	2201      	movs	r2, #1
 80044d8:	4313      	orrs	r3, r2
 80044da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2280      	movs	r2, #128	@ 0x80
 80044e2:	0052      	lsls	r2, r2, #1
 80044e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044e6:	2327      	movs	r3, #39	@ 0x27
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	2201      	movs	r2, #1
 80044ec:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	2380      	movs	r3, #128	@ 0x80
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4013      	ands	r3, r2
 80044f6:	d00c      	beq.n	8004512 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	2208      	movs	r2, #8
 80044fc:	4313      	orrs	r3, r2
 80044fe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2280      	movs	r2, #128	@ 0x80
 8004506:	00d2      	lsls	r2, r2, #3
 8004508:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800450a:	2327      	movs	r3, #39	@ 0x27
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	2201      	movs	r2, #1
 8004510:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	2380      	movs	r3, #128	@ 0x80
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4013      	ands	r3, r2
 800451a:	d00c      	beq.n	8004536 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	2202      	movs	r2, #2
 8004520:	4313      	orrs	r3, r2
 8004522:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2280      	movs	r2, #128	@ 0x80
 800452a:	0092      	lsls	r2, r2, #2
 800452c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800452e:	2327      	movs	r3, #39	@ 0x27
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004536:	2327      	movs	r3, #39	@ 0x27
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01d      	beq.n	800457c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	0018      	movs	r0, r3
 8004544:	f7ff fd8a 	bl	800405c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	490e      	ldr	r1, [pc, #56]	@ (800458c <I2C_IsErrorOccurred+0x1ec>)
 8004554:	400a      	ands	r2, r1
 8004556:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	431a      	orrs	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2241      	movs	r2, #65	@ 0x41
 8004568:	2120      	movs	r1, #32
 800456a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2242      	movs	r2, #66	@ 0x42
 8004570:	2100      	movs	r1, #0
 8004572:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2240      	movs	r2, #64	@ 0x40
 8004578:	2100      	movs	r1, #0
 800457a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800457c:	2327      	movs	r3, #39	@ 0x27
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	781b      	ldrb	r3, [r3, #0]
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b00a      	add	sp, #40	@ 0x28
 8004588:	bd80      	pop	{r7, pc}
 800458a:	46c0      	nop			@ (mov r8, r8)
 800458c:	fe00e800 	.word	0xfe00e800

08004590 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	0008      	movs	r0, r1
 800459a:	0011      	movs	r1, r2
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	240a      	movs	r4, #10
 80045a0:	193b      	adds	r3, r7, r4
 80045a2:	1c02      	adds	r2, r0, #0
 80045a4:	801a      	strh	r2, [r3, #0]
 80045a6:	2009      	movs	r0, #9
 80045a8:	183b      	adds	r3, r7, r0
 80045aa:	1c0a      	adds	r2, r1, #0
 80045ac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045ae:	193b      	adds	r3, r7, r4
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	059b      	lsls	r3, r3, #22
 80045b4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045b6:	183b      	adds	r3, r7, r0
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	0419      	lsls	r1, r3, #16
 80045bc:	23ff      	movs	r3, #255	@ 0xff
 80045be:	041b      	lsls	r3, r3, #16
 80045c0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045c2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ca:	4313      	orrs	r3, r2
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	085b      	lsrs	r3, r3, #1
 80045d0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045da:	0d51      	lsrs	r1, r2, #21
 80045dc:	2280      	movs	r2, #128	@ 0x80
 80045de:	00d2      	lsls	r2, r2, #3
 80045e0:	400a      	ands	r2, r1
 80045e2:	4907      	ldr	r1, [pc, #28]	@ (8004600 <I2C_TransferConfig+0x70>)
 80045e4:	430a      	orrs	r2, r1
 80045e6:	43d2      	mvns	r2, r2
 80045e8:	401a      	ands	r2, r3
 80045ea:	0011      	movs	r1, r2
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045f6:	46c0      	nop			@ (mov r8, r8)
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b007      	add	sp, #28
 80045fc:	bd90      	pop	{r4, r7, pc}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	03ff63ff 	.word	0x03ff63ff

08004604 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2241      	movs	r2, #65	@ 0x41
 8004612:	5c9b      	ldrb	r3, [r3, r2]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b20      	cmp	r3, #32
 8004618:	d138      	bne.n	800468c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2240      	movs	r2, #64	@ 0x40
 800461e:	5c9b      	ldrb	r3, [r3, r2]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004624:	2302      	movs	r3, #2
 8004626:	e032      	b.n	800468e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2240      	movs	r2, #64	@ 0x40
 800462c:	2101      	movs	r1, #1
 800462e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2241      	movs	r2, #65	@ 0x41
 8004634:	2124      	movs	r1, #36	@ 0x24
 8004636:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2101      	movs	r1, #1
 8004644:	438a      	bics	r2, r1
 8004646:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4911      	ldr	r1, [pc, #68]	@ (8004698 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004654:	400a      	ands	r2, r1
 8004656:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6819      	ldr	r1, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2101      	movs	r1, #1
 8004674:	430a      	orrs	r2, r1
 8004676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2241      	movs	r2, #65	@ 0x41
 800467c:	2120      	movs	r1, #32
 800467e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2240      	movs	r2, #64	@ 0x40
 8004684:	2100      	movs	r1, #0
 8004686:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	e000      	b.n	800468e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800468c:	2302      	movs	r3, #2
  }
}
 800468e:	0018      	movs	r0, r3
 8004690:	46bd      	mov	sp, r7
 8004692:	b002      	add	sp, #8
 8004694:	bd80      	pop	{r7, pc}
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	ffffefff 	.word	0xffffefff

0800469c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2241      	movs	r2, #65	@ 0x41
 80046aa:	5c9b      	ldrb	r3, [r3, r2]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d139      	bne.n	8004726 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2240      	movs	r2, #64	@ 0x40
 80046b6:	5c9b      	ldrb	r3, [r3, r2]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046bc:	2302      	movs	r3, #2
 80046be:	e033      	b.n	8004728 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2240      	movs	r2, #64	@ 0x40
 80046c4:	2101      	movs	r1, #1
 80046c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2241      	movs	r2, #65	@ 0x41
 80046cc:	2124      	movs	r1, #36	@ 0x24
 80046ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2101      	movs	r1, #1
 80046dc:	438a      	bics	r2, r1
 80046de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4a11      	ldr	r2, [pc, #68]	@ (8004730 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2101      	movs	r1, #1
 800470e:	430a      	orrs	r2, r1
 8004710:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2241      	movs	r2, #65	@ 0x41
 8004716:	2120      	movs	r1, #32
 8004718:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2240      	movs	r2, #64	@ 0x40
 800471e:	2100      	movs	r1, #0
 8004720:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	e000      	b.n	8004728 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004726:	2302      	movs	r3, #2
  }
}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b004      	add	sp, #16
 800472e:	bd80      	pop	{r7, pc}
 8004730:	fffff0ff 	.word	0xfffff0ff

08004734 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8004738:	4b04      	ldr	r3, [pc, #16]	@ (800474c <HAL_PWR_EnableBkUpAccess+0x18>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	4b03      	ldr	r3, [pc, #12]	@ (800474c <HAL_PWR_EnableBkUpAccess+0x18>)
 800473e:	2180      	movs	r1, #128	@ 0x80
 8004740:	0049      	lsls	r1, r1, #1
 8004742:	430a      	orrs	r2, r1
 8004744:	601a      	str	r2, [r3, #0]
}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40007000 	.word	0x40007000

08004750 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8004758:	4b2b      	ldr	r3, [pc, #172]	@ (8004808 <HAL_PWR_ConfigPVD+0xb8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	22e0      	movs	r2, #224	@ 0xe0
 800475e:	4393      	bics	r3, r2
 8004760:	0019      	movs	r1, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b28      	ldr	r3, [pc, #160]	@ (8004808 <HAL_PWR_ConfigPVD+0xb8>)
 8004768:	430a      	orrs	r2, r1
 800476a:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800476c:	4b27      	ldr	r3, [pc, #156]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	4b26      	ldr	r3, [pc, #152]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 8004772:	4927      	ldr	r1, [pc, #156]	@ (8004810 <HAL_PWR_ConfigPVD+0xc0>)
 8004774:	400a      	ands	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8004778:	4b24      	ldr	r3, [pc, #144]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b23      	ldr	r3, [pc, #140]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 800477e:	4924      	ldr	r1, [pc, #144]	@ (8004810 <HAL_PWR_ConfigPVD+0xc0>)
 8004780:	400a      	ands	r2, r1
 8004782:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8004784:	4b21      	ldr	r3, [pc, #132]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	4b20      	ldr	r3, [pc, #128]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 800478a:	4921      	ldr	r1, [pc, #132]	@ (8004810 <HAL_PWR_ConfigPVD+0xc0>)
 800478c:	400a      	ands	r2, r1
 800478e:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8004790:	4b1e      	ldr	r3, [pc, #120]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	4b1d      	ldr	r3, [pc, #116]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 8004796:	491e      	ldr	r1, [pc, #120]	@ (8004810 <HAL_PWR_ConfigPVD+0xc0>)
 8004798:	400a      	ands	r2, r1
 800479a:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	2380      	movs	r3, #128	@ 0x80
 80047a2:	025b      	lsls	r3, r3, #9
 80047a4:	4013      	ands	r3, r2
 80047a6:	d006      	beq.n	80047b6 <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80047a8:	4b18      	ldr	r3, [pc, #96]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4b17      	ldr	r3, [pc, #92]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 80047ae:	2180      	movs	r1, #128	@ 0x80
 80047b0:	0249      	lsls	r1, r1, #9
 80047b2:	430a      	orrs	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	2380      	movs	r3, #128	@ 0x80
 80047bc:	029b      	lsls	r3, r3, #10
 80047be:	4013      	ands	r3, r2
 80047c0:	d006      	beq.n	80047d0 <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80047c2:	4b12      	ldr	r3, [pc, #72]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	4b11      	ldr	r3, [pc, #68]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 80047c8:	2180      	movs	r1, #128	@ 0x80
 80047ca:	0249      	lsls	r1, r1, #9
 80047cc:	430a      	orrs	r2, r1
 80047ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	4013      	ands	r3, r2
 80047d8:	d006      	beq.n	80047e8 <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80047da:	4b0c      	ldr	r3, [pc, #48]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 80047e0:	2180      	movs	r1, #128	@ 0x80
 80047e2:	0249      	lsls	r1, r1, #9
 80047e4:	430a      	orrs	r2, r1
 80047e6:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	4013      	ands	r3, r2
 80047f0:	d006      	beq.n	8004800 <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80047f2:	4b06      	ldr	r3, [pc, #24]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	4b05      	ldr	r3, [pc, #20]	@ (800480c <HAL_PWR_ConfigPVD+0xbc>)
 80047f8:	2180      	movs	r1, #128	@ 0x80
 80047fa:	0249      	lsls	r1, r1, #9
 80047fc:	430a      	orrs	r2, r1
 80047fe:	60da      	str	r2, [r3, #12]
  }
}
 8004800:	46c0      	nop			@ (mov r8, r8)
 8004802:	46bd      	mov	sp, r7
 8004804:	b002      	add	sp, #8
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40007000 	.word	0x40007000
 800480c:	40010400 	.word	0x40010400
 8004810:	fffeffff 	.word	0xfffeffff

08004814 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8004818:	4b04      	ldr	r3, [pc, #16]	@ (800482c <HAL_PWR_EnablePVD+0x18>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b03      	ldr	r3, [pc, #12]	@ (800482c <HAL_PWR_EnablePVD+0x18>)
 800481e:	2110      	movs	r1, #16
 8004820:	430a      	orrs	r2, r1
 8004822:	601a      	str	r2, [r3, #0]
}
 8004824:	46c0      	nop			@ (mov r8, r8)
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	46c0      	nop			@ (mov r8, r8)
 800482c:	40007000 	.word	0x40007000

08004830 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	000a      	movs	r2, r1
 800483a:	1cfb      	adds	r3, r7, #3
 800483c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004842:	4b25      	ldr	r3, [pc, #148]	@ (80048d8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	2380      	movs	r3, #128	@ 0x80
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4013      	ands	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800484e:	4b23      	ldr	r3, [pc, #140]	@ (80048dc <HAL_PWR_EnterSTOPMode+0xac>)
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	2201      	movs	r2, #1
 8004854:	4013      	ands	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_PWR_EnterSTOPMode+0x40>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004864:	4b1c      	ldr	r3, [pc, #112]	@ (80048d8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b1b      	ldr	r3, [pc, #108]	@ (80048d8 <HAL_PWR_EnterSTOPMode+0xa8>)
 800486a:	491d      	ldr	r1, [pc, #116]	@ (80048e0 <HAL_PWR_EnterSTOPMode+0xb0>)
 800486c:	400a      	ands	r2, r1
 800486e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004870:	4b19      	ldr	r3, [pc, #100]	@ (80048d8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2203      	movs	r2, #3
 800487a:	4393      	bics	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8004886:	4b14      	ldr	r3, [pc, #80]	@ (80048d8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800488c:	4b15      	ldr	r3, [pc, #84]	@ (80048e4 <HAL_PWR_EnterSTOPMode+0xb4>)
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	4b14      	ldr	r3, [pc, #80]	@ (80048e4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004892:	2104      	movs	r1, #4
 8004894:	430a      	orrs	r2, r1
 8004896:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004898:	1cfb      	adds	r3, r7, #3
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80048a0:	bf30      	wfi
 80048a2:	e002      	b.n	80048aa <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80048a4:	bf40      	sev
    __WFE();
 80048a6:	bf20      	wfe
    __WFE();
 80048a8:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80048aa:	4b0e      	ldr	r3, [pc, #56]	@ (80048e4 <HAL_PWR_EnterSTOPMode+0xb4>)
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	4b0d      	ldr	r3, [pc, #52]	@ (80048e4 <HAL_PWR_EnterSTOPMode+0xb4>)
 80048b0:	2104      	movs	r1, #4
 80048b2:	438a      	bics	r2, r1
 80048b4:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d009      	beq.n	80048d0 <HAL_PWR_EnterSTOPMode+0xa0>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d006      	beq.n	80048d0 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80048c2:	4b05      	ldr	r3, [pc, #20]	@ (80048d8 <HAL_PWR_EnterSTOPMode+0xa8>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4b04      	ldr	r3, [pc, #16]	@ (80048d8 <HAL_PWR_EnterSTOPMode+0xa8>)
 80048c8:	2180      	movs	r1, #128	@ 0x80
 80048ca:	0089      	lsls	r1, r1, #2
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
  }
}
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b006      	add	sp, #24
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40007000 	.word	0x40007000
 80048dc:	40010000 	.word	0x40010000
 80048e0:	fffffdff 	.word	0xfffffdff
 80048e4:	e000ed00 	.word	0xe000ed00

080048e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e8:	b5b0      	push	{r4, r5, r7, lr}
 80048ea:	b08a      	sub	sp, #40	@ 0x28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f000 fbbf 	bl	800507a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fc:	4bc9      	ldr	r3, [pc, #804]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	220c      	movs	r2, #12
 8004902:	4013      	ands	r3, r2
 8004904:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004906:	4bc7      	ldr	r3, [pc, #796]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	2380      	movs	r3, #128	@ 0x80
 800490c:	025b      	lsls	r3, r3, #9
 800490e:	4013      	ands	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2201      	movs	r2, #1
 8004918:	4013      	ands	r3, r2
 800491a:	d100      	bne.n	800491e <HAL_RCC_OscConfig+0x36>
 800491c:	e07e      	b.n	8004a1c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	2b08      	cmp	r3, #8
 8004922:	d007      	beq.n	8004934 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	2b0c      	cmp	r3, #12
 8004928:	d112      	bne.n	8004950 <HAL_RCC_OscConfig+0x68>
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	2380      	movs	r3, #128	@ 0x80
 800492e:	025b      	lsls	r3, r3, #9
 8004930:	429a      	cmp	r2, r3
 8004932:	d10d      	bne.n	8004950 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004934:	4bbb      	ldr	r3, [pc, #748]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	2380      	movs	r3, #128	@ 0x80
 800493a:	029b      	lsls	r3, r3, #10
 800493c:	4013      	ands	r3, r2
 800493e:	d100      	bne.n	8004942 <HAL_RCC_OscConfig+0x5a>
 8004940:	e06b      	b.n	8004a1a <HAL_RCC_OscConfig+0x132>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d167      	bne.n	8004a1a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f000 fb95 	bl	800507a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	2380      	movs	r3, #128	@ 0x80
 8004956:	025b      	lsls	r3, r3, #9
 8004958:	429a      	cmp	r2, r3
 800495a:	d107      	bne.n	800496c <HAL_RCC_OscConfig+0x84>
 800495c:	4bb1      	ldr	r3, [pc, #708]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	4bb0      	ldr	r3, [pc, #704]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004962:	2180      	movs	r1, #128	@ 0x80
 8004964:	0249      	lsls	r1, r1, #9
 8004966:	430a      	orrs	r2, r1
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e027      	b.n	80049bc <HAL_RCC_OscConfig+0xd4>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	23a0      	movs	r3, #160	@ 0xa0
 8004972:	02db      	lsls	r3, r3, #11
 8004974:	429a      	cmp	r2, r3
 8004976:	d10e      	bne.n	8004996 <HAL_RCC_OscConfig+0xae>
 8004978:	4baa      	ldr	r3, [pc, #680]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4ba9      	ldr	r3, [pc, #676]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 800497e:	2180      	movs	r1, #128	@ 0x80
 8004980:	02c9      	lsls	r1, r1, #11
 8004982:	430a      	orrs	r2, r1
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	4ba7      	ldr	r3, [pc, #668]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4ba6      	ldr	r3, [pc, #664]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 800498c:	2180      	movs	r1, #128	@ 0x80
 800498e:	0249      	lsls	r1, r1, #9
 8004990:	430a      	orrs	r2, r1
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e012      	b.n	80049bc <HAL_RCC_OscConfig+0xd4>
 8004996:	4ba3      	ldr	r3, [pc, #652]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4ba2      	ldr	r3, [pc, #648]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 800499c:	49a2      	ldr	r1, [pc, #648]	@ (8004c28 <HAL_RCC_OscConfig+0x340>)
 800499e:	400a      	ands	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	4ba0      	ldr	r3, [pc, #640]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	2380      	movs	r3, #128	@ 0x80
 80049a8:	025b      	lsls	r3, r3, #9
 80049aa:	4013      	ands	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4b9c      	ldr	r3, [pc, #624]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b9b      	ldr	r3, [pc, #620]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 80049b6:	499d      	ldr	r1, [pc, #628]	@ (8004c2c <HAL_RCC_OscConfig+0x344>)
 80049b8:	400a      	ands	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d015      	beq.n	80049f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fd fef8 	bl	80027b8 <HAL_GetTick>
 80049c8:	0003      	movs	r3, r0
 80049ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049cc:	e009      	b.n	80049e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ce:	f7fd fef3 	bl	80027b8 <HAL_GetTick>
 80049d2:	0002      	movs	r2, r0
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b64      	cmp	r3, #100	@ 0x64
 80049da:	d902      	bls.n	80049e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	f000 fb4c 	bl	800507a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049e2:	4b90      	ldr	r3, [pc, #576]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	2380      	movs	r3, #128	@ 0x80
 80049e8:	029b      	lsls	r3, r3, #10
 80049ea:	4013      	ands	r3, r2
 80049ec:	d0ef      	beq.n	80049ce <HAL_RCC_OscConfig+0xe6>
 80049ee:	e015      	b.n	8004a1c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f0:	f7fd fee2 	bl	80027b8 <HAL_GetTick>
 80049f4:	0003      	movs	r3, r0
 80049f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049fa:	f7fd fedd 	bl	80027b8 <HAL_GetTick>
 80049fe:	0002      	movs	r2, r0
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b64      	cmp	r3, #100	@ 0x64
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e336      	b.n	800507a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a0c:	4b85      	ldr	r3, [pc, #532]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	2380      	movs	r3, #128	@ 0x80
 8004a12:	029b      	lsls	r3, r3, #10
 8004a14:	4013      	ands	r3, r2
 8004a16:	d1f0      	bne.n	80049fa <HAL_RCC_OscConfig+0x112>
 8004a18:	e000      	b.n	8004a1c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a1a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2202      	movs	r2, #2
 8004a22:	4013      	ands	r3, r2
 8004a24:	d100      	bne.n	8004a28 <HAL_RCC_OscConfig+0x140>
 8004a26:	e099      	b.n	8004b5c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	2220      	movs	r2, #32
 8004a32:	4013      	ands	r3, r2
 8004a34:	d009      	beq.n	8004a4a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004a36:	4b7b      	ldr	r3, [pc, #492]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4b7a      	ldr	r3, [pc, #488]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004a3c:	2120      	movs	r1, #32
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	2220      	movs	r2, #32
 8004a46:	4393      	bics	r3, r2
 8004a48:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d005      	beq.n	8004a5c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b0c      	cmp	r3, #12
 8004a54:	d13e      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x1ec>
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d13b      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004a5c:	4b71      	ldr	r3, [pc, #452]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2204      	movs	r2, #4
 8004a62:	4013      	ands	r3, r2
 8004a64:	d004      	beq.n	8004a70 <HAL_RCC_OscConfig+0x188>
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e304      	b.n	800507a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a70:	4b6c      	ldr	r3, [pc, #432]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	4a6e      	ldr	r2, [pc, #440]	@ (8004c30 <HAL_RCC_OscConfig+0x348>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	021a      	lsls	r2, r3, #8
 8004a80:	4b68      	ldr	r3, [pc, #416]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004a86:	4b67      	ldr	r3, [pc, #412]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2209      	movs	r2, #9
 8004a8c:	4393      	bics	r3, r2
 8004a8e:	0019      	movs	r1, r3
 8004a90:	4b64      	ldr	r3, [pc, #400]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a94:	430a      	orrs	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a98:	f000 fc42 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 8004a9c:	0001      	movs	r1, r0
 8004a9e:	4b61      	ldr	r3, [pc, #388]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	091b      	lsrs	r3, r3, #4
 8004aa4:	220f      	movs	r2, #15
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	4a62      	ldr	r2, [pc, #392]	@ (8004c34 <HAL_RCC_OscConfig+0x34c>)
 8004aaa:	5cd3      	ldrb	r3, [r2, r3]
 8004aac:	000a      	movs	r2, r1
 8004aae:	40da      	lsrs	r2, r3
 8004ab0:	4b61      	ldr	r3, [pc, #388]	@ (8004c38 <HAL_RCC_OscConfig+0x350>)
 8004ab2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004ab4:	4b61      	ldr	r3, [pc, #388]	@ (8004c3c <HAL_RCC_OscConfig+0x354>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2513      	movs	r5, #19
 8004aba:	197c      	adds	r4, r7, r5
 8004abc:	0018      	movs	r0, r3
 8004abe:	f7fc fe3d 	bl	800173c <HAL_InitTick>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004ac6:	197b      	adds	r3, r7, r5
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d046      	beq.n	8004b5c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004ace:	197b      	adds	r3, r7, r5
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	e2d2      	b.n	800507a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d027      	beq.n	8004b2a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004ada:	4b52      	ldr	r3, [pc, #328]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2209      	movs	r2, #9
 8004ae0:	4393      	bics	r3, r2
 8004ae2:	0019      	movs	r1, r3
 8004ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aec:	f7fd fe64 	bl	80027b8 <HAL_GetTick>
 8004af0:	0003      	movs	r3, r0
 8004af2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af6:	f7fd fe5f 	bl	80027b8 <HAL_GetTick>
 8004afa:	0002      	movs	r2, r0
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e2b8      	b.n	800507a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b08:	4b46      	ldr	r3, [pc, #280]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d0f1      	beq.n	8004af6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b12:	4b44      	ldr	r3, [pc, #272]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	4a46      	ldr	r2, [pc, #280]	@ (8004c30 <HAL_RCC_OscConfig+0x348>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	0019      	movs	r1, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	021a      	lsls	r2, r3, #8
 8004b22:	4b40      	ldr	r3, [pc, #256]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]
 8004b28:	e018      	b.n	8004b5c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004b30:	2101      	movs	r1, #1
 8004b32:	438a      	bics	r2, r1
 8004b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b36:	f7fd fe3f 	bl	80027b8 <HAL_GetTick>
 8004b3a:	0003      	movs	r3, r0
 8004b3c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b40:	f7fd fe3a 	bl	80027b8 <HAL_GetTick>
 8004b44:	0002      	movs	r2, r0
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e293      	b.n	800507a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b52:	4b34      	ldr	r3, [pc, #208]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2204      	movs	r2, #4
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d1f1      	bne.n	8004b40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2210      	movs	r2, #16
 8004b62:	4013      	ands	r3, r2
 8004b64:	d100      	bne.n	8004b68 <HAL_RCC_OscConfig+0x280>
 8004b66:	e0a2      	b.n	8004cae <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d140      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	2380      	movs	r3, #128	@ 0x80
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4013      	ands	r3, r2
 8004b78:	d005      	beq.n	8004b86 <HAL_RCC_OscConfig+0x29e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e279      	b.n	800507a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b86:	4b27      	ldr	r3, [pc, #156]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8004c40 <HAL_RCC_OscConfig+0x358>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	0019      	movs	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b94:	4b23      	ldr	r3, [pc, #140]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b9a:	4b22      	ldr	r3, [pc, #136]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	021b      	lsls	r3, r3, #8
 8004ba0:	0a19      	lsrs	r1, r3, #8
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	061a      	lsls	r2, r3, #24
 8004ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	0b5b      	lsrs	r3, r3, #13
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	2280      	movs	r2, #128	@ 0x80
 8004bb8:	0212      	lsls	r2, r2, #8
 8004bba:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004bbc:	4b19      	ldr	r3, [pc, #100]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	210f      	movs	r1, #15
 8004bc4:	400b      	ands	r3, r1
 8004bc6:	491b      	ldr	r1, [pc, #108]	@ (8004c34 <HAL_RCC_OscConfig+0x34c>)
 8004bc8:	5ccb      	ldrb	r3, [r1, r3]
 8004bca:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c38 <HAL_RCC_OscConfig+0x350>)
 8004bce:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c3c <HAL_RCC_OscConfig+0x354>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2513      	movs	r5, #19
 8004bd6:	197c      	adds	r4, r7, r5
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f7fc fdaf 	bl	800173c <HAL_InitTick>
 8004bde:	0003      	movs	r3, r0
 8004be0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004be2:	197b      	adds	r3, r7, r5
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d061      	beq.n	8004cae <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004bea:	197b      	adds	r3, r7, r5
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	e244      	b.n	800507a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d040      	beq.n	8004c7a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	4b09      	ldr	r3, [pc, #36]	@ (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004bfe:	2180      	movs	r1, #128	@ 0x80
 8004c00:	0049      	lsls	r1, r1, #1
 8004c02:	430a      	orrs	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c06:	f7fd fdd7 	bl	80027b8 <HAL_GetTick>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c0e:	e019      	b.n	8004c44 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c10:	f7fd fdd2 	bl	80027b8 <HAL_GetTick>
 8004c14:	0002      	movs	r2, r0
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d912      	bls.n	8004c44 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e22b      	b.n	800507a <HAL_RCC_OscConfig+0x792>
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	40021000 	.word	0x40021000
 8004c28:	fffeffff 	.word	0xfffeffff
 8004c2c:	fffbffff 	.word	0xfffbffff
 8004c30:	ffffe0ff 	.word	0xffffe0ff
 8004c34:	080092f4 	.word	0x080092f4
 8004c38:	20000004 	.word	0x20000004
 8004c3c:	20000008 	.word	0x20000008
 8004c40:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c44:	4bca      	ldr	r3, [pc, #808]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	2380      	movs	r3, #128	@ 0x80
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d0df      	beq.n	8004c10 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c50:	4bc7      	ldr	r3, [pc, #796]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4ac7      	ldr	r2, [pc, #796]	@ (8004f74 <HAL_RCC_OscConfig+0x68c>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	0019      	movs	r1, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c5e:	4bc4      	ldr	r3, [pc, #784]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004c60:	430a      	orrs	r2, r1
 8004c62:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c64:	4bc2      	ldr	r3, [pc, #776]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	021b      	lsls	r3, r3, #8
 8004c6a:	0a19      	lsrs	r1, r3, #8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	061a      	lsls	r2, r3, #24
 8004c72:	4bbf      	ldr	r3, [pc, #764]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
 8004c78:	e019      	b.n	8004cae <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c7a:	4bbd      	ldr	r3, [pc, #756]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4bbc      	ldr	r3, [pc, #752]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004c80:	49bd      	ldr	r1, [pc, #756]	@ (8004f78 <HAL_RCC_OscConfig+0x690>)
 8004c82:	400a      	ands	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c86:	f7fd fd97 	bl	80027b8 <HAL_GetTick>
 8004c8a:	0003      	movs	r3, r0
 8004c8c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c90:	f7fd fd92 	bl	80027b8 <HAL_GetTick>
 8004c94:	0002      	movs	r2, r0
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e1eb      	b.n	800507a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ca2:	4bb3      	ldr	r3, [pc, #716]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	2380      	movs	r3, #128	@ 0x80
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4013      	ands	r3, r2
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2208      	movs	r2, #8
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d036      	beq.n	8004d26 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d019      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc0:	4bab      	ldr	r3, [pc, #684]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004cc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004cc4:	4baa      	ldr	r3, [pc, #680]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ccc:	f7fd fd74 	bl	80027b8 <HAL_GetTick>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd6:	f7fd fd6f 	bl	80027b8 <HAL_GetTick>
 8004cda:	0002      	movs	r2, r0
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e1c8      	b.n	800507a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ce8:	4ba1      	ldr	r3, [pc, #644]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cec:	2202      	movs	r2, #2
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d0f1      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x3ee>
 8004cf2:	e018      	b.n	8004d26 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf4:	4b9e      	ldr	r3, [pc, #632]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004cf6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004cf8:	4b9d      	ldr	r3, [pc, #628]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	438a      	bics	r2, r1
 8004cfe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d00:	f7fd fd5a 	bl	80027b8 <HAL_GetTick>
 8004d04:	0003      	movs	r3, r0
 8004d06:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d0a:	f7fd fd55 	bl	80027b8 <HAL_GetTick>
 8004d0e:	0002      	movs	r2, r0
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e1ae      	b.n	800507a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d1c:	4b94      	ldr	r3, [pc, #592]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d20:	2202      	movs	r2, #2
 8004d22:	4013      	ands	r3, r2
 8004d24:	d1f1      	bne.n	8004d0a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d100      	bne.n	8004d32 <HAL_RCC_OscConfig+0x44a>
 8004d30:	e0ae      	b.n	8004e90 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d32:	2023      	movs	r0, #35	@ 0x23
 8004d34:	183b      	adds	r3, r7, r0
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004d3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d3e:	2380      	movs	r3, #128	@ 0x80
 8004d40:	055b      	lsls	r3, r3, #21
 8004d42:	4013      	ands	r3, r2
 8004d44:	d109      	bne.n	8004d5a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	4b8a      	ldr	r3, [pc, #552]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004d48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d4a:	4b89      	ldr	r3, [pc, #548]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004d4c:	2180      	movs	r1, #128	@ 0x80
 8004d4e:	0549      	lsls	r1, r1, #21
 8004d50:	430a      	orrs	r2, r1
 8004d52:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004d54:	183b      	adds	r3, r7, r0
 8004d56:	2201      	movs	r2, #1
 8004d58:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5a:	4b88      	ldr	r3, [pc, #544]	@ (8004f7c <HAL_RCC_OscConfig+0x694>)
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	2380      	movs	r3, #128	@ 0x80
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	4013      	ands	r3, r2
 8004d64:	d11a      	bne.n	8004d9c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d66:	4b85      	ldr	r3, [pc, #532]	@ (8004f7c <HAL_RCC_OscConfig+0x694>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b84      	ldr	r3, [pc, #528]	@ (8004f7c <HAL_RCC_OscConfig+0x694>)
 8004d6c:	2180      	movs	r1, #128	@ 0x80
 8004d6e:	0049      	lsls	r1, r1, #1
 8004d70:	430a      	orrs	r2, r1
 8004d72:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d74:	f7fd fd20 	bl	80027b8 <HAL_GetTick>
 8004d78:	0003      	movs	r3, r0
 8004d7a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7e:	f7fd fd1b 	bl	80027b8 <HAL_GetTick>
 8004d82:	0002      	movs	r2, r0
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b64      	cmp	r3, #100	@ 0x64
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e174      	b.n	800507a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d90:	4b7a      	ldr	r3, [pc, #488]	@ (8004f7c <HAL_RCC_OscConfig+0x694>)
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	2380      	movs	r3, #128	@ 0x80
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d0f0      	beq.n	8004d7e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	2380      	movs	r3, #128	@ 0x80
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d107      	bne.n	8004db8 <HAL_RCC_OscConfig+0x4d0>
 8004da8:	4b71      	ldr	r3, [pc, #452]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004daa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dac:	4b70      	ldr	r3, [pc, #448]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004dae:	2180      	movs	r1, #128	@ 0x80
 8004db0:	0049      	lsls	r1, r1, #1
 8004db2:	430a      	orrs	r2, r1
 8004db4:	651a      	str	r2, [r3, #80]	@ 0x50
 8004db6:	e031      	b.n	8004e1c <HAL_RCC_OscConfig+0x534>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10c      	bne.n	8004dda <HAL_RCC_OscConfig+0x4f2>
 8004dc0:	4b6b      	ldr	r3, [pc, #428]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004dc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dc4:	4b6a      	ldr	r3, [pc, #424]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004dc6:	496c      	ldr	r1, [pc, #432]	@ (8004f78 <HAL_RCC_OscConfig+0x690>)
 8004dc8:	400a      	ands	r2, r1
 8004dca:	651a      	str	r2, [r3, #80]	@ 0x50
 8004dcc:	4b68      	ldr	r3, [pc, #416]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004dce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dd0:	4b67      	ldr	r3, [pc, #412]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004dd2:	496b      	ldr	r1, [pc, #428]	@ (8004f80 <HAL_RCC_OscConfig+0x698>)
 8004dd4:	400a      	ands	r2, r1
 8004dd6:	651a      	str	r2, [r3, #80]	@ 0x50
 8004dd8:	e020      	b.n	8004e1c <HAL_RCC_OscConfig+0x534>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	23a0      	movs	r3, #160	@ 0xa0
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d10e      	bne.n	8004e04 <HAL_RCC_OscConfig+0x51c>
 8004de6:	4b62      	ldr	r3, [pc, #392]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004de8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dea:	4b61      	ldr	r3, [pc, #388]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004dec:	2180      	movs	r1, #128	@ 0x80
 8004dee:	00c9      	lsls	r1, r1, #3
 8004df0:	430a      	orrs	r2, r1
 8004df2:	651a      	str	r2, [r3, #80]	@ 0x50
 8004df4:	4b5e      	ldr	r3, [pc, #376]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004df6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004df8:	4b5d      	ldr	r3, [pc, #372]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004dfa:	2180      	movs	r1, #128	@ 0x80
 8004dfc:	0049      	lsls	r1, r1, #1
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e02:	e00b      	b.n	8004e1c <HAL_RCC_OscConfig+0x534>
 8004e04:	4b5a      	ldr	r3, [pc, #360]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004e06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e08:	4b59      	ldr	r3, [pc, #356]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004e0a:	495b      	ldr	r1, [pc, #364]	@ (8004f78 <HAL_RCC_OscConfig+0x690>)
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e10:	4b57      	ldr	r3, [pc, #348]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004e12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e14:	4b56      	ldr	r3, [pc, #344]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004e16:	495a      	ldr	r1, [pc, #360]	@ (8004f80 <HAL_RCC_OscConfig+0x698>)
 8004e18:	400a      	ands	r2, r1
 8004e1a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d015      	beq.n	8004e50 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e24:	f7fd fcc8 	bl	80027b8 <HAL_GetTick>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e2c:	e009      	b.n	8004e42 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2e:	f7fd fcc3 	bl	80027b8 <HAL_GetTick>
 8004e32:	0002      	movs	r2, r0
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	4a52      	ldr	r2, [pc, #328]	@ (8004f84 <HAL_RCC_OscConfig+0x69c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e11b      	b.n	800507a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e42:	4b4b      	ldr	r3, [pc, #300]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004e44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e46:	2380      	movs	r3, #128	@ 0x80
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d0ef      	beq.n	8004e2e <HAL_RCC_OscConfig+0x546>
 8004e4e:	e014      	b.n	8004e7a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e50:	f7fd fcb2 	bl	80027b8 <HAL_GetTick>
 8004e54:	0003      	movs	r3, r0
 8004e56:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e58:	e009      	b.n	8004e6e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e5a:	f7fd fcad 	bl	80027b8 <HAL_GetTick>
 8004e5e:	0002      	movs	r2, r0
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	4a47      	ldr	r2, [pc, #284]	@ (8004f84 <HAL_RCC_OscConfig+0x69c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e105      	b.n	800507a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e6e:	4b40      	ldr	r3, [pc, #256]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004e70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e72:	2380      	movs	r3, #128	@ 0x80
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4013      	ands	r3, r2
 8004e78:	d1ef      	bne.n	8004e5a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e7a:	2323      	movs	r3, #35	@ 0x23
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d105      	bne.n	8004e90 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e84:	4b3a      	ldr	r3, [pc, #232]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004e86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e88:	4b39      	ldr	r3, [pc, #228]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004e8a:	493f      	ldr	r1, [pc, #252]	@ (8004f88 <HAL_RCC_OscConfig+0x6a0>)
 8004e8c:	400a      	ands	r2, r1
 8004e8e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2220      	movs	r2, #32
 8004e96:	4013      	ands	r3, r2
 8004e98:	d049      	beq.n	8004f2e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d026      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004ea2:	4b33      	ldr	r3, [pc, #204]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	4b32      	ldr	r3, [pc, #200]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	609a      	str	r2, [r3, #8]
 8004eae:	4b30      	ldr	r3, [pc, #192]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004eba:	4b34      	ldr	r3, [pc, #208]	@ (8004f8c <HAL_RCC_OscConfig+0x6a4>)
 8004ebc:	6a1a      	ldr	r2, [r3, #32]
 8004ebe:	4b33      	ldr	r3, [pc, #204]	@ (8004f8c <HAL_RCC_OscConfig+0x6a4>)
 8004ec0:	2180      	movs	r1, #128	@ 0x80
 8004ec2:	0189      	lsls	r1, r1, #6
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec8:	f7fd fc76 	bl	80027b8 <HAL_GetTick>
 8004ecc:	0003      	movs	r3, r0
 8004ece:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ed2:	f7fd fc71 	bl	80027b8 <HAL_GetTick>
 8004ed6:	0002      	movs	r2, r0
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e0ca      	b.n	800507a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ee4:	4b22      	ldr	r3, [pc, #136]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	4013      	ands	r3, r2
 8004eec:	d0f1      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x5ea>
 8004eee:	e01e      	b.n	8004f2e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	438a      	bics	r2, r1
 8004efa:	609a      	str	r2, [r3, #8]
 8004efc:	4b23      	ldr	r3, [pc, #140]	@ (8004f8c <HAL_RCC_OscConfig+0x6a4>)
 8004efe:	6a1a      	ldr	r2, [r3, #32]
 8004f00:	4b22      	ldr	r3, [pc, #136]	@ (8004f8c <HAL_RCC_OscConfig+0x6a4>)
 8004f02:	4923      	ldr	r1, [pc, #140]	@ (8004f90 <HAL_RCC_OscConfig+0x6a8>)
 8004f04:	400a      	ands	r2, r1
 8004f06:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f08:	f7fd fc56 	bl	80027b8 <HAL_GetTick>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f12:	f7fd fc51 	bl	80027b8 <HAL_GetTick>
 8004f16:	0002      	movs	r2, r0
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e0aa      	b.n	800507a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f24:	4b12      	ldr	r3, [pc, #72]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d1f1      	bne.n	8004f12 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d100      	bne.n	8004f38 <HAL_RCC_OscConfig+0x650>
 8004f36:	e09f      	b.n	8005078 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	2b0c      	cmp	r3, #12
 8004f3c:	d100      	bne.n	8004f40 <HAL_RCC_OscConfig+0x658>
 8004f3e:	e078      	b.n	8005032 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d159      	bne.n	8004ffc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f48:	4b09      	ldr	r3, [pc, #36]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4b08      	ldr	r3, [pc, #32]	@ (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004f4e:	4911      	ldr	r1, [pc, #68]	@ (8004f94 <HAL_RCC_OscConfig+0x6ac>)
 8004f50:	400a      	ands	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f54:	f7fd fc30 	bl	80027b8 <HAL_GetTick>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f5c:	e01c      	b.n	8004f98 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f5e:	f7fd fc2b 	bl	80027b8 <HAL_GetTick>
 8004f62:	0002      	movs	r2, r0
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d915      	bls.n	8004f98 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e084      	b.n	800507a <HAL_RCC_OscConfig+0x792>
 8004f70:	40021000 	.word	0x40021000
 8004f74:	ffff1fff 	.word	0xffff1fff
 8004f78:	fffffeff 	.word	0xfffffeff
 8004f7c:	40007000 	.word	0x40007000
 8004f80:	fffffbff 	.word	0xfffffbff
 8004f84:	00001388 	.word	0x00001388
 8004f88:	efffffff 	.word	0xefffffff
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	ffffdfff 	.word	0xffffdfff
 8004f94:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f98:	4b3a      	ldr	r3, [pc, #232]	@ (8005084 <HAL_RCC_OscConfig+0x79c>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	2380      	movs	r3, #128	@ 0x80
 8004f9e:	049b      	lsls	r3, r3, #18
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d1dc      	bne.n	8004f5e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fa4:	4b37      	ldr	r3, [pc, #220]	@ (8005084 <HAL_RCC_OscConfig+0x79c>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a37      	ldr	r2, [pc, #220]	@ (8005088 <HAL_RCC_OscConfig+0x7a0>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	0019      	movs	r1, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	4b31      	ldr	r3, [pc, #196]	@ (8005084 <HAL_RCC_OscConfig+0x79c>)
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8005084 <HAL_RCC_OscConfig+0x79c>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8005084 <HAL_RCC_OscConfig+0x79c>)
 8004fca:	2180      	movs	r1, #128	@ 0x80
 8004fcc:	0449      	lsls	r1, r1, #17
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd2:	f7fd fbf1 	bl	80027b8 <HAL_GetTick>
 8004fd6:	0003      	movs	r3, r0
 8004fd8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7fd fbec 	bl	80027b8 <HAL_GetTick>
 8004fe0:	0002      	movs	r2, r0
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e045      	b.n	800507a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004fee:	4b25      	ldr	r3, [pc, #148]	@ (8005084 <HAL_RCC_OscConfig+0x79c>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	2380      	movs	r3, #128	@ 0x80
 8004ff4:	049b      	lsls	r3, r3, #18
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x6f4>
 8004ffa:	e03d      	b.n	8005078 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffc:	4b21      	ldr	r3, [pc, #132]	@ (8005084 <HAL_RCC_OscConfig+0x79c>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	4b20      	ldr	r3, [pc, #128]	@ (8005084 <HAL_RCC_OscConfig+0x79c>)
 8005002:	4922      	ldr	r1, [pc, #136]	@ (800508c <HAL_RCC_OscConfig+0x7a4>)
 8005004:	400a      	ands	r2, r1
 8005006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005008:	f7fd fbd6 	bl	80027b8 <HAL_GetTick>
 800500c:	0003      	movs	r3, r0
 800500e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005012:	f7fd fbd1 	bl	80027b8 <HAL_GetTick>
 8005016:	0002      	movs	r2, r0
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e02a      	b.n	800507a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005024:	4b17      	ldr	r3, [pc, #92]	@ (8005084 <HAL_RCC_OscConfig+0x79c>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	2380      	movs	r3, #128	@ 0x80
 800502a:	049b      	lsls	r3, r3, #18
 800502c:	4013      	ands	r3, r2
 800502e:	d1f0      	bne.n	8005012 <HAL_RCC_OscConfig+0x72a>
 8005030:	e022      	b.n	8005078 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e01d      	b.n	800507a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800503e:	4b11      	ldr	r3, [pc, #68]	@ (8005084 <HAL_RCC_OscConfig+0x79c>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	2380      	movs	r3, #128	@ 0x80
 8005048:	025b      	lsls	r3, r3, #9
 800504a:	401a      	ands	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005050:	429a      	cmp	r2, r3
 8005052:	d10f      	bne.n	8005074 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	23f0      	movs	r3, #240	@ 0xf0
 8005058:	039b      	lsls	r3, r3, #14
 800505a:	401a      	ands	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d107      	bne.n	8005074 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	23c0      	movs	r3, #192	@ 0xc0
 8005068:	041b      	lsls	r3, r3, #16
 800506a:	401a      	ands	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	0018      	movs	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	b00a      	add	sp, #40	@ 0x28
 8005080:	bdb0      	pop	{r4, r5, r7, pc}
 8005082:	46c0      	nop			@ (mov r8, r8)
 8005084:	40021000 	.word	0x40021000
 8005088:	ff02ffff 	.word	0xff02ffff
 800508c:	feffffff 	.word	0xfeffffff

08005090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005090:	b5b0      	push	{r4, r5, r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e128      	b.n	80052f6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050a4:	4b96      	ldr	r3, [pc, #600]	@ (8005300 <HAL_RCC_ClockConfig+0x270>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2201      	movs	r2, #1
 80050aa:	4013      	ands	r3, r2
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d91e      	bls.n	80050f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b2:	4b93      	ldr	r3, [pc, #588]	@ (8005300 <HAL_RCC_ClockConfig+0x270>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2201      	movs	r2, #1
 80050b8:	4393      	bics	r3, r2
 80050ba:	0019      	movs	r1, r3
 80050bc:	4b90      	ldr	r3, [pc, #576]	@ (8005300 <HAL_RCC_ClockConfig+0x270>)
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050c4:	f7fd fb78 	bl	80027b8 <HAL_GetTick>
 80050c8:	0003      	movs	r3, r0
 80050ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050cc:	e009      	b.n	80050e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ce:	f7fd fb73 	bl	80027b8 <HAL_GetTick>
 80050d2:	0002      	movs	r2, r0
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	4a8a      	ldr	r2, [pc, #552]	@ (8005304 <HAL_RCC_ClockConfig+0x274>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e109      	b.n	80052f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e2:	4b87      	ldr	r3, [pc, #540]	@ (8005300 <HAL_RCC_ClockConfig+0x270>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2201      	movs	r2, #1
 80050e8:	4013      	ands	r3, r2
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d1ee      	bne.n	80050ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2202      	movs	r2, #2
 80050f6:	4013      	ands	r3, r2
 80050f8:	d009      	beq.n	800510e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050fa:	4b83      	ldr	r3, [pc, #524]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	22f0      	movs	r2, #240	@ 0xf0
 8005100:	4393      	bics	r3, r2
 8005102:	0019      	movs	r1, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	4b7f      	ldr	r3, [pc, #508]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 800510a:	430a      	orrs	r2, r1
 800510c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2201      	movs	r2, #1
 8005114:	4013      	ands	r3, r2
 8005116:	d100      	bne.n	800511a <HAL_RCC_ClockConfig+0x8a>
 8005118:	e089      	b.n	800522e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d107      	bne.n	8005132 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005122:	4b79      	ldr	r3, [pc, #484]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	2380      	movs	r3, #128	@ 0x80
 8005128:	029b      	lsls	r3, r3, #10
 800512a:	4013      	ands	r3, r2
 800512c:	d120      	bne.n	8005170 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e0e1      	b.n	80052f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b03      	cmp	r3, #3
 8005138:	d107      	bne.n	800514a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800513a:	4b73      	ldr	r3, [pc, #460]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	2380      	movs	r3, #128	@ 0x80
 8005140:	049b      	lsls	r3, r3, #18
 8005142:	4013      	ands	r3, r2
 8005144:	d114      	bne.n	8005170 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e0d5      	b.n	80052f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d106      	bne.n	8005160 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005152:	4b6d      	ldr	r3, [pc, #436]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2204      	movs	r2, #4
 8005158:	4013      	ands	r3, r2
 800515a:	d109      	bne.n	8005170 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0ca      	b.n	80052f6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005160:	4b69      	ldr	r3, [pc, #420]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	2380      	movs	r3, #128	@ 0x80
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4013      	ands	r3, r2
 800516a:	d101      	bne.n	8005170 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0c2      	b.n	80052f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005170:	4b65      	ldr	r3, [pc, #404]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2203      	movs	r2, #3
 8005176:	4393      	bics	r3, r2
 8005178:	0019      	movs	r1, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	4b62      	ldr	r3, [pc, #392]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 8005180:	430a      	orrs	r2, r1
 8005182:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005184:	f7fd fb18 	bl	80027b8 <HAL_GetTick>
 8005188:	0003      	movs	r3, r0
 800518a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d111      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005194:	e009      	b.n	80051aa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005196:	f7fd fb0f 	bl	80027b8 <HAL_GetTick>
 800519a:	0002      	movs	r2, r0
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	4a58      	ldr	r2, [pc, #352]	@ (8005304 <HAL_RCC_ClockConfig+0x274>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e0a5      	b.n	80052f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80051aa:	4b57      	ldr	r3, [pc, #348]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	220c      	movs	r2, #12
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d1ef      	bne.n	8005196 <HAL_RCC_ClockConfig+0x106>
 80051b6:	e03a      	b.n	800522e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d111      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051c0:	e009      	b.n	80051d6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c2:	f7fd faf9 	bl	80027b8 <HAL_GetTick>
 80051c6:	0002      	movs	r2, r0
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	4a4d      	ldr	r2, [pc, #308]	@ (8005304 <HAL_RCC_ClockConfig+0x274>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e08f      	b.n	80052f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051d6:	4b4c      	ldr	r3, [pc, #304]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	220c      	movs	r2, #12
 80051dc:	4013      	ands	r3, r2
 80051de:	2b0c      	cmp	r3, #12
 80051e0:	d1ef      	bne.n	80051c2 <HAL_RCC_ClockConfig+0x132>
 80051e2:	e024      	b.n	800522e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d11b      	bne.n	8005224 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051ec:	e009      	b.n	8005202 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ee:	f7fd fae3 	bl	80027b8 <HAL_GetTick>
 80051f2:	0002      	movs	r2, r0
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	4a42      	ldr	r2, [pc, #264]	@ (8005304 <HAL_RCC_ClockConfig+0x274>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e079      	b.n	80052f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005202:	4b41      	ldr	r3, [pc, #260]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	220c      	movs	r2, #12
 8005208:	4013      	ands	r3, r2
 800520a:	2b04      	cmp	r3, #4
 800520c:	d1ef      	bne.n	80051ee <HAL_RCC_ClockConfig+0x15e>
 800520e:	e00e      	b.n	800522e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005210:	f7fd fad2 	bl	80027b8 <HAL_GetTick>
 8005214:	0002      	movs	r2, r0
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	4a3a      	ldr	r2, [pc, #232]	@ (8005304 <HAL_RCC_ClockConfig+0x274>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e068      	b.n	80052f6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005224:	4b38      	ldr	r3, [pc, #224]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	220c      	movs	r2, #12
 800522a:	4013      	ands	r3, r2
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800522e:	4b34      	ldr	r3, [pc, #208]	@ (8005300 <HAL_RCC_ClockConfig+0x270>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2201      	movs	r2, #1
 8005234:	4013      	ands	r3, r2
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d21e      	bcs.n	800527a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523c:	4b30      	ldr	r3, [pc, #192]	@ (8005300 <HAL_RCC_ClockConfig+0x270>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2201      	movs	r2, #1
 8005242:	4393      	bics	r3, r2
 8005244:	0019      	movs	r1, r3
 8005246:	4b2e      	ldr	r3, [pc, #184]	@ (8005300 <HAL_RCC_ClockConfig+0x270>)
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800524e:	f7fd fab3 	bl	80027b8 <HAL_GetTick>
 8005252:	0003      	movs	r3, r0
 8005254:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005256:	e009      	b.n	800526c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005258:	f7fd faae 	bl	80027b8 <HAL_GetTick>
 800525c:	0002      	movs	r2, r0
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	4a28      	ldr	r2, [pc, #160]	@ (8005304 <HAL_RCC_ClockConfig+0x274>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d901      	bls.n	800526c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e044      	b.n	80052f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800526c:	4b24      	ldr	r3, [pc, #144]	@ (8005300 <HAL_RCC_ClockConfig+0x270>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2201      	movs	r2, #1
 8005272:	4013      	ands	r3, r2
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d1ee      	bne.n	8005258 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2204      	movs	r2, #4
 8005280:	4013      	ands	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005284:	4b20      	ldr	r3, [pc, #128]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	4a20      	ldr	r2, [pc, #128]	@ (800530c <HAL_RCC_ClockConfig+0x27c>)
 800528a:	4013      	ands	r3, r2
 800528c:	0019      	movs	r1, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	4b1d      	ldr	r3, [pc, #116]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 8005294:	430a      	orrs	r2, r1
 8005296:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2208      	movs	r2, #8
 800529e:	4013      	ands	r3, r2
 80052a0:	d00a      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052a2:	4b19      	ldr	r3, [pc, #100]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005310 <HAL_RCC_ClockConfig+0x280>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	0019      	movs	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	00da      	lsls	r2, r3, #3
 80052b2:	4b15      	ldr	r3, [pc, #84]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 80052b4:	430a      	orrs	r2, r1
 80052b6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052b8:	f000 f832 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 80052bc:	0001      	movs	r1, r0
 80052be:	4b12      	ldr	r3, [pc, #72]	@ (8005308 <HAL_RCC_ClockConfig+0x278>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	091b      	lsrs	r3, r3, #4
 80052c4:	220f      	movs	r2, #15
 80052c6:	4013      	ands	r3, r2
 80052c8:	4a12      	ldr	r2, [pc, #72]	@ (8005314 <HAL_RCC_ClockConfig+0x284>)
 80052ca:	5cd3      	ldrb	r3, [r2, r3]
 80052cc:	000a      	movs	r2, r1
 80052ce:	40da      	lsrs	r2, r3
 80052d0:	4b11      	ldr	r3, [pc, #68]	@ (8005318 <HAL_RCC_ClockConfig+0x288>)
 80052d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052d4:	4b11      	ldr	r3, [pc, #68]	@ (800531c <HAL_RCC_ClockConfig+0x28c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	250b      	movs	r5, #11
 80052da:	197c      	adds	r4, r7, r5
 80052dc:	0018      	movs	r0, r3
 80052de:	f7fc fa2d 	bl	800173c <HAL_InitTick>
 80052e2:	0003      	movs	r3, r0
 80052e4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80052e6:	197b      	adds	r3, r7, r5
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80052ee:	197b      	adds	r3, r7, r5
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	e000      	b.n	80052f6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	0018      	movs	r0, r3
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b004      	add	sp, #16
 80052fc:	bdb0      	pop	{r4, r5, r7, pc}
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	40022000 	.word	0x40022000
 8005304:	00001388 	.word	0x00001388
 8005308:	40021000 	.word	0x40021000
 800530c:	fffff8ff 	.word	0xfffff8ff
 8005310:	ffffc7ff 	.word	0xffffc7ff
 8005314:	080092f4 	.word	0x080092f4
 8005318:	20000004 	.word	0x20000004
 800531c:	20000008 	.word	0x20000008

08005320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005326:	4b3c      	ldr	r3, [pc, #240]	@ (8005418 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	220c      	movs	r2, #12
 8005330:	4013      	ands	r3, r2
 8005332:	2b0c      	cmp	r3, #12
 8005334:	d013      	beq.n	800535e <HAL_RCC_GetSysClockFreq+0x3e>
 8005336:	d85c      	bhi.n	80053f2 <HAL_RCC_GetSysClockFreq+0xd2>
 8005338:	2b04      	cmp	r3, #4
 800533a:	d002      	beq.n	8005342 <HAL_RCC_GetSysClockFreq+0x22>
 800533c:	2b08      	cmp	r3, #8
 800533e:	d00b      	beq.n	8005358 <HAL_RCC_GetSysClockFreq+0x38>
 8005340:	e057      	b.n	80053f2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005342:	4b35      	ldr	r3, [pc, #212]	@ (8005418 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2210      	movs	r2, #16
 8005348:	4013      	ands	r3, r2
 800534a:	d002      	beq.n	8005352 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800534c:	4b33      	ldr	r3, [pc, #204]	@ (800541c <HAL_RCC_GetSysClockFreq+0xfc>)
 800534e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005350:	e05d      	b.n	800540e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8005352:	4b33      	ldr	r3, [pc, #204]	@ (8005420 <HAL_RCC_GetSysClockFreq+0x100>)
 8005354:	613b      	str	r3, [r7, #16]
      break;
 8005356:	e05a      	b.n	800540e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005358:	4b32      	ldr	r3, [pc, #200]	@ (8005424 <HAL_RCC_GetSysClockFreq+0x104>)
 800535a:	613b      	str	r3, [r7, #16]
      break;
 800535c:	e057      	b.n	800540e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	0c9b      	lsrs	r3, r3, #18
 8005362:	220f      	movs	r2, #15
 8005364:	4013      	ands	r3, r2
 8005366:	4a30      	ldr	r2, [pc, #192]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x108>)
 8005368:	5cd3      	ldrb	r3, [r2, r3]
 800536a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	0d9b      	lsrs	r3, r3, #22
 8005370:	2203      	movs	r2, #3
 8005372:	4013      	ands	r3, r2
 8005374:	3301      	adds	r3, #1
 8005376:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005378:	4b27      	ldr	r3, [pc, #156]	@ (8005418 <HAL_RCC_GetSysClockFreq+0xf8>)
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	2380      	movs	r3, #128	@ 0x80
 800537e:	025b      	lsls	r3, r3, #9
 8005380:	4013      	ands	r3, r2
 8005382:	d00f      	beq.n	80053a4 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	000a      	movs	r2, r1
 8005388:	0152      	lsls	r2, r2, #5
 800538a:	1a52      	subs	r2, r2, r1
 800538c:	0193      	lsls	r3, r2, #6
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	185b      	adds	r3, r3, r1
 8005394:	025b      	lsls	r3, r3, #9
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	0018      	movs	r0, r3
 800539a:	f7fa fec7 	bl	800012c <__udivsi3>
 800539e:	0003      	movs	r3, r0
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	e023      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80053a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005418 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2210      	movs	r2, #16
 80053aa:	4013      	ands	r3, r2
 80053ac:	d00f      	beq.n	80053ce <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	000a      	movs	r2, r1
 80053b2:	0152      	lsls	r2, r2, #5
 80053b4:	1a52      	subs	r2, r2, r1
 80053b6:	0193      	lsls	r3, r2, #6
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	185b      	adds	r3, r3, r1
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	0018      	movs	r0, r3
 80053c4:	f7fa feb2 	bl	800012c <__udivsi3>
 80053c8:	0003      	movs	r3, r0
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	e00e      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	000a      	movs	r2, r1
 80053d2:	0152      	lsls	r2, r2, #5
 80053d4:	1a52      	subs	r2, r2, r1
 80053d6:	0193      	lsls	r3, r2, #6
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	185b      	adds	r3, r3, r1
 80053de:	029b      	lsls	r3, r3, #10
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	0018      	movs	r0, r3
 80053e4:	f7fa fea2 	bl	800012c <__udivsi3>
 80053e8:	0003      	movs	r3, r0
 80053ea:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	613b      	str	r3, [r7, #16]
      break;
 80053f0:	e00d      	b.n	800540e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80053f2:	4b09      	ldr	r3, [pc, #36]	@ (8005418 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	0b5b      	lsrs	r3, r3, #13
 80053f8:	2207      	movs	r2, #7
 80053fa:	4013      	ands	r3, r2
 80053fc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	3301      	adds	r3, #1
 8005402:	2280      	movs	r2, #128	@ 0x80
 8005404:	0212      	lsls	r2, r2, #8
 8005406:	409a      	lsls	r2, r3
 8005408:	0013      	movs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
      break;
 800540c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800540e:	693b      	ldr	r3, [r7, #16]
}
 8005410:	0018      	movs	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	b006      	add	sp, #24
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40021000 	.word	0x40021000
 800541c:	003d0900 	.word	0x003d0900
 8005420:	00f42400 	.word	0x00f42400
 8005424:	007a1200 	.word	0x007a1200
 8005428:	0800930c 	.word	0x0800930c

0800542c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005430:	4b02      	ldr	r3, [pc, #8]	@ (800543c <HAL_RCC_GetHCLKFreq+0x10>)
 8005432:	681b      	ldr	r3, [r3, #0]
}
 8005434:	0018      	movs	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	20000004 	.word	0x20000004

08005440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005444:	f7ff fff2 	bl	800542c <HAL_RCC_GetHCLKFreq>
 8005448:	0001      	movs	r1, r0
 800544a:	4b06      	ldr	r3, [pc, #24]	@ (8005464 <HAL_RCC_GetPCLK1Freq+0x24>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	0a1b      	lsrs	r3, r3, #8
 8005450:	2207      	movs	r2, #7
 8005452:	4013      	ands	r3, r2
 8005454:	4a04      	ldr	r2, [pc, #16]	@ (8005468 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005456:	5cd3      	ldrb	r3, [r2, r3]
 8005458:	40d9      	lsrs	r1, r3
 800545a:	000b      	movs	r3, r1
}
 800545c:	0018      	movs	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	40021000 	.word	0x40021000
 8005468:	08009304 	.word	0x08009304

0800546c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005470:	f7ff ffdc 	bl	800542c <HAL_RCC_GetHCLKFreq>
 8005474:	0001      	movs	r1, r0
 8005476:	4b06      	ldr	r3, [pc, #24]	@ (8005490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	0adb      	lsrs	r3, r3, #11
 800547c:	2207      	movs	r2, #7
 800547e:	4013      	ands	r3, r2
 8005480:	4a04      	ldr	r2, [pc, #16]	@ (8005494 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005482:	5cd3      	ldrb	r3, [r2, r3]
 8005484:	40d9      	lsrs	r1, r3
 8005486:	000b      	movs	r3, r1
}
 8005488:	0018      	movs	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	46c0      	nop			@ (mov r8, r8)
 8005490:	40021000 	.word	0x40021000
 8005494:	08009304 	.word	0x08009304

08005498 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	220f      	movs	r2, #15
 80054a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054a8:	4b12      	ldr	r3, [pc, #72]	@ (80054f4 <HAL_RCC_GetClockConfig+0x5c>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2203      	movs	r2, #3
 80054ae:	401a      	ands	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054b4:	4b0f      	ldr	r3, [pc, #60]	@ (80054f4 <HAL_RCC_GetClockConfig+0x5c>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	22f0      	movs	r2, #240	@ 0xf0
 80054ba:	401a      	ands	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054c0:	4b0c      	ldr	r3, [pc, #48]	@ (80054f4 <HAL_RCC_GetClockConfig+0x5c>)
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	23e0      	movs	r3, #224	@ 0xe0
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	401a      	ands	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80054ce:	4b09      	ldr	r3, [pc, #36]	@ (80054f4 <HAL_RCC_GetClockConfig+0x5c>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	08da      	lsrs	r2, r3, #3
 80054d4:	23e0      	movs	r3, #224	@ 0xe0
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	401a      	ands	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80054de:	4b06      	ldr	r3, [pc, #24]	@ (80054f8 <HAL_RCC_GetClockConfig+0x60>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2201      	movs	r2, #1
 80054e4:	401a      	ands	r2, r3
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	601a      	str	r2, [r3, #0]
}
 80054ea:	46c0      	nop			@ (mov r8, r8)
 80054ec:	46bd      	mov	sp, r7
 80054ee:	b002      	add	sp, #8
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	46c0      	nop			@ (mov r8, r8)
 80054f4:	40021000 	.word	0x40021000
 80054f8:	40022000 	.word	0x40022000

080054fc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005504:	2317      	movs	r3, #23
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	2200      	movs	r2, #0
 800550a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2220      	movs	r2, #32
 8005512:	4013      	ands	r3, r2
 8005514:	d106      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	2380      	movs	r3, #128	@ 0x80
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	4013      	ands	r3, r2
 8005520:	d100      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005522:	e104      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005524:	4bb9      	ldr	r3, [pc, #740]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005526:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005528:	2380      	movs	r3, #128	@ 0x80
 800552a:	055b      	lsls	r3, r3, #21
 800552c:	4013      	ands	r3, r2
 800552e:	d10a      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005530:	4bb6      	ldr	r3, [pc, #728]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005532:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005534:	4bb5      	ldr	r3, [pc, #724]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005536:	2180      	movs	r1, #128	@ 0x80
 8005538:	0549      	lsls	r1, r1, #21
 800553a:	430a      	orrs	r2, r1
 800553c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800553e:	2317      	movs	r3, #23
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005546:	4bb2      	ldr	r3, [pc, #712]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	2380      	movs	r3, #128	@ 0x80
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	4013      	ands	r3, r2
 8005550:	d11a      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005552:	4baf      	ldr	r3, [pc, #700]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4bae      	ldr	r3, [pc, #696]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005558:	2180      	movs	r1, #128	@ 0x80
 800555a:	0049      	lsls	r1, r1, #1
 800555c:	430a      	orrs	r2, r1
 800555e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005560:	f7fd f92a 	bl	80027b8 <HAL_GetTick>
 8005564:	0003      	movs	r3, r0
 8005566:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005568:	e008      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800556a:	f7fd f925 	bl	80027b8 <HAL_GetTick>
 800556e:	0002      	movs	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b64      	cmp	r3, #100	@ 0x64
 8005576:	d901      	bls.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e143      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800557c:	4ba4      	ldr	r3, [pc, #656]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	2380      	movs	r3, #128	@ 0x80
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	4013      	ands	r3, r2
 8005586:	d0f0      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005588:	4ba0      	ldr	r3, [pc, #640]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	23c0      	movs	r3, #192	@ 0xc0
 800558e:	039b      	lsls	r3, r3, #14
 8005590:	4013      	ands	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	23c0      	movs	r3, #192	@ 0xc0
 800559a:	039b      	lsls	r3, r3, #14
 800559c:	4013      	ands	r3, r2
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d107      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	23c0      	movs	r3, #192	@ 0xc0
 80055aa:	039b      	lsls	r3, r3, #14
 80055ac:	4013      	ands	r3, r2
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d013      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	23c0      	movs	r3, #192	@ 0xc0
 80055ba:	029b      	lsls	r3, r3, #10
 80055bc:	401a      	ands	r2, r3
 80055be:	23c0      	movs	r3, #192	@ 0xc0
 80055c0:	029b      	lsls	r3, r3, #10
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d10a      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055c6:	4b91      	ldr	r3, [pc, #580]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	2380      	movs	r3, #128	@ 0x80
 80055cc:	029b      	lsls	r3, r3, #10
 80055ce:	401a      	ands	r2, r3
 80055d0:	2380      	movs	r3, #128	@ 0x80
 80055d2:	029b      	lsls	r3, r3, #10
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d101      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e113      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80055dc:	4b8b      	ldr	r3, [pc, #556]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80055de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055e0:	23c0      	movs	r3, #192	@ 0xc0
 80055e2:	029b      	lsls	r3, r3, #10
 80055e4:	4013      	ands	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d049      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	23c0      	movs	r3, #192	@ 0xc0
 80055f4:	029b      	lsls	r3, r3, #10
 80055f6:	4013      	ands	r3, r2
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d004      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2220      	movs	r2, #32
 8005604:	4013      	ands	r3, r2
 8005606:	d10d      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	23c0      	movs	r3, #192	@ 0xc0
 800560e:	029b      	lsls	r3, r3, #10
 8005610:	4013      	ands	r3, r2
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	429a      	cmp	r2, r3
 8005616:	d034      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	2380      	movs	r3, #128	@ 0x80
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	4013      	ands	r3, r2
 8005622:	d02e      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005624:	4b79      	ldr	r3, [pc, #484]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005628:	4a7a      	ldr	r2, [pc, #488]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800562a:	4013      	ands	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800562e:	4b77      	ldr	r3, [pc, #476]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005630:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005632:	4b76      	ldr	r3, [pc, #472]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005634:	2180      	movs	r1, #128	@ 0x80
 8005636:	0309      	lsls	r1, r1, #12
 8005638:	430a      	orrs	r2, r1
 800563a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800563c:	4b73      	ldr	r3, [pc, #460]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800563e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005640:	4b72      	ldr	r3, [pc, #456]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005642:	4975      	ldr	r1, [pc, #468]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005644:	400a      	ands	r2, r1
 8005646:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005648:	4b70      	ldr	r3, [pc, #448]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	2380      	movs	r3, #128	@ 0x80
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	4013      	ands	r3, r2
 8005656:	d014      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005658:	f7fd f8ae 	bl	80027b8 <HAL_GetTick>
 800565c:	0003      	movs	r3, r0
 800565e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005660:	e009      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005662:	f7fd f8a9 	bl	80027b8 <HAL_GetTick>
 8005666:	0002      	movs	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	4a6b      	ldr	r2, [pc, #428]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e0c6      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005676:	4b65      	ldr	r3, [pc, #404]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005678:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800567a:	2380      	movs	r3, #128	@ 0x80
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4013      	ands	r3, r2
 8005680:	d0ef      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	2380      	movs	r3, #128	@ 0x80
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	4013      	ands	r3, r2
 800568c:	d01f      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	23c0      	movs	r3, #192	@ 0xc0
 8005694:	029b      	lsls	r3, r3, #10
 8005696:	401a      	ands	r2, r3
 8005698:	23c0      	movs	r3, #192	@ 0xc0
 800569a:	029b      	lsls	r3, r3, #10
 800569c:	429a      	cmp	r2, r3
 800569e:	d10c      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80056a0:	4b5a      	ldr	r3, [pc, #360]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a5e      	ldr	r2, [pc, #376]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	0019      	movs	r1, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	23c0      	movs	r3, #192	@ 0xc0
 80056b0:	039b      	lsls	r3, r3, #14
 80056b2:	401a      	ands	r2, r3
 80056b4:	4b55      	ldr	r3, [pc, #340]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80056b6:	430a      	orrs	r2, r1
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	4b54      	ldr	r3, [pc, #336]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80056bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	23c0      	movs	r3, #192	@ 0xc0
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	401a      	ands	r2, r3
 80056c8:	4b50      	ldr	r3, [pc, #320]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80056ca:	430a      	orrs	r2, r1
 80056cc:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2220      	movs	r2, #32
 80056d4:	4013      	ands	r3, r2
 80056d6:	d01f      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	23c0      	movs	r3, #192	@ 0xc0
 80056de:	029b      	lsls	r3, r3, #10
 80056e0:	401a      	ands	r2, r3
 80056e2:	23c0      	movs	r3, #192	@ 0xc0
 80056e4:	029b      	lsls	r3, r3, #10
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d10c      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80056ea:	4b48      	ldr	r3, [pc, #288]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4c      	ldr	r2, [pc, #304]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	0019      	movs	r1, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	23c0      	movs	r3, #192	@ 0xc0
 80056fa:	039b      	lsls	r3, r3, #14
 80056fc:	401a      	ands	r2, r3
 80056fe:	4b43      	ldr	r3, [pc, #268]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005700:	430a      	orrs	r2, r1
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	4b41      	ldr	r3, [pc, #260]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005706:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	23c0      	movs	r3, #192	@ 0xc0
 800570e:	029b      	lsls	r3, r3, #10
 8005710:	401a      	ands	r2, r3
 8005712:	4b3e      	ldr	r3, [pc, #248]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005714:	430a      	orrs	r2, r1
 8005716:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005718:	2317      	movs	r3, #23
 800571a:	18fb      	adds	r3, r7, r3
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d105      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005722:	4b3a      	ldr	r3, [pc, #232]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005726:	4b39      	ldr	r3, [pc, #228]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005728:	493e      	ldr	r1, [pc, #248]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800572a:	400a      	ands	r2, r1
 800572c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2201      	movs	r2, #1
 8005734:	4013      	ands	r3, r2
 8005736:	d009      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005738:	4b34      	ldr	r3, [pc, #208]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800573a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800573c:	2203      	movs	r2, #3
 800573e:	4393      	bics	r3, r2
 8005740:	0019      	movs	r1, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	4b31      	ldr	r3, [pc, #196]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005748:	430a      	orrs	r2, r1
 800574a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2202      	movs	r2, #2
 8005752:	4013      	ands	r3, r2
 8005754:	d009      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005756:	4b2d      	ldr	r3, [pc, #180]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800575a:	220c      	movs	r2, #12
 800575c:	4393      	bics	r3, r2
 800575e:	0019      	movs	r1, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	4b29      	ldr	r3, [pc, #164]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005766:	430a      	orrs	r2, r1
 8005768:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2204      	movs	r2, #4
 8005770:	4013      	ands	r3, r2
 8005772:	d009      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005774:	4b25      	ldr	r3, [pc, #148]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005778:	4a2b      	ldr	r2, [pc, #172]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800577a:	4013      	ands	r3, r2
 800577c:	0019      	movs	r1, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	4b22      	ldr	r3, [pc, #136]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005784:	430a      	orrs	r2, r1
 8005786:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2208      	movs	r2, #8
 800578e:	4013      	ands	r3, r2
 8005790:	d009      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005792:	4b1e      	ldr	r3, [pc, #120]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005796:	4a25      	ldr	r2, [pc, #148]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005798:	4013      	ands	r3, r2
 800579a:	0019      	movs	r1, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699a      	ldr	r2, [r3, #24]
 80057a0:	4b1a      	ldr	r3, [pc, #104]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80057a2:	430a      	orrs	r2, r1
 80057a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	2380      	movs	r3, #128	@ 0x80
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	4013      	ands	r3, r2
 80057b0:	d009      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057b2:	4b16      	ldr	r3, [pc, #88]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80057b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057b6:	4a17      	ldr	r2, [pc, #92]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	0019      	movs	r1, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69da      	ldr	r2, [r3, #28]
 80057c0:	4b12      	ldr	r3, [pc, #72]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80057c2:	430a      	orrs	r2, r1
 80057c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2240      	movs	r2, #64	@ 0x40
 80057cc:	4013      	ands	r3, r2
 80057ce:	d009      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057d0:	4b0e      	ldr	r3, [pc, #56]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80057d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057d4:	4a16      	ldr	r2, [pc, #88]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	0019      	movs	r1, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057de:	4b0b      	ldr	r3, [pc, #44]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80057e0:	430a      	orrs	r2, r1
 80057e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2280      	movs	r2, #128	@ 0x80
 80057ea:	4013      	ands	r3, r2
 80057ec:	d009      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80057ee:	4b07      	ldr	r3, [pc, #28]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80057f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057f2:	4a10      	ldr	r2, [pc, #64]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	0019      	movs	r1, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1a      	ldr	r2, [r3, #32]
 80057fc:	4b03      	ldr	r3, [pc, #12]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80057fe:	430a      	orrs	r2, r1
 8005800:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	0018      	movs	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	b006      	add	sp, #24
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40021000 	.word	0x40021000
 8005810:	40007000 	.word	0x40007000
 8005814:	fffcffff 	.word	0xfffcffff
 8005818:	fff7ffff 	.word	0xfff7ffff
 800581c:	00001388 	.word	0x00001388
 8005820:	ffcfffff 	.word	0xffcfffff
 8005824:	efffffff 	.word	0xefffffff
 8005828:	fffff3ff 	.word	0xfffff3ff
 800582c:	ffffcfff 	.word	0xffffcfff
 8005830:	fbffffff 	.word	0xfbffffff
 8005834:	fff3ffff 	.word	0xfff3ffff

08005838 <HAL_RCCEx_EnableLSECSS>:
/**
  * @brief  Enables the LSE Clock Security System.
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSECSSON) ;
 800583c:	4b04      	ldr	r3, [pc, #16]	@ (8005850 <HAL_RCCEx_EnableLSECSS+0x18>)
 800583e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005840:	4b03      	ldr	r3, [pc, #12]	@ (8005850 <HAL_RCCEx_EnableLSECSS+0x18>)
 8005842:	2180      	movs	r1, #128	@ 0x80
 8005844:	0189      	lsls	r1, r1, #6
 8005846:	430a      	orrs	r2, r1
 8005848:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800584a:	46c0      	nop			@ (mov r8, r8)
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40021000 	.word	0x40021000

08005854 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005854:	b5b0      	push	{r4, r5, r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800585c:	230f      	movs	r3, #15
 800585e:	18fb      	adds	r3, r7, r3
 8005860:	2201      	movs	r2, #1
 8005862:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e088      	b.n	8005980 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2221      	movs	r2, #33	@ 0x21
 8005872:	5c9b      	ldrb	r3, [r3, r2]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d107      	bne.n	800588a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	2100      	movs	r1, #0
 8005880:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	0018      	movs	r0, r3
 8005886:	f7fb ff09 	bl	800169c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2221      	movs	r2, #33	@ 0x21
 800588e:	2102      	movs	r1, #2
 8005890:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	2210      	movs	r2, #16
 800589a:	4013      	ands	r3, r2
 800589c:	2b10      	cmp	r3, #16
 800589e:	d05f      	beq.n	8005960 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	22ca      	movs	r2, #202	@ 0xca
 80058a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2253      	movs	r2, #83	@ 0x53
 80058ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80058b0:	250f      	movs	r5, #15
 80058b2:	197c      	adds	r4, r7, r5
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 f890 	bl	80059dc <RTC_EnterInitMode>
 80058bc:	0003      	movs	r3, r0
 80058be:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80058c0:	0028      	movs	r0, r5
 80058c2:	183b      	adds	r3, r7, r0
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d12c      	bne.n	8005924 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	492c      	ldr	r1, [pc, #176]	@ (8005988 <HAL_RTC_Init+0x134>)
 80058d6:	400a      	ands	r2, r1
 80058d8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6899      	ldr	r1, [r3, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	68d2      	ldr	r2, [r2, #12]
 8005900:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6919      	ldr	r1, [r3, #16]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	041a      	lsls	r2, r3, #16
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005916:	183c      	adds	r4, r7, r0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	0018      	movs	r0, r3
 800591c:	f000 f8a2 	bl	8005a64 <RTC_ExitInitMode>
 8005920:	0003      	movs	r3, r0
 8005922:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8005924:	230f      	movs	r3, #15
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d113      	bne.n	8005956 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2103      	movs	r1, #3
 800593a:	438a      	bics	r2, r1
 800593c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	22ff      	movs	r2, #255	@ 0xff
 800595c:	625a      	str	r2, [r3, #36]	@ 0x24
 800595e:	e003      	b.n	8005968 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005960:	230f      	movs	r3, #15
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8005968:	230f      	movs	r3, #15
 800596a:	18fb      	adds	r3, r7, r3
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2221      	movs	r2, #33	@ 0x21
 8005976:	2101      	movs	r1, #1
 8005978:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800597a:	230f      	movs	r3, #15
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	781b      	ldrb	r3, [r3, #0]
}
 8005980:	0018      	movs	r0, r3
 8005982:	46bd      	mov	sp, r7
 8005984:	b004      	add	sp, #16
 8005986:	bdb0      	pop	{r4, r5, r7, pc}
 8005988:	ff8fffbf 	.word	0xff8fffbf

0800598c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a0e      	ldr	r2, [pc, #56]	@ (80059d8 <HAL_RTC_WaitForSynchro+0x4c>)
 800599e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059a0:	f7fc ff0a 	bl	80027b8 <HAL_GetTick>
 80059a4:	0003      	movs	r3, r0
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059a8:	e00a      	b.n	80059c0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059aa:	f7fc ff05 	bl	80027b8 <HAL_GetTick>
 80059ae:	0002      	movs	r2, r0
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	1ad2      	subs	r2, r2, r3
 80059b4:	23fa      	movs	r3, #250	@ 0xfa
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d901      	bls.n	80059c0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e006      	b.n	80059ce <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	4013      	ands	r3, r2
 80059ca:	d0ee      	beq.n	80059aa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	0018      	movs	r0, r3
 80059d0:	46bd      	mov	sp, r7
 80059d2:	b004      	add	sp, #16
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	46c0      	nop			@ (mov r8, r8)
 80059d8:	0001ff5f 	.word	0x0001ff5f

080059dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80059e8:	230f      	movs	r3, #15
 80059ea:	18fb      	adds	r3, r7, r3
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	2240      	movs	r2, #64	@ 0x40
 80059f8:	4013      	ands	r3, r2
 80059fa:	d12c      	bne.n	8005a56 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2180      	movs	r1, #128	@ 0x80
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a0c:	f7fc fed4 	bl	80027b8 <HAL_GetTick>
 8005a10:	0003      	movs	r3, r0
 8005a12:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005a14:	e014      	b.n	8005a40 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a16:	f7fc fecf 	bl	80027b8 <HAL_GetTick>
 8005a1a:	0002      	movs	r2, r0
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	1ad2      	subs	r2, r2, r3
 8005a20:	200f      	movs	r0, #15
 8005a22:	183b      	adds	r3, r7, r0
 8005a24:	1839      	adds	r1, r7, r0
 8005a26:	7809      	ldrb	r1, [r1, #0]
 8005a28:	7019      	strb	r1, [r3, #0]
 8005a2a:	23fa      	movs	r3, #250	@ 0xfa
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d906      	bls.n	8005a40 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2221      	movs	r2, #33	@ 0x21
 8005a36:	2104      	movs	r1, #4
 8005a38:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8005a3a:	183b      	adds	r3, r7, r0
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2240      	movs	r2, #64	@ 0x40
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d104      	bne.n	8005a56 <RTC_EnterInitMode+0x7a>
 8005a4c:	230f      	movs	r3, #15
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d1df      	bne.n	8005a16 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8005a56:	230f      	movs	r3, #15
 8005a58:	18fb      	adds	r3, r7, r3
 8005a5a:	781b      	ldrb	r3, [r3, #0]
}
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	b004      	add	sp, #16
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a64:	b590      	push	{r4, r7, lr}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6c:	240f      	movs	r4, #15
 8005a6e:	193b      	adds	r3, r7, r4
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2180      	movs	r1, #128	@ 0x80
 8005a80:	438a      	bics	r2, r1
 8005a82:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d10c      	bne.n	8005aaa <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	0018      	movs	r0, r3
 8005a94:	f7ff ff7a 	bl	800598c <HAL_RTC_WaitForSynchro>
 8005a98:	1e03      	subs	r3, r0, #0
 8005a9a:	d006      	beq.n	8005aaa <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2221      	movs	r2, #33	@ 0x21
 8005aa0:	2104      	movs	r1, #4
 8005aa2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8005aa4:	193b      	adds	r3, r7, r4
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005aaa:	230f      	movs	r3, #15
 8005aac:	18fb      	adds	r3, r7, r3
 8005aae:	781b      	ldrb	r3, [r3, #0]
}
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	b005      	add	sp, #20
 8005ab6:	bd90      	pop	{r4, r7, pc}

08005ab8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005ac4:	4b64      	ldr	r3, [pc, #400]	@ (8005c58 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	22fa      	movs	r2, #250	@ 0xfa
 8005aca:	01d1      	lsls	r1, r2, #7
 8005acc:	0018      	movs	r0, r3
 8005ace:	f7fa fb2d 	bl	800012c <__udivsi3>
 8005ad2:	0003      	movs	r3, r0
 8005ad4:	001a      	movs	r2, r3
 8005ad6:	0013      	movs	r3, r2
 8005ad8:	015b      	lsls	r3, r3, #5
 8005ada:	1a9b      	subs	r3, r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	189b      	adds	r3, r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	5c9b      	ldrb	r3, [r3, r2]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e0ad      	b.n	8005c4e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	2101      	movs	r1, #1
 8005af8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2221      	movs	r2, #33	@ 0x21
 8005afe:	2102      	movs	r1, #2
 8005b00:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	22ca      	movs	r2, #202	@ 0xca
 8005b08:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2253      	movs	r2, #83	@ 0x53
 8005b10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	2380      	movs	r3, #128	@ 0x80
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d019      	beq.n	8005b54 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10d      	bne.n	8005b48 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	22ff      	movs	r2, #255	@ 0xff
 8005b32:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2221      	movs	r2, #33	@ 0x21
 8005b38:	2103      	movs	r1, #3
 8005b3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	2100      	movs	r1, #0
 8005b42:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e082      	b.n	8005c4e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	2204      	movs	r2, #4
 8005b50:	4013      	ands	r3, r2
 8005b52:	d1e5      	bne.n	8005b20 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	493f      	ldr	r1, [pc, #252]	@ (8005c5c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8005b60:	400a      	ands	r2, r1
 8005b62:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	22ff      	movs	r2, #255	@ 0xff
 8005b6c:	401a      	ands	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	493b      	ldr	r1, [pc, #236]	@ (8005c60 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8005b74:	430a      	orrs	r2, r1
 8005b76:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005b78:	4b37      	ldr	r3, [pc, #220]	@ (8005c58 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	22fa      	movs	r2, #250	@ 0xfa
 8005b7e:	01d1      	lsls	r1, r2, #7
 8005b80:	0018      	movs	r0, r3
 8005b82:	f7fa fad3 	bl	800012c <__udivsi3>
 8005b86:	0003      	movs	r3, r0
 8005b88:	001a      	movs	r2, r3
 8005b8a:	0013      	movs	r3, r2
 8005b8c:	015b      	lsls	r3, r3, #5
 8005b8e:	1a9b      	subs	r3, r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	189b      	adds	r3, r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10d      	bne.n	8005bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	22ff      	movs	r2, #255	@ 0xff
 8005baa:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2221      	movs	r2, #33	@ 0x21
 8005bb0:	2103      	movs	r1, #3
 8005bb2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	2100      	movs	r1, #0
 8005bba:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e046      	b.n	8005c4e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d0e5      	beq.n	8005b98 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2107      	movs	r1, #7
 8005bd8:	438a      	bics	r2, r1
 8005bda:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6899      	ldr	r1, [r3, #8]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c64 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c64 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005bfa:	2180      	movs	r1, #128	@ 0x80
 8005bfc:	0349      	lsls	r1, r1, #13
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005c02:	4b18      	ldr	r3, [pc, #96]	@ (8005c64 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	4b17      	ldr	r3, [pc, #92]	@ (8005c64 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005c08:	2180      	movs	r1, #128	@ 0x80
 8005c0a:	0349      	lsls	r1, r1, #13
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2180      	movs	r1, #128	@ 0x80
 8005c1c:	01c9      	lsls	r1, r1, #7
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2180      	movs	r1, #128	@ 0x80
 8005c2e:	00c9      	lsls	r1, r1, #3
 8005c30:	430a      	orrs	r2, r1
 8005c32:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	22ff      	movs	r2, #255	@ 0xff
 8005c3a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2221      	movs	r2, #33	@ 0x21
 8005c40:	2101      	movs	r1, #1
 8005c42:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	2100      	movs	r1, #0
 8005c4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b006      	add	sp, #24
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	46c0      	nop			@ (mov r8, r8)
 8005c58:	20000004 	.word	0x20000004
 8005c5c:	fffffbff 	.word	0xfffffbff
 8005c60:	fffffb7f 	.word	0xfffffb7f
 8005c64:	40010400 	.word	0x40010400

08005c68 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	5c9b      	ldrb	r3, [r3, r2]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e04e      	b.n	8005d20 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	2101      	movs	r1, #1
 8005c88:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2221      	movs	r2, #33	@ 0x21
 8005c8e:	2102      	movs	r1, #2
 8005c90:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	22ca      	movs	r2, #202	@ 0xca
 8005c98:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2253      	movs	r2, #83	@ 0x53
 8005ca0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	491e      	ldr	r1, [pc, #120]	@ (8005d28 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8005cae:	400a      	ands	r2, r1
 8005cb0:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	491b      	ldr	r1, [pc, #108]	@ (8005d2c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8005cbe:	400a      	ands	r2, r1
 8005cc0:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cc2:	f7fc fd79 	bl	80027b8 <HAL_GetTick>
 8005cc6:	0003      	movs	r3, r0
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005cca:	e016      	b.n	8005cfa <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ccc:	f7fc fd74 	bl	80027b8 <HAL_GetTick>
 8005cd0:	0002      	movs	r2, r0
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1ad2      	subs	r2, r2, r3
 8005cd6:	23fa      	movs	r3, #250	@ 0xfa
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d90d      	bls.n	8005cfa <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	22ff      	movs	r2, #255	@ 0xff
 8005ce4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2221      	movs	r2, #33	@ 0x21
 8005cea:	2103      	movs	r1, #3
 8005cec:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e012      	b.n	8005d20 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	2204      	movs	r2, #4
 8005d02:	4013      	ands	r3, r2
 8005d04:	d0e2      	beq.n	8005ccc <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	22ff      	movs	r2, #255	@ 0xff
 8005d0c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2221      	movs	r2, #33	@ 0x21
 8005d12:	2101      	movs	r1, #1
 8005d14:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	0018      	movs	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b004      	add	sp, #16
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	fffffbff 	.word	0xfffffbff
 8005d2c:	ffffbfff 	.word	0xffffbfff

08005d30 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005d38:	4b13      	ldr	r3, [pc, #76]	@ (8005d88 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8005d3a:	2280      	movs	r2, #128	@ 0x80
 8005d3c:	0352      	lsls	r2, r2, #13
 8005d3e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	2380      	movs	r3, #128	@ 0x80
 8005d48:	01db      	lsls	r3, r3, #7
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	d014      	beq.n	8005d78 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	2380      	movs	r3, #128	@ 0x80
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	4013      	ands	r3, r2
 8005d5a:	d00d      	beq.n	8005d78 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	22ff      	movs	r2, #255	@ 0xff
 8005d64:	401a      	ands	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4908      	ldr	r1, [pc, #32]	@ (8005d8c <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	0018      	movs	r0, r3
 8005d74:	f7fb fafa 	bl	800136c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2221      	movs	r2, #33	@ 0x21
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	5499      	strb	r1, [r3, r2]
}
 8005d80:	46c0      	nop			@ (mov r8, r8)
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b002      	add	sp, #8
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40010400 	.word	0x40010400
 8005d8c:	fffffb7f 	.word	0xfffffb7f

08005d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e032      	b.n	8005e08 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2239      	movs	r2, #57	@ 0x39
 8005da6:	5c9b      	ldrb	r3, [r3, r2]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d107      	bne.n	8005dbe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2238      	movs	r2, #56	@ 0x38
 8005db2:	2100      	movs	r1, #0
 8005db4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	0018      	movs	r0, r3
 8005dba:	f000 f829 	bl	8005e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2239      	movs	r2, #57	@ 0x39
 8005dc2:	2102      	movs	r1, #2
 8005dc4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	0019      	movs	r1, r3
 8005dd0:	0010      	movs	r0, r2
 8005dd2:	f000 f963 	bl	800609c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	223e      	movs	r2, #62	@ 0x3e
 8005dda:	2101      	movs	r1, #1
 8005ddc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	223a      	movs	r2, #58	@ 0x3a
 8005de2:	2101      	movs	r1, #1
 8005de4:	5499      	strb	r1, [r3, r2]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	223b      	movs	r2, #59	@ 0x3b
 8005dea:	2101      	movs	r1, #1
 8005dec:	5499      	strb	r1, [r3, r2]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	223c      	movs	r2, #60	@ 0x3c
 8005df2:	2101      	movs	r1, #1
 8005df4:	5499      	strb	r1, [r3, r2]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	223d      	movs	r2, #61	@ 0x3d
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2239      	movs	r2, #57	@ 0x39
 8005e02:	2101      	movs	r1, #1
 8005e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	0018      	movs	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	b002      	add	sp, #8
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e18:	46c0      	nop			@ (mov r8, r8)
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	b002      	add	sp, #8
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2239      	movs	r2, #57	@ 0x39
 8005e2c:	5c9b      	ldrb	r3, [r3, r2]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d001      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e03b      	b.n	8005eb0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2239      	movs	r2, #57	@ 0x39
 8005e3c:	2102      	movs	r1, #2
 8005e3e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	2380      	movs	r3, #128	@ 0x80
 8005e56:	05db      	lsls	r3, r3, #23
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d00e      	beq.n	8005e7a <HAL_TIM_Base_Start_IT+0x5a>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a15      	ldr	r2, [pc, #84]	@ (8005eb8 <HAL_TIM_Base_Start_IT+0x98>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d009      	beq.n	8005e7a <HAL_TIM_Base_Start_IT+0x5a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a14      	ldr	r2, [pc, #80]	@ (8005ebc <HAL_TIM_Base_Start_IT+0x9c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d004      	beq.n	8005e7a <HAL_TIM_Base_Start_IT+0x5a>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a12      	ldr	r2, [pc, #72]	@ (8005ec0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d111      	bne.n	8005e9e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	2207      	movs	r2, #7
 8005e82:	4013      	ands	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b06      	cmp	r3, #6
 8005e8a:	d010      	beq.n	8005eae <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2101      	movs	r1, #1
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9c:	e007      	b.n	8005eae <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b004      	add	sp, #16
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40000400 	.word	0x40000400
 8005ebc:	40010800 	.word	0x40010800
 8005ec0:	40011400 	.word	0x40011400

08005ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d021      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d01d      	beq.n	8005f28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	4252      	negs	r2, r2
 8005ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	2203      	movs	r2, #3
 8005f04:	4013      	ands	r3, r2
 8005f06:	d004      	beq.n	8005f12 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f000 f8ae 	bl	800606c <HAL_TIM_IC_CaptureCallback>
 8005f10:	e007      	b.n	8005f22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	0018      	movs	r0, r3
 8005f16:	f000 f8a1 	bl	800605c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	f000 f8ad 	bl	800607c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2204      	movs	r2, #4
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	d022      	beq.n	8005f76 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2204      	movs	r2, #4
 8005f34:	4013      	ands	r3, r2
 8005f36:	d01e      	beq.n	8005f76 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2205      	movs	r2, #5
 8005f3e:	4252      	negs	r2, r2
 8005f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2202      	movs	r2, #2
 8005f46:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699a      	ldr	r2, [r3, #24]
 8005f4e:	23c0      	movs	r3, #192	@ 0xc0
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4013      	ands	r3, r2
 8005f54:	d004      	beq.n	8005f60 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f000 f887 	bl	800606c <HAL_TIM_IC_CaptureCallback>
 8005f5e:	e007      	b.n	8005f70 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	0018      	movs	r0, r3
 8005f64:	f000 f87a 	bl	800605c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f000 f886 	bl	800607c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2208      	movs	r2, #8
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d021      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2208      	movs	r2, #8
 8005f82:	4013      	ands	r3, r2
 8005f84:	d01d      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2209      	movs	r2, #9
 8005f8c:	4252      	negs	r2, r2
 8005f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2204      	movs	r2, #4
 8005f94:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	2203      	movs	r2, #3
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	d004      	beq.n	8005fac <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f000 f861 	bl	800606c <HAL_TIM_IC_CaptureCallback>
 8005faa:	e007      	b.n	8005fbc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f000 f854 	bl	800605c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	f000 f860 	bl	800607c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2210      	movs	r2, #16
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	d022      	beq.n	8006010 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2210      	movs	r2, #16
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d01e      	beq.n	8006010 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2211      	movs	r2, #17
 8005fd8:	4252      	negs	r2, r2
 8005fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2208      	movs	r2, #8
 8005fe0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69da      	ldr	r2, [r3, #28]
 8005fe8:	23c0      	movs	r3, #192	@ 0xc0
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4013      	ands	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f000 f83a 	bl	800606c <HAL_TIM_IC_CaptureCallback>
 8005ff8:	e007      	b.n	800600a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f000 f82d 	bl	800605c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	0018      	movs	r0, r3
 8006006:	f000 f839 	bl	800607c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2201      	movs	r2, #1
 8006014:	4013      	ands	r3, r2
 8006016:	d00c      	beq.n	8006032 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	4013      	ands	r3, r2
 800601e:	d008      	beq.n	8006032 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2202      	movs	r2, #2
 8006026:	4252      	negs	r2, r2
 8006028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	0018      	movs	r0, r3
 800602e:	f7fb fae5 	bl	80015fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2240      	movs	r2, #64	@ 0x40
 8006036:	4013      	ands	r3, r2
 8006038:	d00c      	beq.n	8006054 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2240      	movs	r2, #64	@ 0x40
 800603e:	4013      	ands	r3, r2
 8006040:	d008      	beq.n	8006054 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2241      	movs	r2, #65	@ 0x41
 8006048:	4252      	negs	r2, r2
 800604a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	0018      	movs	r0, r3
 8006050:	f000 f81c 	bl	800608c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006054:	46c0      	nop			@ (mov r8, r8)
 8006056:	46bd      	mov	sp, r7
 8006058:	b004      	add	sp, #16
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006064:	46c0      	nop			@ (mov r8, r8)
 8006066:	46bd      	mov	sp, r7
 8006068:	b002      	add	sp, #8
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006074:	46c0      	nop			@ (mov r8, r8)
 8006076:	46bd      	mov	sp, r7
 8006078:	b002      	add	sp, #8
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006084:	46c0      	nop			@ (mov r8, r8)
 8006086:	46bd      	mov	sp, r7
 8006088:	b002      	add	sp, #8
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006094:	46c0      	nop			@ (mov r8, r8)
 8006096:	46bd      	mov	sp, r7
 8006098:	b002      	add	sp, #8
 800609a:	bd80      	pop	{r7, pc}

0800609c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	2380      	movs	r3, #128	@ 0x80
 80060b0:	05db      	lsls	r3, r3, #23
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d00b      	beq.n	80060ce <TIM_Base_SetConfig+0x32>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a26      	ldr	r2, [pc, #152]	@ (8006154 <TIM_Base_SetConfig+0xb8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d007      	beq.n	80060ce <TIM_Base_SetConfig+0x32>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a25      	ldr	r2, [pc, #148]	@ (8006158 <TIM_Base_SetConfig+0xbc>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d003      	beq.n	80060ce <TIM_Base_SetConfig+0x32>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a24      	ldr	r2, [pc, #144]	@ (800615c <TIM_Base_SetConfig+0xc0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d108      	bne.n	80060e0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2270      	movs	r2, #112	@ 0x70
 80060d2:	4393      	bics	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	2380      	movs	r3, #128	@ 0x80
 80060e4:	05db      	lsls	r3, r3, #23
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d00b      	beq.n	8006102 <TIM_Base_SetConfig+0x66>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a19      	ldr	r2, [pc, #100]	@ (8006154 <TIM_Base_SetConfig+0xb8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d007      	beq.n	8006102 <TIM_Base_SetConfig+0x66>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a18      	ldr	r2, [pc, #96]	@ (8006158 <TIM_Base_SetConfig+0xbc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d003      	beq.n	8006102 <TIM_Base_SetConfig+0x66>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a17      	ldr	r2, [pc, #92]	@ (800615c <TIM_Base_SetConfig+0xc0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d108      	bne.n	8006114 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4a16      	ldr	r2, [pc, #88]	@ (8006160 <TIM_Base_SetConfig+0xc4>)
 8006106:	4013      	ands	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2280      	movs	r2, #128	@ 0x80
 8006118:	4393      	bics	r3, r2
 800611a:	001a      	movs	r2, r3
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2204      	movs	r2, #4
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	601a      	str	r2, [r3, #0]
}
 800614c:	46c0      	nop			@ (mov r8, r8)
 800614e:	46bd      	mov	sp, r7
 8006150:	b004      	add	sp, #16
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40000400 	.word	0x40000400
 8006158:	40010800 	.word	0x40010800
 800615c:	40011400 	.word	0x40011400
 8006160:	fffffcff 	.word	0xfffffcff

08006164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e044      	b.n	8006200 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d107      	bne.n	800618e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2278      	movs	r2, #120	@ 0x78
 8006182:	2100      	movs	r1, #0
 8006184:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	0018      	movs	r0, r3
 800618a:	f7fb fc35 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2224      	movs	r2, #36	@ 0x24
 8006192:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2101      	movs	r1, #1
 80061a0:	438a      	bics	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	0018      	movs	r0, r3
 80061b0:	f000 fd3c 	bl	8006c2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	0018      	movs	r0, r3
 80061b8:	f000 fa9a 	bl	80066f0 <UART_SetConfig>
 80061bc:	0003      	movs	r3, r0
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e01c      	b.n	8006200 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	490d      	ldr	r1, [pc, #52]	@ (8006208 <HAL_UART_Init+0xa4>)
 80061d2:	400a      	ands	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	212a      	movs	r1, #42	@ 0x2a
 80061e2:	438a      	bics	r2, r1
 80061e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2101      	movs	r1, #1
 80061f2:	430a      	orrs	r2, r1
 80061f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	0018      	movs	r0, r3
 80061fa:	f000 fdcb 	bl	8006d94 <UART_CheckIdleState>
 80061fe:	0003      	movs	r3, r0
}
 8006200:	0018      	movs	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	b002      	add	sp, #8
 8006206:	bd80      	pop	{r7, pc}
 8006208:	ffffb7ff 	.word	0xffffb7ff

0800620c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e030      	b.n	8006280 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2224      	movs	r2, #36	@ 0x24
 8006222:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2101      	movs	r1, #1
 8006230:	438a      	bics	r2, r1
 8006232:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2200      	movs	r2, #0
 8006242:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2200      	movs	r2, #0
 800624a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	0018      	movs	r0, r3
 8006250:	f7fb fc48 	bl	8001ae4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2284      	movs	r2, #132	@ 0x84
 8006258:	2100      	movs	r1, #0
 800625a:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2280      	movs	r2, #128	@ 0x80
 8006266:	2100      	movs	r1, #0
 8006268:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2278      	movs	r2, #120	@ 0x78
 800627a:	2100      	movs	r1, #0
 800627c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	0018      	movs	r0, r3
 8006282:	46bd      	mov	sp, r7
 8006284:	b002      	add	sp, #8
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	@ 0x28
 800628c:	af02      	add	r7, sp, #8
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	1dbb      	adds	r3, r7, #6
 8006296:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800629c:	2b20      	cmp	r3, #32
 800629e:	d000      	beq.n	80062a2 <HAL_UART_Transmit+0x1a>
 80062a0:	e08c      	b.n	80063bc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <HAL_UART_Transmit+0x28>
 80062a8:	1dbb      	adds	r3, r7, #6
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e084      	b.n	80063be <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	2380      	movs	r3, #128	@ 0x80
 80062ba:	015b      	lsls	r3, r3, #5
 80062bc:	429a      	cmp	r2, r3
 80062be:	d109      	bne.n	80062d4 <HAL_UART_Transmit+0x4c>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d105      	bne.n	80062d4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2201      	movs	r2, #1
 80062cc:	4013      	ands	r3, r2
 80062ce:	d001      	beq.n	80062d4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e074      	b.n	80063be <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2284      	movs	r2, #132	@ 0x84
 80062d8:	2100      	movs	r1, #0
 80062da:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2221      	movs	r2, #33	@ 0x21
 80062e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062e2:	f7fc fa69 	bl	80027b8 <HAL_GetTick>
 80062e6:	0003      	movs	r3, r0
 80062e8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1dba      	adds	r2, r7, #6
 80062ee:	2150      	movs	r1, #80	@ 0x50
 80062f0:	8812      	ldrh	r2, [r2, #0]
 80062f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	1dba      	adds	r2, r7, #6
 80062f8:	2152      	movs	r1, #82	@ 0x52
 80062fa:	8812      	ldrh	r2, [r2, #0]
 80062fc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	2380      	movs	r3, #128	@ 0x80
 8006304:	015b      	lsls	r3, r3, #5
 8006306:	429a      	cmp	r2, r3
 8006308:	d108      	bne.n	800631c <HAL_UART_Transmit+0x94>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d104      	bne.n	800631c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006312:	2300      	movs	r3, #0
 8006314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	e003      	b.n	8006324 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006320:	2300      	movs	r3, #0
 8006322:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006324:	e02f      	b.n	8006386 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	0013      	movs	r3, r2
 8006330:	2200      	movs	r2, #0
 8006332:	2180      	movs	r1, #128	@ 0x80
 8006334:	f000 fdd6 	bl	8006ee4 <UART_WaitOnFlagUntilTimeout>
 8006338:	1e03      	subs	r3, r0, #0
 800633a:	d004      	beq.n	8006346 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2220      	movs	r2, #32
 8006340:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e03b      	b.n	80063be <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10b      	bne.n	8006364 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	001a      	movs	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	05d2      	lsls	r2, r2, #23
 8006358:	0dd2      	lsrs	r2, r2, #23
 800635a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	3302      	adds	r3, #2
 8006360:	61bb      	str	r3, [r7, #24]
 8006362:	e007      	b.n	8006374 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	781a      	ldrb	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	3301      	adds	r3, #1
 8006372:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2252      	movs	r2, #82	@ 0x52
 8006378:	5a9b      	ldrh	r3, [r3, r2]
 800637a:	b29b      	uxth	r3, r3
 800637c:	3b01      	subs	r3, #1
 800637e:	b299      	uxth	r1, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2252      	movs	r2, #82	@ 0x52
 8006384:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2252      	movs	r2, #82	@ 0x52
 800638a:	5a9b      	ldrh	r3, [r3, r2]
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1c9      	bne.n	8006326 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	0013      	movs	r3, r2
 800639c:	2200      	movs	r2, #0
 800639e:	2140      	movs	r1, #64	@ 0x40
 80063a0:	f000 fda0 	bl	8006ee4 <UART_WaitOnFlagUntilTimeout>
 80063a4:	1e03      	subs	r3, r0, #0
 80063a6:	d004      	beq.n	80063b2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e005      	b.n	80063be <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2220      	movs	r2, #32
 80063b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e000      	b.n	80063be <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80063bc:	2302      	movs	r3, #2
  }
}
 80063be:	0018      	movs	r0, r3
 80063c0:	46bd      	mov	sp, r7
 80063c2:	b008      	add	sp, #32
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	@ 0x28
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	1dbb      	adds	r3, r7, #6
 80063d6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2280      	movs	r2, #128	@ 0x80
 80063dc:	589b      	ldr	r3, [r3, r2]
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d000      	beq.n	80063e4 <HAL_UART_Receive+0x1c>
 80063e2:	e0d0      	b.n	8006586 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_UART_Receive+0x2a>
 80063ea:	1dbb      	adds	r3, r7, #6
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e0c8      	b.n	8006588 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	2380      	movs	r3, #128	@ 0x80
 80063fc:	015b      	lsls	r3, r3, #5
 80063fe:	429a      	cmp	r2, r3
 8006400:	d109      	bne.n	8006416 <HAL_UART_Receive+0x4e>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d105      	bne.n	8006416 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2201      	movs	r2, #1
 800640e:	4013      	ands	r3, r2
 8006410:	d001      	beq.n	8006416 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e0b8      	b.n	8006588 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2284      	movs	r2, #132	@ 0x84
 800641a:	2100      	movs	r1, #0
 800641c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2280      	movs	r2, #128	@ 0x80
 8006422:	2122      	movs	r1, #34	@ 0x22
 8006424:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800642c:	f7fc f9c4 	bl	80027b8 <HAL_GetTick>
 8006430:	0003      	movs	r3, r0
 8006432:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	1dba      	adds	r2, r7, #6
 8006438:	2158      	movs	r1, #88	@ 0x58
 800643a:	8812      	ldrh	r2, [r2, #0]
 800643c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	1dba      	adds	r2, r7, #6
 8006442:	215a      	movs	r1, #90	@ 0x5a
 8006444:	8812      	ldrh	r2, [r2, #0]
 8006446:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	2380      	movs	r3, #128	@ 0x80
 800644e:	015b      	lsls	r3, r3, #5
 8006450:	429a      	cmp	r2, r3
 8006452:	d10d      	bne.n	8006470 <HAL_UART_Receive+0xa8>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d104      	bne.n	8006466 <HAL_UART_Receive+0x9e>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	225c      	movs	r2, #92	@ 0x5c
 8006460:	494b      	ldr	r1, [pc, #300]	@ (8006590 <HAL_UART_Receive+0x1c8>)
 8006462:	5299      	strh	r1, [r3, r2]
 8006464:	e02e      	b.n	80064c4 <HAL_UART_Receive+0xfc>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	225c      	movs	r2, #92	@ 0x5c
 800646a:	21ff      	movs	r1, #255	@ 0xff
 800646c:	5299      	strh	r1, [r3, r2]
 800646e:	e029      	b.n	80064c4 <HAL_UART_Receive+0xfc>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10d      	bne.n	8006494 <HAL_UART_Receive+0xcc>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d104      	bne.n	800648a <HAL_UART_Receive+0xc2>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	225c      	movs	r2, #92	@ 0x5c
 8006484:	21ff      	movs	r1, #255	@ 0xff
 8006486:	5299      	strh	r1, [r3, r2]
 8006488:	e01c      	b.n	80064c4 <HAL_UART_Receive+0xfc>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	225c      	movs	r2, #92	@ 0x5c
 800648e:	217f      	movs	r1, #127	@ 0x7f
 8006490:	5299      	strh	r1, [r3, r2]
 8006492:	e017      	b.n	80064c4 <HAL_UART_Receive+0xfc>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	2380      	movs	r3, #128	@ 0x80
 800649a:	055b      	lsls	r3, r3, #21
 800649c:	429a      	cmp	r2, r3
 800649e:	d10d      	bne.n	80064bc <HAL_UART_Receive+0xf4>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d104      	bne.n	80064b2 <HAL_UART_Receive+0xea>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	225c      	movs	r2, #92	@ 0x5c
 80064ac:	217f      	movs	r1, #127	@ 0x7f
 80064ae:	5299      	strh	r1, [r3, r2]
 80064b0:	e008      	b.n	80064c4 <HAL_UART_Receive+0xfc>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	225c      	movs	r2, #92	@ 0x5c
 80064b6:	213f      	movs	r1, #63	@ 0x3f
 80064b8:	5299      	strh	r1, [r3, r2]
 80064ba:	e003      	b.n	80064c4 <HAL_UART_Receive+0xfc>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	225c      	movs	r2, #92	@ 0x5c
 80064c0:	2100      	movs	r1, #0
 80064c2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80064c4:	2312      	movs	r3, #18
 80064c6:	18fb      	adds	r3, r7, r3
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	215c      	movs	r1, #92	@ 0x5c
 80064cc:	5a52      	ldrh	r2, [r2, r1]
 80064ce:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	2380      	movs	r3, #128	@ 0x80
 80064d6:	015b      	lsls	r3, r3, #5
 80064d8:	429a      	cmp	r2, r3
 80064da:	d108      	bne.n	80064ee <HAL_UART_Receive+0x126>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80064e4:	2300      	movs	r3, #0
 80064e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	e003      	b.n	80064f6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80064f6:	e03a      	b.n	800656e <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	0013      	movs	r3, r2
 8006502:	2200      	movs	r2, #0
 8006504:	2120      	movs	r1, #32
 8006506:	f000 fced 	bl	8006ee4 <UART_WaitOnFlagUntilTimeout>
 800650a:	1e03      	subs	r3, r0, #0
 800650c:	d005      	beq.n	800651a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2280      	movs	r2, #128	@ 0x80
 8006512:	2120      	movs	r1, #32
 8006514:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e036      	b.n	8006588 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10e      	bne.n	800653e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006526:	b29b      	uxth	r3, r3
 8006528:	2212      	movs	r2, #18
 800652a:	18ba      	adds	r2, r7, r2
 800652c:	8812      	ldrh	r2, [r2, #0]
 800652e:	4013      	ands	r3, r2
 8006530:	b29a      	uxth	r2, r3
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	3302      	adds	r3, #2
 800653a:	61bb      	str	r3, [r7, #24]
 800653c:	e00e      	b.n	800655c <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2212      	movs	r2, #18
 8006548:	18ba      	adds	r2, r7, r2
 800654a:	8812      	ldrh	r2, [r2, #0]
 800654c:	b2d2      	uxtb	r2, r2
 800654e:	4013      	ands	r3, r2
 8006550:	b2da      	uxtb	r2, r3
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	3301      	adds	r3, #1
 800655a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	225a      	movs	r2, #90	@ 0x5a
 8006560:	5a9b      	ldrh	r3, [r3, r2]
 8006562:	b29b      	uxth	r3, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	b299      	uxth	r1, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	225a      	movs	r2, #90	@ 0x5a
 800656c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	225a      	movs	r2, #90	@ 0x5a
 8006572:	5a9b      	ldrh	r3, [r3, r2]
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1be      	bne.n	80064f8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2280      	movs	r2, #128	@ 0x80
 800657e:	2120      	movs	r1, #32
 8006580:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	e000      	b.n	8006588 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8006586:	2302      	movs	r3, #2
  }
}
 8006588:	0018      	movs	r0, r3
 800658a:	46bd      	mov	sp, r7
 800658c:	b008      	add	sp, #32
 800658e:	bd80      	pop	{r7, pc}
 8006590:	000001ff 	.word	0x000001ff

08006594 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b092      	sub	sp, #72	@ 0x48
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800659c:	f3ef 8310 	mrs	r3, PRIMASK
 80065a0:	623b      	str	r3, [r7, #32]
  return(result);
 80065a2:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80065a6:	2301      	movs	r3, #1
 80065a8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	f383 8810 	msr	PRIMASK, r3
}
 80065b0:	46c0      	nop			@ (mov r8, r8)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	494b      	ldr	r1, [pc, #300]	@ (80066ec <HAL_UART_AbortReceive+0x158>)
 80065be:	400a      	ands	r2, r1
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c8:	f383 8810 	msr	PRIMASK, r3
}
 80065cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ce:	f3ef 8310 	mrs	r3, PRIMASK
 80065d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80065d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80065d8:	2301      	movs	r3, #1
 80065da:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065de:	f383 8810 	msr	PRIMASK, r3
}
 80065e2:	46c0      	nop			@ (mov r8, r8)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2101      	movs	r1, #1
 80065f0:	438a      	bics	r2, r1
 80065f2:	609a      	str	r2, [r3, #8]
 80065f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fa:	f383 8810 	msr	PRIMASK, r3
}
 80065fe:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006604:	2b01      	cmp	r3, #1
 8006606:	d118      	bne.n	800663a <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006608:	f3ef 8310 	mrs	r3, PRIMASK
 800660c:	617b      	str	r3, [r7, #20]
  return(result);
 800660e:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006610:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006612:	2301      	movs	r3, #1
 8006614:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f383 8810 	msr	PRIMASK, r3
}
 800661c:	46c0      	nop			@ (mov r8, r8)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2110      	movs	r1, #16
 800662a:	438a      	bics	r2, r1
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	f383 8810 	msr	PRIMASK, r3
}
 8006638:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2240      	movs	r2, #64	@ 0x40
 8006642:	4013      	ands	r3, r2
 8006644:	2b40      	cmp	r3, #64	@ 0x40
 8006646:	d135      	bne.n	80066b4 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006648:	f3ef 8310 	mrs	r3, PRIMASK
 800664c:	60bb      	str	r3, [r7, #8]
  return(result);
 800664e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006650:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006652:	2301      	movs	r3, #1
 8006654:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f383 8810 	msr	PRIMASK, r3
}
 800665c:	46c0      	nop			@ (mov r8, r8)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2140      	movs	r1, #64	@ 0x40
 800666a:	438a      	bics	r2, r1
 800666c:	609a      	str	r2, [r3, #8]
 800666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006670:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f383 8810 	msr	PRIMASK, r3
}
 8006678:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800667e:	2b00      	cmp	r3, #0
 8006680:	d018      	beq.n	80066b4 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006686:	2200      	movs	r2, #0
 8006688:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800668e:	0018      	movs	r0, r3
 8006690:	f7fc fe17 	bl	80032c2 <HAL_DMA_Abort>
 8006694:	1e03      	subs	r3, r0, #0
 8006696:	d00d      	beq.n	80066b4 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800669c:	0018      	movs	r0, r3
 800669e:	f7fc fe50 	bl	8003342 <HAL_DMA_GetError>
 80066a2:	0003      	movs	r3, r0
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	d105      	bne.n	80066b4 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2284      	movs	r2, #132	@ 0x84
 80066ac:	2110      	movs	r1, #16
 80066ae:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e017      	b.n	80066e4 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	225a      	movs	r2, #90	@ 0x5a
 80066b8:	2100      	movs	r1, #0
 80066ba:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	220f      	movs	r2, #15
 80066c2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699a      	ldr	r2, [r3, #24]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2108      	movs	r1, #8
 80066d0:	430a      	orrs	r2, r1
 80066d2:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2280      	movs	r2, #128	@ 0x80
 80066d8:	2120      	movs	r1, #32
 80066da:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	0018      	movs	r0, r3
 80066e6:	46bd      	mov	sp, r7
 80066e8:	b012      	add	sp, #72	@ 0x48
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	fffffedf 	.word	0xfffffedf

080066f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066f0:	b5b0      	push	{r4, r5, r7, lr}
 80066f2:	b08e      	sub	sp, #56	@ 0x38
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066f8:	231a      	movs	r3, #26
 80066fa:	2218      	movs	r2, #24
 80066fc:	189b      	adds	r3, r3, r2
 80066fe:	19db      	adds	r3, r3, r7
 8006700:	2200      	movs	r2, #0
 8006702:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	431a      	orrs	r2, r3
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	431a      	orrs	r2, r3
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	4313      	orrs	r3, r2
 800671a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4ac3      	ldr	r2, [pc, #780]	@ (8006a30 <UART_SetConfig+0x340>)
 8006724:	4013      	ands	r3, r2
 8006726:	0019      	movs	r1, r3
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800672e:	430a      	orrs	r2, r1
 8006730:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4abe      	ldr	r2, [pc, #760]	@ (8006a34 <UART_SetConfig+0x344>)
 800673a:	4013      	ands	r3, r2
 800673c:	0019      	movs	r1, r3
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4ab8      	ldr	r2, [pc, #736]	@ (8006a38 <UART_SetConfig+0x348>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006760:	4313      	orrs	r3, r2
 8006762:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	4ab4      	ldr	r2, [pc, #720]	@ (8006a3c <UART_SetConfig+0x34c>)
 800676c:	4013      	ands	r3, r2
 800676e:	0019      	movs	r1, r3
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006776:	430a      	orrs	r2, r1
 8006778:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4ab0      	ldr	r2, [pc, #704]	@ (8006a40 <UART_SetConfig+0x350>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d131      	bne.n	80067e8 <UART_SetConfig+0xf8>
 8006784:	4baf      	ldr	r3, [pc, #700]	@ (8006a44 <UART_SetConfig+0x354>)
 8006786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006788:	2203      	movs	r2, #3
 800678a:	4013      	ands	r3, r2
 800678c:	2b03      	cmp	r3, #3
 800678e:	d01d      	beq.n	80067cc <UART_SetConfig+0xdc>
 8006790:	d823      	bhi.n	80067da <UART_SetConfig+0xea>
 8006792:	2b02      	cmp	r3, #2
 8006794:	d00c      	beq.n	80067b0 <UART_SetConfig+0xc0>
 8006796:	d820      	bhi.n	80067da <UART_SetConfig+0xea>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <UART_SetConfig+0xb2>
 800679c:	2b01      	cmp	r3, #1
 800679e:	d00e      	beq.n	80067be <UART_SetConfig+0xce>
 80067a0:	e01b      	b.n	80067da <UART_SetConfig+0xea>
 80067a2:	231b      	movs	r3, #27
 80067a4:	2218      	movs	r2, #24
 80067a6:	189b      	adds	r3, r3, r2
 80067a8:	19db      	adds	r3, r3, r7
 80067aa:	2201      	movs	r2, #1
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	e0b4      	b.n	800691a <UART_SetConfig+0x22a>
 80067b0:	231b      	movs	r3, #27
 80067b2:	2218      	movs	r2, #24
 80067b4:	189b      	adds	r3, r3, r2
 80067b6:	19db      	adds	r3, r3, r7
 80067b8:	2202      	movs	r2, #2
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	e0ad      	b.n	800691a <UART_SetConfig+0x22a>
 80067be:	231b      	movs	r3, #27
 80067c0:	2218      	movs	r2, #24
 80067c2:	189b      	adds	r3, r3, r2
 80067c4:	19db      	adds	r3, r3, r7
 80067c6:	2204      	movs	r2, #4
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	e0a6      	b.n	800691a <UART_SetConfig+0x22a>
 80067cc:	231b      	movs	r3, #27
 80067ce:	2218      	movs	r2, #24
 80067d0:	189b      	adds	r3, r3, r2
 80067d2:	19db      	adds	r3, r3, r7
 80067d4:	2208      	movs	r2, #8
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	e09f      	b.n	800691a <UART_SetConfig+0x22a>
 80067da:	231b      	movs	r3, #27
 80067dc:	2218      	movs	r2, #24
 80067de:	189b      	adds	r3, r3, r2
 80067e0:	19db      	adds	r3, r3, r7
 80067e2:	2210      	movs	r2, #16
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	e098      	b.n	800691a <UART_SetConfig+0x22a>
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a96      	ldr	r2, [pc, #600]	@ (8006a48 <UART_SetConfig+0x358>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d131      	bne.n	8006856 <UART_SetConfig+0x166>
 80067f2:	4b94      	ldr	r3, [pc, #592]	@ (8006a44 <UART_SetConfig+0x354>)
 80067f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f6:	220c      	movs	r2, #12
 80067f8:	4013      	ands	r3, r2
 80067fa:	2b0c      	cmp	r3, #12
 80067fc:	d01d      	beq.n	800683a <UART_SetConfig+0x14a>
 80067fe:	d823      	bhi.n	8006848 <UART_SetConfig+0x158>
 8006800:	2b08      	cmp	r3, #8
 8006802:	d00c      	beq.n	800681e <UART_SetConfig+0x12e>
 8006804:	d820      	bhi.n	8006848 <UART_SetConfig+0x158>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <UART_SetConfig+0x120>
 800680a:	2b04      	cmp	r3, #4
 800680c:	d00e      	beq.n	800682c <UART_SetConfig+0x13c>
 800680e:	e01b      	b.n	8006848 <UART_SetConfig+0x158>
 8006810:	231b      	movs	r3, #27
 8006812:	2218      	movs	r2, #24
 8006814:	189b      	adds	r3, r3, r2
 8006816:	19db      	adds	r3, r3, r7
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	e07d      	b.n	800691a <UART_SetConfig+0x22a>
 800681e:	231b      	movs	r3, #27
 8006820:	2218      	movs	r2, #24
 8006822:	189b      	adds	r3, r3, r2
 8006824:	19db      	adds	r3, r3, r7
 8006826:	2202      	movs	r2, #2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e076      	b.n	800691a <UART_SetConfig+0x22a>
 800682c:	231b      	movs	r3, #27
 800682e:	2218      	movs	r2, #24
 8006830:	189b      	adds	r3, r3, r2
 8006832:	19db      	adds	r3, r3, r7
 8006834:	2204      	movs	r2, #4
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	e06f      	b.n	800691a <UART_SetConfig+0x22a>
 800683a:	231b      	movs	r3, #27
 800683c:	2218      	movs	r2, #24
 800683e:	189b      	adds	r3, r3, r2
 8006840:	19db      	adds	r3, r3, r7
 8006842:	2208      	movs	r2, #8
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	e068      	b.n	800691a <UART_SetConfig+0x22a>
 8006848:	231b      	movs	r3, #27
 800684a:	2218      	movs	r2, #24
 800684c:	189b      	adds	r3, r3, r2
 800684e:	19db      	adds	r3, r3, r7
 8006850:	2210      	movs	r2, #16
 8006852:	701a      	strb	r2, [r3, #0]
 8006854:	e061      	b.n	800691a <UART_SetConfig+0x22a>
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a7c      	ldr	r2, [pc, #496]	@ (8006a4c <UART_SetConfig+0x35c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d106      	bne.n	800686e <UART_SetConfig+0x17e>
 8006860:	231b      	movs	r3, #27
 8006862:	2218      	movs	r2, #24
 8006864:	189b      	adds	r3, r3, r2
 8006866:	19db      	adds	r3, r3, r7
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	e055      	b.n	800691a <UART_SetConfig+0x22a>
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a77      	ldr	r2, [pc, #476]	@ (8006a50 <UART_SetConfig+0x360>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d106      	bne.n	8006886 <UART_SetConfig+0x196>
 8006878:	231b      	movs	r3, #27
 800687a:	2218      	movs	r2, #24
 800687c:	189b      	adds	r3, r3, r2
 800687e:	19db      	adds	r3, r3, r7
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
 8006884:	e049      	b.n	800691a <UART_SetConfig+0x22a>
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a6b      	ldr	r2, [pc, #428]	@ (8006a38 <UART_SetConfig+0x348>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d13e      	bne.n	800690e <UART_SetConfig+0x21e>
 8006890:	4b6c      	ldr	r3, [pc, #432]	@ (8006a44 <UART_SetConfig+0x354>)
 8006892:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006894:	23c0      	movs	r3, #192	@ 0xc0
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	4013      	ands	r3, r2
 800689a:	22c0      	movs	r2, #192	@ 0xc0
 800689c:	0112      	lsls	r2, r2, #4
 800689e:	4293      	cmp	r3, r2
 80068a0:	d027      	beq.n	80068f2 <UART_SetConfig+0x202>
 80068a2:	22c0      	movs	r2, #192	@ 0xc0
 80068a4:	0112      	lsls	r2, r2, #4
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d82a      	bhi.n	8006900 <UART_SetConfig+0x210>
 80068aa:	2280      	movs	r2, #128	@ 0x80
 80068ac:	0112      	lsls	r2, r2, #4
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d011      	beq.n	80068d6 <UART_SetConfig+0x1e6>
 80068b2:	2280      	movs	r2, #128	@ 0x80
 80068b4:	0112      	lsls	r2, r2, #4
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d822      	bhi.n	8006900 <UART_SetConfig+0x210>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <UART_SetConfig+0x1d8>
 80068be:	2280      	movs	r2, #128	@ 0x80
 80068c0:	00d2      	lsls	r2, r2, #3
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00e      	beq.n	80068e4 <UART_SetConfig+0x1f4>
 80068c6:	e01b      	b.n	8006900 <UART_SetConfig+0x210>
 80068c8:	231b      	movs	r3, #27
 80068ca:	2218      	movs	r2, #24
 80068cc:	189b      	adds	r3, r3, r2
 80068ce:	19db      	adds	r3, r3, r7
 80068d0:	2200      	movs	r2, #0
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	e021      	b.n	800691a <UART_SetConfig+0x22a>
 80068d6:	231b      	movs	r3, #27
 80068d8:	2218      	movs	r2, #24
 80068da:	189b      	adds	r3, r3, r2
 80068dc:	19db      	adds	r3, r3, r7
 80068de:	2202      	movs	r2, #2
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	e01a      	b.n	800691a <UART_SetConfig+0x22a>
 80068e4:	231b      	movs	r3, #27
 80068e6:	2218      	movs	r2, #24
 80068e8:	189b      	adds	r3, r3, r2
 80068ea:	19db      	adds	r3, r3, r7
 80068ec:	2204      	movs	r2, #4
 80068ee:	701a      	strb	r2, [r3, #0]
 80068f0:	e013      	b.n	800691a <UART_SetConfig+0x22a>
 80068f2:	231b      	movs	r3, #27
 80068f4:	2218      	movs	r2, #24
 80068f6:	189b      	adds	r3, r3, r2
 80068f8:	19db      	adds	r3, r3, r7
 80068fa:	2208      	movs	r2, #8
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	e00c      	b.n	800691a <UART_SetConfig+0x22a>
 8006900:	231b      	movs	r3, #27
 8006902:	2218      	movs	r2, #24
 8006904:	189b      	adds	r3, r3, r2
 8006906:	19db      	adds	r3, r3, r7
 8006908:	2210      	movs	r2, #16
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	e005      	b.n	800691a <UART_SetConfig+0x22a>
 800690e:	231b      	movs	r3, #27
 8006910:	2218      	movs	r2, #24
 8006912:	189b      	adds	r3, r3, r2
 8006914:	19db      	adds	r3, r3, r7
 8006916:	2210      	movs	r2, #16
 8006918:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a46      	ldr	r2, [pc, #280]	@ (8006a38 <UART_SetConfig+0x348>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d000      	beq.n	8006926 <UART_SetConfig+0x236>
 8006924:	e09a      	b.n	8006a5c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006926:	231b      	movs	r3, #27
 8006928:	2218      	movs	r2, #24
 800692a:	189b      	adds	r3, r3, r2
 800692c:	19db      	adds	r3, r3, r7
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b08      	cmp	r3, #8
 8006932:	d01d      	beq.n	8006970 <UART_SetConfig+0x280>
 8006934:	dc20      	bgt.n	8006978 <UART_SetConfig+0x288>
 8006936:	2b04      	cmp	r3, #4
 8006938:	d015      	beq.n	8006966 <UART_SetConfig+0x276>
 800693a:	dc1d      	bgt.n	8006978 <UART_SetConfig+0x288>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <UART_SetConfig+0x256>
 8006940:	2b02      	cmp	r3, #2
 8006942:	d005      	beq.n	8006950 <UART_SetConfig+0x260>
 8006944:	e018      	b.n	8006978 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006946:	f7fe fd7b 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 800694a:	0003      	movs	r3, r0
 800694c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800694e:	e01c      	b.n	800698a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006950:	4b3c      	ldr	r3, [pc, #240]	@ (8006a44 <UART_SetConfig+0x354>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2210      	movs	r2, #16
 8006956:	4013      	ands	r3, r2
 8006958:	d002      	beq.n	8006960 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800695a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a54 <UART_SetConfig+0x364>)
 800695c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800695e:	e014      	b.n	800698a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006960:	4b3d      	ldr	r3, [pc, #244]	@ (8006a58 <UART_SetConfig+0x368>)
 8006962:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006964:	e011      	b.n	800698a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006966:	f7fe fcdb 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 800696a:	0003      	movs	r3, r0
 800696c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800696e:	e00c      	b.n	800698a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006970:	2380      	movs	r3, #128	@ 0x80
 8006972:	021b      	lsls	r3, r3, #8
 8006974:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006976:	e008      	b.n	800698a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800697c:	231a      	movs	r3, #26
 800697e:	2218      	movs	r2, #24
 8006980:	189b      	adds	r3, r3, r2
 8006982:	19db      	adds	r3, r3, r7
 8006984:	2201      	movs	r2, #1
 8006986:	701a      	strb	r2, [r3, #0]
        break;
 8006988:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800698a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698c:	2b00      	cmp	r3, #0
 800698e:	d100      	bne.n	8006992 <UART_SetConfig+0x2a2>
 8006990:	e133      	b.n	8006bfa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	0013      	movs	r3, r2
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	189b      	adds	r3, r3, r2
 800699c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800699e:	429a      	cmp	r2, r3
 80069a0:	d305      	bcc.n	80069ae <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d906      	bls.n	80069bc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80069ae:	231a      	movs	r3, #26
 80069b0:	2218      	movs	r2, #24
 80069b2:	189b      	adds	r3, r3, r2
 80069b4:	19db      	adds	r3, r3, r7
 80069b6:	2201      	movs	r2, #1
 80069b8:	701a      	strb	r2, [r3, #0]
 80069ba:	e11e      	b.n	8006bfa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	2300      	movs	r3, #0
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	6939      	ldr	r1, [r7, #16]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	000b      	movs	r3, r1
 80069ca:	0e1b      	lsrs	r3, r3, #24
 80069cc:	0010      	movs	r0, r2
 80069ce:	0205      	lsls	r5, r0, #8
 80069d0:	431d      	orrs	r5, r3
 80069d2:	000b      	movs	r3, r1
 80069d4:	021c      	lsls	r4, r3, #8
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	085b      	lsrs	r3, r3, #1
 80069dc:	60bb      	str	r3, [r7, #8]
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
 80069e2:	68b8      	ldr	r0, [r7, #8]
 80069e4:	68f9      	ldr	r1, [r7, #12]
 80069e6:	1900      	adds	r0, r0, r4
 80069e8:	4169      	adcs	r1, r5
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	2300      	movs	r3, #0
 80069f2:	607b      	str	r3, [r7, #4]
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f7f9 fd0e 	bl	8000418 <__aeabi_uldivmod>
 80069fc:	0002      	movs	r2, r0
 80069fe:	000b      	movs	r3, r1
 8006a00:	0013      	movs	r3, r2
 8006a02:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a06:	23c0      	movs	r3, #192	@ 0xc0
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d309      	bcc.n	8006a22 <UART_SetConfig+0x332>
 8006a0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a10:	2380      	movs	r3, #128	@ 0x80
 8006a12:	035b      	lsls	r3, r3, #13
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d204      	bcs.n	8006a22 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a1e:	60da      	str	r2, [r3, #12]
 8006a20:	e0eb      	b.n	8006bfa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006a22:	231a      	movs	r3, #26
 8006a24:	2218      	movs	r2, #24
 8006a26:	189b      	adds	r3, r3, r2
 8006a28:	19db      	adds	r3, r3, r7
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	701a      	strb	r2, [r3, #0]
 8006a2e:	e0e4      	b.n	8006bfa <UART_SetConfig+0x50a>
 8006a30:	efff69f3 	.word	0xefff69f3
 8006a34:	ffffcfff 	.word	0xffffcfff
 8006a38:	40004800 	.word	0x40004800
 8006a3c:	fffff4ff 	.word	0xfffff4ff
 8006a40:	40013800 	.word	0x40013800
 8006a44:	40021000 	.word	0x40021000
 8006a48:	40004400 	.word	0x40004400
 8006a4c:	40004c00 	.word	0x40004c00
 8006a50:	40005000 	.word	0x40005000
 8006a54:	003d0900 	.word	0x003d0900
 8006a58:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	69da      	ldr	r2, [r3, #28]
 8006a60:	2380      	movs	r3, #128	@ 0x80
 8006a62:	021b      	lsls	r3, r3, #8
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d000      	beq.n	8006a6a <UART_SetConfig+0x37a>
 8006a68:	e070      	b.n	8006b4c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8006a6a:	231b      	movs	r3, #27
 8006a6c:	2218      	movs	r2, #24
 8006a6e:	189b      	adds	r3, r3, r2
 8006a70:	19db      	adds	r3, r3, r7
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b08      	cmp	r3, #8
 8006a76:	d822      	bhi.n	8006abe <UART_SetConfig+0x3ce>
 8006a78:	009a      	lsls	r2, r3, #2
 8006a7a:	4b67      	ldr	r3, [pc, #412]	@ (8006c18 <UART_SetConfig+0x528>)
 8006a7c:	18d3      	adds	r3, r2, r3
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a82:	f7fe fcdd 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8006a86:	0003      	movs	r3, r0
 8006a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a8a:	e021      	b.n	8006ad0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a8c:	f7fe fcee 	bl	800546c <HAL_RCC_GetPCLK2Freq>
 8006a90:	0003      	movs	r3, r0
 8006a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a94:	e01c      	b.n	8006ad0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a96:	4b61      	ldr	r3, [pc, #388]	@ (8006c1c <UART_SetConfig+0x52c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2210      	movs	r2, #16
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	d002      	beq.n	8006aa6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006aa0:	4b5f      	ldr	r3, [pc, #380]	@ (8006c20 <UART_SetConfig+0x530>)
 8006aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006aa4:	e014      	b.n	8006ad0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006aa6:	4b5f      	ldr	r3, [pc, #380]	@ (8006c24 <UART_SetConfig+0x534>)
 8006aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006aaa:	e011      	b.n	8006ad0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aac:	f7fe fc38 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 8006ab0:	0003      	movs	r3, r0
 8006ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006ab4:	e00c      	b.n	8006ad0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ab6:	2380      	movs	r3, #128	@ 0x80
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006abc:	e008      	b.n	8006ad0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006ac2:	231a      	movs	r3, #26
 8006ac4:	2218      	movs	r2, #24
 8006ac6:	189b      	adds	r3, r3, r2
 8006ac8:	19db      	adds	r3, r3, r7
 8006aca:	2201      	movs	r2, #1
 8006acc:	701a      	strb	r2, [r3, #0]
        break;
 8006ace:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d100      	bne.n	8006ad8 <UART_SetConfig+0x3e8>
 8006ad6:	e090      	b.n	8006bfa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ada:	005a      	lsls	r2, r3, #1
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	085b      	lsrs	r3, r3, #1
 8006ae2:	18d2      	adds	r2, r2, r3
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	0019      	movs	r1, r3
 8006aea:	0010      	movs	r0, r2
 8006aec:	f7f9 fb1e 	bl	800012c <__udivsi3>
 8006af0:	0003      	movs	r3, r0
 8006af2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af6:	2b0f      	cmp	r3, #15
 8006af8:	d921      	bls.n	8006b3e <UART_SetConfig+0x44e>
 8006afa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006afc:	2380      	movs	r3, #128	@ 0x80
 8006afe:	025b      	lsls	r3, r3, #9
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d21c      	bcs.n	8006b3e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	200e      	movs	r0, #14
 8006b0a:	2418      	movs	r4, #24
 8006b0c:	1903      	adds	r3, r0, r4
 8006b0e:	19db      	adds	r3, r3, r7
 8006b10:	210f      	movs	r1, #15
 8006b12:	438a      	bics	r2, r1
 8006b14:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b18:	085b      	lsrs	r3, r3, #1
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2207      	movs	r2, #7
 8006b1e:	4013      	ands	r3, r2
 8006b20:	b299      	uxth	r1, r3
 8006b22:	1903      	adds	r3, r0, r4
 8006b24:	19db      	adds	r3, r3, r7
 8006b26:	1902      	adds	r2, r0, r4
 8006b28:	19d2      	adds	r2, r2, r7
 8006b2a:	8812      	ldrh	r2, [r2, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	1902      	adds	r2, r0, r4
 8006b36:	19d2      	adds	r2, r2, r7
 8006b38:	8812      	ldrh	r2, [r2, #0]
 8006b3a:	60da      	str	r2, [r3, #12]
 8006b3c:	e05d      	b.n	8006bfa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006b3e:	231a      	movs	r3, #26
 8006b40:	2218      	movs	r2, #24
 8006b42:	189b      	adds	r3, r3, r2
 8006b44:	19db      	adds	r3, r3, r7
 8006b46:	2201      	movs	r2, #1
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	e056      	b.n	8006bfa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b4c:	231b      	movs	r3, #27
 8006b4e:	2218      	movs	r2, #24
 8006b50:	189b      	adds	r3, r3, r2
 8006b52:	19db      	adds	r3, r3, r7
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d822      	bhi.n	8006ba0 <UART_SetConfig+0x4b0>
 8006b5a:	009a      	lsls	r2, r3, #2
 8006b5c:	4b32      	ldr	r3, [pc, #200]	@ (8006c28 <UART_SetConfig+0x538>)
 8006b5e:	18d3      	adds	r3, r2, r3
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b64:	f7fe fc6c 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8006b68:	0003      	movs	r3, r0
 8006b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b6c:	e021      	b.n	8006bb2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b6e:	f7fe fc7d 	bl	800546c <HAL_RCC_GetPCLK2Freq>
 8006b72:	0003      	movs	r3, r0
 8006b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b76:	e01c      	b.n	8006bb2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b78:	4b28      	ldr	r3, [pc, #160]	@ (8006c1c <UART_SetConfig+0x52c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2210      	movs	r2, #16
 8006b7e:	4013      	ands	r3, r2
 8006b80:	d002      	beq.n	8006b88 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006b82:	4b27      	ldr	r3, [pc, #156]	@ (8006c20 <UART_SetConfig+0x530>)
 8006b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b86:	e014      	b.n	8006bb2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006b88:	4b26      	ldr	r3, [pc, #152]	@ (8006c24 <UART_SetConfig+0x534>)
 8006b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b8c:	e011      	b.n	8006bb2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b8e:	f7fe fbc7 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 8006b92:	0003      	movs	r3, r0
 8006b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b96:	e00c      	b.n	8006bb2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b98:	2380      	movs	r3, #128	@ 0x80
 8006b9a:	021b      	lsls	r3, r3, #8
 8006b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b9e:	e008      	b.n	8006bb2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006ba4:	231a      	movs	r3, #26
 8006ba6:	2218      	movs	r2, #24
 8006ba8:	189b      	adds	r3, r3, r2
 8006baa:	19db      	adds	r3, r3, r7
 8006bac:	2201      	movs	r2, #1
 8006bae:	701a      	strb	r2, [r3, #0]
        break;
 8006bb0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d020      	beq.n	8006bfa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	085a      	lsrs	r2, r3, #1
 8006bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc0:	18d2      	adds	r2, r2, r3
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	0019      	movs	r1, r3
 8006bc8:	0010      	movs	r0, r2
 8006bca:	f7f9 faaf 	bl	800012c <__udivsi3>
 8006bce:	0003      	movs	r3, r0
 8006bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd4:	2b0f      	cmp	r3, #15
 8006bd6:	d90a      	bls.n	8006bee <UART_SetConfig+0x4fe>
 8006bd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bda:	2380      	movs	r3, #128	@ 0x80
 8006bdc:	025b      	lsls	r3, r3, #9
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d205      	bcs.n	8006bee <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60da      	str	r2, [r3, #12]
 8006bec:	e005      	b.n	8006bfa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006bee:	231a      	movs	r3, #26
 8006bf0:	2218      	movs	r2, #24
 8006bf2:	189b      	adds	r3, r3, r2
 8006bf4:	19db      	adds	r3, r3, r7
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	2200      	movs	r2, #0
 8006c04:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006c06:	231a      	movs	r3, #26
 8006c08:	2218      	movs	r2, #24
 8006c0a:	189b      	adds	r3, r3, r2
 8006c0c:	19db      	adds	r3, r3, r7
 8006c0e:	781b      	ldrb	r3, [r3, #0]
}
 8006c10:	0018      	movs	r0, r3
 8006c12:	46bd      	mov	sp, r7
 8006c14:	b00e      	add	sp, #56	@ 0x38
 8006c16:	bdb0      	pop	{r4, r5, r7, pc}
 8006c18:	08009318 	.word	0x08009318
 8006c1c:	40021000 	.word	0x40021000
 8006c20:	003d0900 	.word	0x003d0900
 8006c24:	00f42400 	.word	0x00f42400
 8006c28:	0800933c 	.word	0x0800933c

08006c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c38:	2208      	movs	r2, #8
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	d00b      	beq.n	8006c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	4a4a      	ldr	r2, [pc, #296]	@ (8006d70 <UART_AdvFeatureConfig+0x144>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	0019      	movs	r1, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d00b      	beq.n	8006c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	4a43      	ldr	r2, [pc, #268]	@ (8006d74 <UART_AdvFeatureConfig+0x148>)
 8006c68:	4013      	ands	r3, r2
 8006c6a:	0019      	movs	r1, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	4013      	ands	r3, r2
 8006c80:	d00b      	beq.n	8006c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	4a3b      	ldr	r2, [pc, #236]	@ (8006d78 <UART_AdvFeatureConfig+0x14c>)
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	0019      	movs	r1, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9e:	2204      	movs	r2, #4
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d00b      	beq.n	8006cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	4a34      	ldr	r2, [pc, #208]	@ (8006d7c <UART_AdvFeatureConfig+0x150>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	0019      	movs	r1, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc0:	2210      	movs	r2, #16
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	d00b      	beq.n	8006cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	4a2c      	ldr	r2, [pc, #176]	@ (8006d80 <UART_AdvFeatureConfig+0x154>)
 8006cce:	4013      	ands	r3, r2
 8006cd0:	0019      	movs	r1, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	d00b      	beq.n	8006d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	4a25      	ldr	r2, [pc, #148]	@ (8006d84 <UART_AdvFeatureConfig+0x158>)
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	0019      	movs	r1, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d04:	2240      	movs	r2, #64	@ 0x40
 8006d06:	4013      	ands	r3, r2
 8006d08:	d01d      	beq.n	8006d46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	4a1d      	ldr	r2, [pc, #116]	@ (8006d88 <UART_AdvFeatureConfig+0x15c>)
 8006d12:	4013      	ands	r3, r2
 8006d14:	0019      	movs	r1, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d26:	2380      	movs	r3, #128	@ 0x80
 8006d28:	035b      	lsls	r3, r3, #13
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d10b      	bne.n	8006d46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	4a15      	ldr	r2, [pc, #84]	@ (8006d8c <UART_AdvFeatureConfig+0x160>)
 8006d36:	4013      	ands	r3, r2
 8006d38:	0019      	movs	r1, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4a:	2280      	movs	r2, #128	@ 0x80
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	d00b      	beq.n	8006d68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	4a0e      	ldr	r2, [pc, #56]	@ (8006d90 <UART_AdvFeatureConfig+0x164>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	0019      	movs	r1, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	605a      	str	r2, [r3, #4]
  }
}
 8006d68:	46c0      	nop			@ (mov r8, r8)
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	b002      	add	sp, #8
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	ffff7fff 	.word	0xffff7fff
 8006d74:	fffdffff 	.word	0xfffdffff
 8006d78:	fffeffff 	.word	0xfffeffff
 8006d7c:	fffbffff 	.word	0xfffbffff
 8006d80:	ffffefff 	.word	0xffffefff
 8006d84:	ffffdfff 	.word	0xffffdfff
 8006d88:	ffefffff 	.word	0xffefffff
 8006d8c:	ff9fffff 	.word	0xff9fffff
 8006d90:	fff7ffff 	.word	0xfff7ffff

08006d94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b092      	sub	sp, #72	@ 0x48
 8006d98:	af02      	add	r7, sp, #8
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2284      	movs	r2, #132	@ 0x84
 8006da0:	2100      	movs	r1, #0
 8006da2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006da4:	f7fb fd08 	bl	80027b8 <HAL_GetTick>
 8006da8:	0003      	movs	r3, r0
 8006daa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2208      	movs	r2, #8
 8006db4:	4013      	ands	r3, r2
 8006db6:	2b08      	cmp	r3, #8
 8006db8:	d12c      	bne.n	8006e14 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dbc:	2280      	movs	r2, #128	@ 0x80
 8006dbe:	0391      	lsls	r1, r2, #14
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	4a46      	ldr	r2, [pc, #280]	@ (8006edc <UART_CheckIdleState+0x148>)
 8006dc4:	9200      	str	r2, [sp, #0]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f000 f88c 	bl	8006ee4 <UART_WaitOnFlagUntilTimeout>
 8006dcc:	1e03      	subs	r3, r0, #0
 8006dce:	d021      	beq.n	8006e14 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8006dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dda:	2301      	movs	r3, #1
 8006ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de0:	f383 8810 	msr	PRIMASK, r3
}
 8006de4:	46c0      	nop			@ (mov r8, r8)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2180      	movs	r1, #128	@ 0x80
 8006df2:	438a      	bics	r2, r1
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfc:	f383 8810 	msr	PRIMASK, r3
}
 8006e00:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2220      	movs	r2, #32
 8006e06:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2278      	movs	r2, #120	@ 0x78
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e05f      	b.n	8006ed4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d146      	bne.n	8006eb0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e24:	2280      	movs	r2, #128	@ 0x80
 8006e26:	03d1      	lsls	r1, r2, #15
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8006edc <UART_CheckIdleState+0x148>)
 8006e2c:	9200      	str	r2, [sp, #0]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f000 f858 	bl	8006ee4 <UART_WaitOnFlagUntilTimeout>
 8006e34:	1e03      	subs	r3, r0, #0
 8006e36:	d03b      	beq.n	8006eb0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e38:	f3ef 8310 	mrs	r3, PRIMASK
 8006e3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e42:	2301      	movs	r3, #1
 8006e44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f383 8810 	msr	PRIMASK, r3
}
 8006e4c:	46c0      	nop			@ (mov r8, r8)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4921      	ldr	r1, [pc, #132]	@ (8006ee0 <UART_CheckIdleState+0x14c>)
 8006e5a:	400a      	ands	r2, r1
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f383 8810 	msr	PRIMASK, r3
}
 8006e68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e70:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e72:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e74:	2301      	movs	r3, #1
 8006e76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	f383 8810 	msr	PRIMASK, r3
}
 8006e7e:	46c0      	nop			@ (mov r8, r8)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	438a      	bics	r2, r1
 8006e8e:	609a      	str	r2, [r3, #8]
 8006e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	f383 8810 	msr	PRIMASK, r3
}
 8006e9a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2280      	movs	r2, #128	@ 0x80
 8006ea0:	2120      	movs	r1, #32
 8006ea2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2278      	movs	r2, #120	@ 0x78
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e011      	b.n	8006ed4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2280      	movs	r2, #128	@ 0x80
 8006eba:	2120      	movs	r1, #32
 8006ebc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2278      	movs	r2, #120	@ 0x78
 8006ece:	2100      	movs	r1, #0
 8006ed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b010      	add	sp, #64	@ 0x40
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	01ffffff 	.word	0x01ffffff
 8006ee0:	fffffedf 	.word	0xfffffedf

08006ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	603b      	str	r3, [r7, #0]
 8006ef0:	1dfb      	adds	r3, r7, #7
 8006ef2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ef4:	e051      	b.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	d04e      	beq.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006efc:	f7fb fc5c 	bl	80027b8 <HAL_GetTick>
 8006f00:	0002      	movs	r2, r0
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d302      	bcc.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e051      	b.n	8006fba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2204      	movs	r2, #4
 8006f1e:	4013      	ands	r3, r2
 8006f20:	d03b      	beq.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b80      	cmp	r3, #128	@ 0x80
 8006f26:	d038      	beq.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2b40      	cmp	r3, #64	@ 0x40
 8006f2c:	d035      	beq.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	2208      	movs	r2, #8
 8006f36:	4013      	ands	r3, r2
 8006f38:	2b08      	cmp	r3, #8
 8006f3a:	d111      	bne.n	8006f60 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2208      	movs	r2, #8
 8006f42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	0018      	movs	r0, r3
 8006f48:	f000 f83c 	bl	8006fc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2284      	movs	r2, #132	@ 0x84
 8006f50:	2108      	movs	r1, #8
 8006f52:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2278      	movs	r2, #120	@ 0x78
 8006f58:	2100      	movs	r1, #0
 8006f5a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e02c      	b.n	8006fba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69da      	ldr	r2, [r3, #28]
 8006f66:	2380      	movs	r3, #128	@ 0x80
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	401a      	ands	r2, r3
 8006f6c:	2380      	movs	r3, #128	@ 0x80
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d112      	bne.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2280      	movs	r2, #128	@ 0x80
 8006f7a:	0112      	lsls	r2, r2, #4
 8006f7c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	0018      	movs	r0, r3
 8006f82:	f000 f81f 	bl	8006fc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2284      	movs	r2, #132	@ 0x84
 8006f8a:	2120      	movs	r1, #32
 8006f8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2278      	movs	r2, #120	@ 0x78
 8006f92:	2100      	movs	r1, #0
 8006f94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e00f      	b.n	8006fba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	425a      	negs	r2, r3
 8006faa:	4153      	adcs	r3, r2
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	001a      	movs	r2, r3
 8006fb0:	1dfb      	adds	r3, r7, #7
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d09e      	beq.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	0018      	movs	r0, r3
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	b004      	add	sp, #16
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08e      	sub	sp, #56	@ 0x38
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd0:	617b      	str	r3, [r7, #20]
  return(result);
 8006fd2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	f383 8810 	msr	PRIMASK, r3
}
 8006fe0:	46c0      	nop			@ (mov r8, r8)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4926      	ldr	r1, [pc, #152]	@ (8007088 <UART_EndRxTransfer+0xc4>)
 8006fee:	400a      	ands	r2, r1
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	f383 8810 	msr	PRIMASK, r3
}
 8006ffc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8007002:	623b      	str	r3, [r7, #32]
  return(result);
 8007004:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007006:	633b      	str	r3, [r7, #48]	@ 0x30
 8007008:	2301      	movs	r3, #1
 800700a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	f383 8810 	msr	PRIMASK, r3
}
 8007012:	46c0      	nop			@ (mov r8, r8)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2101      	movs	r1, #1
 8007020:	438a      	bics	r2, r1
 8007022:	609a      	str	r2, [r3, #8]
 8007024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007026:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702a:	f383 8810 	msr	PRIMASK, r3
}
 800702e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007034:	2b01      	cmp	r3, #1
 8007036:	d118      	bne.n	800706a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007038:	f3ef 8310 	mrs	r3, PRIMASK
 800703c:	60bb      	str	r3, [r7, #8]
  return(result);
 800703e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007042:	2301      	movs	r3, #1
 8007044:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f383 8810 	msr	PRIMASK, r3
}
 800704c:	46c0      	nop			@ (mov r8, r8)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2110      	movs	r1, #16
 800705a:	438a      	bics	r2, r1
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007060:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f383 8810 	msr	PRIMASK, r3
}
 8007068:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2280      	movs	r2, #128	@ 0x80
 800706e:	2120      	movs	r1, #32
 8007070:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800707e:	46c0      	nop			@ (mov r8, r8)
 8007080:	46bd      	mov	sp, r7
 8007082:	b00e      	add	sp, #56	@ 0x38
 8007084:	bd80      	pop	{r7, pc}
 8007086:	46c0      	nop			@ (mov r8, r8)
 8007088:	fffffedf 	.word	0xfffffedf

0800708c <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	603b      	str	r3, [r7, #0]
 8007098:	1dbb      	adds	r3, r7, #6
 800709a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2280      	movs	r2, #128	@ 0x80
 80070a0:	589b      	ldr	r3, [r3, r2]
 80070a2:	2b20      	cmp	r3, #32
 80070a4:	d000      	beq.n	80070a8 <HAL_UARTEx_ReceiveToIdle+0x1c>
 80070a6:	e109      	b.n	80072bc <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_UARTEx_ReceiveToIdle+0x2a>
 80070ae:	1dbb      	adds	r3, r7, #6
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e101      	b.n	80072be <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689a      	ldr	r2, [r3, #8]
 80070be:	2380      	movs	r3, #128	@ 0x80
 80070c0:	015b      	lsls	r3, r3, #5
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d109      	bne.n	80070da <HAL_UARTEx_ReceiveToIdle+0x4e>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d105      	bne.n	80070da <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2201      	movs	r2, #1
 80070d2:	4013      	ands	r3, r2
 80070d4:	d001      	beq.n	80070da <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e0f1      	b.n	80072be <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2284      	movs	r2, #132	@ 0x84
 80070de:	2100      	movs	r1, #0
 80070e0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2280      	movs	r2, #128	@ 0x80
 80070e6:	2122      	movs	r1, #34	@ 0x22
 80070e8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2201      	movs	r2, #1
 80070ee:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070f6:	f7fb fb5f 	bl	80027b8 <HAL_GetTick>
 80070fa:	0003      	movs	r3, r0
 80070fc:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	1dba      	adds	r2, r7, #6
 8007102:	2158      	movs	r1, #88	@ 0x58
 8007104:	8812      	ldrh	r2, [r2, #0]
 8007106:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	1dba      	adds	r2, r7, #6
 800710c:	215a      	movs	r1, #90	@ 0x5a
 800710e:	8812      	ldrh	r2, [r2, #0]
 8007110:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	2380      	movs	r3, #128	@ 0x80
 8007118:	015b      	lsls	r3, r3, #5
 800711a:	429a      	cmp	r2, r3
 800711c:	d10d      	bne.n	800713a <HAL_UARTEx_ReceiveToIdle+0xae>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d104      	bne.n	8007130 <HAL_UARTEx_ReceiveToIdle+0xa4>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	225c      	movs	r2, #92	@ 0x5c
 800712a:	4967      	ldr	r1, [pc, #412]	@ (80072c8 <HAL_UARTEx_ReceiveToIdle+0x23c>)
 800712c:	5299      	strh	r1, [r3, r2]
 800712e:	e02e      	b.n	800718e <HAL_UARTEx_ReceiveToIdle+0x102>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	225c      	movs	r2, #92	@ 0x5c
 8007134:	21ff      	movs	r1, #255	@ 0xff
 8007136:	5299      	strh	r1, [r3, r2]
 8007138:	e029      	b.n	800718e <HAL_UARTEx_ReceiveToIdle+0x102>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10d      	bne.n	800715e <HAL_UARTEx_ReceiveToIdle+0xd2>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d104      	bne.n	8007154 <HAL_UARTEx_ReceiveToIdle+0xc8>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	225c      	movs	r2, #92	@ 0x5c
 800714e:	21ff      	movs	r1, #255	@ 0xff
 8007150:	5299      	strh	r1, [r3, r2]
 8007152:	e01c      	b.n	800718e <HAL_UARTEx_ReceiveToIdle+0x102>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	225c      	movs	r2, #92	@ 0x5c
 8007158:	217f      	movs	r1, #127	@ 0x7f
 800715a:	5299      	strh	r1, [r3, r2]
 800715c:	e017      	b.n	800718e <HAL_UARTEx_ReceiveToIdle+0x102>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	689a      	ldr	r2, [r3, #8]
 8007162:	2380      	movs	r3, #128	@ 0x80
 8007164:	055b      	lsls	r3, r3, #21
 8007166:	429a      	cmp	r2, r3
 8007168:	d10d      	bne.n	8007186 <HAL_UARTEx_ReceiveToIdle+0xfa>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d104      	bne.n	800717c <HAL_UARTEx_ReceiveToIdle+0xf0>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	225c      	movs	r2, #92	@ 0x5c
 8007176:	217f      	movs	r1, #127	@ 0x7f
 8007178:	5299      	strh	r1, [r3, r2]
 800717a:	e008      	b.n	800718e <HAL_UARTEx_ReceiveToIdle+0x102>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	225c      	movs	r2, #92	@ 0x5c
 8007180:	213f      	movs	r1, #63	@ 0x3f
 8007182:	5299      	strh	r1, [r3, r2]
 8007184:	e003      	b.n	800718e <HAL_UARTEx_ReceiveToIdle+0x102>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	225c      	movs	r2, #92	@ 0x5c
 800718a:	2100      	movs	r1, #0
 800718c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800718e:	2312      	movs	r3, #18
 8007190:	18fb      	adds	r3, r7, r3
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	215c      	movs	r1, #92	@ 0x5c
 8007196:	5a52      	ldrh	r2, [r2, r1]
 8007198:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	2380      	movs	r3, #128	@ 0x80
 80071a0:	015b      	lsls	r3, r3, #5
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d108      	bne.n	80071b8 <HAL_UARTEx_ReceiveToIdle+0x12c>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	e003      	b.n	80071c0 <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2200      	movs	r2, #0
 80071c4:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80071c6:	e062      	b.n	800728e <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	2210      	movs	r2, #16
 80071d0:	4013      	ands	r3, r2
 80071d2:	2b10      	cmp	r3, #16
 80071d4:	d110      	bne.n	80071f8 <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2210      	movs	r2, #16
 80071dc:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d008      	beq.n	80071f8 <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2202      	movs	r2, #2
 80071ea:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2280      	movs	r2, #128	@ 0x80
 80071f0:	2120      	movs	r1, #32
 80071f2:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	e062      	b.n	80072be <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	2220      	movs	r2, #32
 8007200:	4013      	ands	r3, r2
 8007202:	2b20      	cmp	r3, #32
 8007204:	d12f      	bne.n	8007266 <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10e      	bne.n	800722a <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007212:	b29b      	uxth	r3, r3
 8007214:	2212      	movs	r2, #18
 8007216:	18ba      	adds	r2, r7, r2
 8007218:	8812      	ldrh	r2, [r2, #0]
 800721a:	4013      	ands	r3, r2
 800721c:	b29a      	uxth	r2, r3
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	3302      	adds	r3, #2
 8007226:	61bb      	str	r3, [r7, #24]
 8007228:	e00e      	b.n	8007248 <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2212      	movs	r2, #18
 8007234:	18ba      	adds	r2, r7, r2
 8007236:	8812      	ldrh	r2, [r2, #0]
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	4013      	ands	r3, r2
 800723c:	b2da      	uxtb	r2, r3
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	3301      	adds	r3, #1
 8007246:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	3301      	adds	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	225a      	movs	r2, #90	@ 0x5a
 8007258:	5a9b      	ldrh	r3, [r3, r2]
 800725a:	b29b      	uxth	r3, r3
 800725c:	3b01      	subs	r3, #1
 800725e:	b299      	uxth	r1, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	225a      	movs	r2, #90	@ 0x5a
 8007264:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007268:	3301      	adds	r3, #1
 800726a:	d010      	beq.n	800728e <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800726c:	f7fb faa4 	bl	80027b8 <HAL_GetTick>
 8007270:	0002      	movs	r2, r0
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007278:	429a      	cmp	r2, r3
 800727a:	d302      	bcc.n	8007282 <HAL_UARTEx_ReceiveToIdle+0x1f6>
 800727c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727e:	2b00      	cmp	r3, #0
 8007280:	d105      	bne.n	800728e <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2280      	movs	r2, #128	@ 0x80
 8007286:	2120      	movs	r1, #32
 8007288:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e017      	b.n	80072be <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	225a      	movs	r2, #90	@ 0x5a
 8007292:	5a9b      	ldrh	r3, [r3, r2]
 8007294:	b29b      	uxth	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d196      	bne.n	80071c8 <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2258      	movs	r2, #88	@ 0x58
 800729e:	5a9a      	ldrh	r2, [r3, r2]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	215a      	movs	r1, #90	@ 0x5a
 80072a4:	5a5b      	ldrh	r3, [r3, r1]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2280      	movs	r2, #128	@ 0x80
 80072b4:	2120      	movs	r1, #32
 80072b6:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	e000      	b.n	80072be <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 80072bc:	2302      	movs	r3, #2
  }
}
 80072be:	0018      	movs	r0, r3
 80072c0:	46bd      	mov	sp, r7
 80072c2:	b008      	add	sp, #32
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	46c0      	nop			@ (mov r8, r8)
 80072c8:	000001ff 	.word	0x000001ff

080072cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	0002      	movs	r2, r0
 80072d4:	1dbb      	adds	r3, r7, #6
 80072d6:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80072dc:	1dbb      	adds	r3, r7, #6
 80072de:	2200      	movs	r2, #0
 80072e0:	5e9b      	ldrsh	r3, [r3, r2]
 80072e2:	2b84      	cmp	r3, #132	@ 0x84
 80072e4:	d006      	beq.n	80072f4 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80072e6:	1dbb      	adds	r3, r7, #6
 80072e8:	2200      	movs	r2, #0
 80072ea:	5e9a      	ldrsh	r2, [r3, r2]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	18d3      	adds	r3, r2, r3
 80072f0:	3303      	adds	r3, #3
 80072f2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80072f4:	68fb      	ldr	r3, [r7, #12]
}
 80072f6:	0018      	movs	r0, r3
 80072f8:	46bd      	mov	sp, r7
 80072fa:	b004      	add	sp, #16
 80072fc:	bd80      	pop	{r7, pc}

080072fe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007302:	f000 fac5 	bl	8007890 <vTaskStartScheduler>
  
  return osOK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	0018      	movs	r0, r3
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800730e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007310:	b089      	sub	sp, #36	@ 0x24
 8007312:	af04      	add	r7, sp, #16
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d020      	beq.n	8007362 <osThreadCreate+0x54>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d01c      	beq.n	8007362 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685c      	ldr	r4, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	691e      	ldr	r6, [r3, #16]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2208      	movs	r2, #8
 8007338:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800733a:	0018      	movs	r0, r3
 800733c:	f7ff ffc6 	bl	80072cc <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	695a      	ldr	r2, [r3, #20]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	9302      	str	r3, [sp, #8]
 800734c:	9201      	str	r2, [sp, #4]
 800734e:	9000      	str	r0, [sp, #0]
 8007350:	000b      	movs	r3, r1
 8007352:	0032      	movs	r2, r6
 8007354:	0029      	movs	r1, r5
 8007356:	0020      	movs	r0, r4
 8007358:	f000 f8e3 	bl	8007522 <xTaskCreateStatic>
 800735c:	0003      	movs	r3, r0
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e01d      	b.n	800739e <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685c      	ldr	r4, [r3, #4]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800736e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2208      	movs	r2, #8
 8007374:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007376:	0018      	movs	r0, r3
 8007378:	f7ff ffa8 	bl	80072cc <makeFreeRtosPriority>
 800737c:	0001      	movs	r1, r0
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	230c      	movs	r3, #12
 8007382:	18fb      	adds	r3, r7, r3
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	9100      	str	r1, [sp, #0]
 8007388:	0013      	movs	r3, r2
 800738a:	0032      	movs	r2, r6
 800738c:	0029      	movs	r1, r5
 800738e:	0020      	movs	r0, r4
 8007390:	f000 f90e 	bl	80075b0 <xTaskCreate>
 8007394:	0003      	movs	r3, r0
 8007396:	2b01      	cmp	r3, #1
 8007398:	d001      	beq.n	800739e <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800739a:	2300      	movs	r3, #0
 800739c:	e000      	b.n	80073a0 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800739e:	68fb      	ldr	r3, [r7, #12]
}
 80073a0:	0018      	movs	r0, r3
 80073a2:	46bd      	mov	sp, r7
 80073a4:	b005      	add	sp, #20
 80073a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <osDelay+0x16>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	e000      	b.n	80073c0 <osDelay+0x18>
 80073be:	2301      	movs	r3, #1
 80073c0:	0018      	movs	r0, r3
 80073c2:	f000 fa3f 	bl	8007844 <vTaskDelay>
  
  return osOK;
 80073c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80073c8:	0018      	movs	r0, r3
 80073ca:	46bd      	mov	sp, r7
 80073cc:	b004      	add	sp, #16
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3308      	adds	r3, #8
 80073dc:	001a      	movs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	4252      	negs	r2, r2
 80073e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3308      	adds	r3, #8
 80073ee:	001a      	movs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3308      	adds	r3, #8
 80073f8:	001a      	movs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007404:	46c0      	nop			@ (mov r8, r8)
 8007406:	46bd      	mov	sp, r7
 8007408:	b002      	add	sp, #8
 800740a:	bd80      	pop	{r7, pc}

0800740c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800741a:	46c0      	nop			@ (mov r8, r8)
 800741c:	46bd      	mov	sp, r7
 800741e:	b002      	add	sp, #8
 8007420:	bd80      	pop	{r7, pc}

08007422 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	601a      	str	r2, [r3, #0]
}
 800745e:	46c0      	nop			@ (mov r8, r8)
 8007460:	46bd      	mov	sp, r7
 8007462:	b004      	add	sp, #16
 8007464:	bd80      	pop	{r7, pc}

08007466 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	3301      	adds	r3, #1
 800747a:	d103      	bne.n	8007484 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	e00c      	b.n	800749e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3308      	adds	r3, #8
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	e002      	b.n	8007492 <vListInsert+0x2c>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	429a      	cmp	r2, r3
 800749c:	d2f6      	bcs.n	800748c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	1c5a      	adds	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	601a      	str	r2, [r3, #0]
}
 80074ca:	46c0      	nop			@ (mov r8, r8)
 80074cc:	46bd      	mov	sp, r7
 80074ce:	b004      	add	sp, #16
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6892      	ldr	r2, [r2, #8]
 80074e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6852      	ldr	r2, [r2, #4]
 80074f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d103      	bne.n	8007506 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	1e5a      	subs	r2, r3, #1
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
}
 800751a:	0018      	movs	r0, r3
 800751c:	46bd      	mov	sp, r7
 800751e:	b004      	add	sp, #16
 8007520:	bd80      	pop	{r7, pc}

08007522 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007522:	b590      	push	{r4, r7, lr}
 8007524:	b08d      	sub	sp, #52	@ 0x34
 8007526:	af04      	add	r7, sp, #16
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	607a      	str	r2, [r7, #4]
 800752e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007532:	2b00      	cmp	r3, #0
 8007534:	d102      	bne.n	800753c <xTaskCreateStatic+0x1a>
 8007536:	b672      	cpsid	i
 8007538:	46c0      	nop			@ (mov r8, r8)
 800753a:	e7fd      	b.n	8007538 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800753c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753e:	2b00      	cmp	r3, #0
 8007540:	d102      	bne.n	8007548 <xTaskCreateStatic+0x26>
 8007542:	b672      	cpsid	i
 8007544:	46c0      	nop			@ (mov r8, r8)
 8007546:	e7fd      	b.n	8007544 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007548:	23a0      	movs	r3, #160	@ 0xa0
 800754a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2ba0      	cmp	r3, #160	@ 0xa0
 8007550:	d002      	beq.n	8007558 <xTaskCreateStatic+0x36>
 8007552:	b672      	cpsid	i
 8007554:	46c0      	nop			@ (mov r8, r8)
 8007556:	e7fd      	b.n	8007554 <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007558:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800755a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755c:	2b00      	cmp	r3, #0
 800755e:	d020      	beq.n	80075a2 <xTaskCreateStatic+0x80>
 8007560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007562:	2b00      	cmp	r3, #0
 8007564:	d01d      	beq.n	80075a2 <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007568:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800756e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	229d      	movs	r2, #157	@ 0x9d
 8007574:	2102      	movs	r1, #2
 8007576:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007578:	683c      	ldr	r4, [r7, #0]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	68b9      	ldr	r1, [r7, #8]
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	2300      	movs	r3, #0
 8007582:	9303      	str	r3, [sp, #12]
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	9302      	str	r3, [sp, #8]
 8007588:	2318      	movs	r3, #24
 800758a:	18fb      	adds	r3, r7, r3
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	0023      	movs	r3, r4
 8007594:	f000 f858 	bl	8007648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	0018      	movs	r0, r3
 800759c:	f000 f8ee 	bl	800777c <prvAddNewTaskToReadyList>
 80075a0:	e001      	b.n	80075a6 <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075a6:	69bb      	ldr	r3, [r7, #24]
	}
 80075a8:	0018      	movs	r0, r3
 80075aa:	46bd      	mov	sp, r7
 80075ac:	b009      	add	sp, #36	@ 0x24
 80075ae:	bd90      	pop	{r4, r7, pc}

080075b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075b0:	b590      	push	{r4, r7, lr}
 80075b2:	b08d      	sub	sp, #52	@ 0x34
 80075b4:	af04      	add	r7, sp, #16
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	603b      	str	r3, [r7, #0]
 80075bc:	1dbb      	adds	r3, r7, #6
 80075be:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075c0:	1dbb      	adds	r3, r7, #6
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	0018      	movs	r0, r3
 80075c8:	f000 ff40 	bl	800844c <pvPortMalloc>
 80075cc:	0003      	movs	r3, r0
 80075ce:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d010      	beq.n	80075f8 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075d6:	20a0      	movs	r0, #160	@ 0xa0
 80075d8:	f000 ff38 	bl	800844c <pvPortMalloc>
 80075dc:	0003      	movs	r3, r0
 80075de:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80075ec:	e006      	b.n	80075fc <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	0018      	movs	r0, r3
 80075f2:	f000 ffd3 	bl	800859c <vPortFree>
 80075f6:	e001      	b.n	80075fc <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075f8:	2300      	movs	r3, #0
 80075fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d01a      	beq.n	8007638 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	229d      	movs	r2, #157	@ 0x9d
 8007606:	2100      	movs	r1, #0
 8007608:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800760a:	1dbb      	adds	r3, r7, #6
 800760c:	881a      	ldrh	r2, [r3, #0]
 800760e:	683c      	ldr	r4, [r7, #0]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	2300      	movs	r3, #0
 8007616:	9303      	str	r3, [sp, #12]
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	9302      	str	r3, [sp, #8]
 800761c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761e:	9301      	str	r3, [sp, #4]
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	0023      	movs	r3, r4
 8007626:	f000 f80f 	bl	8007648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	0018      	movs	r0, r3
 800762e:	f000 f8a5 	bl	800777c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007632:	2301      	movs	r3, #1
 8007634:	61bb      	str	r3, [r7, #24]
 8007636:	e002      	b.n	800763e <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007638:	2301      	movs	r3, #1
 800763a:	425b      	negs	r3, r3
 800763c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800763e:	69bb      	ldr	r3, [r7, #24]
	}
 8007640:	0018      	movs	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	b009      	add	sp, #36	@ 0x24
 8007646:	bd90      	pop	{r4, r7, pc}

08007648 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4943      	ldr	r1, [pc, #268]	@ (800776c <prvInitialiseNewTask+0x124>)
 800765e:	468c      	mov	ip, r1
 8007660:	4463      	add	r3, ip
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	18d3      	adds	r3, r2, r3
 8007666:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	2207      	movs	r2, #7
 800766c:	4393      	bics	r3, r2
 800766e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	2207      	movs	r2, #7
 8007674:	4013      	ands	r3, r2
 8007676:	d002      	beq.n	800767e <prvInitialiseNewTask+0x36>
 8007678:	b672      	cpsid	i
 800767a:	46c0      	nop			@ (mov r8, r8)
 800767c:	e7fd      	b.n	800767a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d020      	beq.n	80076c6 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007684:	2300      	movs	r3, #0
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	e013      	b.n	80076b2 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	18d3      	adds	r3, r2, r3
 8007690:	7818      	ldrb	r0, [r3, #0]
 8007692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007694:	2134      	movs	r1, #52	@ 0x34
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	18d3      	adds	r3, r2, r3
 800769a:	185b      	adds	r3, r3, r1
 800769c:	1c02      	adds	r2, r0, #0
 800769e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	18d3      	adds	r3, r2, r3
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d006      	beq.n	80076ba <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	3301      	adds	r3, #1
 80076b0:	617b      	str	r3, [r7, #20]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b0f      	cmp	r3, #15
 80076b6:	d9e8      	bls.n	800768a <prvInitialiseNewTask+0x42>
 80076b8:	e000      	b.n	80076bc <prvInitialiseNewTask+0x74>
			{
				break;
 80076ba:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076be:	2243      	movs	r2, #67	@ 0x43
 80076c0:	2100      	movs	r1, #0
 80076c2:	5499      	strb	r1, [r3, r2]
 80076c4:	e003      	b.n	80076ce <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c8:	2234      	movs	r2, #52	@ 0x34
 80076ca:	2100      	movs	r1, #0
 80076cc:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	2b06      	cmp	r3, #6
 80076d2:	d901      	bls.n	80076d8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076d4:	2306      	movs	r3, #6
 80076d6:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076da:	6a3a      	ldr	r2, [r7, #32]
 80076dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e0:	6a3a      	ldr	r2, [r7, #32]
 80076e2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80076e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e6:	2200      	movs	r2, #0
 80076e8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ec:	3304      	adds	r3, #4
 80076ee:	0018      	movs	r0, r3
 80076f0:	f7ff fe8c 	bl	800740c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	3318      	adds	r3, #24
 80076f8:	0018      	movs	r0, r3
 80076fa:	f7ff fe87 	bl	800740c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007700:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	2207      	movs	r2, #7
 8007708:	1ad2      	subs	r2, r2, r3
 800770a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800770e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007712:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007716:	2298      	movs	r2, #152	@ 0x98
 8007718:	2100      	movs	r1, #0
 800771a:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800771c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771e:	229c      	movs	r2, #156	@ 0x9c
 8007720:	2100      	movs	r1, #0
 8007722:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007726:	334c      	adds	r3, #76	@ 0x4c
 8007728:	224c      	movs	r2, #76	@ 0x4c
 800772a:	2100      	movs	r1, #0
 800772c:	0018      	movs	r0, r3
 800772e:	f001 f86d 	bl	800880c <memset>
 8007732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007734:	4a0e      	ldr	r2, [pc, #56]	@ (8007770 <prvInitialiseNewTask+0x128>)
 8007736:	651a      	str	r2, [r3, #80]	@ 0x50
 8007738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773a:	4a0e      	ldr	r2, [pc, #56]	@ (8007774 <prvInitialiseNewTask+0x12c>)
 800773c:	655a      	str	r2, [r3, #84]	@ 0x54
 800773e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007740:	4a0d      	ldr	r2, [pc, #52]	@ (8007778 <prvInitialiseNewTask+0x130>)
 8007742:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	68f9      	ldr	r1, [r7, #12]
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	0018      	movs	r0, r3
 800774c:	f000 fc66 	bl	800801c <pxPortInitialiseStack>
 8007750:	0002      	movs	r2, r0
 8007752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007754:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800775c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007760:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007762:	46c0      	nop			@ (mov r8, r8)
 8007764:	46bd      	mov	sp, r7
 8007766:	b006      	add	sp, #24
 8007768:	bd80      	pop	{r7, pc}
 800776a:	46c0      	nop			@ (mov r8, r8)
 800776c:	3fffffff 	.word	0x3fffffff
 8007770:	200014c4 	.word	0x200014c4
 8007774:	2000152c 	.word	0x2000152c
 8007778:	20001594 	.word	0x20001594

0800777c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007784:	f000 fce4 	bl	8008150 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007788:	4b28      	ldr	r3, [pc, #160]	@ (800782c <prvAddNewTaskToReadyList+0xb0>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	4b27      	ldr	r3, [pc, #156]	@ (800782c <prvAddNewTaskToReadyList+0xb0>)
 8007790:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007792:	4b27      	ldr	r3, [pc, #156]	@ (8007830 <prvAddNewTaskToReadyList+0xb4>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d109      	bne.n	80077ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800779a:	4b25      	ldr	r3, [pc, #148]	@ (8007830 <prvAddNewTaskToReadyList+0xb4>)
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077a0:	4b22      	ldr	r3, [pc, #136]	@ (800782c <prvAddNewTaskToReadyList+0xb0>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d110      	bne.n	80077ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077a8:	f000 fb26 	bl	8007df8 <prvInitialiseTaskLists>
 80077ac:	e00d      	b.n	80077ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077ae:	4b21      	ldr	r3, [pc, #132]	@ (8007834 <prvAddNewTaskToReadyList+0xb8>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007830 <prvAddNewTaskToReadyList+0xb4>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d802      	bhi.n	80077ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007830 <prvAddNewTaskToReadyList+0xb4>)
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007838 <prvAddNewTaskToReadyList+0xbc>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	4b19      	ldr	r3, [pc, #100]	@ (8007838 <prvAddNewTaskToReadyList+0xbc>)
 80077d2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d8:	4b18      	ldr	r3, [pc, #96]	@ (800783c <prvAddNewTaskToReadyList+0xc0>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d903      	bls.n	80077e8 <prvAddNewTaskToReadyList+0x6c>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e4:	4b15      	ldr	r3, [pc, #84]	@ (800783c <prvAddNewTaskToReadyList+0xc0>)
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ec:	0013      	movs	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	189b      	adds	r3, r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4a12      	ldr	r2, [pc, #72]	@ (8007840 <prvAddNewTaskToReadyList+0xc4>)
 80077f6:	189a      	adds	r2, r3, r2
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3304      	adds	r3, #4
 80077fc:	0019      	movs	r1, r3
 80077fe:	0010      	movs	r0, r2
 8007800:	f7ff fe0f 	bl	8007422 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007804:	f000 fcb6 	bl	8008174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007808:	4b0a      	ldr	r3, [pc, #40]	@ (8007834 <prvAddNewTaskToReadyList+0xb8>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d008      	beq.n	8007822 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007810:	4b07      	ldr	r3, [pc, #28]	@ (8007830 <prvAddNewTaskToReadyList+0xb4>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781a:	429a      	cmp	r2, r3
 800781c:	d201      	bcs.n	8007822 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800781e:	f000 fc87 	bl	8008130 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007822:	46c0      	nop			@ (mov r8, r8)
 8007824:	46bd      	mov	sp, r7
 8007826:	b002      	add	sp, #8
 8007828:	bd80      	pop	{r7, pc}
 800782a:	46c0      	nop			@ (mov r8, r8)
 800782c:	20000874 	.word	0x20000874
 8007830:	20000774 	.word	0x20000774
 8007834:	20000880 	.word	0x20000880
 8007838:	20000890 	.word	0x20000890
 800783c:	2000087c 	.word	0x2000087c
 8007840:	20000778 	.word	0x20000778

08007844 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d011      	beq.n	800787a <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007856:	4b0d      	ldr	r3, [pc, #52]	@ (800788c <vTaskDelay+0x48>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <vTaskDelay+0x20>
 800785e:	b672      	cpsid	i
 8007860:	46c0      	nop			@ (mov r8, r8)
 8007862:	e7fd      	b.n	8007860 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8007864:	f000 f86c 	bl	8007940 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2100      	movs	r1, #0
 800786c:	0018      	movs	r0, r3
 800786e:	f000 fb81 	bl	8007f74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007872:	f000 f8a7 	bl	80079c4 <xTaskResumeAll>
 8007876:	0003      	movs	r3, r0
 8007878:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8007880:	f000 fc56 	bl	8008130 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007884:	46c0      	nop			@ (mov r8, r8)
 8007886:	46bd      	mov	sp, r7
 8007888:	b004      	add	sp, #16
 800788a:	bd80      	pop	{r7, pc}
 800788c:	2000089c 	.word	0x2000089c

08007890 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007890:	b590      	push	{r4, r7, lr}
 8007892:	b089      	sub	sp, #36	@ 0x24
 8007894:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007896:	2300      	movs	r3, #0
 8007898:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800789a:	2300      	movs	r3, #0
 800789c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800789e:	003a      	movs	r2, r7
 80078a0:	1d39      	adds	r1, r7, #4
 80078a2:	2308      	movs	r3, #8
 80078a4:	18fb      	adds	r3, r7, r3
 80078a6:	0018      	movs	r0, r3
 80078a8:	f7f8 ffb0 	bl	800080c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078ac:	683c      	ldr	r4, [r7, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	491b      	ldr	r1, [pc, #108]	@ (8007920 <vTaskStartScheduler+0x90>)
 80078b4:	481b      	ldr	r0, [pc, #108]	@ (8007924 <vTaskStartScheduler+0x94>)
 80078b6:	9202      	str	r2, [sp, #8]
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	2300      	movs	r3, #0
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	2300      	movs	r3, #0
 80078c0:	0022      	movs	r2, r4
 80078c2:	f7ff fe2e 	bl	8007522 <xTaskCreateStatic>
 80078c6:	0002      	movs	r2, r0
 80078c8:	4b17      	ldr	r3, [pc, #92]	@ (8007928 <vTaskStartScheduler+0x98>)
 80078ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078cc:	4b16      	ldr	r3, [pc, #88]	@ (8007928 <vTaskStartScheduler+0x98>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078d4:	2301      	movs	r3, #1
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	e001      	b.n	80078de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d113      	bne.n	800790c <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80078e4:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078e6:	4b11      	ldr	r3, [pc, #68]	@ (800792c <vTaskStartScheduler+0x9c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	334c      	adds	r3, #76	@ 0x4c
 80078ec:	001a      	movs	r2, r3
 80078ee:	4b10      	ldr	r3, [pc, #64]	@ (8007930 <vTaskStartScheduler+0xa0>)
 80078f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078f2:	4b10      	ldr	r3, [pc, #64]	@ (8007934 <vTaskStartScheduler+0xa4>)
 80078f4:	2201      	movs	r2, #1
 80078f6:	4252      	negs	r2, r2
 80078f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007938 <vTaskStartScheduler+0xa8>)
 80078fc:	2201      	movs	r2, #1
 80078fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007900:	4b0e      	ldr	r3, [pc, #56]	@ (800793c <vTaskStartScheduler+0xac>)
 8007902:	2200      	movs	r2, #0
 8007904:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007906:	f000 fbef 	bl	80080e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800790a:	e005      	b.n	8007918 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3301      	adds	r3, #1
 8007910:	d102      	bne.n	8007918 <vTaskStartScheduler+0x88>
 8007912:	b672      	cpsid	i
 8007914:	46c0      	nop			@ (mov r8, r8)
 8007916:	e7fd      	b.n	8007914 <vTaskStartScheduler+0x84>
}
 8007918:	46c0      	nop			@ (mov r8, r8)
 800791a:	46bd      	mov	sp, r7
 800791c:	b005      	add	sp, #20
 800791e:	bd90      	pop	{r4, r7, pc}
 8007920:	080092cc 	.word	0x080092cc
 8007924:	08007d2d 	.word	0x08007d2d
 8007928:	20000898 	.word	0x20000898
 800792c:	20000774 	.word	0x20000774
 8007930:	20000014 	.word	0x20000014
 8007934:	20000894 	.word	0x20000894
 8007938:	20000880 	.word	0x20000880
 800793c:	20000878 	.word	0x20000878

08007940 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007944:	4b03      	ldr	r3, [pc, #12]	@ (8007954 <vTaskSuspendAll+0x14>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	4b02      	ldr	r3, [pc, #8]	@ (8007954 <vTaskSuspendAll+0x14>)
 800794c:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 800794e:	46c0      	nop			@ (mov r8, r8)
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	2000089c 	.word	0x2000089c

08007958 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800795e:	2300      	movs	r3, #0
 8007960:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8007962:	4b13      	ldr	r3, [pc, #76]	@ (80079b0 <prvGetExpectedIdleTime+0x58>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800796a:	2301      	movs	r3, #1
 800796c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800796e:	4b11      	ldr	r3, [pc, #68]	@ (80079b4 <prvGetExpectedIdleTime+0x5c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8007978:	2300      	movs	r3, #0
 800797a:	607b      	str	r3, [r7, #4]
 800797c:	e012      	b.n	80079a4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800797e:	4b0e      	ldr	r3, [pc, #56]	@ (80079b8 <prvGetExpectedIdleTime+0x60>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d902      	bls.n	800798c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	607b      	str	r3, [r7, #4]
 800798a:	e00b      	b.n	80079a4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8007992:	2300      	movs	r3, #0
 8007994:	607b      	str	r3, [r7, #4]
 8007996:	e005      	b.n	80079a4 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8007998:	4b08      	ldr	r3, [pc, #32]	@ (80079bc <prvGetExpectedIdleTime+0x64>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	4b08      	ldr	r3, [pc, #32]	@ (80079c0 <prvGetExpectedIdleTime+0x68>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80079a4:	687b      	ldr	r3, [r7, #4]
	}
 80079a6:	0018      	movs	r0, r3
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b002      	add	sp, #8
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	46c0      	nop			@ (mov r8, r8)
 80079b0:	2000087c 	.word	0x2000087c
 80079b4:	20000774 	.word	0x20000774
 80079b8:	20000778 	.word	0x20000778
 80079bc:	20000894 	.word	0x20000894
 80079c0:	20000878 	.word	0x20000878

080079c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079ce:	2300      	movs	r3, #0
 80079d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079d2:	4b3a      	ldr	r3, [pc, #232]	@ (8007abc <xTaskResumeAll+0xf8>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d102      	bne.n	80079e0 <xTaskResumeAll+0x1c>
 80079da:	b672      	cpsid	i
 80079dc:	46c0      	nop			@ (mov r8, r8)
 80079de:	e7fd      	b.n	80079dc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079e0:	f000 fbb6 	bl	8008150 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079e4:	4b35      	ldr	r3, [pc, #212]	@ (8007abc <xTaskResumeAll+0xf8>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	1e5a      	subs	r2, r3, #1
 80079ea:	4b34      	ldr	r3, [pc, #208]	@ (8007abc <xTaskResumeAll+0xf8>)
 80079ec:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ee:	4b33      	ldr	r3, [pc, #204]	@ (8007abc <xTaskResumeAll+0xf8>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d15b      	bne.n	8007aae <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079f6:	4b32      	ldr	r3, [pc, #200]	@ (8007ac0 <xTaskResumeAll+0xfc>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d057      	beq.n	8007aae <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079fe:	e02f      	b.n	8007a60 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a00:	4b30      	ldr	r3, [pc, #192]	@ (8007ac4 <xTaskResumeAll+0x100>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3318      	adds	r3, #24
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	f7ff fd60 	bl	80074d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	3304      	adds	r3, #4
 8007a16:	0018      	movs	r0, r3
 8007a18:	f7ff fd5b 	bl	80074d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a20:	4b29      	ldr	r3, [pc, #164]	@ (8007ac8 <xTaskResumeAll+0x104>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d903      	bls.n	8007a30 <xTaskResumeAll+0x6c>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2c:	4b26      	ldr	r3, [pc, #152]	@ (8007ac8 <xTaskResumeAll+0x104>)
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a34:	0013      	movs	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	189b      	adds	r3, r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4a23      	ldr	r2, [pc, #140]	@ (8007acc <xTaskResumeAll+0x108>)
 8007a3e:	189a      	adds	r2, r3, r2
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3304      	adds	r3, #4
 8007a44:	0019      	movs	r1, r3
 8007a46:	0010      	movs	r0, r2
 8007a48:	f7ff fceb 	bl	8007422 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a50:	4b1f      	ldr	r3, [pc, #124]	@ (8007ad0 <xTaskResumeAll+0x10c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d302      	bcc.n	8007a60 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8007a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8007ad4 <xTaskResumeAll+0x110>)
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a60:	4b18      	ldr	r3, [pc, #96]	@ (8007ac4 <xTaskResumeAll+0x100>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1cb      	bne.n	8007a00 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a6e:	f000 fa63 	bl	8007f38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a72:	4b19      	ldr	r3, [pc, #100]	@ (8007ad8 <xTaskResumeAll+0x114>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00f      	beq.n	8007a9e <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a7e:	f000 f84b 	bl	8007b18 <xTaskIncrementTick>
 8007a82:	1e03      	subs	r3, r0, #0
 8007a84:	d002      	beq.n	8007a8c <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8007a86:	4b13      	ldr	r3, [pc, #76]	@ (8007ad4 <xTaskResumeAll+0x110>)
 8007a88:	2201      	movs	r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1f2      	bne.n	8007a7e <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8007a98:	4b0f      	ldr	r3, [pc, #60]	@ (8007ad8 <xTaskResumeAll+0x114>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad4 <xTaskResumeAll+0x110>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007aaa:	f000 fb41 	bl	8008130 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007aae:	f000 fb61 	bl	8008174 <vPortExitCritical>

	return xAlreadyYielded;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
}
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	b004      	add	sp, #16
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	2000089c 	.word	0x2000089c
 8007ac0:	20000874 	.word	0x20000874
 8007ac4:	20000834 	.word	0x20000834
 8007ac8:	2000087c 	.word	0x2000087c
 8007acc:	20000778 	.word	0x20000778
 8007ad0:	20000774 	.word	0x20000774
 8007ad4:	20000888 	.word	0x20000888
 8007ad8:	20000884 	.word	0x20000884

08007adc <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8007ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8007b10 <vTaskStepTick+0x34>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	18d2      	adds	r2, r2, r3
 8007aec:	4b09      	ldr	r3, [pc, #36]	@ (8007b14 <vTaskStepTick+0x38>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d902      	bls.n	8007afa <vTaskStepTick+0x1e>
 8007af4:	b672      	cpsid	i
 8007af6:	46c0      	nop			@ (mov r8, r8)
 8007af8:	e7fd      	b.n	8007af6 <vTaskStepTick+0x1a>
		xTickCount += xTicksToJump;
 8007afa:	4b05      	ldr	r3, [pc, #20]	@ (8007b10 <vTaskStepTick+0x34>)
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	18d2      	adds	r2, r2, r3
 8007b02:	4b03      	ldr	r3, [pc, #12]	@ (8007b10 <vTaskStepTick+0x34>)
 8007b04:	601a      	str	r2, [r3, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8007b06:	46c0      	nop			@ (mov r8, r8)
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	b002      	add	sp, #8
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	46c0      	nop			@ (mov r8, r8)
 8007b10:	20000878 	.word	0x20000878
 8007b14:	20000894 	.word	0x20000894

08007b18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b22:	4b4a      	ldr	r3, [pc, #296]	@ (8007c4c <xTaskIncrementTick+0x134>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d000      	beq.n	8007b2c <xTaskIncrementTick+0x14>
 8007b2a:	e07f      	b.n	8007c2c <xTaskIncrementTick+0x114>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b2c:	4b48      	ldr	r3, [pc, #288]	@ (8007c50 <xTaskIncrementTick+0x138>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3301      	adds	r3, #1
 8007b32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b34:	4b46      	ldr	r3, [pc, #280]	@ (8007c50 <xTaskIncrementTick+0x138>)
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d118      	bne.n	8007b72 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b40:	4b44      	ldr	r3, [pc, #272]	@ (8007c54 <xTaskIncrementTick+0x13c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <xTaskIncrementTick+0x38>
 8007b4a:	b672      	cpsid	i
 8007b4c:	46c0      	nop			@ (mov r8, r8)
 8007b4e:	e7fd      	b.n	8007b4c <xTaskIncrementTick+0x34>
 8007b50:	4b40      	ldr	r3, [pc, #256]	@ (8007c54 <xTaskIncrementTick+0x13c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	4b40      	ldr	r3, [pc, #256]	@ (8007c58 <xTaskIncrementTick+0x140>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8007c54 <xTaskIncrementTick+0x13c>)
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8007c58 <xTaskIncrementTick+0x140>)
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	4b3d      	ldr	r3, [pc, #244]	@ (8007c5c <xTaskIncrementTick+0x144>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8007c5c <xTaskIncrementTick+0x144>)
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	f000 f9e3 	bl	8007f38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b72:	4b3b      	ldr	r3, [pc, #236]	@ (8007c60 <xTaskIncrementTick+0x148>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d349      	bcc.n	8007c10 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b7c:	4b35      	ldr	r3, [pc, #212]	@ (8007c54 <xTaskIncrementTick+0x13c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d104      	bne.n	8007b90 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b86:	4b36      	ldr	r3, [pc, #216]	@ (8007c60 <xTaskIncrementTick+0x148>)
 8007b88:	2201      	movs	r2, #1
 8007b8a:	4252      	negs	r2, r2
 8007b8c:	601a      	str	r2, [r3, #0]
					break;
 8007b8e:	e03f      	b.n	8007c10 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b90:	4b30      	ldr	r3, [pc, #192]	@ (8007c54 <xTaskIncrementTick+0x13c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d203      	bcs.n	8007bb0 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8007c60 <xTaskIncrementTick+0x148>)
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bae:	e02f      	b.n	8007c10 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	f7ff fc8c 	bl	80074d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d004      	beq.n	8007bcc <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	3318      	adds	r3, #24
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	f7ff fc83 	bl	80074d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd0:	4b24      	ldr	r3, [pc, #144]	@ (8007c64 <xTaskIncrementTick+0x14c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d903      	bls.n	8007be0 <xTaskIncrementTick+0xc8>
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bdc:	4b21      	ldr	r3, [pc, #132]	@ (8007c64 <xTaskIncrementTick+0x14c>)
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be4:	0013      	movs	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	189b      	adds	r3, r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4a1e      	ldr	r2, [pc, #120]	@ (8007c68 <xTaskIncrementTick+0x150>)
 8007bee:	189a      	adds	r2, r3, r2
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	0019      	movs	r1, r3
 8007bf6:	0010      	movs	r0, r2
 8007bf8:	f7ff fc13 	bl	8007422 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c00:	4b1a      	ldr	r3, [pc, #104]	@ (8007c6c <xTaskIncrementTick+0x154>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d3b8      	bcc.n	8007b7c <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c0e:	e7b5      	b.n	8007b7c <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c10:	4b16      	ldr	r3, [pc, #88]	@ (8007c6c <xTaskIncrementTick+0x154>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c16:	4914      	ldr	r1, [pc, #80]	@ (8007c68 <xTaskIncrementTick+0x150>)
 8007c18:	0013      	movs	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	189b      	adds	r3, r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	585b      	ldr	r3, [r3, r1]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d907      	bls.n	8007c36 <xTaskIncrementTick+0x11e>
			{
				xSwitchRequired = pdTRUE;
 8007c26:	2301      	movs	r3, #1
 8007c28:	617b      	str	r3, [r7, #20]
 8007c2a:	e004      	b.n	8007c36 <xTaskIncrementTick+0x11e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007c2c:	4b10      	ldr	r3, [pc, #64]	@ (8007c70 <xTaskIncrementTick+0x158>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	4b0f      	ldr	r3, [pc, #60]	@ (8007c70 <xTaskIncrementTick+0x158>)
 8007c34:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007c36:	4b0f      	ldr	r3, [pc, #60]	@ (8007c74 <xTaskIncrementTick+0x15c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <xTaskIncrementTick+0x12a>
		{
			xSwitchRequired = pdTRUE;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007c42:	697b      	ldr	r3, [r7, #20]
}
 8007c44:	0018      	movs	r0, r3
 8007c46:	46bd      	mov	sp, r7
 8007c48:	b006      	add	sp, #24
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	2000089c 	.word	0x2000089c
 8007c50:	20000878 	.word	0x20000878
 8007c54:	2000082c 	.word	0x2000082c
 8007c58:	20000830 	.word	0x20000830
 8007c5c:	2000088c 	.word	0x2000088c
 8007c60:	20000894 	.word	0x20000894
 8007c64:	2000087c 	.word	0x2000087c
 8007c68:	20000778 	.word	0x20000778
 8007c6c:	20000774 	.word	0x20000774
 8007c70:	20000884 	.word	0x20000884
 8007c74:	20000888 	.word	0x20000888

08007c78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c7e:	4b25      	ldr	r3, [pc, #148]	@ (8007d14 <vTaskSwitchContext+0x9c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c86:	4b24      	ldr	r3, [pc, #144]	@ (8007d18 <vTaskSwitchContext+0xa0>)
 8007c88:	2201      	movs	r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c8c:	e03e      	b.n	8007d0c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007c8e:	4b22      	ldr	r3, [pc, #136]	@ (8007d18 <vTaskSwitchContext+0xa0>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c94:	4b21      	ldr	r3, [pc, #132]	@ (8007d1c <vTaskSwitchContext+0xa4>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	607b      	str	r3, [r7, #4]
 8007c9a:	e008      	b.n	8007cae <vTaskSwitchContext+0x36>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d102      	bne.n	8007ca8 <vTaskSwitchContext+0x30>
 8007ca2:	b672      	cpsid	i
 8007ca4:	46c0      	nop			@ (mov r8, r8)
 8007ca6:	e7fd      	b.n	8007ca4 <vTaskSwitchContext+0x2c>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	607b      	str	r3, [r7, #4]
 8007cae:	491c      	ldr	r1, [pc, #112]	@ (8007d20 <vTaskSwitchContext+0xa8>)
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	0013      	movs	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	189b      	adds	r3, r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	585b      	ldr	r3, [r3, r1]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d0ed      	beq.n	8007c9c <vTaskSwitchContext+0x24>
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	0013      	movs	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	189b      	adds	r3, r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4a15      	ldr	r2, [pc, #84]	@ (8007d20 <vTaskSwitchContext+0xa8>)
 8007ccc:	189b      	adds	r3, r3, r2
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	605a      	str	r2, [r3, #4]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d104      	bne.n	8007cf0 <vTaskSwitchContext+0x78>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	605a      	str	r2, [r3, #4]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8007d24 <vTaskSwitchContext+0xac>)
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	4b08      	ldr	r3, [pc, #32]	@ (8007d1c <vTaskSwitchContext+0xa4>)
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d00:	4b08      	ldr	r3, [pc, #32]	@ (8007d24 <vTaskSwitchContext+0xac>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	334c      	adds	r3, #76	@ 0x4c
 8007d06:	001a      	movs	r2, r3
 8007d08:	4b07      	ldr	r3, [pc, #28]	@ (8007d28 <vTaskSwitchContext+0xb0>)
 8007d0a:	601a      	str	r2, [r3, #0]
}
 8007d0c:	46c0      	nop			@ (mov r8, r8)
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	b002      	add	sp, #8
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	2000089c 	.word	0x2000089c
 8007d18:	20000888 	.word	0x20000888
 8007d1c:	2000087c 	.word	0x2000087c
 8007d20:	20000778 	.word	0x20000778
 8007d24:	20000774 	.word	0x20000774
 8007d28:	20000014 	.word	0x20000014

08007d2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d34:	f000 f8a4 	bl	8007e80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d38:	4b13      	ldr	r3, [pc, #76]	@ (8007d88 <prvIdleTask+0x5c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d901      	bls.n	8007d44 <prvIdleTask+0x18>
			{
				taskYIELD();
 8007d40:	f000 f9f6 	bl	8008130 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007d44:	f7f8 fd4c 	bl	80007e0 <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8007d48:	f7ff fe06 	bl	8007958 <prvGetExpectedIdleTime>
 8007d4c:	0003      	movs	r3, r0
 8007d4e:	60fb      	str	r3, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d9ee      	bls.n	8007d34 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8007d56:	f7ff fdf3 	bl	8007940 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8007d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d8c <prvIdleTask+0x60>)
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8007d90 <prvIdleTask+0x64>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d202      	bcs.n	8007d6c <prvIdleTask+0x40>
 8007d66:	b672      	cpsid	i
 8007d68:	46c0      	nop			@ (mov r8, r8)
 8007d6a:	e7fd      	b.n	8007d68 <prvIdleTask+0x3c>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8007d6c:	f7ff fdf4 	bl	8007958 <prvGetExpectedIdleTime>
 8007d70:	0003      	movs	r3, r0
 8007d72:	60fb      	str	r3, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d903      	bls.n	8007d82 <prvIdleTask+0x56>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	f000 fa5d 	bl	800823c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8007d82:	f7ff fe1f 	bl	80079c4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8007d86:	e7d5      	b.n	8007d34 <prvIdleTask+0x8>
 8007d88:	20000778 	.word	0x20000778
 8007d8c:	20000894 	.word	0x20000894
 8007d90:	20000878 	.word	0x20000878

08007d94 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8007d9e:	1dfb      	adds	r3, r7, #7
 8007da0:	2201      	movs	r2, #1
 8007da2:	701a      	strb	r2, [r3, #0]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8007da4:	4b10      	ldr	r3, [pc, #64]	@ (8007de8 <eTaskConfirmSleepModeStatus+0x54>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <eTaskConfirmSleepModeStatus+0x20>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8007dac:	1dfb      	adds	r3, r7, #7
 8007dae:	2200      	movs	r2, #0
 8007db0:	701a      	strb	r2, [r3, #0]
 8007db2:	e012      	b.n	8007dda <eTaskConfirmSleepModeStatus+0x46>
		}
		else if( xYieldPending != pdFALSE )
 8007db4:	4b0d      	ldr	r3, [pc, #52]	@ (8007dec <eTaskConfirmSleepModeStatus+0x58>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <eTaskConfirmSleepModeStatus+0x30>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8007dbc:	1dfb      	adds	r3, r7, #7
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	701a      	strb	r2, [r3, #0]
 8007dc2:	e00a      	b.n	8007dda <eTaskConfirmSleepModeStatus+0x46>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8007dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8007df0 <eTaskConfirmSleepModeStatus+0x5c>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8007df4 <eTaskConfirmSleepModeStatus+0x60>)
 8007dca:	6819      	ldr	r1, [r3, #0]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	1acb      	subs	r3, r1, r3
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d102      	bne.n	8007dda <eTaskConfirmSleepModeStatus+0x46>
			{
				eReturn = eNoTasksWaitingTimeout;
 8007dd4:	1dfb      	adds	r3, r7, #7
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	701a      	strb	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8007dda:	1dfb      	adds	r3, r7, #7
 8007ddc:	781b      	ldrb	r3, [r3, #0]
	}
 8007dde:	0018      	movs	r0, r3
 8007de0:	46bd      	mov	sp, r7
 8007de2:	b002      	add	sp, #8
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	46c0      	nop			@ (mov r8, r8)
 8007de8:	20000834 	.word	0x20000834
 8007dec:	20000888 	.word	0x20000888
 8007df0:	20000860 	.word	0x20000860
 8007df4:	20000874 	.word	0x20000874

08007df8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dfe:	2300      	movs	r3, #0
 8007e00:	607b      	str	r3, [r7, #4]
 8007e02:	e00c      	b.n	8007e1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	0013      	movs	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	189b      	adds	r3, r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4a14      	ldr	r2, [pc, #80]	@ (8007e60 <prvInitialiseTaskLists+0x68>)
 8007e10:	189b      	adds	r3, r3, r2
 8007e12:	0018      	movs	r0, r3
 8007e14:	f7ff fadc 	bl	80073d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	607b      	str	r3, [r7, #4]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b06      	cmp	r3, #6
 8007e22:	d9ef      	bls.n	8007e04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e24:	4b0f      	ldr	r3, [pc, #60]	@ (8007e64 <prvInitialiseTaskLists+0x6c>)
 8007e26:	0018      	movs	r0, r3
 8007e28:	f7ff fad2 	bl	80073d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8007e68 <prvInitialiseTaskLists+0x70>)
 8007e2e:	0018      	movs	r0, r3
 8007e30:	f7ff face 	bl	80073d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e34:	4b0d      	ldr	r3, [pc, #52]	@ (8007e6c <prvInitialiseTaskLists+0x74>)
 8007e36:	0018      	movs	r0, r3
 8007e38:	f7ff faca 	bl	80073d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e70 <prvInitialiseTaskLists+0x78>)
 8007e3e:	0018      	movs	r0, r3
 8007e40:	f7ff fac6 	bl	80073d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e44:	4b0b      	ldr	r3, [pc, #44]	@ (8007e74 <prvInitialiseTaskLists+0x7c>)
 8007e46:	0018      	movs	r0, r3
 8007e48:	f7ff fac2 	bl	80073d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e78 <prvInitialiseTaskLists+0x80>)
 8007e4e:	4a05      	ldr	r2, [pc, #20]	@ (8007e64 <prvInitialiseTaskLists+0x6c>)
 8007e50:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e52:	4b0a      	ldr	r3, [pc, #40]	@ (8007e7c <prvInitialiseTaskLists+0x84>)
 8007e54:	4a04      	ldr	r2, [pc, #16]	@ (8007e68 <prvInitialiseTaskLists+0x70>)
 8007e56:	601a      	str	r2, [r3, #0]
}
 8007e58:	46c0      	nop			@ (mov r8, r8)
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	b002      	add	sp, #8
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	20000778 	.word	0x20000778
 8007e64:	20000804 	.word	0x20000804
 8007e68:	20000818 	.word	0x20000818
 8007e6c:	20000834 	.word	0x20000834
 8007e70:	20000848 	.word	0x20000848
 8007e74:	20000860 	.word	0x20000860
 8007e78:	2000082c 	.word	0x2000082c
 8007e7c:	20000830 	.word	0x20000830

08007e80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e86:	e01a      	b.n	8007ebe <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8007e88:	f000 f962 	bl	8008150 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e8c:	4b10      	ldr	r3, [pc, #64]	@ (8007ed0 <prvCheckTasksWaitingTermination+0x50>)
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3304      	adds	r3, #4
 8007e98:	0018      	movs	r0, r3
 8007e9a:	f7ff fb1a 	bl	80074d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ed4 <prvCheckTasksWaitingTermination+0x54>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	1e5a      	subs	r2, r3, #1
 8007ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed4 <prvCheckTasksWaitingTermination+0x54>)
 8007ea6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed8 <prvCheckTasksWaitingTermination+0x58>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	1e5a      	subs	r2, r3, #1
 8007eae:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed8 <prvCheckTasksWaitingTermination+0x58>)
 8007eb0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007eb2:	f000 f95f 	bl	8008174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	0018      	movs	r0, r3
 8007eba:	f000 f80f 	bl	8007edc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ebe:	4b06      	ldr	r3, [pc, #24]	@ (8007ed8 <prvCheckTasksWaitingTermination+0x58>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e0      	bne.n	8007e88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ec6:	46c0      	nop			@ (mov r8, r8)
 8007ec8:	46c0      	nop			@ (mov r8, r8)
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	b002      	add	sp, #8
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20000848 	.word	0x20000848
 8007ed4:	20000874 	.word	0x20000874
 8007ed8:	2000085c 	.word	0x2000085c

08007edc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	334c      	adds	r3, #76	@ 0x4c
 8007ee8:	0018      	movs	r0, r3
 8007eea:	f000 fc97 	bl	800881c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	229d      	movs	r2, #157	@ 0x9d
 8007ef2:	5c9b      	ldrb	r3, [r3, r2]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d109      	bne.n	8007f0c <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007efc:	0018      	movs	r0, r3
 8007efe:	f000 fb4d 	bl	800859c <vPortFree>
				vPortFree( pxTCB );
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	0018      	movs	r0, r3
 8007f06:	f000 fb49 	bl	800859c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f0a:	e011      	b.n	8007f30 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	229d      	movs	r2, #157	@ 0x9d
 8007f10:	5c9b      	ldrb	r3, [r3, r2]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d104      	bne.n	8007f20 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f000 fb3f 	bl	800859c <vPortFree>
	}
 8007f1e:	e007      	b.n	8007f30 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	229d      	movs	r2, #157	@ 0x9d
 8007f24:	5c9b      	ldrb	r3, [r3, r2]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d002      	beq.n	8007f30 <prvDeleteTCB+0x54>
 8007f2a:	b672      	cpsid	i
 8007f2c:	46c0      	nop			@ (mov r8, r8)
 8007f2e:	e7fd      	b.n	8007f2c <prvDeleteTCB+0x50>
	}
 8007f30:	46c0      	nop			@ (mov r8, r8)
 8007f32:	46bd      	mov	sp, r7
 8007f34:	b002      	add	sp, #8
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f6c <prvResetNextTaskUnblockTime+0x34>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d104      	bne.n	8007f52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f48:	4b09      	ldr	r3, [pc, #36]	@ (8007f70 <prvResetNextTaskUnblockTime+0x38>)
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	4252      	negs	r2, r2
 8007f4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f50:	e008      	b.n	8007f64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f52:	4b06      	ldr	r3, [pc, #24]	@ (8007f6c <prvResetNextTaskUnblockTime+0x34>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	4b03      	ldr	r3, [pc, #12]	@ (8007f70 <prvResetNextTaskUnblockTime+0x38>)
 8007f62:	601a      	str	r2, [r3, #0]
}
 8007f64:	46c0      	nop			@ (mov r8, r8)
 8007f66:	46bd      	mov	sp, r7
 8007f68:	b002      	add	sp, #8
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	2000082c 	.word	0x2000082c
 8007f70:	20000894 	.word	0x20000894

08007f74 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f7e:	4b21      	ldr	r3, [pc, #132]	@ (8008004 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f84:	4b20      	ldr	r3, [pc, #128]	@ (8008008 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	f7ff faa1 	bl	80074d2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3301      	adds	r3, #1
 8007f94:	d10b      	bne.n	8007fae <prvAddCurrentTaskToDelayedList+0x3a>
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d008      	beq.n	8007fae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8008008 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	1d1a      	adds	r2, r3, #4
 8007fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800800c <prvAddCurrentTaskToDelayedList+0x98>)
 8007fa4:	0011      	movs	r1, r2
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	f7ff fa3b 	bl	8007422 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007fac:	e026      	b.n	8007ffc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	18d3      	adds	r3, r2, r3
 8007fb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007fb6:	4b14      	ldr	r3, [pc, #80]	@ (8008008 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d209      	bcs.n	8007fda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fc6:	4b12      	ldr	r3, [pc, #72]	@ (8008010 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	4b0f      	ldr	r3, [pc, #60]	@ (8008008 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	0019      	movs	r1, r3
 8007fd2:	0010      	movs	r0, r2
 8007fd4:	f7ff fa47 	bl	8007466 <vListInsert>
}
 8007fd8:	e010      	b.n	8007ffc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fda:	4b0e      	ldr	r3, [pc, #56]	@ (8008014 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	4b0a      	ldr	r3, [pc, #40]	@ (8008008 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	0019      	movs	r1, r3
 8007fe6:	0010      	movs	r0, r2
 8007fe8:	f7ff fa3d 	bl	8007466 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fec:	4b0a      	ldr	r3, [pc, #40]	@ (8008018 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d202      	bcs.n	8007ffc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ff6:	4b08      	ldr	r3, [pc, #32]	@ (8008018 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	601a      	str	r2, [r3, #0]
}
 8007ffc:	46c0      	nop			@ (mov r8, r8)
 8007ffe:	46bd      	mov	sp, r7
 8008000:	b004      	add	sp, #16
 8008002:	bd80      	pop	{r7, pc}
 8008004:	20000878 	.word	0x20000878
 8008008:	20000774 	.word	0x20000774
 800800c:	20000860 	.word	0x20000860
 8008010:	20000830 	.word	0x20000830
 8008014:	2000082c 	.word	0x2000082c
 8008018:	20000894 	.word	0x20000894

0800801c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3b04      	subs	r3, #4
 800802c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2280      	movs	r2, #128	@ 0x80
 8008032:	0452      	lsls	r2, r2, #17
 8008034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3b04      	subs	r3, #4
 800803a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	3b04      	subs	r3, #4
 8008046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008048:	4a08      	ldr	r2, [pc, #32]	@ (800806c <pxPortInitialiseStack+0x50>)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3b14      	subs	r3, #20
 8008052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3b20      	subs	r3, #32
 800805e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008060:	68fb      	ldr	r3, [r7, #12]
}
 8008062:	0018      	movs	r0, r3
 8008064:	46bd      	mov	sp, r7
 8008066:	b004      	add	sp, #16
 8008068:	bd80      	pop	{r7, pc}
 800806a:	46c0      	nop			@ (mov r8, r8)
 800806c:	08008071 	.word	0x08008071

08008070 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008076:	2300      	movs	r3, #0
 8008078:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800807a:	4b08      	ldr	r3, [pc, #32]	@ (800809c <prvTaskExitError+0x2c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3301      	adds	r3, #1
 8008080:	d002      	beq.n	8008088 <prvTaskExitError+0x18>
 8008082:	b672      	cpsid	i
 8008084:	46c0      	nop			@ (mov r8, r8)
 8008086:	e7fd      	b.n	8008084 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8008088:	b672      	cpsid	i
	while( ulDummy == 0 )
 800808a:	46c0      	nop			@ (mov r8, r8)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0fc      	beq.n	800808c <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008092:	46c0      	nop			@ (mov r8, r8)
 8008094:	46c0      	nop			@ (mov r8, r8)
 8008096:	46bd      	mov	sp, r7
 8008098:	b002      	add	sp, #8
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20000010 	.word	0x20000010

080080a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80080a4:	46c0      	nop			@ (mov r8, r8)
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	0000      	movs	r0, r0
 80080ac:	0000      	movs	r0, r0
	...

080080b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80080b0:	4a0b      	ldr	r2, [pc, #44]	@ (80080e0 <pxCurrentTCBConst2>)
 80080b2:	6813      	ldr	r3, [r2, #0]
 80080b4:	6818      	ldr	r0, [r3, #0]
 80080b6:	3020      	adds	r0, #32
 80080b8:	f380 8809 	msr	PSP, r0
 80080bc:	2002      	movs	r0, #2
 80080be:	f380 8814 	msr	CONTROL, r0
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80080c8:	46ae      	mov	lr, r5
 80080ca:	bc08      	pop	{r3}
 80080cc:	bc04      	pop	{r2}
 80080ce:	b662      	cpsie	i
 80080d0:	4718      	bx	r3
 80080d2:	46c0      	nop			@ (mov r8, r8)
 80080d4:	46c0      	nop			@ (mov r8, r8)
 80080d6:	46c0      	nop			@ (mov r8, r8)
 80080d8:	46c0      	nop			@ (mov r8, r8)
 80080da:	46c0      	nop			@ (mov r8, r8)
 80080dc:	46c0      	nop			@ (mov r8, r8)
 80080de:	46c0      	nop			@ (mov r8, r8)

080080e0 <pxCurrentTCBConst2>:
 80080e0:	20000774 	.word	0x20000774
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80080e4:	46c0      	nop			@ (mov r8, r8)
 80080e6:	46c0      	nop			@ (mov r8, r8)

080080e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80080ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008128 <xPortStartScheduler+0x40>)
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008128 <xPortStartScheduler+0x40>)
 80080f2:	21ff      	movs	r1, #255	@ 0xff
 80080f4:	0409      	lsls	r1, r1, #16
 80080f6:	430a      	orrs	r2, r1
 80080f8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80080fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008128 <xPortStartScheduler+0x40>)
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008128 <xPortStartScheduler+0x40>)
 8008100:	21ff      	movs	r1, #255	@ 0xff
 8008102:	0609      	lsls	r1, r1, #24
 8008104:	430a      	orrs	r2, r1
 8008106:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8008108:	f000 f95e 	bl	80083c8 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800810c:	4b07      	ldr	r3, [pc, #28]	@ (800812c <xPortStartScheduler+0x44>)
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8008112:	f7ff ffcd 	bl	80080b0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008116:	f7ff fdaf 	bl	8007c78 <vTaskSwitchContext>
	prvTaskExitError();
 800811a:	f7ff ffa9 	bl	8008070 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800811e:	2300      	movs	r3, #0
}
 8008120:	0018      	movs	r0, r3
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	46c0      	nop			@ (mov r8, r8)
 8008128:	e000ed20 	.word	0xe000ed20
 800812c:	20000010 	.word	0x20000010

08008130 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8008134:	4b05      	ldr	r3, [pc, #20]	@ (800814c <vPortYield+0x1c>)
 8008136:	2280      	movs	r2, #128	@ 0x80
 8008138:	0552      	lsls	r2, r2, #21
 800813a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800813c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008140:	f3bf 8f6f 	isb	sy
}
 8008144:	46c0      	nop			@ (mov r8, r8)
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	46c0      	nop			@ (mov r8, r8)
 800814c:	e000ed04 	.word	0xe000ed04

08008150 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8008154:	b672      	cpsid	i
    uxCriticalNesting++;
 8008156:	4b06      	ldr	r3, [pc, #24]	@ (8008170 <vPortEnterCritical+0x20>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	4b04      	ldr	r3, [pc, #16]	@ (8008170 <vPortEnterCritical+0x20>)
 800815e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008160:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008164:	f3bf 8f6f 	isb	sy
}
 8008168:	46c0      	nop			@ (mov r8, r8)
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	46c0      	nop			@ (mov r8, r8)
 8008170:	20000010 	.word	0x20000010

08008174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008178:	4b09      	ldr	r3, [pc, #36]	@ (80081a0 <vPortExitCritical+0x2c>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d102      	bne.n	8008186 <vPortExitCritical+0x12>
 8008180:	b672      	cpsid	i
 8008182:	46c0      	nop			@ (mov r8, r8)
 8008184:	e7fd      	b.n	8008182 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8008186:	4b06      	ldr	r3, [pc, #24]	@ (80081a0 <vPortExitCritical+0x2c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	1e5a      	subs	r2, r3, #1
 800818c:	4b04      	ldr	r3, [pc, #16]	@ (80081a0 <vPortExitCritical+0x2c>)
 800818e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8008190:	4b03      	ldr	r3, [pc, #12]	@ (80081a0 <vPortExitCritical+0x2c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d100      	bne.n	800819a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8008198:	b662      	cpsie	i
    }
}
 800819a:	46c0      	nop			@ (mov r8, r8)
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000010 	.word	0x20000010

080081a4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80081a4:	f3ef 8010 	mrs	r0, PRIMASK
 80081a8:	b672      	cpsid	i
 80081aa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80081ac:	46c0      	nop			@ (mov r8, r8)
 80081ae:	0018      	movs	r0, r3

080081b0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80081b0:	f380 8810 	msr	PRIMASK, r0
 80081b4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80081b6:	46c0      	nop			@ (mov r8, r8)
	...

080081c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081c0:	f3ef 8009 	mrs	r0, PSP
 80081c4:	4b0e      	ldr	r3, [pc, #56]	@ (8008200 <pxCurrentTCBConst>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	3820      	subs	r0, #32
 80081ca:	6010      	str	r0, [r2, #0]
 80081cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80081ce:	4644      	mov	r4, r8
 80081d0:	464d      	mov	r5, r9
 80081d2:	4656      	mov	r6, sl
 80081d4:	465f      	mov	r7, fp
 80081d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80081d8:	b508      	push	{r3, lr}
 80081da:	b672      	cpsid	i
 80081dc:	f7ff fd4c 	bl	8007c78 <vTaskSwitchContext>
 80081e0:	b662      	cpsie	i
 80081e2:	bc0c      	pop	{r2, r3}
 80081e4:	6811      	ldr	r1, [r2, #0]
 80081e6:	6808      	ldr	r0, [r1, #0]
 80081e8:	3010      	adds	r0, #16
 80081ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80081ec:	46a0      	mov	r8, r4
 80081ee:	46a9      	mov	r9, r5
 80081f0:	46b2      	mov	sl, r6
 80081f2:	46bb      	mov	fp, r7
 80081f4:	f380 8809 	msr	PSP, r0
 80081f8:	3820      	subs	r0, #32
 80081fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80081fc:	4718      	bx	r3
 80081fe:	46c0      	nop			@ (mov r8, r8)

08008200 <pxCurrentTCBConst>:
 8008200:	20000774 	.word	0x20000774
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008204:	46c0      	nop			@ (mov r8, r8)
 8008206:	46c0      	nop			@ (mov r8, r8)

08008208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800820e:	f7ff ffc9 	bl	80081a4 <ulSetInterruptMaskFromISR>
 8008212:	0003      	movs	r3, r0
 8008214:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008216:	f7ff fc7f 	bl	8007b18 <xTaskIncrementTick>
 800821a:	1e03      	subs	r3, r0, #0
 800821c:	d003      	beq.n	8008226 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800821e:	4b06      	ldr	r3, [pc, #24]	@ (8008238 <SysTick_Handler+0x30>)
 8008220:	2280      	movs	r2, #128	@ 0x80
 8008222:	0552      	lsls	r2, r2, #21
 8008224:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	0018      	movs	r0, r3
 800822a:	f7ff ffc1 	bl	80081b0 <vClearInterruptMaskFromISR>
}
 800822e:	46c0      	nop			@ (mov r8, r8)
 8008230:	46bd      	mov	sp, r7
 8008232:	b002      	add	sp, #8
 8008234:	bd80      	pop	{r7, pc}
 8008236:	46c0      	nop			@ (mov r8, r8)
 8008238:	e000ed04 	.word	0xe000ed04

0800823c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if configUSE_TICKLESS_IDLE == 1

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800823c:	b580      	push	{r7, lr}
 800823e:	b088      	sub	sp, #32
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	4b5a      	ldr	r3, [pc, #360]	@ (80083b0 <vPortSuppressTicksAndSleep+0x174>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	429a      	cmp	r2, r3
 800824c:	d902      	bls.n	8008254 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800824e:	4b58      	ldr	r3, [pc, #352]	@ (80083b0 <vPortSuppressTicksAndSleep+0x174>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL &= ~portNVIC_SYSTICK_ENABLE;
 8008254:	4b57      	ldr	r3, [pc, #348]	@ (80083b4 <vPortSuppressTicksAndSleep+0x178>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	4b56      	ldr	r3, [pc, #344]	@ (80083b4 <vPortSuppressTicksAndSleep+0x178>)
 800825a:	2101      	movs	r1, #1
 800825c:	438a      	bics	r2, r1
 800825e:	601a      	str	r2, [r3, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8008260:	4b55      	ldr	r3, [pc, #340]	@ (80083b8 <vPortSuppressTicksAndSleep+0x17c>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	1e59      	subs	r1, r3, #1
 8008268:	4b54      	ldr	r3, [pc, #336]	@ (80083bc <vPortSuppressTicksAndSleep+0x180>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	434b      	muls	r3, r1
 800826e:	18d3      	adds	r3, r2, r3
 8008270:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8008272:	4b53      	ldr	r3, [pc, #332]	@ (80083c0 <vPortSuppressTicksAndSleep+0x184>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69fa      	ldr	r2, [r7, #28]
 8008278:	429a      	cmp	r2, r3
 800827a:	d904      	bls.n	8008286 <vPortSuppressTicksAndSleep+0x4a>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800827c:	4b50      	ldr	r3, [pc, #320]	@ (80083c0 <vPortSuppressTicksAndSleep+0x184>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	69fa      	ldr	r2, [r7, #28]
 8008282:	1ad3      	subs	r3, r2, r3
 8008284:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" );
 8008286:	b672      	cpsid	i

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8008288:	f7ff fd84 	bl	8007d94 <eTaskConfirmSleepModeStatus>
 800828c:	1e03      	subs	r3, r0, #0
 800828e:	d110      	bne.n	80082b2 <vPortSuppressTicksAndSleep+0x76>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD = portNVIC_SYSTICK_CURRENT_VALUE;
 8008290:	4a49      	ldr	r2, [pc, #292]	@ (80083b8 <vPortSuppressTicksAndSleep+0x17c>)
 8008292:	4b4c      	ldr	r3, [pc, #304]	@ (80083c4 <vPortSuppressTicksAndSleep+0x188>)
 8008294:	6812      	ldr	r2, [r2, #0]
 8008296:	601a      	str	r2, [r3, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL |= portNVIC_SYSTICK_ENABLE;
 8008298:	4b46      	ldr	r3, [pc, #280]	@ (80083b4 <vPortSuppressTicksAndSleep+0x178>)
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	4b45      	ldr	r3, [pc, #276]	@ (80083b4 <vPortSuppressTicksAndSleep+0x178>)
 800829e:	2101      	movs	r1, #1
 80082a0:	430a      	orrs	r2, r1
 80082a2:	601a      	str	r2, [r3, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD = ulTimerCountsForOneTick - 1UL;
 80082a4:	4b45      	ldr	r3, [pc, #276]	@ (80083bc <vPortSuppressTicksAndSleep+0x180>)
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	4b46      	ldr	r3, [pc, #280]	@ (80083c4 <vPortSuppressTicksAndSleep+0x188>)
 80082aa:	3a01      	subs	r2, #1
 80082ac:	601a      	str	r2, [r3, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" );
 80082ae:	b662      	cpsie	i
				vTaskStepTick( ulCompleteTickPeriods );
				portNVIC_SYSTICK_LOAD = ulTimerCountsForOneTick - 1UL;
			}
			portEXIT_CRITICAL();
		}
	}
 80082b0:	e07a      	b.n	80083a8 <vPortSuppressTicksAndSleep+0x16c>
			portNVIC_SYSTICK_LOAD = ulReloadValue;
 80082b2:	4b44      	ldr	r3, [pc, #272]	@ (80083c4 <vPortSuppressTicksAndSleep+0x188>)
 80082b4:	69fa      	ldr	r2, [r7, #28]
 80082b6:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80082b8:	4b3f      	ldr	r3, [pc, #252]	@ (80083b8 <vPortSuppressTicksAndSleep+0x17c>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL |= portNVIC_SYSTICK_ENABLE;
 80082be:	4b3d      	ldr	r3, [pc, #244]	@ (80083b4 <vPortSuppressTicksAndSleep+0x178>)
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	4b3c      	ldr	r3, [pc, #240]	@ (80083b4 <vPortSuppressTicksAndSleep+0x178>)
 80082c4:	2101      	movs	r1, #1
 80082c6:	430a      	orrs	r2, r1
 80082c8:	601a      	str	r2, [r3, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	60bb      	str	r3, [r7, #8]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 80082ce:	2308      	movs	r3, #8
 80082d0:	18fb      	adds	r3, r7, r3
 80082d2:	0018      	movs	r0, r3
 80082d4:	f7f8 fa89 	bl	80007ea <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <vPortSuppressTicksAndSleep+0xac>
				__asm volatile( "dsb" );
 80082de:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 80082e2:	bf30      	wfi
				__asm volatile( "isb" );
 80082e4:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 80082e8:	1d3b      	adds	r3, r7, #4
 80082ea:	0018      	movs	r0, r3
 80082ec:	f7f8 fa85 	bl	80007fa <PostSleepProcessing>
			ulSysTickCTRL = portNVIC_SYSTICK_CTRL;
 80082f0:	4b30      	ldr	r3, [pc, #192]	@ (80083b4 <vPortSuppressTicksAndSleep+0x178>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	613b      	str	r3, [r7, #16]
			portNVIC_SYSTICK_CTRL = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE );
 80082f6:	4b2f      	ldr	r3, [pc, #188]	@ (80083b4 <vPortSuppressTicksAndSleep+0x178>)
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	2101      	movs	r1, #1
 80082fc:	438a      	bics	r2, r1
 80082fe:	601a      	str	r2, [r3, #0]
			__asm volatile( "cpsie i" );
 8008300:	b662      	cpsie	i
			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG ) != 0 )
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	2380      	movs	r3, #128	@ 0x80
 8008306:	025b      	lsls	r3, r3, #9
 8008308:	4013      	ands	r3, r2
 800830a:	d01d      	beq.n	8008348 <vPortSuppressTicksAndSleep+0x10c>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE );
 800830c:	4b2b      	ldr	r3, [pc, #172]	@ (80083bc <vPortSuppressTicksAndSleep+0x180>)
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	4b29      	ldr	r3, [pc, #164]	@ (80083b8 <vPortSuppressTicksAndSleep+0x17c>)
 8008312:	6819      	ldr	r1, [r3, #0]
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	1acb      	subs	r3, r1, r3
 8008318:	18d3      	adds	r3, r2, r3
 800831a:	3b01      	subs	r3, #1
 800831c:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800831e:	4b28      	ldr	r3, [pc, #160]	@ (80083c0 <vPortSuppressTicksAndSleep+0x184>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	429a      	cmp	r2, r3
 8008326:	d304      	bcc.n	8008332 <vPortSuppressTicksAndSleep+0xf6>
 8008328:	4b24      	ldr	r3, [pc, #144]	@ (80083bc <vPortSuppressTicksAndSleep+0x180>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	429a      	cmp	r2, r3
 8008330:	d903      	bls.n	800833a <vPortSuppressTicksAndSleep+0xfe>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8008332:	4b22      	ldr	r3, [pc, #136]	@ (80083bc <vPortSuppressTicksAndSleep+0x180>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3b01      	subs	r3, #1
 8008338:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD = ulCalculatedLoadValue;
 800833a:	4b22      	ldr	r3, [pc, #136]	@ (80083c4 <vPortSuppressTicksAndSleep+0x188>)
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	601a      	str	r2, [r3, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	3b01      	subs	r3, #1
 8008344:	61bb      	str	r3, [r7, #24]
 8008346:	e019      	b.n	800837c <vPortSuppressTicksAndSleep+0x140>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE;
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	4b1c      	ldr	r3, [pc, #112]	@ (80083bc <vPortSuppressTicksAndSleep+0x180>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	435a      	muls	r2, r3
 8008350:	4b19      	ldr	r3, [pc, #100]	@ (80083b8 <vPortSuppressTicksAndSleep+0x17c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8008358:	4b18      	ldr	r3, [pc, #96]	@ (80083bc <vPortSuppressTicksAndSleep+0x180>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	0019      	movs	r1, r3
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f7f7 fee4 	bl	800012c <__udivsi3>
 8008364:	0003      	movs	r3, r0
 8008366:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD = ( ( ulCompleteTickPeriods + 1 ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	4b13      	ldr	r3, [pc, #76]	@ (80083bc <vPortSuppressTicksAndSleep+0x180>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4353      	muls	r3, r2
 8008372:	0019      	movs	r1, r3
 8008374:	4b13      	ldr	r3, [pc, #76]	@ (80083c4 <vPortSuppressTicksAndSleep+0x188>)
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	1a8a      	subs	r2, r1, r2
 800837a:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800837c:	4b0e      	ldr	r3, [pc, #56]	@ (80083b8 <vPortSuppressTicksAndSleep+0x17c>)
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]
			portENTER_CRITICAL();
 8008382:	f7ff fee5 	bl	8008150 <vPortEnterCritical>
				portNVIC_SYSTICK_CTRL |= portNVIC_SYSTICK_ENABLE;
 8008386:	4b0b      	ldr	r3, [pc, #44]	@ (80083b4 <vPortSuppressTicksAndSleep+0x178>)
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	4b0a      	ldr	r3, [pc, #40]	@ (80083b4 <vPortSuppressTicksAndSleep+0x178>)
 800838c:	2101      	movs	r1, #1
 800838e:	430a      	orrs	r2, r1
 8008390:	601a      	str	r2, [r3, #0]
				vTaskStepTick( ulCompleteTickPeriods );
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	0018      	movs	r0, r3
 8008396:	f7ff fba1 	bl	8007adc <vTaskStepTick>
				portNVIC_SYSTICK_LOAD = ulTimerCountsForOneTick - 1UL;
 800839a:	4b08      	ldr	r3, [pc, #32]	@ (80083bc <vPortSuppressTicksAndSleep+0x180>)
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	4b09      	ldr	r3, [pc, #36]	@ (80083c4 <vPortSuppressTicksAndSleep+0x188>)
 80083a0:	3a01      	subs	r2, #1
 80083a2:	601a      	str	r2, [r3, #0]
			portEXIT_CRITICAL();
 80083a4:	f7ff fee6 	bl	8008174 <vPortExitCritical>
	}
 80083a8:	46c0      	nop			@ (mov r8, r8)
 80083aa:	46bd      	mov	sp, r7
 80083ac:	b008      	add	sp, #32
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	200008a4 	.word	0x200008a4
 80083b4:	e000e010 	.word	0xe000e010
 80083b8:	e000e018 	.word	0xe000e018
 80083bc:	200008a0 	.word	0x200008a0
 80083c0:	200008a8 	.word	0x200008a8
 80083c4:	e000e014 	.word	0xe000e014

080083c8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	af00      	add	r7, sp, #0
 /* Calculate the constants required to configure the tick interrupt. */
 #if configUSE_TICKLESS_IDLE == 1
 {
   ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80083cc:	4b17      	ldr	r3, [pc, #92]	@ (800842c <prvSetupTimerInterrupt+0x64>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	22fa      	movs	r2, #250	@ 0xfa
 80083d2:	0091      	lsls	r1, r2, #2
 80083d4:	0018      	movs	r0, r3
 80083d6:	f7f7 fea9 	bl	800012c <__udivsi3>
 80083da:	0003      	movs	r3, r0
 80083dc:	001a      	movs	r2, r3
 80083de:	4b14      	ldr	r3, [pc, #80]	@ (8008430 <prvSetupTimerInterrupt+0x68>)
 80083e0:	601a      	str	r2, [r3, #0]
   xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 80083e2:	4b13      	ldr	r3, [pc, #76]	@ (8008430 <prvSetupTimerInterrupt+0x68>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	0019      	movs	r1, r3
 80083e8:	4812      	ldr	r0, [pc, #72]	@ (8008434 <prvSetupTimerInterrupt+0x6c>)
 80083ea:	f7f7 fe9f 	bl	800012c <__udivsi3>
 80083ee:	0003      	movs	r3, r0
 80083f0:	001a      	movs	r2, r3
 80083f2:	4b11      	ldr	r3, [pc, #68]	@ (8008438 <prvSetupTimerInterrupt+0x70>)
 80083f4:	601a      	str	r2, [r3, #0]
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 80083f6:	4b11      	ldr	r3, [pc, #68]	@ (800843c <prvSetupTimerInterrupt+0x74>)
 80083f8:	222d      	movs	r2, #45	@ 0x2d
 80083fa:	601a      	str	r2, [r3, #0]
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80083fc:	4b10      	ldr	r3, [pc, #64]	@ (8008440 <prvSetupTimerInterrupt+0x78>)
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8008402:	4b10      	ldr	r3, [pc, #64]	@ (8008444 <prvSetupTimerInterrupt+0x7c>)
 8008404:	2200      	movs	r2, #0
 8008406:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008408:	4b08      	ldr	r3, [pc, #32]	@ (800842c <prvSetupTimerInterrupt+0x64>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	22fa      	movs	r2, #250	@ 0xfa
 800840e:	0091      	lsls	r1, r2, #2
 8008410:	0018      	movs	r0, r3
 8008412:	f7f7 fe8b 	bl	800012c <__udivsi3>
 8008416:	0003      	movs	r3, r0
 8008418:	001a      	movs	r2, r3
 800841a:	4b0b      	ldr	r3, [pc, #44]	@ (8008448 <prvSetupTimerInterrupt+0x80>)
 800841c:	3a01      	subs	r2, #1
 800841e:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8008420:	4b07      	ldr	r3, [pc, #28]	@ (8008440 <prvSetupTimerInterrupt+0x78>)
 8008422:	2207      	movs	r2, #7
 8008424:	601a      	str	r2, [r3, #0]
}
 8008426:	46c0      	nop			@ (mov r8, r8)
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	20000004 	.word	0x20000004
 8008430:	200008a0 	.word	0x200008a0
 8008434:	00ffffff 	.word	0x00ffffff
 8008438:	200008a4 	.word	0x200008a4
 800843c:	200008a8 	.word	0x200008a8
 8008440:	e000e010 	.word	0xe000e010
 8008444:	e000e018 	.word	0xe000e018
 8008448:	e000e014 	.word	0xe000e014

0800844c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008454:	2300      	movs	r3, #0
 8008456:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8008458:	f7ff fa72 	bl	8007940 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800845c:	4b4a      	ldr	r3, [pc, #296]	@ (8008588 <pvPortMalloc+0x13c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008464:	f000 f8e4 	bl	8008630 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008468:	4b48      	ldr	r3, [pc, #288]	@ (800858c <pvPortMalloc+0x140>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	4013      	ands	r3, r2
 8008470:	d000      	beq.n	8008474 <pvPortMalloc+0x28>
 8008472:	e07b      	b.n	800856c <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d013      	beq.n	80084a2 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800847a:	2208      	movs	r2, #8
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	189b      	adds	r3, r3, r2
 8008480:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2207      	movs	r2, #7
 8008486:	4013      	ands	r3, r2
 8008488:	d00b      	beq.n	80084a2 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2207      	movs	r2, #7
 800848e:	4393      	bics	r3, r2
 8008490:	3308      	adds	r3, #8
 8008492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2207      	movs	r2, #7
 8008498:	4013      	ands	r3, r2
 800849a:	d002      	beq.n	80084a2 <pvPortMalloc+0x56>
 800849c:	b672      	cpsid	i
 800849e:	46c0      	nop			@ (mov r8, r8)
 80084a0:	e7fd      	b.n	800849e <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d061      	beq.n	800856c <pvPortMalloc+0x120>
 80084a8:	4b39      	ldr	r3, [pc, #228]	@ (8008590 <pvPortMalloc+0x144>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d85c      	bhi.n	800856c <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084b2:	4b38      	ldr	r3, [pc, #224]	@ (8008594 <pvPortMalloc+0x148>)
 80084b4:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80084b6:	4b37      	ldr	r3, [pc, #220]	@ (8008594 <pvPortMalloc+0x148>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084bc:	e004      	b.n	80084c8 <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d903      	bls.n	80084da <pvPortMalloc+0x8e>
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1f1      	bne.n	80084be <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084da:	4b2b      	ldr	r3, [pc, #172]	@ (8008588 <pvPortMalloc+0x13c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d043      	beq.n	800856c <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2208      	movs	r2, #8
 80084ea:	189b      	adds	r3, r3, r2
 80084ec:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	1ad2      	subs	r2, r2, r3
 80084fe:	2308      	movs	r3, #8
 8008500:	005b      	lsls	r3, r3, #1
 8008502:	429a      	cmp	r2, r3
 8008504:	d917      	bls.n	8008536 <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	18d3      	adds	r3, r2, r3
 800850c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2207      	movs	r2, #7
 8008512:	4013      	ands	r3, r2
 8008514:	d002      	beq.n	800851c <pvPortMalloc+0xd0>
 8008516:	b672      	cpsid	i
 8008518:	46c0      	nop			@ (mov r8, r8)
 800851a:	e7fd      	b.n	8008518 <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	1ad2      	subs	r2, r2, r3
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	0018      	movs	r0, r3
 8008532:	f000 f8dd 	bl	80086f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008536:	4b16      	ldr	r3, [pc, #88]	@ (8008590 <pvPortMalloc+0x144>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	1ad2      	subs	r2, r2, r3
 8008540:	4b13      	ldr	r3, [pc, #76]	@ (8008590 <pvPortMalloc+0x144>)
 8008542:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008544:	4b12      	ldr	r3, [pc, #72]	@ (8008590 <pvPortMalloc+0x144>)
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	4b13      	ldr	r3, [pc, #76]	@ (8008598 <pvPortMalloc+0x14c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	429a      	cmp	r2, r3
 800854e:	d203      	bcs.n	8008558 <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008550:	4b0f      	ldr	r3, [pc, #60]	@ (8008590 <pvPortMalloc+0x144>)
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	4b10      	ldr	r3, [pc, #64]	@ (8008598 <pvPortMalloc+0x14c>)
 8008556:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	4b0b      	ldr	r3, [pc, #44]	@ (800858c <pvPortMalloc+0x140>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	431a      	orrs	r2, r3
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800856c:	f7ff fa2a 	bl	80079c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2207      	movs	r2, #7
 8008574:	4013      	ands	r3, r2
 8008576:	d002      	beq.n	800857e <pvPortMalloc+0x132>
 8008578:	b672      	cpsid	i
 800857a:	46c0      	nop			@ (mov r8, r8)
 800857c:	e7fd      	b.n	800857a <pvPortMalloc+0x12e>
	return pvReturn;
 800857e:	68fb      	ldr	r3, [r7, #12]
}
 8008580:	0018      	movs	r0, r3
 8008582:	46bd      	mov	sp, r7
 8008584:	b006      	add	sp, #24
 8008586:	bd80      	pop	{r7, pc}
 8008588:	200014b4 	.word	0x200014b4
 800858c:	200014c0 	.word	0x200014c0
 8008590:	200014b8 	.word	0x200014b8
 8008594:	200014ac 	.word	0x200014ac
 8008598:	200014bc 	.word	0x200014bc

0800859c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d037      	beq.n	800861e <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085ae:	2308      	movs	r3, #8
 80085b0:	425b      	negs	r3, r3
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	18d3      	adds	r3, r2, r3
 80085b6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	4b19      	ldr	r3, [pc, #100]	@ (8008628 <vPortFree+0x8c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4013      	ands	r3, r2
 80085c6:	d102      	bne.n	80085ce <vPortFree+0x32>
 80085c8:	b672      	cpsid	i
 80085ca:	46c0      	nop			@ (mov r8, r8)
 80085cc:	e7fd      	b.n	80085ca <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d002      	beq.n	80085dc <vPortFree+0x40>
 80085d6:	b672      	cpsid	i
 80085d8:	46c0      	nop			@ (mov r8, r8)
 80085da:	e7fd      	b.n	80085d8 <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	4b11      	ldr	r3, [pc, #68]	@ (8008628 <vPortFree+0x8c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4013      	ands	r3, r2
 80085e6:	d01a      	beq.n	800861e <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d116      	bne.n	800861e <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008628 <vPortFree+0x8c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	43db      	mvns	r3, r3
 80085fa:	401a      	ands	r2, r3
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008600:	f7ff f99e 	bl	8007940 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	4b08      	ldr	r3, [pc, #32]	@ (800862c <vPortFree+0x90>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	18d2      	adds	r2, r2, r3
 800860e:	4b07      	ldr	r3, [pc, #28]	@ (800862c <vPortFree+0x90>)
 8008610:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	0018      	movs	r0, r3
 8008616:	f000 f86b 	bl	80086f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800861a:	f7ff f9d3 	bl	80079c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800861e:	46c0      	nop			@ (mov r8, r8)
 8008620:	46bd      	mov	sp, r7
 8008622:	b004      	add	sp, #16
 8008624:	bd80      	pop	{r7, pc}
 8008626:	46c0      	nop			@ (mov r8, r8)
 8008628:	200014c0 	.word	0x200014c0
 800862c:	200014b8 	.word	0x200014b8

08008630 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008636:	23c0      	movs	r3, #192	@ 0xc0
 8008638:	011b      	lsls	r3, r3, #4
 800863a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800863c:	4b26      	ldr	r3, [pc, #152]	@ (80086d8 <prvHeapInit+0xa8>)
 800863e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2207      	movs	r2, #7
 8008644:	4013      	ands	r3, r2
 8008646:	d00c      	beq.n	8008662 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3307      	adds	r3, #7
 800864c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2207      	movs	r2, #7
 8008652:	4393      	bics	r3, r2
 8008654:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	1ad2      	subs	r2, r2, r3
 800865c:	4b1e      	ldr	r3, [pc, #120]	@ (80086d8 <prvHeapInit+0xa8>)
 800865e:	18d3      	adds	r3, r2, r3
 8008660:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008666:	4b1d      	ldr	r3, [pc, #116]	@ (80086dc <prvHeapInit+0xac>)
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800866c:	4b1b      	ldr	r3, [pc, #108]	@ (80086dc <prvHeapInit+0xac>)
 800866e:	2200      	movs	r2, #0
 8008670:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	18d3      	adds	r3, r2, r3
 8008678:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800867a:	2208      	movs	r2, #8
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	1a9b      	subs	r3, r3, r2
 8008680:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2207      	movs	r2, #7
 8008686:	4393      	bics	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	4b14      	ldr	r3, [pc, #80]	@ (80086e0 <prvHeapInit+0xb0>)
 800868e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8008690:	4b13      	ldr	r3, [pc, #76]	@ (80086e0 <prvHeapInit+0xb0>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2200      	movs	r2, #0
 8008696:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008698:	4b11      	ldr	r3, [pc, #68]	@ (80086e0 <prvHeapInit+0xb0>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	1ad2      	subs	r2, r2, r3
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086ae:	4b0c      	ldr	r3, [pc, #48]	@ (80086e0 <prvHeapInit+0xb0>)
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	4b0a      	ldr	r3, [pc, #40]	@ (80086e4 <prvHeapInit+0xb4>)
 80086bc:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	4b09      	ldr	r3, [pc, #36]	@ (80086e8 <prvHeapInit+0xb8>)
 80086c4:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086c6:	4b09      	ldr	r3, [pc, #36]	@ (80086ec <prvHeapInit+0xbc>)
 80086c8:	2280      	movs	r2, #128	@ 0x80
 80086ca:	0612      	lsls	r2, r2, #24
 80086cc:	601a      	str	r2, [r3, #0]
}
 80086ce:	46c0      	nop			@ (mov r8, r8)
 80086d0:	46bd      	mov	sp, r7
 80086d2:	b004      	add	sp, #16
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	46c0      	nop			@ (mov r8, r8)
 80086d8:	200008ac 	.word	0x200008ac
 80086dc:	200014ac 	.word	0x200014ac
 80086e0:	200014b4 	.word	0x200014b4
 80086e4:	200014bc 	.word	0x200014bc
 80086e8:	200014b8 	.word	0x200014b8
 80086ec:	200014c0 	.word	0x200014c0

080086f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086f8:	4b27      	ldr	r3, [pc, #156]	@ (8008798 <prvInsertBlockIntoFreeList+0xa8>)
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	e002      	b.n	8008704 <prvInsertBlockIntoFreeList+0x14>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	429a      	cmp	r2, r3
 800870c:	d8f7      	bhi.n	80086fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	18d3      	adds	r3, r2, r3
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	429a      	cmp	r2, r3
 800871e:	d108      	bne.n	8008732 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	18d2      	adds	r2, r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	18d2      	adds	r2, r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	429a      	cmp	r2, r3
 8008744:	d118      	bne.n	8008778 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	4b14      	ldr	r3, [pc, #80]	@ (800879c <prvInsertBlockIntoFreeList+0xac>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	429a      	cmp	r2, r3
 8008750:	d00d      	beq.n	800876e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	18d2      	adds	r2, r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	601a      	str	r2, [r3, #0]
 800876c:	e008      	b.n	8008780 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800876e:	4b0b      	ldr	r3, [pc, #44]	@ (800879c <prvInsertBlockIntoFreeList+0xac>)
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	e003      	b.n	8008780 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	429a      	cmp	r2, r3
 8008786:	d002      	beq.n	800878e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800878e:	46c0      	nop			@ (mov r8, r8)
 8008790:	46bd      	mov	sp, r7
 8008792:	b004      	add	sp, #16
 8008794:	bd80      	pop	{r7, pc}
 8008796:	46c0      	nop			@ (mov r8, r8)
 8008798:	200014ac 	.word	0x200014ac
 800879c:	200014b4 	.word	0x200014b4

080087a0 <sniprintf>:
 80087a0:	b40c      	push	{r2, r3}
 80087a2:	b530      	push	{r4, r5, lr}
 80087a4:	4b18      	ldr	r3, [pc, #96]	@ (8008808 <sniprintf+0x68>)
 80087a6:	000c      	movs	r4, r1
 80087a8:	681d      	ldr	r5, [r3, #0]
 80087aa:	b09d      	sub	sp, #116	@ 0x74
 80087ac:	2900      	cmp	r1, #0
 80087ae:	da08      	bge.n	80087c2 <sniprintf+0x22>
 80087b0:	238b      	movs	r3, #139	@ 0x8b
 80087b2:	2001      	movs	r0, #1
 80087b4:	602b      	str	r3, [r5, #0]
 80087b6:	4240      	negs	r0, r0
 80087b8:	b01d      	add	sp, #116	@ 0x74
 80087ba:	bc30      	pop	{r4, r5}
 80087bc:	bc08      	pop	{r3}
 80087be:	b002      	add	sp, #8
 80087c0:	4718      	bx	r3
 80087c2:	2382      	movs	r3, #130	@ 0x82
 80087c4:	466a      	mov	r2, sp
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	8293      	strh	r3, [r2, #20]
 80087ca:	2300      	movs	r3, #0
 80087cc:	9002      	str	r0, [sp, #8]
 80087ce:	931b      	str	r3, [sp, #108]	@ 0x6c
 80087d0:	9006      	str	r0, [sp, #24]
 80087d2:	4299      	cmp	r1, r3
 80087d4:	d000      	beq.n	80087d8 <sniprintf+0x38>
 80087d6:	1e4b      	subs	r3, r1, #1
 80087d8:	9304      	str	r3, [sp, #16]
 80087da:	9307      	str	r3, [sp, #28]
 80087dc:	2301      	movs	r3, #1
 80087de:	466a      	mov	r2, sp
 80087e0:	425b      	negs	r3, r3
 80087e2:	82d3      	strh	r3, [r2, #22]
 80087e4:	0028      	movs	r0, r5
 80087e6:	ab21      	add	r3, sp, #132	@ 0x84
 80087e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80087ea:	a902      	add	r1, sp, #8
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	f000 fa11 	bl	8008c14 <_svfiprintf_r>
 80087f2:	1c43      	adds	r3, r0, #1
 80087f4:	da01      	bge.n	80087fa <sniprintf+0x5a>
 80087f6:	238b      	movs	r3, #139	@ 0x8b
 80087f8:	602b      	str	r3, [r5, #0]
 80087fa:	2c00      	cmp	r4, #0
 80087fc:	d0dc      	beq.n	80087b8 <sniprintf+0x18>
 80087fe:	2200      	movs	r2, #0
 8008800:	9b02      	ldr	r3, [sp, #8]
 8008802:	701a      	strb	r2, [r3, #0]
 8008804:	e7d8      	b.n	80087b8 <sniprintf+0x18>
 8008806:	46c0      	nop			@ (mov r8, r8)
 8008808:	20000014 	.word	0x20000014

0800880c <memset>:
 800880c:	0003      	movs	r3, r0
 800880e:	1882      	adds	r2, r0, r2
 8008810:	4293      	cmp	r3, r2
 8008812:	d100      	bne.n	8008816 <memset+0xa>
 8008814:	4770      	bx	lr
 8008816:	7019      	strb	r1, [r3, #0]
 8008818:	3301      	adds	r3, #1
 800881a:	e7f9      	b.n	8008810 <memset+0x4>

0800881c <_reclaim_reent>:
 800881c:	4b33      	ldr	r3, [pc, #204]	@ (80088ec <_reclaim_reent+0xd0>)
 800881e:	b570      	push	{r4, r5, r6, lr}
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	0004      	movs	r4, r0
 8008824:	4283      	cmp	r3, r0
 8008826:	d05f      	beq.n	80088e8 <_reclaim_reent+0xcc>
 8008828:	69c3      	ldr	r3, [r0, #28]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d027      	beq.n	800887e <_reclaim_reent+0x62>
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00d      	beq.n	8008850 <_reclaim_reent+0x34>
 8008834:	2500      	movs	r5, #0
 8008836:	69e3      	ldr	r3, [r4, #28]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	5959      	ldr	r1, [r3, r5]
 800883c:	2900      	cmp	r1, #0
 800883e:	d118      	bne.n	8008872 <_reclaim_reent+0x56>
 8008840:	3504      	adds	r5, #4
 8008842:	2d80      	cmp	r5, #128	@ 0x80
 8008844:	d1f7      	bne.n	8008836 <_reclaim_reent+0x1a>
 8008846:	69e3      	ldr	r3, [r4, #28]
 8008848:	0020      	movs	r0, r4
 800884a:	68d9      	ldr	r1, [r3, #12]
 800884c:	f000 f886 	bl	800895c <_free_r>
 8008850:	69e3      	ldr	r3, [r4, #28]
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	2900      	cmp	r1, #0
 8008856:	d002      	beq.n	800885e <_reclaim_reent+0x42>
 8008858:	0020      	movs	r0, r4
 800885a:	f000 f87f 	bl	800895c <_free_r>
 800885e:	69e3      	ldr	r3, [r4, #28]
 8008860:	689d      	ldr	r5, [r3, #8]
 8008862:	2d00      	cmp	r5, #0
 8008864:	d00b      	beq.n	800887e <_reclaim_reent+0x62>
 8008866:	0029      	movs	r1, r5
 8008868:	0020      	movs	r0, r4
 800886a:	682d      	ldr	r5, [r5, #0]
 800886c:	f000 f876 	bl	800895c <_free_r>
 8008870:	e7f7      	b.n	8008862 <_reclaim_reent+0x46>
 8008872:	680e      	ldr	r6, [r1, #0]
 8008874:	0020      	movs	r0, r4
 8008876:	f000 f871 	bl	800895c <_free_r>
 800887a:	0031      	movs	r1, r6
 800887c:	e7de      	b.n	800883c <_reclaim_reent+0x20>
 800887e:	6961      	ldr	r1, [r4, #20]
 8008880:	2900      	cmp	r1, #0
 8008882:	d002      	beq.n	800888a <_reclaim_reent+0x6e>
 8008884:	0020      	movs	r0, r4
 8008886:	f000 f869 	bl	800895c <_free_r>
 800888a:	69e1      	ldr	r1, [r4, #28]
 800888c:	2900      	cmp	r1, #0
 800888e:	d002      	beq.n	8008896 <_reclaim_reent+0x7a>
 8008890:	0020      	movs	r0, r4
 8008892:	f000 f863 	bl	800895c <_free_r>
 8008896:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008898:	2900      	cmp	r1, #0
 800889a:	d002      	beq.n	80088a2 <_reclaim_reent+0x86>
 800889c:	0020      	movs	r0, r4
 800889e:	f000 f85d 	bl	800895c <_free_r>
 80088a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088a4:	2900      	cmp	r1, #0
 80088a6:	d002      	beq.n	80088ae <_reclaim_reent+0x92>
 80088a8:	0020      	movs	r0, r4
 80088aa:	f000 f857 	bl	800895c <_free_r>
 80088ae:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80088b0:	2900      	cmp	r1, #0
 80088b2:	d002      	beq.n	80088ba <_reclaim_reent+0x9e>
 80088b4:	0020      	movs	r0, r4
 80088b6:	f000 f851 	bl	800895c <_free_r>
 80088ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80088bc:	2900      	cmp	r1, #0
 80088be:	d002      	beq.n	80088c6 <_reclaim_reent+0xaa>
 80088c0:	0020      	movs	r0, r4
 80088c2:	f000 f84b 	bl	800895c <_free_r>
 80088c6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80088c8:	2900      	cmp	r1, #0
 80088ca:	d002      	beq.n	80088d2 <_reclaim_reent+0xb6>
 80088cc:	0020      	movs	r0, r4
 80088ce:	f000 f845 	bl	800895c <_free_r>
 80088d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80088d4:	2900      	cmp	r1, #0
 80088d6:	d002      	beq.n	80088de <_reclaim_reent+0xc2>
 80088d8:	0020      	movs	r0, r4
 80088da:	f000 f83f 	bl	800895c <_free_r>
 80088de:	6a23      	ldr	r3, [r4, #32]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <_reclaim_reent+0xcc>
 80088e4:	0020      	movs	r0, r4
 80088e6:	4798      	blx	r3
 80088e8:	bd70      	pop	{r4, r5, r6, pc}
 80088ea:	46c0      	nop			@ (mov r8, r8)
 80088ec:	20000014 	.word	0x20000014

080088f0 <__errno>:
 80088f0:	4b01      	ldr	r3, [pc, #4]	@ (80088f8 <__errno+0x8>)
 80088f2:	6818      	ldr	r0, [r3, #0]
 80088f4:	4770      	bx	lr
 80088f6:	46c0      	nop			@ (mov r8, r8)
 80088f8:	20000014 	.word	0x20000014

080088fc <__libc_init_array>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	2600      	movs	r6, #0
 8008900:	4c0c      	ldr	r4, [pc, #48]	@ (8008934 <__libc_init_array+0x38>)
 8008902:	4d0d      	ldr	r5, [pc, #52]	@ (8008938 <__libc_init_array+0x3c>)
 8008904:	1b64      	subs	r4, r4, r5
 8008906:	10a4      	asrs	r4, r4, #2
 8008908:	42a6      	cmp	r6, r4
 800890a:	d109      	bne.n	8008920 <__libc_init_array+0x24>
 800890c:	2600      	movs	r6, #0
 800890e:	f000 fc63 	bl	80091d8 <_init>
 8008912:	4c0a      	ldr	r4, [pc, #40]	@ (800893c <__libc_init_array+0x40>)
 8008914:	4d0a      	ldr	r5, [pc, #40]	@ (8008940 <__libc_init_array+0x44>)
 8008916:	1b64      	subs	r4, r4, r5
 8008918:	10a4      	asrs	r4, r4, #2
 800891a:	42a6      	cmp	r6, r4
 800891c:	d105      	bne.n	800892a <__libc_init_array+0x2e>
 800891e:	bd70      	pop	{r4, r5, r6, pc}
 8008920:	00b3      	lsls	r3, r6, #2
 8008922:	58eb      	ldr	r3, [r5, r3]
 8008924:	4798      	blx	r3
 8008926:	3601      	adds	r6, #1
 8008928:	e7ee      	b.n	8008908 <__libc_init_array+0xc>
 800892a:	00b3      	lsls	r3, r6, #2
 800892c:	58eb      	ldr	r3, [r5, r3]
 800892e:	4798      	blx	r3
 8008930:	3601      	adds	r6, #1
 8008932:	e7f2      	b.n	800891a <__libc_init_array+0x1e>
 8008934:	0800939c 	.word	0x0800939c
 8008938:	0800939c 	.word	0x0800939c
 800893c:	080093a0 	.word	0x080093a0
 8008940:	0800939c 	.word	0x0800939c

08008944 <__retarget_lock_acquire_recursive>:
 8008944:	4770      	bx	lr

08008946 <__retarget_lock_release_recursive>:
 8008946:	4770      	bx	lr

08008948 <memcpy>:
 8008948:	2300      	movs	r3, #0
 800894a:	b510      	push	{r4, lr}
 800894c:	429a      	cmp	r2, r3
 800894e:	d100      	bne.n	8008952 <memcpy+0xa>
 8008950:	bd10      	pop	{r4, pc}
 8008952:	5ccc      	ldrb	r4, [r1, r3]
 8008954:	54c4      	strb	r4, [r0, r3]
 8008956:	3301      	adds	r3, #1
 8008958:	e7f8      	b.n	800894c <memcpy+0x4>
	...

0800895c <_free_r>:
 800895c:	b570      	push	{r4, r5, r6, lr}
 800895e:	0005      	movs	r5, r0
 8008960:	1e0c      	subs	r4, r1, #0
 8008962:	d010      	beq.n	8008986 <_free_r+0x2a>
 8008964:	3c04      	subs	r4, #4
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	da00      	bge.n	800896e <_free_r+0x12>
 800896c:	18e4      	adds	r4, r4, r3
 800896e:	0028      	movs	r0, r5
 8008970:	f000 f8e0 	bl	8008b34 <__malloc_lock>
 8008974:	4a1d      	ldr	r2, [pc, #116]	@ (80089ec <_free_r+0x90>)
 8008976:	6813      	ldr	r3, [r2, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d105      	bne.n	8008988 <_free_r+0x2c>
 800897c:	6063      	str	r3, [r4, #4]
 800897e:	6014      	str	r4, [r2, #0]
 8008980:	0028      	movs	r0, r5
 8008982:	f000 f8df 	bl	8008b44 <__malloc_unlock>
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	42a3      	cmp	r3, r4
 800898a:	d908      	bls.n	800899e <_free_r+0x42>
 800898c:	6820      	ldr	r0, [r4, #0]
 800898e:	1821      	adds	r1, r4, r0
 8008990:	428b      	cmp	r3, r1
 8008992:	d1f3      	bne.n	800897c <_free_r+0x20>
 8008994:	6819      	ldr	r1, [r3, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	1809      	adds	r1, r1, r0
 800899a:	6021      	str	r1, [r4, #0]
 800899c:	e7ee      	b.n	800897c <_free_r+0x20>
 800899e:	001a      	movs	r2, r3
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <_free_r+0x4e>
 80089a6:	42a3      	cmp	r3, r4
 80089a8:	d9f9      	bls.n	800899e <_free_r+0x42>
 80089aa:	6811      	ldr	r1, [r2, #0]
 80089ac:	1850      	adds	r0, r2, r1
 80089ae:	42a0      	cmp	r0, r4
 80089b0:	d10b      	bne.n	80089ca <_free_r+0x6e>
 80089b2:	6820      	ldr	r0, [r4, #0]
 80089b4:	1809      	adds	r1, r1, r0
 80089b6:	1850      	adds	r0, r2, r1
 80089b8:	6011      	str	r1, [r2, #0]
 80089ba:	4283      	cmp	r3, r0
 80089bc:	d1e0      	bne.n	8008980 <_free_r+0x24>
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	1841      	adds	r1, r0, r1
 80089c4:	6011      	str	r1, [r2, #0]
 80089c6:	6053      	str	r3, [r2, #4]
 80089c8:	e7da      	b.n	8008980 <_free_r+0x24>
 80089ca:	42a0      	cmp	r0, r4
 80089cc:	d902      	bls.n	80089d4 <_free_r+0x78>
 80089ce:	230c      	movs	r3, #12
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	e7d5      	b.n	8008980 <_free_r+0x24>
 80089d4:	6820      	ldr	r0, [r4, #0]
 80089d6:	1821      	adds	r1, r4, r0
 80089d8:	428b      	cmp	r3, r1
 80089da:	d103      	bne.n	80089e4 <_free_r+0x88>
 80089dc:	6819      	ldr	r1, [r3, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	1809      	adds	r1, r1, r0
 80089e2:	6021      	str	r1, [r4, #0]
 80089e4:	6063      	str	r3, [r4, #4]
 80089e6:	6054      	str	r4, [r2, #4]
 80089e8:	e7ca      	b.n	8008980 <_free_r+0x24>
 80089ea:	46c0      	nop			@ (mov r8, r8)
 80089ec:	20001608 	.word	0x20001608

080089f0 <sbrk_aligned>:
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	4e0f      	ldr	r6, [pc, #60]	@ (8008a30 <sbrk_aligned+0x40>)
 80089f4:	000d      	movs	r5, r1
 80089f6:	6831      	ldr	r1, [r6, #0]
 80089f8:	0004      	movs	r4, r0
 80089fa:	2900      	cmp	r1, #0
 80089fc:	d102      	bne.n	8008a04 <sbrk_aligned+0x14>
 80089fe:	f000 fb95 	bl	800912c <_sbrk_r>
 8008a02:	6030      	str	r0, [r6, #0]
 8008a04:	0029      	movs	r1, r5
 8008a06:	0020      	movs	r0, r4
 8008a08:	f000 fb90 	bl	800912c <_sbrk_r>
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	d103      	bne.n	8008a18 <sbrk_aligned+0x28>
 8008a10:	2501      	movs	r5, #1
 8008a12:	426d      	negs	r5, r5
 8008a14:	0028      	movs	r0, r5
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	2303      	movs	r3, #3
 8008a1a:	1cc5      	adds	r5, r0, #3
 8008a1c:	439d      	bics	r5, r3
 8008a1e:	42a8      	cmp	r0, r5
 8008a20:	d0f8      	beq.n	8008a14 <sbrk_aligned+0x24>
 8008a22:	1a29      	subs	r1, r5, r0
 8008a24:	0020      	movs	r0, r4
 8008a26:	f000 fb81 	bl	800912c <_sbrk_r>
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	d1f2      	bne.n	8008a14 <sbrk_aligned+0x24>
 8008a2e:	e7ef      	b.n	8008a10 <sbrk_aligned+0x20>
 8008a30:	20001604 	.word	0x20001604

08008a34 <_malloc_r>:
 8008a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a36:	2203      	movs	r2, #3
 8008a38:	1ccb      	adds	r3, r1, #3
 8008a3a:	4393      	bics	r3, r2
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	0005      	movs	r5, r0
 8008a40:	001f      	movs	r7, r3
 8008a42:	2b0c      	cmp	r3, #12
 8008a44:	d234      	bcs.n	8008ab0 <_malloc_r+0x7c>
 8008a46:	270c      	movs	r7, #12
 8008a48:	42b9      	cmp	r1, r7
 8008a4a:	d833      	bhi.n	8008ab4 <_malloc_r+0x80>
 8008a4c:	0028      	movs	r0, r5
 8008a4e:	f000 f871 	bl	8008b34 <__malloc_lock>
 8008a52:	4e37      	ldr	r6, [pc, #220]	@ (8008b30 <_malloc_r+0xfc>)
 8008a54:	6833      	ldr	r3, [r6, #0]
 8008a56:	001c      	movs	r4, r3
 8008a58:	2c00      	cmp	r4, #0
 8008a5a:	d12f      	bne.n	8008abc <_malloc_r+0x88>
 8008a5c:	0039      	movs	r1, r7
 8008a5e:	0028      	movs	r0, r5
 8008a60:	f7ff ffc6 	bl	80089f0 <sbrk_aligned>
 8008a64:	0004      	movs	r4, r0
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	d15f      	bne.n	8008b2a <_malloc_r+0xf6>
 8008a6a:	6834      	ldr	r4, [r6, #0]
 8008a6c:	9400      	str	r4, [sp, #0]
 8008a6e:	9b00      	ldr	r3, [sp, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d14a      	bne.n	8008b0a <_malloc_r+0xd6>
 8008a74:	2c00      	cmp	r4, #0
 8008a76:	d052      	beq.n	8008b1e <_malloc_r+0xea>
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	0028      	movs	r0, r5
 8008a7c:	18e3      	adds	r3, r4, r3
 8008a7e:	9900      	ldr	r1, [sp, #0]
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	f000 fb53 	bl	800912c <_sbrk_r>
 8008a86:	9b01      	ldr	r3, [sp, #4]
 8008a88:	4283      	cmp	r3, r0
 8008a8a:	d148      	bne.n	8008b1e <_malloc_r+0xea>
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	0028      	movs	r0, r5
 8008a90:	1aff      	subs	r7, r7, r3
 8008a92:	0039      	movs	r1, r7
 8008a94:	f7ff ffac 	bl	80089f0 <sbrk_aligned>
 8008a98:	3001      	adds	r0, #1
 8008a9a:	d040      	beq.n	8008b1e <_malloc_r+0xea>
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	19db      	adds	r3, r3, r7
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	6833      	ldr	r3, [r6, #0]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	d133      	bne.n	8008b12 <_malloc_r+0xde>
 8008aaa:	9b00      	ldr	r3, [sp, #0]
 8008aac:	6033      	str	r3, [r6, #0]
 8008aae:	e019      	b.n	8008ae4 <_malloc_r+0xb0>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	dac9      	bge.n	8008a48 <_malloc_r+0x14>
 8008ab4:	230c      	movs	r3, #12
 8008ab6:	602b      	str	r3, [r5, #0]
 8008ab8:	2000      	movs	r0, #0
 8008aba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008abc:	6821      	ldr	r1, [r4, #0]
 8008abe:	1bc9      	subs	r1, r1, r7
 8008ac0:	d420      	bmi.n	8008b04 <_malloc_r+0xd0>
 8008ac2:	290b      	cmp	r1, #11
 8008ac4:	d90a      	bls.n	8008adc <_malloc_r+0xa8>
 8008ac6:	19e2      	adds	r2, r4, r7
 8008ac8:	6027      	str	r7, [r4, #0]
 8008aca:	42a3      	cmp	r3, r4
 8008acc:	d104      	bne.n	8008ad8 <_malloc_r+0xa4>
 8008ace:	6032      	str	r2, [r6, #0]
 8008ad0:	6863      	ldr	r3, [r4, #4]
 8008ad2:	6011      	str	r1, [r2, #0]
 8008ad4:	6053      	str	r3, [r2, #4]
 8008ad6:	e005      	b.n	8008ae4 <_malloc_r+0xb0>
 8008ad8:	605a      	str	r2, [r3, #4]
 8008ada:	e7f9      	b.n	8008ad0 <_malloc_r+0x9c>
 8008adc:	6862      	ldr	r2, [r4, #4]
 8008ade:	42a3      	cmp	r3, r4
 8008ae0:	d10e      	bne.n	8008b00 <_malloc_r+0xcc>
 8008ae2:	6032      	str	r2, [r6, #0]
 8008ae4:	0028      	movs	r0, r5
 8008ae6:	f000 f82d 	bl	8008b44 <__malloc_unlock>
 8008aea:	0020      	movs	r0, r4
 8008aec:	2207      	movs	r2, #7
 8008aee:	300b      	adds	r0, #11
 8008af0:	1d23      	adds	r3, r4, #4
 8008af2:	4390      	bics	r0, r2
 8008af4:	1ac2      	subs	r2, r0, r3
 8008af6:	4298      	cmp	r0, r3
 8008af8:	d0df      	beq.n	8008aba <_malloc_r+0x86>
 8008afa:	1a1b      	subs	r3, r3, r0
 8008afc:	50a3      	str	r3, [r4, r2]
 8008afe:	e7dc      	b.n	8008aba <_malloc_r+0x86>
 8008b00:	605a      	str	r2, [r3, #4]
 8008b02:	e7ef      	b.n	8008ae4 <_malloc_r+0xb0>
 8008b04:	0023      	movs	r3, r4
 8008b06:	6864      	ldr	r4, [r4, #4]
 8008b08:	e7a6      	b.n	8008a58 <_malloc_r+0x24>
 8008b0a:	9c00      	ldr	r4, [sp, #0]
 8008b0c:	6863      	ldr	r3, [r4, #4]
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	e7ad      	b.n	8008a6e <_malloc_r+0x3a>
 8008b12:	001a      	movs	r2, r3
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	42a3      	cmp	r3, r4
 8008b18:	d1fb      	bne.n	8008b12 <_malloc_r+0xde>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	e7da      	b.n	8008ad4 <_malloc_r+0xa0>
 8008b1e:	230c      	movs	r3, #12
 8008b20:	0028      	movs	r0, r5
 8008b22:	602b      	str	r3, [r5, #0]
 8008b24:	f000 f80e 	bl	8008b44 <__malloc_unlock>
 8008b28:	e7c6      	b.n	8008ab8 <_malloc_r+0x84>
 8008b2a:	6007      	str	r7, [r0, #0]
 8008b2c:	e7da      	b.n	8008ae4 <_malloc_r+0xb0>
 8008b2e:	46c0      	nop			@ (mov r8, r8)
 8008b30:	20001608 	.word	0x20001608

08008b34 <__malloc_lock>:
 8008b34:	b510      	push	{r4, lr}
 8008b36:	4802      	ldr	r0, [pc, #8]	@ (8008b40 <__malloc_lock+0xc>)
 8008b38:	f7ff ff04 	bl	8008944 <__retarget_lock_acquire_recursive>
 8008b3c:	bd10      	pop	{r4, pc}
 8008b3e:	46c0      	nop			@ (mov r8, r8)
 8008b40:	20001600 	.word	0x20001600

08008b44 <__malloc_unlock>:
 8008b44:	b510      	push	{r4, lr}
 8008b46:	4802      	ldr	r0, [pc, #8]	@ (8008b50 <__malloc_unlock+0xc>)
 8008b48:	f7ff fefd 	bl	8008946 <__retarget_lock_release_recursive>
 8008b4c:	bd10      	pop	{r4, pc}
 8008b4e:	46c0      	nop			@ (mov r8, r8)
 8008b50:	20001600 	.word	0x20001600

08008b54 <__ssputs_r>:
 8008b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b56:	688e      	ldr	r6, [r1, #8]
 8008b58:	b085      	sub	sp, #20
 8008b5a:	001f      	movs	r7, r3
 8008b5c:	000c      	movs	r4, r1
 8008b5e:	680b      	ldr	r3, [r1, #0]
 8008b60:	9002      	str	r0, [sp, #8]
 8008b62:	9203      	str	r2, [sp, #12]
 8008b64:	42be      	cmp	r6, r7
 8008b66:	d830      	bhi.n	8008bca <__ssputs_r+0x76>
 8008b68:	210c      	movs	r1, #12
 8008b6a:	5e62      	ldrsh	r2, [r4, r1]
 8008b6c:	2190      	movs	r1, #144	@ 0x90
 8008b6e:	00c9      	lsls	r1, r1, #3
 8008b70:	420a      	tst	r2, r1
 8008b72:	d028      	beq.n	8008bc6 <__ssputs_r+0x72>
 8008b74:	2003      	movs	r0, #3
 8008b76:	6921      	ldr	r1, [r4, #16]
 8008b78:	1a5b      	subs	r3, r3, r1
 8008b7a:	9301      	str	r3, [sp, #4]
 8008b7c:	6963      	ldr	r3, [r4, #20]
 8008b7e:	4343      	muls	r3, r0
 8008b80:	9801      	ldr	r0, [sp, #4]
 8008b82:	0fdd      	lsrs	r5, r3, #31
 8008b84:	18ed      	adds	r5, r5, r3
 8008b86:	1c7b      	adds	r3, r7, #1
 8008b88:	181b      	adds	r3, r3, r0
 8008b8a:	106d      	asrs	r5, r5, #1
 8008b8c:	42ab      	cmp	r3, r5
 8008b8e:	d900      	bls.n	8008b92 <__ssputs_r+0x3e>
 8008b90:	001d      	movs	r5, r3
 8008b92:	0552      	lsls	r2, r2, #21
 8008b94:	d528      	bpl.n	8008be8 <__ssputs_r+0x94>
 8008b96:	0029      	movs	r1, r5
 8008b98:	9802      	ldr	r0, [sp, #8]
 8008b9a:	f7ff ff4b 	bl	8008a34 <_malloc_r>
 8008b9e:	1e06      	subs	r6, r0, #0
 8008ba0:	d02c      	beq.n	8008bfc <__ssputs_r+0xa8>
 8008ba2:	9a01      	ldr	r2, [sp, #4]
 8008ba4:	6921      	ldr	r1, [r4, #16]
 8008ba6:	f7ff fecf 	bl	8008948 <memcpy>
 8008baa:	89a2      	ldrh	r2, [r4, #12]
 8008bac:	4b18      	ldr	r3, [pc, #96]	@ (8008c10 <__ssputs_r+0xbc>)
 8008bae:	401a      	ands	r2, r3
 8008bb0:	2380      	movs	r3, #128	@ 0x80
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	9b01      	ldr	r3, [sp, #4]
 8008bb8:	6126      	str	r6, [r4, #16]
 8008bba:	18f6      	adds	r6, r6, r3
 8008bbc:	6026      	str	r6, [r4, #0]
 8008bbe:	003e      	movs	r6, r7
 8008bc0:	6165      	str	r5, [r4, #20]
 8008bc2:	1aed      	subs	r5, r5, r3
 8008bc4:	60a5      	str	r5, [r4, #8]
 8008bc6:	42be      	cmp	r6, r7
 8008bc8:	d900      	bls.n	8008bcc <__ssputs_r+0x78>
 8008bca:	003e      	movs	r6, r7
 8008bcc:	0032      	movs	r2, r6
 8008bce:	9903      	ldr	r1, [sp, #12]
 8008bd0:	6820      	ldr	r0, [r4, #0]
 8008bd2:	f000 fa99 	bl	8009108 <memmove>
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	68a3      	ldr	r3, [r4, #8]
 8008bda:	1b9b      	subs	r3, r3, r6
 8008bdc:	60a3      	str	r3, [r4, #8]
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	199b      	adds	r3, r3, r6
 8008be2:	6023      	str	r3, [r4, #0]
 8008be4:	b005      	add	sp, #20
 8008be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008be8:	002a      	movs	r2, r5
 8008bea:	9802      	ldr	r0, [sp, #8]
 8008bec:	f000 fabb 	bl	8009166 <_realloc_r>
 8008bf0:	1e06      	subs	r6, r0, #0
 8008bf2:	d1e0      	bne.n	8008bb6 <__ssputs_r+0x62>
 8008bf4:	6921      	ldr	r1, [r4, #16]
 8008bf6:	9802      	ldr	r0, [sp, #8]
 8008bf8:	f7ff feb0 	bl	800895c <_free_r>
 8008bfc:	230c      	movs	r3, #12
 8008bfe:	2001      	movs	r0, #1
 8008c00:	9a02      	ldr	r2, [sp, #8]
 8008c02:	4240      	negs	r0, r0
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	89a2      	ldrh	r2, [r4, #12]
 8008c08:	3334      	adds	r3, #52	@ 0x34
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	81a3      	strh	r3, [r4, #12]
 8008c0e:	e7e9      	b.n	8008be4 <__ssputs_r+0x90>
 8008c10:	fffffb7f 	.word	0xfffffb7f

08008c14 <_svfiprintf_r>:
 8008c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c16:	b0a1      	sub	sp, #132	@ 0x84
 8008c18:	9003      	str	r0, [sp, #12]
 8008c1a:	001d      	movs	r5, r3
 8008c1c:	898b      	ldrh	r3, [r1, #12]
 8008c1e:	000f      	movs	r7, r1
 8008c20:	0016      	movs	r6, r2
 8008c22:	061b      	lsls	r3, r3, #24
 8008c24:	d511      	bpl.n	8008c4a <_svfiprintf_r+0x36>
 8008c26:	690b      	ldr	r3, [r1, #16]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10e      	bne.n	8008c4a <_svfiprintf_r+0x36>
 8008c2c:	2140      	movs	r1, #64	@ 0x40
 8008c2e:	f7ff ff01 	bl	8008a34 <_malloc_r>
 8008c32:	6038      	str	r0, [r7, #0]
 8008c34:	6138      	str	r0, [r7, #16]
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d105      	bne.n	8008c46 <_svfiprintf_r+0x32>
 8008c3a:	230c      	movs	r3, #12
 8008c3c:	9a03      	ldr	r2, [sp, #12]
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	2001      	movs	r0, #1
 8008c42:	4240      	negs	r0, r0
 8008c44:	e0cf      	b.n	8008de6 <_svfiprintf_r+0x1d2>
 8008c46:	2340      	movs	r3, #64	@ 0x40
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	ac08      	add	r4, sp, #32
 8008c4e:	6163      	str	r3, [r4, #20]
 8008c50:	3320      	adds	r3, #32
 8008c52:	7663      	strb	r3, [r4, #25]
 8008c54:	3310      	adds	r3, #16
 8008c56:	76a3      	strb	r3, [r4, #26]
 8008c58:	9507      	str	r5, [sp, #28]
 8008c5a:	0035      	movs	r5, r6
 8008c5c:	782b      	ldrb	r3, [r5, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <_svfiprintf_r+0x52>
 8008c62:	2b25      	cmp	r3, #37	@ 0x25
 8008c64:	d148      	bne.n	8008cf8 <_svfiprintf_r+0xe4>
 8008c66:	1bab      	subs	r3, r5, r6
 8008c68:	9305      	str	r3, [sp, #20]
 8008c6a:	42b5      	cmp	r5, r6
 8008c6c:	d00b      	beq.n	8008c86 <_svfiprintf_r+0x72>
 8008c6e:	0032      	movs	r2, r6
 8008c70:	0039      	movs	r1, r7
 8008c72:	9803      	ldr	r0, [sp, #12]
 8008c74:	f7ff ff6e 	bl	8008b54 <__ssputs_r>
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d100      	bne.n	8008c7e <_svfiprintf_r+0x6a>
 8008c7c:	e0ae      	b.n	8008ddc <_svfiprintf_r+0x1c8>
 8008c7e:	6963      	ldr	r3, [r4, #20]
 8008c80:	9a05      	ldr	r2, [sp, #20]
 8008c82:	189b      	adds	r3, r3, r2
 8008c84:	6163      	str	r3, [r4, #20]
 8008c86:	782b      	ldrb	r3, [r5, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d100      	bne.n	8008c8e <_svfiprintf_r+0x7a>
 8008c8c:	e0a6      	b.n	8008ddc <_svfiprintf_r+0x1c8>
 8008c8e:	2201      	movs	r2, #1
 8008c90:	2300      	movs	r3, #0
 8008c92:	4252      	negs	r2, r2
 8008c94:	6062      	str	r2, [r4, #4]
 8008c96:	a904      	add	r1, sp, #16
 8008c98:	3254      	adds	r2, #84	@ 0x54
 8008c9a:	1852      	adds	r2, r2, r1
 8008c9c:	1c6e      	adds	r6, r5, #1
 8008c9e:	6023      	str	r3, [r4, #0]
 8008ca0:	60e3      	str	r3, [r4, #12]
 8008ca2:	60a3      	str	r3, [r4, #8]
 8008ca4:	7013      	strb	r3, [r2, #0]
 8008ca6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008ca8:	4b54      	ldr	r3, [pc, #336]	@ (8008dfc <_svfiprintf_r+0x1e8>)
 8008caa:	2205      	movs	r2, #5
 8008cac:	0018      	movs	r0, r3
 8008cae:	7831      	ldrb	r1, [r6, #0]
 8008cb0:	9305      	str	r3, [sp, #20]
 8008cb2:	f000 fa4d 	bl	8009150 <memchr>
 8008cb6:	1c75      	adds	r5, r6, #1
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d11f      	bne.n	8008cfc <_svfiprintf_r+0xe8>
 8008cbc:	6822      	ldr	r2, [r4, #0]
 8008cbe:	06d3      	lsls	r3, r2, #27
 8008cc0:	d504      	bpl.n	8008ccc <_svfiprintf_r+0xb8>
 8008cc2:	2353      	movs	r3, #83	@ 0x53
 8008cc4:	a904      	add	r1, sp, #16
 8008cc6:	185b      	adds	r3, r3, r1
 8008cc8:	2120      	movs	r1, #32
 8008cca:	7019      	strb	r1, [r3, #0]
 8008ccc:	0713      	lsls	r3, r2, #28
 8008cce:	d504      	bpl.n	8008cda <_svfiprintf_r+0xc6>
 8008cd0:	2353      	movs	r3, #83	@ 0x53
 8008cd2:	a904      	add	r1, sp, #16
 8008cd4:	185b      	adds	r3, r3, r1
 8008cd6:	212b      	movs	r1, #43	@ 0x2b
 8008cd8:	7019      	strb	r1, [r3, #0]
 8008cda:	7833      	ldrb	r3, [r6, #0]
 8008cdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cde:	d016      	beq.n	8008d0e <_svfiprintf_r+0xfa>
 8008ce0:	0035      	movs	r5, r6
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	200a      	movs	r0, #10
 8008ce6:	68e3      	ldr	r3, [r4, #12]
 8008ce8:	782a      	ldrb	r2, [r5, #0]
 8008cea:	1c6e      	adds	r6, r5, #1
 8008cec:	3a30      	subs	r2, #48	@ 0x30
 8008cee:	2a09      	cmp	r2, #9
 8008cf0:	d950      	bls.n	8008d94 <_svfiprintf_r+0x180>
 8008cf2:	2900      	cmp	r1, #0
 8008cf4:	d111      	bne.n	8008d1a <_svfiprintf_r+0x106>
 8008cf6:	e017      	b.n	8008d28 <_svfiprintf_r+0x114>
 8008cf8:	3501      	adds	r5, #1
 8008cfa:	e7af      	b.n	8008c5c <_svfiprintf_r+0x48>
 8008cfc:	9b05      	ldr	r3, [sp, #20]
 8008cfe:	6822      	ldr	r2, [r4, #0]
 8008d00:	1ac0      	subs	r0, r0, r3
 8008d02:	2301      	movs	r3, #1
 8008d04:	4083      	lsls	r3, r0
 8008d06:	4313      	orrs	r3, r2
 8008d08:	002e      	movs	r6, r5
 8008d0a:	6023      	str	r3, [r4, #0]
 8008d0c:	e7cc      	b.n	8008ca8 <_svfiprintf_r+0x94>
 8008d0e:	9b07      	ldr	r3, [sp, #28]
 8008d10:	1d19      	adds	r1, r3, #4
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	9107      	str	r1, [sp, #28]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	db01      	blt.n	8008d1e <_svfiprintf_r+0x10a>
 8008d1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d1c:	e004      	b.n	8008d28 <_svfiprintf_r+0x114>
 8008d1e:	425b      	negs	r3, r3
 8008d20:	60e3      	str	r3, [r4, #12]
 8008d22:	2302      	movs	r3, #2
 8008d24:	4313      	orrs	r3, r2
 8008d26:	6023      	str	r3, [r4, #0]
 8008d28:	782b      	ldrb	r3, [r5, #0]
 8008d2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d2c:	d10c      	bne.n	8008d48 <_svfiprintf_r+0x134>
 8008d2e:	786b      	ldrb	r3, [r5, #1]
 8008d30:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d32:	d134      	bne.n	8008d9e <_svfiprintf_r+0x18a>
 8008d34:	9b07      	ldr	r3, [sp, #28]
 8008d36:	3502      	adds	r5, #2
 8008d38:	1d1a      	adds	r2, r3, #4
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	9207      	str	r2, [sp, #28]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	da01      	bge.n	8008d46 <_svfiprintf_r+0x132>
 8008d42:	2301      	movs	r3, #1
 8008d44:	425b      	negs	r3, r3
 8008d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d48:	4e2d      	ldr	r6, [pc, #180]	@ (8008e00 <_svfiprintf_r+0x1ec>)
 8008d4a:	2203      	movs	r2, #3
 8008d4c:	0030      	movs	r0, r6
 8008d4e:	7829      	ldrb	r1, [r5, #0]
 8008d50:	f000 f9fe 	bl	8009150 <memchr>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d006      	beq.n	8008d66 <_svfiprintf_r+0x152>
 8008d58:	2340      	movs	r3, #64	@ 0x40
 8008d5a:	1b80      	subs	r0, r0, r6
 8008d5c:	4083      	lsls	r3, r0
 8008d5e:	6822      	ldr	r2, [r4, #0]
 8008d60:	3501      	adds	r5, #1
 8008d62:	4313      	orrs	r3, r2
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	7829      	ldrb	r1, [r5, #0]
 8008d68:	2206      	movs	r2, #6
 8008d6a:	4826      	ldr	r0, [pc, #152]	@ (8008e04 <_svfiprintf_r+0x1f0>)
 8008d6c:	1c6e      	adds	r6, r5, #1
 8008d6e:	7621      	strb	r1, [r4, #24]
 8008d70:	f000 f9ee 	bl	8009150 <memchr>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d038      	beq.n	8008dea <_svfiprintf_r+0x1d6>
 8008d78:	4b23      	ldr	r3, [pc, #140]	@ (8008e08 <_svfiprintf_r+0x1f4>)
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d122      	bne.n	8008dc4 <_svfiprintf_r+0x1b0>
 8008d7e:	2207      	movs	r2, #7
 8008d80:	9b07      	ldr	r3, [sp, #28]
 8008d82:	3307      	adds	r3, #7
 8008d84:	4393      	bics	r3, r2
 8008d86:	3308      	adds	r3, #8
 8008d88:	9307      	str	r3, [sp, #28]
 8008d8a:	6963      	ldr	r3, [r4, #20]
 8008d8c:	9a04      	ldr	r2, [sp, #16]
 8008d8e:	189b      	adds	r3, r3, r2
 8008d90:	6163      	str	r3, [r4, #20]
 8008d92:	e762      	b.n	8008c5a <_svfiprintf_r+0x46>
 8008d94:	4343      	muls	r3, r0
 8008d96:	0035      	movs	r5, r6
 8008d98:	2101      	movs	r1, #1
 8008d9a:	189b      	adds	r3, r3, r2
 8008d9c:	e7a4      	b.n	8008ce8 <_svfiprintf_r+0xd4>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	200a      	movs	r0, #10
 8008da2:	0019      	movs	r1, r3
 8008da4:	3501      	adds	r5, #1
 8008da6:	6063      	str	r3, [r4, #4]
 8008da8:	782a      	ldrb	r2, [r5, #0]
 8008daa:	1c6e      	adds	r6, r5, #1
 8008dac:	3a30      	subs	r2, #48	@ 0x30
 8008dae:	2a09      	cmp	r2, #9
 8008db0:	d903      	bls.n	8008dba <_svfiprintf_r+0x1a6>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0c8      	beq.n	8008d48 <_svfiprintf_r+0x134>
 8008db6:	9109      	str	r1, [sp, #36]	@ 0x24
 8008db8:	e7c6      	b.n	8008d48 <_svfiprintf_r+0x134>
 8008dba:	4341      	muls	r1, r0
 8008dbc:	0035      	movs	r5, r6
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	1889      	adds	r1, r1, r2
 8008dc2:	e7f1      	b.n	8008da8 <_svfiprintf_r+0x194>
 8008dc4:	aa07      	add	r2, sp, #28
 8008dc6:	9200      	str	r2, [sp, #0]
 8008dc8:	0021      	movs	r1, r4
 8008dca:	003a      	movs	r2, r7
 8008dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8008e0c <_svfiprintf_r+0x1f8>)
 8008dce:	9803      	ldr	r0, [sp, #12]
 8008dd0:	e000      	b.n	8008dd4 <_svfiprintf_r+0x1c0>
 8008dd2:	bf00      	nop
 8008dd4:	9004      	str	r0, [sp, #16]
 8008dd6:	9b04      	ldr	r3, [sp, #16]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	d1d6      	bne.n	8008d8a <_svfiprintf_r+0x176>
 8008ddc:	89bb      	ldrh	r3, [r7, #12]
 8008dde:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008de0:	065b      	lsls	r3, r3, #25
 8008de2:	d500      	bpl.n	8008de6 <_svfiprintf_r+0x1d2>
 8008de4:	e72c      	b.n	8008c40 <_svfiprintf_r+0x2c>
 8008de6:	b021      	add	sp, #132	@ 0x84
 8008de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dea:	aa07      	add	r2, sp, #28
 8008dec:	9200      	str	r2, [sp, #0]
 8008dee:	0021      	movs	r1, r4
 8008df0:	003a      	movs	r2, r7
 8008df2:	4b06      	ldr	r3, [pc, #24]	@ (8008e0c <_svfiprintf_r+0x1f8>)
 8008df4:	9803      	ldr	r0, [sp, #12]
 8008df6:	f000 f87b 	bl	8008ef0 <_printf_i>
 8008dfa:	e7eb      	b.n	8008dd4 <_svfiprintf_r+0x1c0>
 8008dfc:	08009360 	.word	0x08009360
 8008e00:	08009366 	.word	0x08009366
 8008e04:	0800936a 	.word	0x0800936a
 8008e08:	00000000 	.word	0x00000000
 8008e0c:	08008b55 	.word	0x08008b55

08008e10 <_printf_common>:
 8008e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e12:	0016      	movs	r6, r2
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	688a      	ldr	r2, [r1, #8]
 8008e18:	690b      	ldr	r3, [r1, #16]
 8008e1a:	000c      	movs	r4, r1
 8008e1c:	9000      	str	r0, [sp, #0]
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	da00      	bge.n	8008e24 <_printf_common+0x14>
 8008e22:	0013      	movs	r3, r2
 8008e24:	0022      	movs	r2, r4
 8008e26:	6033      	str	r3, [r6, #0]
 8008e28:	3243      	adds	r2, #67	@ 0x43
 8008e2a:	7812      	ldrb	r2, [r2, #0]
 8008e2c:	2a00      	cmp	r2, #0
 8008e2e:	d001      	beq.n	8008e34 <_printf_common+0x24>
 8008e30:	3301      	adds	r3, #1
 8008e32:	6033      	str	r3, [r6, #0]
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	069b      	lsls	r3, r3, #26
 8008e38:	d502      	bpl.n	8008e40 <_printf_common+0x30>
 8008e3a:	6833      	ldr	r3, [r6, #0]
 8008e3c:	3302      	adds	r3, #2
 8008e3e:	6033      	str	r3, [r6, #0]
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	2306      	movs	r3, #6
 8008e44:	0015      	movs	r5, r2
 8008e46:	401d      	ands	r5, r3
 8008e48:	421a      	tst	r2, r3
 8008e4a:	d027      	beq.n	8008e9c <_printf_common+0x8c>
 8008e4c:	0023      	movs	r3, r4
 8008e4e:	3343      	adds	r3, #67	@ 0x43
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	1e5a      	subs	r2, r3, #1
 8008e54:	4193      	sbcs	r3, r2
 8008e56:	6822      	ldr	r2, [r4, #0]
 8008e58:	0692      	lsls	r2, r2, #26
 8008e5a:	d430      	bmi.n	8008ebe <_printf_common+0xae>
 8008e5c:	0022      	movs	r2, r4
 8008e5e:	9901      	ldr	r1, [sp, #4]
 8008e60:	9800      	ldr	r0, [sp, #0]
 8008e62:	9d08      	ldr	r5, [sp, #32]
 8008e64:	3243      	adds	r2, #67	@ 0x43
 8008e66:	47a8      	blx	r5
 8008e68:	3001      	adds	r0, #1
 8008e6a:	d025      	beq.n	8008eb8 <_printf_common+0xa8>
 8008e6c:	2206      	movs	r2, #6
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	2500      	movs	r5, #0
 8008e72:	4013      	ands	r3, r2
 8008e74:	2b04      	cmp	r3, #4
 8008e76:	d105      	bne.n	8008e84 <_printf_common+0x74>
 8008e78:	6833      	ldr	r3, [r6, #0]
 8008e7a:	68e5      	ldr	r5, [r4, #12]
 8008e7c:	1aed      	subs	r5, r5, r3
 8008e7e:	43eb      	mvns	r3, r5
 8008e80:	17db      	asrs	r3, r3, #31
 8008e82:	401d      	ands	r5, r3
 8008e84:	68a3      	ldr	r3, [r4, #8]
 8008e86:	6922      	ldr	r2, [r4, #16]
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	dd01      	ble.n	8008e90 <_printf_common+0x80>
 8008e8c:	1a9b      	subs	r3, r3, r2
 8008e8e:	18ed      	adds	r5, r5, r3
 8008e90:	2600      	movs	r6, #0
 8008e92:	42b5      	cmp	r5, r6
 8008e94:	d120      	bne.n	8008ed8 <_printf_common+0xc8>
 8008e96:	2000      	movs	r0, #0
 8008e98:	e010      	b.n	8008ebc <_printf_common+0xac>
 8008e9a:	3501      	adds	r5, #1
 8008e9c:	68e3      	ldr	r3, [r4, #12]
 8008e9e:	6832      	ldr	r2, [r6, #0]
 8008ea0:	1a9b      	subs	r3, r3, r2
 8008ea2:	42ab      	cmp	r3, r5
 8008ea4:	ddd2      	ble.n	8008e4c <_printf_common+0x3c>
 8008ea6:	0022      	movs	r2, r4
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	9901      	ldr	r1, [sp, #4]
 8008eac:	9800      	ldr	r0, [sp, #0]
 8008eae:	9f08      	ldr	r7, [sp, #32]
 8008eb0:	3219      	adds	r2, #25
 8008eb2:	47b8      	blx	r7
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	d1f0      	bne.n	8008e9a <_printf_common+0x8a>
 8008eb8:	2001      	movs	r0, #1
 8008eba:	4240      	negs	r0, r0
 8008ebc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ebe:	2030      	movs	r0, #48	@ 0x30
 8008ec0:	18e1      	adds	r1, r4, r3
 8008ec2:	3143      	adds	r1, #67	@ 0x43
 8008ec4:	7008      	strb	r0, [r1, #0]
 8008ec6:	0021      	movs	r1, r4
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	3145      	adds	r1, #69	@ 0x45
 8008ecc:	7809      	ldrb	r1, [r1, #0]
 8008ece:	18a2      	adds	r2, r4, r2
 8008ed0:	3243      	adds	r2, #67	@ 0x43
 8008ed2:	3302      	adds	r3, #2
 8008ed4:	7011      	strb	r1, [r2, #0]
 8008ed6:	e7c1      	b.n	8008e5c <_printf_common+0x4c>
 8008ed8:	0022      	movs	r2, r4
 8008eda:	2301      	movs	r3, #1
 8008edc:	9901      	ldr	r1, [sp, #4]
 8008ede:	9800      	ldr	r0, [sp, #0]
 8008ee0:	9f08      	ldr	r7, [sp, #32]
 8008ee2:	321a      	adds	r2, #26
 8008ee4:	47b8      	blx	r7
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	d0e6      	beq.n	8008eb8 <_printf_common+0xa8>
 8008eea:	3601      	adds	r6, #1
 8008eec:	e7d1      	b.n	8008e92 <_printf_common+0x82>
	...

08008ef0 <_printf_i>:
 8008ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ef2:	b08b      	sub	sp, #44	@ 0x2c
 8008ef4:	9206      	str	r2, [sp, #24]
 8008ef6:	000a      	movs	r2, r1
 8008ef8:	3243      	adds	r2, #67	@ 0x43
 8008efa:	9307      	str	r3, [sp, #28]
 8008efc:	9005      	str	r0, [sp, #20]
 8008efe:	9203      	str	r2, [sp, #12]
 8008f00:	7e0a      	ldrb	r2, [r1, #24]
 8008f02:	000c      	movs	r4, r1
 8008f04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f06:	2a78      	cmp	r2, #120	@ 0x78
 8008f08:	d809      	bhi.n	8008f1e <_printf_i+0x2e>
 8008f0a:	2a62      	cmp	r2, #98	@ 0x62
 8008f0c:	d80b      	bhi.n	8008f26 <_printf_i+0x36>
 8008f0e:	2a00      	cmp	r2, #0
 8008f10:	d100      	bne.n	8008f14 <_printf_i+0x24>
 8008f12:	e0ba      	b.n	800908a <_printf_i+0x19a>
 8008f14:	497a      	ldr	r1, [pc, #488]	@ (8009100 <_printf_i+0x210>)
 8008f16:	9104      	str	r1, [sp, #16]
 8008f18:	2a58      	cmp	r2, #88	@ 0x58
 8008f1a:	d100      	bne.n	8008f1e <_printf_i+0x2e>
 8008f1c:	e08e      	b.n	800903c <_printf_i+0x14c>
 8008f1e:	0025      	movs	r5, r4
 8008f20:	3542      	adds	r5, #66	@ 0x42
 8008f22:	702a      	strb	r2, [r5, #0]
 8008f24:	e022      	b.n	8008f6c <_printf_i+0x7c>
 8008f26:	0010      	movs	r0, r2
 8008f28:	3863      	subs	r0, #99	@ 0x63
 8008f2a:	2815      	cmp	r0, #21
 8008f2c:	d8f7      	bhi.n	8008f1e <_printf_i+0x2e>
 8008f2e:	f7f7 f8f3 	bl	8000118 <__gnu_thumb1_case_shi>
 8008f32:	0016      	.short	0x0016
 8008f34:	fff6001f 	.word	0xfff6001f
 8008f38:	fff6fff6 	.word	0xfff6fff6
 8008f3c:	001ffff6 	.word	0x001ffff6
 8008f40:	fff6fff6 	.word	0xfff6fff6
 8008f44:	fff6fff6 	.word	0xfff6fff6
 8008f48:	0036009f 	.word	0x0036009f
 8008f4c:	fff6007e 	.word	0xfff6007e
 8008f50:	00b0fff6 	.word	0x00b0fff6
 8008f54:	0036fff6 	.word	0x0036fff6
 8008f58:	fff6fff6 	.word	0xfff6fff6
 8008f5c:	0082      	.short	0x0082
 8008f5e:	0025      	movs	r5, r4
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	3542      	adds	r5, #66	@ 0x42
 8008f64:	1d11      	adds	r1, r2, #4
 8008f66:	6019      	str	r1, [r3, #0]
 8008f68:	6813      	ldr	r3, [r2, #0]
 8008f6a:	702b      	strb	r3, [r5, #0]
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e09e      	b.n	80090ae <_printf_i+0x1be>
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	6809      	ldr	r1, [r1, #0]
 8008f74:	1d02      	adds	r2, r0, #4
 8008f76:	060d      	lsls	r5, r1, #24
 8008f78:	d50b      	bpl.n	8008f92 <_printf_i+0xa2>
 8008f7a:	6806      	ldr	r6, [r0, #0]
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	2e00      	cmp	r6, #0
 8008f80:	da03      	bge.n	8008f8a <_printf_i+0x9a>
 8008f82:	232d      	movs	r3, #45	@ 0x2d
 8008f84:	9a03      	ldr	r2, [sp, #12]
 8008f86:	4276      	negs	r6, r6
 8008f88:	7013      	strb	r3, [r2, #0]
 8008f8a:	4b5d      	ldr	r3, [pc, #372]	@ (8009100 <_printf_i+0x210>)
 8008f8c:	270a      	movs	r7, #10
 8008f8e:	9304      	str	r3, [sp, #16]
 8008f90:	e018      	b.n	8008fc4 <_printf_i+0xd4>
 8008f92:	6806      	ldr	r6, [r0, #0]
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	0649      	lsls	r1, r1, #25
 8008f98:	d5f1      	bpl.n	8008f7e <_printf_i+0x8e>
 8008f9a:	b236      	sxth	r6, r6
 8008f9c:	e7ef      	b.n	8008f7e <_printf_i+0x8e>
 8008f9e:	6808      	ldr	r0, [r1, #0]
 8008fa0:	6819      	ldr	r1, [r3, #0]
 8008fa2:	c940      	ldmia	r1!, {r6}
 8008fa4:	0605      	lsls	r5, r0, #24
 8008fa6:	d402      	bmi.n	8008fae <_printf_i+0xbe>
 8008fa8:	0640      	lsls	r0, r0, #25
 8008faa:	d500      	bpl.n	8008fae <_printf_i+0xbe>
 8008fac:	b2b6      	uxth	r6, r6
 8008fae:	6019      	str	r1, [r3, #0]
 8008fb0:	4b53      	ldr	r3, [pc, #332]	@ (8009100 <_printf_i+0x210>)
 8008fb2:	270a      	movs	r7, #10
 8008fb4:	9304      	str	r3, [sp, #16]
 8008fb6:	2a6f      	cmp	r2, #111	@ 0x6f
 8008fb8:	d100      	bne.n	8008fbc <_printf_i+0xcc>
 8008fba:	3f02      	subs	r7, #2
 8008fbc:	0023      	movs	r3, r4
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	3343      	adds	r3, #67	@ 0x43
 8008fc2:	701a      	strb	r2, [r3, #0]
 8008fc4:	6863      	ldr	r3, [r4, #4]
 8008fc6:	60a3      	str	r3, [r4, #8]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	db06      	blt.n	8008fda <_printf_i+0xea>
 8008fcc:	2104      	movs	r1, #4
 8008fce:	6822      	ldr	r2, [r4, #0]
 8008fd0:	9d03      	ldr	r5, [sp, #12]
 8008fd2:	438a      	bics	r2, r1
 8008fd4:	6022      	str	r2, [r4, #0]
 8008fd6:	4333      	orrs	r3, r6
 8008fd8:	d00c      	beq.n	8008ff4 <_printf_i+0x104>
 8008fda:	9d03      	ldr	r5, [sp, #12]
 8008fdc:	0030      	movs	r0, r6
 8008fde:	0039      	movs	r1, r7
 8008fe0:	f7f7 f92a 	bl	8000238 <__aeabi_uidivmod>
 8008fe4:	9b04      	ldr	r3, [sp, #16]
 8008fe6:	3d01      	subs	r5, #1
 8008fe8:	5c5b      	ldrb	r3, [r3, r1]
 8008fea:	702b      	strb	r3, [r5, #0]
 8008fec:	0033      	movs	r3, r6
 8008fee:	0006      	movs	r6, r0
 8008ff0:	429f      	cmp	r7, r3
 8008ff2:	d9f3      	bls.n	8008fdc <_printf_i+0xec>
 8008ff4:	2f08      	cmp	r7, #8
 8008ff6:	d109      	bne.n	800900c <_printf_i+0x11c>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	07db      	lsls	r3, r3, #31
 8008ffc:	d506      	bpl.n	800900c <_printf_i+0x11c>
 8008ffe:	6862      	ldr	r2, [r4, #4]
 8009000:	6923      	ldr	r3, [r4, #16]
 8009002:	429a      	cmp	r2, r3
 8009004:	dc02      	bgt.n	800900c <_printf_i+0x11c>
 8009006:	2330      	movs	r3, #48	@ 0x30
 8009008:	3d01      	subs	r5, #1
 800900a:	702b      	strb	r3, [r5, #0]
 800900c:	9b03      	ldr	r3, [sp, #12]
 800900e:	1b5b      	subs	r3, r3, r5
 8009010:	6123      	str	r3, [r4, #16]
 8009012:	9b07      	ldr	r3, [sp, #28]
 8009014:	0021      	movs	r1, r4
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	9805      	ldr	r0, [sp, #20]
 800901a:	9b06      	ldr	r3, [sp, #24]
 800901c:	aa09      	add	r2, sp, #36	@ 0x24
 800901e:	f7ff fef7 	bl	8008e10 <_printf_common>
 8009022:	3001      	adds	r0, #1
 8009024:	d148      	bne.n	80090b8 <_printf_i+0x1c8>
 8009026:	2001      	movs	r0, #1
 8009028:	4240      	negs	r0, r0
 800902a:	b00b      	add	sp, #44	@ 0x2c
 800902c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800902e:	2220      	movs	r2, #32
 8009030:	6809      	ldr	r1, [r1, #0]
 8009032:	430a      	orrs	r2, r1
 8009034:	6022      	str	r2, [r4, #0]
 8009036:	2278      	movs	r2, #120	@ 0x78
 8009038:	4932      	ldr	r1, [pc, #200]	@ (8009104 <_printf_i+0x214>)
 800903a:	9104      	str	r1, [sp, #16]
 800903c:	0021      	movs	r1, r4
 800903e:	3145      	adds	r1, #69	@ 0x45
 8009040:	700a      	strb	r2, [r1, #0]
 8009042:	6819      	ldr	r1, [r3, #0]
 8009044:	6822      	ldr	r2, [r4, #0]
 8009046:	c940      	ldmia	r1!, {r6}
 8009048:	0610      	lsls	r0, r2, #24
 800904a:	d402      	bmi.n	8009052 <_printf_i+0x162>
 800904c:	0650      	lsls	r0, r2, #25
 800904e:	d500      	bpl.n	8009052 <_printf_i+0x162>
 8009050:	b2b6      	uxth	r6, r6
 8009052:	6019      	str	r1, [r3, #0]
 8009054:	07d3      	lsls	r3, r2, #31
 8009056:	d502      	bpl.n	800905e <_printf_i+0x16e>
 8009058:	2320      	movs	r3, #32
 800905a:	4313      	orrs	r3, r2
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	2e00      	cmp	r6, #0
 8009060:	d001      	beq.n	8009066 <_printf_i+0x176>
 8009062:	2710      	movs	r7, #16
 8009064:	e7aa      	b.n	8008fbc <_printf_i+0xcc>
 8009066:	2220      	movs	r2, #32
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	4393      	bics	r3, r2
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	e7f8      	b.n	8009062 <_printf_i+0x172>
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	680d      	ldr	r5, [r1, #0]
 8009074:	1d10      	adds	r0, r2, #4
 8009076:	6949      	ldr	r1, [r1, #20]
 8009078:	6018      	str	r0, [r3, #0]
 800907a:	6813      	ldr	r3, [r2, #0]
 800907c:	062e      	lsls	r6, r5, #24
 800907e:	d501      	bpl.n	8009084 <_printf_i+0x194>
 8009080:	6019      	str	r1, [r3, #0]
 8009082:	e002      	b.n	800908a <_printf_i+0x19a>
 8009084:	066d      	lsls	r5, r5, #25
 8009086:	d5fb      	bpl.n	8009080 <_printf_i+0x190>
 8009088:	8019      	strh	r1, [r3, #0]
 800908a:	2300      	movs	r3, #0
 800908c:	9d03      	ldr	r5, [sp, #12]
 800908e:	6123      	str	r3, [r4, #16]
 8009090:	e7bf      	b.n	8009012 <_printf_i+0x122>
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	1d11      	adds	r1, r2, #4
 8009096:	6019      	str	r1, [r3, #0]
 8009098:	6815      	ldr	r5, [r2, #0]
 800909a:	2100      	movs	r1, #0
 800909c:	0028      	movs	r0, r5
 800909e:	6862      	ldr	r2, [r4, #4]
 80090a0:	f000 f856 	bl	8009150 <memchr>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d001      	beq.n	80090ac <_printf_i+0x1bc>
 80090a8:	1b40      	subs	r0, r0, r5
 80090aa:	6060      	str	r0, [r4, #4]
 80090ac:	6863      	ldr	r3, [r4, #4]
 80090ae:	6123      	str	r3, [r4, #16]
 80090b0:	2300      	movs	r3, #0
 80090b2:	9a03      	ldr	r2, [sp, #12]
 80090b4:	7013      	strb	r3, [r2, #0]
 80090b6:	e7ac      	b.n	8009012 <_printf_i+0x122>
 80090b8:	002a      	movs	r2, r5
 80090ba:	6923      	ldr	r3, [r4, #16]
 80090bc:	9906      	ldr	r1, [sp, #24]
 80090be:	9805      	ldr	r0, [sp, #20]
 80090c0:	9d07      	ldr	r5, [sp, #28]
 80090c2:	47a8      	blx	r5
 80090c4:	3001      	adds	r0, #1
 80090c6:	d0ae      	beq.n	8009026 <_printf_i+0x136>
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	079b      	lsls	r3, r3, #30
 80090cc:	d415      	bmi.n	80090fa <_printf_i+0x20a>
 80090ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d0:	68e0      	ldr	r0, [r4, #12]
 80090d2:	4298      	cmp	r0, r3
 80090d4:	daa9      	bge.n	800902a <_printf_i+0x13a>
 80090d6:	0018      	movs	r0, r3
 80090d8:	e7a7      	b.n	800902a <_printf_i+0x13a>
 80090da:	0022      	movs	r2, r4
 80090dc:	2301      	movs	r3, #1
 80090de:	9906      	ldr	r1, [sp, #24]
 80090e0:	9805      	ldr	r0, [sp, #20]
 80090e2:	9e07      	ldr	r6, [sp, #28]
 80090e4:	3219      	adds	r2, #25
 80090e6:	47b0      	blx	r6
 80090e8:	3001      	adds	r0, #1
 80090ea:	d09c      	beq.n	8009026 <_printf_i+0x136>
 80090ec:	3501      	adds	r5, #1
 80090ee:	68e3      	ldr	r3, [r4, #12]
 80090f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090f2:	1a9b      	subs	r3, r3, r2
 80090f4:	42ab      	cmp	r3, r5
 80090f6:	dcf0      	bgt.n	80090da <_printf_i+0x1ea>
 80090f8:	e7e9      	b.n	80090ce <_printf_i+0x1de>
 80090fa:	2500      	movs	r5, #0
 80090fc:	e7f7      	b.n	80090ee <_printf_i+0x1fe>
 80090fe:	46c0      	nop			@ (mov r8, r8)
 8009100:	08009371 	.word	0x08009371
 8009104:	08009382 	.word	0x08009382

08009108 <memmove>:
 8009108:	b510      	push	{r4, lr}
 800910a:	4288      	cmp	r0, r1
 800910c:	d902      	bls.n	8009114 <memmove+0xc>
 800910e:	188b      	adds	r3, r1, r2
 8009110:	4298      	cmp	r0, r3
 8009112:	d308      	bcc.n	8009126 <memmove+0x1e>
 8009114:	2300      	movs	r3, #0
 8009116:	429a      	cmp	r2, r3
 8009118:	d007      	beq.n	800912a <memmove+0x22>
 800911a:	5ccc      	ldrb	r4, [r1, r3]
 800911c:	54c4      	strb	r4, [r0, r3]
 800911e:	3301      	adds	r3, #1
 8009120:	e7f9      	b.n	8009116 <memmove+0xe>
 8009122:	5c8b      	ldrb	r3, [r1, r2]
 8009124:	5483      	strb	r3, [r0, r2]
 8009126:	3a01      	subs	r2, #1
 8009128:	d2fb      	bcs.n	8009122 <memmove+0x1a>
 800912a:	bd10      	pop	{r4, pc}

0800912c <_sbrk_r>:
 800912c:	2300      	movs	r3, #0
 800912e:	b570      	push	{r4, r5, r6, lr}
 8009130:	4d06      	ldr	r5, [pc, #24]	@ (800914c <_sbrk_r+0x20>)
 8009132:	0004      	movs	r4, r0
 8009134:	0008      	movs	r0, r1
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	f7f8 fbbe 	bl	80018b8 <_sbrk>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d103      	bne.n	8009148 <_sbrk_r+0x1c>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d000      	beq.n	8009148 <_sbrk_r+0x1c>
 8009146:	6023      	str	r3, [r4, #0]
 8009148:	bd70      	pop	{r4, r5, r6, pc}
 800914a:	46c0      	nop			@ (mov r8, r8)
 800914c:	200015fc 	.word	0x200015fc

08009150 <memchr>:
 8009150:	b2c9      	uxtb	r1, r1
 8009152:	1882      	adds	r2, r0, r2
 8009154:	4290      	cmp	r0, r2
 8009156:	d101      	bne.n	800915c <memchr+0xc>
 8009158:	2000      	movs	r0, #0
 800915a:	4770      	bx	lr
 800915c:	7803      	ldrb	r3, [r0, #0]
 800915e:	428b      	cmp	r3, r1
 8009160:	d0fb      	beq.n	800915a <memchr+0xa>
 8009162:	3001      	adds	r0, #1
 8009164:	e7f6      	b.n	8009154 <memchr+0x4>

08009166 <_realloc_r>:
 8009166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009168:	0006      	movs	r6, r0
 800916a:	000c      	movs	r4, r1
 800916c:	0015      	movs	r5, r2
 800916e:	2900      	cmp	r1, #0
 8009170:	d105      	bne.n	800917e <_realloc_r+0x18>
 8009172:	0011      	movs	r1, r2
 8009174:	f7ff fc5e 	bl	8008a34 <_malloc_r>
 8009178:	0004      	movs	r4, r0
 800917a:	0020      	movs	r0, r4
 800917c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800917e:	2a00      	cmp	r2, #0
 8009180:	d103      	bne.n	800918a <_realloc_r+0x24>
 8009182:	f7ff fbeb 	bl	800895c <_free_r>
 8009186:	002c      	movs	r4, r5
 8009188:	e7f7      	b.n	800917a <_realloc_r+0x14>
 800918a:	f000 f81c 	bl	80091c6 <_malloc_usable_size_r>
 800918e:	0007      	movs	r7, r0
 8009190:	4285      	cmp	r5, r0
 8009192:	d802      	bhi.n	800919a <_realloc_r+0x34>
 8009194:	0843      	lsrs	r3, r0, #1
 8009196:	42ab      	cmp	r3, r5
 8009198:	d3ef      	bcc.n	800917a <_realloc_r+0x14>
 800919a:	0029      	movs	r1, r5
 800919c:	0030      	movs	r0, r6
 800919e:	f7ff fc49 	bl	8008a34 <_malloc_r>
 80091a2:	9001      	str	r0, [sp, #4]
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d101      	bne.n	80091ac <_realloc_r+0x46>
 80091a8:	9c01      	ldr	r4, [sp, #4]
 80091aa:	e7e6      	b.n	800917a <_realloc_r+0x14>
 80091ac:	002a      	movs	r2, r5
 80091ae:	42bd      	cmp	r5, r7
 80091b0:	d900      	bls.n	80091b4 <_realloc_r+0x4e>
 80091b2:	003a      	movs	r2, r7
 80091b4:	0021      	movs	r1, r4
 80091b6:	9801      	ldr	r0, [sp, #4]
 80091b8:	f7ff fbc6 	bl	8008948 <memcpy>
 80091bc:	0021      	movs	r1, r4
 80091be:	0030      	movs	r0, r6
 80091c0:	f7ff fbcc 	bl	800895c <_free_r>
 80091c4:	e7f0      	b.n	80091a8 <_realloc_r+0x42>

080091c6 <_malloc_usable_size_r>:
 80091c6:	1f0b      	subs	r3, r1, #4
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	1f18      	subs	r0, r3, #4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	da01      	bge.n	80091d4 <_malloc_usable_size_r+0xe>
 80091d0:	580b      	ldr	r3, [r1, r0]
 80091d2:	18c0      	adds	r0, r0, r3
 80091d4:	4770      	bx	lr
	...

080091d8 <_init>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	46c0      	nop			@ (mov r8, r8)
 80091dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091de:	bc08      	pop	{r3}
 80091e0:	469e      	mov	lr, r3
 80091e2:	4770      	bx	lr

080091e4 <_fini>:
 80091e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e6:	46c0      	nop			@ (mov r8, r8)
 80091e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ea:	bc08      	pop	{r3}
 80091ec:	469e      	mov	lr, r3
 80091ee:	4770      	bx	lr
