
seri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b00  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08007bc0  08007bc0  00008bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e04  08007e04  00009064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007e04  08007e04  00008e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e0c  08007e0c  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e0c  08007e0c  00008e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e10  08007e10  00008e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007e14  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000064  08007e78  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  08007e78  000095dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138f2  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003330  00000000  00000000  0001c97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0001fcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db3  00000000  00000000  00020e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017726  00000000  00000000  00021c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166d3  00000000  00000000  00039339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b0de  00000000  00000000  0004fa0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000daaea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004414  00000000  00000000  000dab30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000def44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007ba8 	.word	0x08007ba8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	08007ba8 	.word	0x08007ba8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4699      	mov	r9, r3
 800045e:	0c03      	lsrs	r3, r0, #16
 8000460:	469c      	mov	ip, r3
 8000462:	0413      	lsls	r3, r2, #16
 8000464:	4647      	mov	r7, r8
 8000466:	0c1b      	lsrs	r3, r3, #16
 8000468:	001d      	movs	r5, r3
 800046a:	000e      	movs	r6, r1
 800046c:	4661      	mov	r1, ip
 800046e:	0404      	lsls	r4, r0, #16
 8000470:	0c24      	lsrs	r4, r4, #16
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	0c10      	lsrs	r0, r2, #16
 8000478:	434b      	muls	r3, r1
 800047a:	4365      	muls	r5, r4
 800047c:	4341      	muls	r1, r0
 800047e:	4360      	muls	r0, r4
 8000480:	0c2c      	lsrs	r4, r5, #16
 8000482:	18c0      	adds	r0, r0, r3
 8000484:	1824      	adds	r4, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	42a3      	cmp	r3, r4
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	@ 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4356      	muls	r6, r2
 800049a:	0c23      	lsrs	r3, r4, #16
 800049c:	042d      	lsls	r5, r5, #16
 800049e:	0c2d      	lsrs	r5, r5, #16
 80004a0:	1989      	adds	r1, r1, r6
 80004a2:	4463      	add	r3, ip
 80004a4:	0424      	lsls	r4, r4, #16
 80004a6:	1960      	adds	r0, r4, r5
 80004a8:	18c9      	adds	r1, r1, r3
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 f8ba 	bl	800064c <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f8b5 	bl	800064c <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	d434      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ea:	469b      	mov	fp, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	465a      	mov	r2, fp
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83b      	bhi.n	8000578 <__udivmoddi4+0xc4>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e079      	b.n	80005fa <__udivmoddi4+0x146>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e076      	b.n	8000600 <__udivmoddi4+0x14c>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e029      	b.n	8000580 <__udivmoddi4+0xcc>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	469b      	mov	fp, r3
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	4652      	mov	r2, sl
 800055e:	40da      	lsrs	r2, r3
 8000560:	4641      	mov	r1, r8
 8000562:	0013      	movs	r3, r2
 8000564:	464a      	mov	r2, r9
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	4642      	mov	r2, r8
 800056c:	431f      	orrs	r7, r3
 800056e:	4653      	mov	r3, sl
 8000570:	4093      	lsls	r3, r2
 8000572:	001e      	movs	r6, r3
 8000574:	42af      	cmp	r7, r5
 8000576:	d9c3      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000578:	2200      	movs	r2, #0
 800057a:	2300      	movs	r3, #0
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4643      	mov	r3, r8
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0d8      	beq.n	8000538 <__udivmoddi4+0x84>
 8000586:	07fb      	lsls	r3, r7, #31
 8000588:	0872      	lsrs	r2, r6, #1
 800058a:	431a      	orrs	r2, r3
 800058c:	4646      	mov	r6, r8
 800058e:	087b      	lsrs	r3, r7, #1
 8000590:	e00e      	b.n	80005b0 <__udivmoddi4+0xfc>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d101      	bne.n	800059a <__udivmoddi4+0xe6>
 8000596:	42a2      	cmp	r2, r4
 8000598:	d80c      	bhi.n	80005b4 <__udivmoddi4+0x100>
 800059a:	1aa4      	subs	r4, r4, r2
 800059c:	419d      	sbcs	r5, r3
 800059e:	2001      	movs	r0, #1
 80005a0:	1924      	adds	r4, r4, r4
 80005a2:	416d      	adcs	r5, r5
 80005a4:	2100      	movs	r1, #0
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1824      	adds	r4, r4, r0
 80005aa:	414d      	adcs	r5, r1
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d006      	beq.n	80005be <__udivmoddi4+0x10a>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d9ee      	bls.n	8000592 <__udivmoddi4+0xde>
 80005b4:	3e01      	subs	r6, #1
 80005b6:	1924      	adds	r4, r4, r4
 80005b8:	416d      	adcs	r5, r5
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d1f8      	bne.n	80005b0 <__udivmoddi4+0xfc>
 80005be:	9800      	ldr	r0, [sp, #0]
 80005c0:	9901      	ldr	r1, [sp, #4]
 80005c2:	465b      	mov	r3, fp
 80005c4:	1900      	adds	r0, r0, r4
 80005c6:	4169      	adcs	r1, r5
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db24      	blt.n	8000616 <__udivmoddi4+0x162>
 80005cc:	002b      	movs	r3, r5
 80005ce:	465a      	mov	r2, fp
 80005d0:	4644      	mov	r4, r8
 80005d2:	40d3      	lsrs	r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	40e2      	lsrs	r2, r4
 80005d8:	001c      	movs	r4, r3
 80005da:	465b      	mov	r3, fp
 80005dc:	0015      	movs	r5, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db2a      	blt.n	8000638 <__udivmoddi4+0x184>
 80005e2:	0026      	movs	r6, r4
 80005e4:	409e      	lsls	r6, r3
 80005e6:	0033      	movs	r3, r6
 80005e8:	0026      	movs	r6, r4
 80005ea:	4647      	mov	r7, r8
 80005ec:	40be      	lsls	r6, r7
 80005ee:	0032      	movs	r2, r6
 80005f0:	1a80      	subs	r0, r0, r2
 80005f2:	4199      	sbcs	r1, r3
 80005f4:	9000      	str	r0, [sp, #0]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	e79e      	b.n	8000538 <__udivmoddi4+0x84>
 80005fa:	42a3      	cmp	r3, r4
 80005fc:	d8bc      	bhi.n	8000578 <__udivmoddi4+0xc4>
 80005fe:	e782      	b.n	8000506 <__udivmoddi4+0x52>
 8000600:	4642      	mov	r2, r8
 8000602:	2320      	movs	r3, #32
 8000604:	2100      	movs	r1, #0
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	2200      	movs	r2, #0
 800060a:	9100      	str	r1, [sp, #0]
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	40da      	lsrs	r2, r3
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	e785      	b.n	8000522 <__udivmoddi4+0x6e>
 8000616:	4642      	mov	r2, r8
 8000618:	2320      	movs	r3, #32
 800061a:	1a9b      	subs	r3, r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	4646      	mov	r6, r8
 8000620:	409a      	lsls	r2, r3
 8000622:	0023      	movs	r3, r4
 8000624:	40f3      	lsrs	r3, r6
 8000626:	4644      	mov	r4, r8
 8000628:	4313      	orrs	r3, r2
 800062a:	002a      	movs	r2, r5
 800062c:	40e2      	lsrs	r2, r4
 800062e:	001c      	movs	r4, r3
 8000630:	465b      	mov	r3, fp
 8000632:	0015      	movs	r5, r2
 8000634:	2b00      	cmp	r3, #0
 8000636:	dad4      	bge.n	80005e2 <__udivmoddi4+0x12e>
 8000638:	4642      	mov	r2, r8
 800063a:	002f      	movs	r7, r5
 800063c:	2320      	movs	r3, #32
 800063e:	0026      	movs	r6, r4
 8000640:	4097      	lsls	r7, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	40de      	lsrs	r6, r3
 8000646:	003b      	movs	r3, r7
 8000648:	4333      	orrs	r3, r6
 800064a:	e7cd      	b.n	80005e8 <__udivmoddi4+0x134>

0800064c <__clzdi2>:
 800064c:	b510      	push	{r4, lr}
 800064e:	2900      	cmp	r1, #0
 8000650:	d103      	bne.n	800065a <__clzdi2+0xe>
 8000652:	f000 f807 	bl	8000664 <__clzsi2>
 8000656:	3020      	adds	r0, #32
 8000658:	e002      	b.n	8000660 <__clzdi2+0x14>
 800065a:	0008      	movs	r0, r1
 800065c:	f000 f802 	bl	8000664 <__clzsi2>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)

08000664 <__clzsi2>:
 8000664:	211c      	movs	r1, #28
 8000666:	2301      	movs	r3, #1
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0xe>
 800066e:	0c00      	lsrs	r0, r0, #16
 8000670:	3910      	subs	r1, #16
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	4298      	cmp	r0, r3
 8000676:	d301      	bcc.n	800067c <__clzsi2+0x18>
 8000678:	0a00      	lsrs	r0, r0, #8
 800067a:	3908      	subs	r1, #8
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0x22>
 8000682:	0900      	lsrs	r0, r0, #4
 8000684:	3904      	subs	r1, #4
 8000686:	a202      	add	r2, pc, #8	@ (adr r2, 8000690 <__clzsi2+0x2c>)
 8000688:	5c10      	ldrb	r0, [r2, r0]
 800068a:	1840      	adds	r0, r0, r1
 800068c:	4770      	bx	lr
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	02020304 	.word	0x02020304
 8000694:	01010101 	.word	0x01010101
	...

080006a0 <vbat_gate>:
#include "vbat_lorawan.h"

/* ---- Internal helpers --------------------------------------------------- */

static inline void vbat_gate(bool enable)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	0002      	movs	r2, r0
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	701a      	strb	r2, [r3, #0]
#if VBAT_MEAS_EN_ACTIVE_HIGH
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin,
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	001a      	movs	r2, r3
 80006b2:	23a0      	movs	r3, #160	@ 0xa0
 80006b4:	05db      	lsls	r3, r3, #23
 80006b6:	2102      	movs	r1, #2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f003 fa87 	bl	8003bcc <HAL_GPIO_WritePin>
                      enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
#else
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin,
                      enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
#endif
}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b002      	add	sp, #8
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <adc_read_counts>:

static bool adc_read_counts(ADC_HandleTypeDef *hadc, uint32_t channel, uint16_t *out_counts)
{
 80006c6:	b590      	push	{r4, r7, lr}
 80006c8:	b087      	sub	sp, #28
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	60f8      	str	r0, [r7, #12]
 80006ce:	60b9      	str	r1, [r7, #8]
 80006d0:	607a      	str	r2, [r7, #4]
    if (!hadc || !out_counts) return false;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d002      	beq.n	80006de <adc_read_counts+0x18>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d101      	bne.n	80006e2 <adc_read_counts+0x1c>
 80006de:	2300      	movs	r3, #0
 80006e0:	e03b      	b.n	800075a <adc_read_counts+0x94>

    ADC_ChannelConfTypeDef s = {0};
 80006e2:	2410      	movs	r4, #16
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	0018      	movs	r0, r3
 80006e8:	2308      	movs	r3, #8
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f006 fde1 	bl	80072b4 <memset>
    s.Channel = channel;
 80006f2:	0021      	movs	r1, r4
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	601a      	str	r2, [r3, #0]
#if defined(ADC_RANK_CHANNEL_NUMBER)
    s.Rank    = ADC_RANK_CHANNEL_NUMBER;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2280      	movs	r2, #128	@ 0x80
 80006fe:	0152      	lsls	r2, r2, #5
 8000700:	605a      	str	r2, [r3, #4]
#endif
    /* NOTE (STM32L0): sampling time is set globally in hadc.Init.SamplingTime */

    if (HAL_ADC_ConfigChannel(hadc, &s) != HAL_OK) return false;
 8000702:	187a      	adds	r2, r7, r1
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f002 fce5 	bl	80030d8 <HAL_ADC_ConfigChannel>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <adc_read_counts+0x50>
 8000712:	2300      	movs	r3, #0
 8000714:	e021      	b.n	800075a <adc_read_counts+0x94>
    if (HAL_ADC_Start(hadc) != HAL_OK) return false;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	0018      	movs	r0, r3
 800071a:	f002 fba1 	bl	8002e60 <HAL_ADC_Start>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <adc_read_counts+0x60>
 8000722:	2300      	movs	r3, #0
 8000724:	e019      	b.n	800075a <adc_read_counts+0x94>
    if (HAL_ADC_PollForConversion(hadc, 5) != HAL_OK) { (void)HAL_ADC_Stop(hadc); return false; }
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2105      	movs	r1, #5
 800072a:	0018      	movs	r0, r3
 800072c:	f002 fc2c 	bl	8002f88 <HAL_ADC_PollForConversion>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d005      	beq.n	8000740 <adc_read_counts+0x7a>
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	0018      	movs	r0, r3
 8000738:	f002 fbe6 	bl	8002f08 <HAL_ADC_Stop>
 800073c:	2300      	movs	r3, #0
 800073e:	e00c      	b.n	800075a <adc_read_counts+0x94>

    *out_counts = (uint16_t)HAL_ADC_GetValue(hadc);
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	0018      	movs	r0, r3
 8000744:	f002 fcbc 	bl	80030c0 <HAL_ADC_GetValue>
 8000748:	0003      	movs	r3, r0
 800074a:	b29a      	uxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	801a      	strh	r2, [r3, #0]
    (void)HAL_ADC_Stop(hadc);
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	0018      	movs	r0, r3
 8000754:	f002 fbd8 	bl	8002f08 <HAL_ADC_Stop>
    return true;
 8000758:	2301      	movs	r3, #1
}
 800075a:	0018      	movs	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	b007      	add	sp, #28
 8000760:	bd90      	pop	{r4, r7, pc}

08000762 <vbat_cold_compensation_mv>:


/* ---- Public API --------------------------------------------------------- */

uint16_t vbat_cold_compensation_mv(int16_t temp_c)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b084      	sub	sp, #16
 8000766:	af00      	add	r7, sp, #0
 8000768:	0002      	movs	r2, r0
 800076a:	1dbb      	adds	r3, r7, #6
 800076c:	801a      	strh	r2, [r3, #0]
    if (temp_c >= 0) return 0;
 800076e:	1dbb      	adds	r3, r7, #6
 8000770:	2200      	movs	r2, #0
 8000772:	5e9b      	ldrsh	r3, [r3, r2]
 8000774:	2b00      	cmp	r3, #0
 8000776:	db01      	blt.n	800077c <vbat_cold_compensation_mv+0x1a>
 8000778:	2300      	movs	r3, #0
 800077a:	e00e      	b.n	800079a <vbat_cold_compensation_mv+0x38>
    /* 4 mV per °C below zero, capped at +200 mV */
    uint32_t add = (uint32_t)((-temp_c) * 4);
 800077c:	1dbb      	adds	r3, r7, #6
 800077e:	2200      	movs	r2, #0
 8000780:	5e9a      	ldrsh	r2, [r3, r2]
 8000782:	0013      	movs	r3, r2
 8000784:	079b      	lsls	r3, r3, #30
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	60fb      	str	r3, [r7, #12]
    if (add > 200U) add = 200U;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2bc8      	cmp	r3, #200	@ 0xc8
 8000790:	d901      	bls.n	8000796 <vbat_cold_compensation_mv+0x34>
 8000792:	23c8      	movs	r3, #200	@ 0xc8
 8000794:	60fb      	str	r3, [r7, #12]
    return (uint16_t)add;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	b29b      	uxth	r3, r3
}
 800079a:	0018      	movs	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	b004      	add	sp, #16
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <vbat_read_mv>:

bool vbat_read_mv(ADC_HandleTypeDef *hadc, uint32_t adc_channel, uint16_t *vbat_mv_out)
{
 80007a4:	b5b0      	push	{r4, r5, r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
    if (!hadc || !vbat_mv_out) return false;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d002      	beq.n	80007bc <vbat_read_mv+0x18>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d101      	bne.n	80007c0 <vbat_read_mv+0x1c>
 80007bc:	2300      	movs	r3, #0
 80007be:	e06c      	b.n	800089a <vbat_read_mv+0xf6>

    vbat_gate(true);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f7ff ff6d 	bl	80006a0 <vbat_gate>
    HAL_Delay(VBAT_SETTLE_MS);
 80007c6:	2004      	movs	r0, #4
 80007c8:	f002 f98e 	bl	8002ae8 <HAL_Delay>

    uint32_t acc = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t s   = 0;
 80007d0:	2312      	movs	r3, #18
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	2200      	movs	r2, #0
 80007d6:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < VBAT_SAMPLES; i++) {
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
 80007dc:	e01c      	b.n	8000818 <vbat_read_mv+0x74>
        if (!adc_read_counts(hadc, adc_channel, &s)) { vbat_gate(false); return false; }
 80007de:	2312      	movs	r3, #18
 80007e0:	18fa      	adds	r2, r7, r3
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff ff6d 	bl	80006c6 <adc_read_counts>
 80007ec:	0003      	movs	r3, r0
 80007ee:	001a      	movs	r2, r3
 80007f0:	2301      	movs	r3, #1
 80007f2:	4053      	eors	r3, r2
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d004      	beq.n	8000804 <vbat_read_mv+0x60>
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff ff50 	bl	80006a0 <vbat_gate>
 8000800:	2300      	movs	r3, #0
 8000802:	e04a      	b.n	800089a <vbat_read_mv+0xf6>
        acc += s;
 8000804:	2312      	movs	r3, #18
 8000806:	18fb      	adds	r3, r7, r3
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	001a      	movs	r2, r3
 800080c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800080e:	189b      	adds	r3, r3, r2
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
    for (uint32_t i = 0; i < VBAT_SAMPLES; i++) {
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	3301      	adds	r3, #1
 8000816:	623b      	str	r3, [r7, #32]
 8000818:	6a3b      	ldr	r3, [r7, #32]
 800081a:	2b07      	cmp	r3, #7
 800081c:	d9df      	bls.n	80007de <vbat_read_mv+0x3a>
    }

    vbat_gate(false);
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff ff3e 	bl	80006a0 <vbat_gate>

    uint32_t avg_counts = acc / VBAT_SAMPLES;
 8000824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000826:	08db      	lsrs	r3, r3, #3
 8000828:	617b      	str	r3, [r7, #20]

    /* mv = counts * Vref / ADC_MAX * divider_factor; round properly */
    uint64_t mv = (uint64_t)avg_counts * (uint64_t)VREF_mV;
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	001c      	movs	r4, r3
 800082e:	2300      	movs	r3, #0
 8000830:	001d      	movs	r5, r3
 8000832:	4a1c      	ldr	r2, [pc, #112]	@ (80008a4 <vbat_read_mv+0x100>)
 8000834:	2300      	movs	r3, #0
 8000836:	0020      	movs	r0, r4
 8000838:	0029      	movs	r1, r5
 800083a:	f7ff fe0d 	bl	8000458 <__aeabi_lmul>
 800083e:	0002      	movs	r2, r0
 8000840:	000b      	movs	r3, r1
 8000842:	61ba      	str	r2, [r7, #24]
 8000844:	61fb      	str	r3, [r7, #28]
    mv = (mv + (ADC_MAX_COUNTS/2)) / (uint64_t)ADC_MAX_COUNTS;
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	4817      	ldr	r0, [pc, #92]	@ (80008a8 <vbat_read_mv+0x104>)
 800084c:	2100      	movs	r1, #0
 800084e:	1880      	adds	r0, r0, r2
 8000850:	4159      	adcs	r1, r3
 8000852:	4a16      	ldr	r2, [pc, #88]	@ (80008ac <vbat_read_mv+0x108>)
 8000854:	2300      	movs	r3, #0
 8000856:	f7ff fddf 	bl	8000418 <__aeabi_uldivmod>
 800085a:	0002      	movs	r2, r0
 800085c:	000b      	movs	r3, r1
 800085e:	61ba      	str	r2, [r7, #24]
 8000860:	61fb      	str	r3, [r7, #28]
    mv *= VBAT_DIV_NUM;
 8000862:	69ba      	ldr	r2, [r7, #24]
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1892      	adds	r2, r2, r2
 8000868:	415b      	adcs	r3, r3
 800086a:	61ba      	str	r2, [r7, #24]
 800086c:	61fb      	str	r3, [r7, #28]

    if (mv > 0xFFFFU) mv = 0xFFFFU;
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d107      	bne.n	8000884 <vbat_read_mv+0xe0>
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d108      	bne.n	800088c <vbat_read_mv+0xe8>
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	2380      	movs	r3, #128	@ 0x80
 800087e:	025b      	lsls	r3, r3, #9
 8000880:	429a      	cmp	r2, r3
 8000882:	d303      	bcc.n	800088c <vbat_read_mv+0xe8>
 8000884:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <vbat_read_mv+0x10c>)
 8000886:	2300      	movs	r3, #0
 8000888:	61ba      	str	r2, [r7, #24]
 800088a:	61fb      	str	r3, [r7, #28]
    *vbat_mv_out = (uint16_t)mv;
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	1c13      	adds	r3, r2, #0
 8000892:	b29a      	uxth	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	801a      	strh	r2, [r3, #0]
    return true;
 8000898:	2301      	movs	r3, #1
}
 800089a:	0018      	movs	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	b00a      	add	sp, #40	@ 0x28
 80008a0:	bdb0      	pop	{r4, r5, r7, pc}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	00000ce4 	.word	0x00000ce4
 80008a8:	000007ff 	.word	0x000007ff
 80008ac:	00000fff 	.word	0x00000fff
 80008b0:	0000ffff 	.word	0x0000ffff

080008b4 <lorawan_encode_battery>:

uint8_t lorawan_encode_battery(uint16_t vbat_mv,
                               int16_t  temp_c,
                               bool     external_power_present,
                               bool     measurement_ok)
{
 80008b4:	b5b0      	push	{r4, r5, r7, lr}
 80008b6:	b090      	sub	sp, #64	@ 0x40
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	0005      	movs	r5, r0
 80008bc:	000c      	movs	r4, r1
 80008be:	0010      	movs	r0, r2
 80008c0:	0019      	movs	r1, r3
 80008c2:	1dbb      	adds	r3, r7, #6
 80008c4:	1c2a      	adds	r2, r5, #0
 80008c6:	801a      	strh	r2, [r3, #0]
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	1c22      	adds	r2, r4, #0
 80008cc:	801a      	strh	r2, [r3, #0]
 80008ce:	1cfb      	adds	r3, r7, #3
 80008d0:	1c02      	adds	r2, r0, #0
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	1cbb      	adds	r3, r7, #2
 80008d6:	1c0a      	adds	r2, r1, #0
 80008d8:	701a      	strb	r2, [r3, #0]
    if (external_power_present) return 0;   /* 0 = external power */
 80008da:	1cfb      	adds	r3, r7, #3
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <lorawan_encode_battery+0x32>
 80008e2:	2300      	movs	r3, #0
 80008e4:	e08c      	b.n	8000a00 <lorawan_encode_battery+0x14c>
    if (!measurement_ok)       return 255;  /* 255 = cannot measure */
 80008e6:	1cbb      	adds	r3, r7, #2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2201      	movs	r2, #1
 80008ec:	4053      	eors	r3, r2
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <lorawan_encode_battery+0x44>
 80008f4:	23ff      	movs	r3, #255	@ 0xff
 80008f6:	e083      	b.n	8000a00 <lorawan_encode_battery+0x14c>

    uint32_t v = (uint32_t)vbat_mv + (uint32_t)vbat_cold_compensation_mv(temp_c);
 80008f8:	1dbb      	adds	r3, r7, #6
 80008fa:	881c      	ldrh	r4, [r3, #0]
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	5e9b      	ldrsh	r3, [r3, r2]
 8000902:	0018      	movs	r0, r3
 8000904:	f7ff ff2d 	bl	8000762 <vbat_cold_compensation_mv>
 8000908:	0003      	movs	r3, r0
 800090a:	18e3      	adds	r3, r4, r3
 800090c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (v > 5000U) v = 5000U; /* clamp */
 800090e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000910:	4a3d      	ldr	r2, [pc, #244]	@ (8000a08 <lorawan_encode_battery+0x154>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d901      	bls.n	800091a <lorawan_encode_battery+0x66>
 8000916:	4b3c      	ldr	r3, [pc, #240]	@ (8000a08 <lorawan_encode_battery+0x154>)
 8000918:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (v >= VBAT_SEG1_MIN_mV) {
 800091a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800091c:	4a3b      	ldr	r2, [pc, #236]	@ (8000a0c <lorawan_encode_battery+0x158>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d925      	bls.n	800096e <lorawan_encode_battery+0xba>
        /* 3.30–3.60 V → 200..254 (55 steps over 300 mV) */
        const uint32_t span_mv = (VBAT_SEG1_MAX_mV - VBAT_SEG1_MIN_mV);    /* 300 */
 8000922:	2396      	movs	r3, #150	@ 0x96
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	617b      	str	r3, [r7, #20]
        const uint32_t span_lv = (LORA_SEG1_MAX - LORA_SEG1_MIN);          /* 54 */
 8000928:	2336      	movs	r3, #54	@ 0x36
 800092a:	613b      	str	r3, [r7, #16]
        uint32_t dv = (v > VBAT_SEG1_MAX_mV) ? span_mv : (v - VBAT_SEG1_MIN_mV);
 800092c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800092e:	23e1      	movs	r3, #225	@ 0xe1
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	429a      	cmp	r2, r3
 8000934:	d804      	bhi.n	8000940 <lorawan_encode_battery+0x8c>
 8000936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000938:	4a35      	ldr	r2, [pc, #212]	@ (8000a10 <lorawan_encode_battery+0x15c>)
 800093a:	4694      	mov	ip, r2
 800093c:	4463      	add	r3, ip
 800093e:	e000      	b.n	8000942 <lorawan_encode_battery+0x8e>
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	60fb      	str	r3, [r7, #12]
        uint32_t lvl = LORA_SEG1_MIN + (dv * span_lv + (span_mv/2)) / span_mv;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	435a      	muls	r2, r3
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	18d3      	adds	r3, r2, r3
 8000950:	6979      	ldr	r1, [r7, #20]
 8000952:	0018      	movs	r0, r3
 8000954:	f7ff fbea 	bl	800012c <__udivsi3>
 8000958:	0003      	movs	r3, r0
 800095a:	33c8      	adds	r3, #200	@ 0xc8
 800095c:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (lvl > LORA_SEG1_MAX) lvl = LORA_SEG1_MAX;
 800095e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000960:	2bfe      	cmp	r3, #254	@ 0xfe
 8000962:	d901      	bls.n	8000968 <lorawan_encode_battery+0xb4>
 8000964:	23fe      	movs	r3, #254	@ 0xfe
 8000966:	63bb      	str	r3, [r7, #56]	@ 0x38
        return (uint8_t)lvl;
 8000968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800096a:	b2db      	uxtb	r3, r3
 800096c:	e048      	b.n	8000a00 <lorawan_encode_battery+0x14c>
    } else if (v >= VBAT_SEG2_MIN_mV) {
 800096e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000970:	23af      	movs	r3, #175	@ 0xaf
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	429a      	cmp	r2, r3
 8000976:	d31e      	bcc.n	80009b6 <lorawan_encode_battery+0x102>
        /* 2.80–3.30 V → 50..199 (150 steps over 500 mV) */
        const uint32_t span_mv = (VBAT_SEG1_MIN_mV - VBAT_SEG2_MIN_mV);    /* 500 */
 8000978:	23fa      	movs	r3, #250	@ 0xfa
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	623b      	str	r3, [r7, #32]
        const uint32_t span_lv = (LORA_SEG2_MAX - LORA_SEG2_MIN);          /* 149 */
 800097e:	2395      	movs	r3, #149	@ 0x95
 8000980:	61fb      	str	r3, [r7, #28]
        uint32_t dv = v - VBAT_SEG2_MIN_mV;
 8000982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000984:	4a23      	ldr	r2, [pc, #140]	@ (8000a14 <lorawan_encode_battery+0x160>)
 8000986:	4694      	mov	ip, r2
 8000988:	4463      	add	r3, ip
 800098a:	61bb      	str	r3, [r7, #24]
        uint32_t lvl = LORA_SEG2_MIN + (dv * span_lv + (span_mv/2)) / span_mv;
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	69fa      	ldr	r2, [r7, #28]
 8000990:	435a      	muls	r2, r3
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	18d3      	adds	r3, r2, r3
 8000998:	6a39      	ldr	r1, [r7, #32]
 800099a:	0018      	movs	r0, r3
 800099c:	f7ff fbc6 	bl	800012c <__udivsi3>
 80009a0:	0003      	movs	r3, r0
 80009a2:	3332      	adds	r3, #50	@ 0x32
 80009a4:	637b      	str	r3, [r7, #52]	@ 0x34
        if (lvl > LORA_SEG2_MAX) lvl = LORA_SEG2_MAX;
 80009a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80009aa:	d901      	bls.n	80009b0 <lorawan_encode_battery+0xfc>
 80009ac:	23c7      	movs	r3, #199	@ 0xc7
 80009ae:	637b      	str	r3, [r7, #52]	@ 0x34
        return (uint8_t)lvl;
 80009b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	e024      	b.n	8000a00 <lorawan_encode_battery+0x14c>
    } else if (v >= VBAT_SEG3_MIN_mV) {
 80009b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80009b8:	23fa      	movs	r3, #250	@ 0xfa
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	429a      	cmp	r2, r3
 80009be:	d31e      	bcc.n	80009fe <lorawan_encode_battery+0x14a>
        /* 2.00–2.80 V → 1..49 (49 steps over 800 mV) */
        const uint32_t span_mv = (VBAT_SEG2_MIN_mV - VBAT_SEG3_MIN_mV);    /* 800 */
 80009c0:	23c8      	movs	r3, #200	@ 0xc8
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const uint32_t span_lv = (LORA_SEG3_MAX - LORA_SEG3_MIN);          /* 48 */
 80009c6:	2330      	movs	r3, #48	@ 0x30
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint32_t dv = v - VBAT_SEG3_MIN_mV;
 80009ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009cc:	4a12      	ldr	r2, [pc, #72]	@ (8000a18 <lorawan_encode_battery+0x164>)
 80009ce:	4694      	mov	ip, r2
 80009d0:	4463      	add	r3, ip
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t lvl = LORA_SEG3_MIN + (dv * span_lv + (span_mv/2)) / span_mv;
 80009d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009d8:	435a      	muls	r2, r3
 80009da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009dc:	085b      	lsrs	r3, r3, #1
 80009de:	18d3      	adds	r3, r2, r3
 80009e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80009e2:	0018      	movs	r0, r3
 80009e4:	f7ff fba2 	bl	800012c <__udivsi3>
 80009e8:	0003      	movs	r3, r0
 80009ea:	3301      	adds	r3, #1
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
        if (lvl > LORA_SEG3_MAX) lvl = LORA_SEG3_MAX;
 80009ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009f0:	2b31      	cmp	r3, #49	@ 0x31
 80009f2:	d901      	bls.n	80009f8 <lorawan_encode_battery+0x144>
 80009f4:	2331      	movs	r3, #49	@ 0x31
 80009f6:	633b      	str	r3, [r7, #48]	@ 0x30
        return (uint8_t)lvl;
 80009f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	e000      	b.n	8000a00 <lorawan_encode_battery+0x14c>
    } else {
        /* <2.00 V */
        return 1;
 80009fe:	2301      	movs	r3, #1
    }
}
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b010      	add	sp, #64	@ 0x40
 8000a06:	bdb0      	pop	{r4, r5, r7, pc}
 8000a08:	00001388 	.word	0x00001388
 8000a0c:	00000ce3 	.word	0x00000ce3
 8000a10:	fffff31c 	.word	0xfffff31c
 8000a14:	fffff510 	.word	0xfffff510
 8000a18:	fffff830 	.word	0xfffff830

08000a1c <vbat_measure_and_encode>:

uint8_t vbat_measure_and_encode(ADC_HandleTypeDef *hadc,
                                uint32_t adc_channel,
                                int16_t  temp_c,
                                bool     external_power_present)
{
 8000a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1e:	b087      	sub	sp, #28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	0019      	movs	r1, r3
 8000a28:	1dbb      	adds	r3, r7, #6
 8000a2a:	801a      	strh	r2, [r3, #0]
 8000a2c:	1d7b      	adds	r3, r7, #5
 8000a2e:	1c0a      	adds	r2, r1, #0
 8000a30:	701a      	strb	r2, [r3, #0]
    uint16_t mv = 0;
 8000a32:	2514      	movs	r5, #20
 8000a34:	197b      	adds	r3, r7, r5
 8000a36:	2200      	movs	r2, #0
 8000a38:	801a      	strh	r2, [r3, #0]
    bool ok = vbat_read_mv(hadc, adc_channel, &mv);
 8000a3a:	2617      	movs	r6, #23
 8000a3c:	19bc      	adds	r4, r7, r6
 8000a3e:	197a      	adds	r2, r7, r5
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fead 	bl	80007a4 <vbat_read_mv>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	7023      	strb	r3, [r4, #0]
    return lorawan_encode_battery(mv, temp_c, external_power_present, ok);
 8000a4e:	197b      	adds	r3, r7, r5
 8000a50:	8818      	ldrh	r0, [r3, #0]
 8000a52:	19bb      	adds	r3, r7, r6
 8000a54:	781c      	ldrb	r4, [r3, #0]
 8000a56:	1d7b      	adds	r3, r7, #5
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	1dbb      	adds	r3, r7, #6
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	5e59      	ldrsh	r1, [r3, r1]
 8000a60:	0023      	movs	r3, r4
 8000a62:	f7ff ff27 	bl	80008b4 <lorawan_encode_battery>
 8000a66:	0003      	movs	r3, r0
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b007      	add	sp, #28
 8000a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a70 <verify_uart_ready>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// UART state verification function
static bool verify_uart_ready(UART_HandleTypeDef *huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  return (huart != NULL); // Simplified check for now
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	1e5a      	subs	r2, r3, #1
 8000a7c:	4193      	sbcs	r3, r2
 8000a7e:	b2db      	uxtb	r3, r3
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <dbg_print>:

// Debug logging helpers over huart1 (115200 baud)
static void dbg_print(const char *s)
{
 8000a88:	b5b0      	push	{r4, r5, r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if (!s)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d01e      	beq.n	8000ad4 <dbg_print+0x4c>
    return;
  size_t n = strlen(s);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff fb35 	bl	8000108 <strlen>
 8000a9e:	0003      	movs	r3, r0
 8000aa0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)s, (uint16_t)n, 100);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	250b      	movs	r5, #11
 8000aa8:	197c      	adds	r4, r7, r5
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	480b      	ldr	r0, [pc, #44]	@ (8000adc <dbg_print+0x54>)
 8000aae:	2364      	movs	r3, #100	@ 0x64
 8000ab0:	f005 fba8 	bl	8006204 <HAL_UART_Transmit>
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK)
 8000ab8:	197b      	adds	r3, r7, r5
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00a      	beq.n	8000ad6 <dbg_print+0x4e>
  {
    // UART failed, try to recover
    HAL_UART_DeInit(&huart1);
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <dbg_print+0x54>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f005 fb60 	bl	8006188 <HAL_UART_DeInit>
    HAL_Delay(10);
 8000ac8:	200a      	movs	r0, #10
 8000aca:	f002 f80d 	bl	8002ae8 <HAL_Delay>
    MX_USART1_UART_Init();
 8000ace:	f000 ff41 	bl	8001954 <MX_USART1_UART_Init>
 8000ad2:	e000      	b.n	8000ad6 <dbg_print+0x4e>
    return;
 8000ad4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b004      	add	sp, #16
 8000ada:	bdb0      	pop	{r4, r5, r7, pc}
 8000adc:	20000154 	.word	0x20000154

08000ae0 <dbg_print_line>:
static void dbg_print_line(const char *s)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if (!s)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d008      	beq.n	8000b00 <dbg_print_line+0x20>
    return;
  dbg_print(s);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff ffc9 	bl	8000a88 <dbg_print>
  dbg_print("\r\n");
 8000af6:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <dbg_print_line+0x28>)
 8000af8:	0018      	movs	r0, r3
 8000afa:	f7ff ffc5 	bl	8000a88 <dbg_print>
 8000afe:	e000      	b.n	8000b02 <dbg_print_line+0x22>
    return;
 8000b00:	46c0      	nop			@ (mov r8, r8)
}
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	08007bd4 	.word	0x08007bd4

08000b0c <find_char_after>:

char find_char_after(const char *str, const char *keyword)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  if (!str || !keyword)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <find_char_after+0x16>
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <find_char_after+0x1a>
    return '\0';
 8000b22:	2300      	movs	r3, #0
 8000b24:	e02a      	b.n	8000b7c <find_char_after+0x70>

  // Simple substring search
  const char *p = str;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	617b      	str	r3, [r7, #20]
  const char *k;

  while (*p)
 8000b2a:	e022      	b.n	8000b72 <find_char_after+0x66>
  {
    const char *s = p;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	60fb      	str	r3, [r7, #12]
    k = keyword;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	613b      	str	r3, [r7, #16]
    while (*s && *k && *s == *k)
 8000b34:	e005      	b.n	8000b42 <find_char_after+0x36>
    {
      s++;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
      k++;
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	613b      	str	r3, [r7, #16]
    while (*s && *k && *s == *k)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d009      	beq.n	8000b5e <find_char_after+0x52>
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d005      	beq.n	8000b5e <find_char_after+0x52>
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	781a      	ldrb	r2, [r3, #0]
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d0eb      	beq.n	8000b36 <find_char_after+0x2a>
    }
    if (*k == '\0')
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d102      	bne.n	8000b6c <find_char_after+0x60>
    {
      // Found full keyword, return next char if available
      return *s ? *s : '\0';
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	e007      	b.n	8000b7c <find_char_after+0x70>
    }
    p++;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	617b      	str	r3, [r7, #20]
  while (*p)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1d8      	bne.n	8000b2c <find_char_after+0x20>
  }
  return '\0'; // Not found
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b006      	add	sp, #24
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <change_usart_baud_rate>:




void change_usart_baud_rate(UART_HandleTypeDef *huart, uint32_t speed)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
    // Step 1: Wait for TXE (Transmit Data Register Empty) flag
    // This ensures any pending data in the transmit register is moved to shift register
    while (!(huart->Instance->ISR & USART_ISR_TXE))
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	2280      	movs	r2, #128	@ 0x80
 8000b98:	4013      	ands	r3, r2
 8000b9a:	d0f9      	beq.n	8000b90 <change_usart_baud_rate+0xc>
        // Wait for transmit data register to be empty
    }

    // Step 2: Wait for both TXE and TC (Transmission Complete) flags
    // TC ensures all data has been completely transmitted over the wire
    while (!(huart->Instance->ISR & USART_ISR_TXE) ||
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	2280      	movs	r2, #128	@ 0x80
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	d0f9      	beq.n	8000b9e <change_usart_baud_rate+0x1a>
           !(huart->Instance->ISR & USART_ISR_TC))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	2240      	movs	r2, #64	@ 0x40
 8000bb2:	4013      	ands	r3, r2
    while (!(huart->Instance->ISR & USART_ISR_TXE) ||
 8000bb4:	d0f3      	beq.n	8000b9e <change_usart_baud_rate+0x1a>
        // Wait for complete transmission
    }

    // Step 3: Brief delay to ensure all data has traversed the wire
    // This accounts for any final bit timing at the current baud rate
    HAL_Delay(10); // 10ms delay - adjust if needed
 8000bb6:	200a      	movs	r0, #10
 8000bb8:	f001 ff96 	bl	8002ae8 <HAL_Delay>

    // Step 4: Disable USART before reconfiguration
    __HAL_UART_DISABLE(huart);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	438a      	bics	r2, r1
 8000bca:	601a      	str	r2, [r3, #0]

    // Step 5: Update baud rate in handle structure
    huart->Init.BaudRate = speed;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	605a      	str	r2, [r3, #4]

    // Step 6: Reinitialize USART with new baud rate
    if (HAL_UART_Init(huart) != HAL_OK)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f005 fa83 	bl	80060e0 <HAL_UART_Init>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <change_usart_baud_rate+0x5e>
    {
        // Handle initialization error
        Error_Handler();
 8000bde:	f001 f8eb 	bl	8001db8 <Error_Handler>
    }

    // Step 7: Re-enable USART
    __HAL_UART_ENABLE(huart);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2101      	movs	r1, #1
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	601a      	str	r2, [r3, #0]

    // Optional: Clear any status flags that might have been set
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	220f      	movs	r2, #15
 8000bf8:	621a      	str	r2, [r3, #32]
                                 UART_CLEAR_PEF | UART_CLEAR_FEF);
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <join>:
    return 1;
  }
}

int join(UART_HandleTypeDef *huart)
{
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b0c6      	sub	sp, #280	@ 0x118
 8000c08:	af02      	add	r7, sp, #8
 8000c0a:	6078      	str	r0, [r7, #4]
  if (is_connected)
 8000c0c:	4b65      	ldr	r3, [pc, #404]	@ (8000da4 <join+0x1a0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d005      	beq.n	8000c20 <join+0x1c>
  {
    dbg_print_line("JOIN:skip");
 8000c14:	4b64      	ldr	r3, [pc, #400]	@ (8000da8 <join+0x1a4>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff ff62 	bl	8000ae0 <dbg_print_line>
    return 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e0bc      	b.n	8000d9a <join+0x196>
  }
  dbg_print_line("JOIN:start");
 8000c20:	4b62      	ldr	r3, [pc, #392]	@ (8000dac <join+0x1a8>)
 8000c22:	0018      	movs	r0, r3
 8000c24:	f7ff ff5c 	bl	8000ae0 <dbg_print_line>
  HAL_UART_Transmit(&huart2, (uint8_t *)"AT\r\n", 4, 300);
 8000c28:	2396      	movs	r3, #150	@ 0x96
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	4960      	ldr	r1, [pc, #384]	@ (8000db0 <join+0x1ac>)
 8000c2e:	4861      	ldr	r0, [pc, #388]	@ (8000db4 <join+0x1b0>)
 8000c30:	2204      	movs	r2, #4
 8000c32:	f005 fae7 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(300); // let OK come back!
 8000c36:	2396      	movs	r3, #150	@ 0x96
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f001 ff54 	bl	8002ae8 <HAL_Delay>
  uint16_t total_rcv = 0;
 8000c40:	2385      	movs	r3, #133	@ 0x85
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	2200      	movs	r2, #0
 8000c48:	801a      	strh	r2, [r3, #0]
  int16_t total_expected = 11;
 8000c4a:	2387      	movs	r3, #135	@ 0x87
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	220b      	movs	r2, #11
 8000c52:	801a      	strh	r2, [r3, #0]
  uint8_t rxbuf[256] = {0};
 8000c54:	4b58      	ldr	r3, [pc, #352]	@ (8000db8 <join+0x1b4>)
 8000c56:	2288      	movs	r2, #136	@ 0x88
 8000c58:	0052      	lsls	r2, r2, #1
 8000c5a:	189b      	adds	r3, r3, r2
 8000c5c:	19db      	adds	r3, r3, r7
 8000c5e:	0018      	movs	r0, r3
 8000c60:	2380      	movs	r3, #128	@ 0x80
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	001a      	movs	r2, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	f006 fb24 	bl	80072b4 <memset>
  HAL_UART_Transmit(&huart2, (uint8_t *)"AT+JOIN\r\n", 9, 300);
 8000c6c:	2396      	movs	r3, #150	@ 0x96
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4952      	ldr	r1, [pc, #328]	@ (8000dbc <join+0x1b8>)
 8000c72:	4850      	ldr	r0, [pc, #320]	@ (8000db4 <join+0x1b0>)
 8000c74:	2209      	movs	r2, #9
 8000c76:	f005 fac5 	bl	8006204 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart2, rxbuf, 4, 100);
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	18f9      	adds	r1, r7, r3
 8000c7e:	484d      	ldr	r0, [pc, #308]	@ (8000db4 <join+0x1b0>)
 8000c80:	2364      	movs	r3, #100	@ 0x64
 8000c82:	2204      	movs	r2, #4
 8000c84:	f005 fb5e 	bl	8006344 <HAL_UART_Receive>
  __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8000c88:	4b4a      	ldr	r3, [pc, #296]	@ (8000db4 <join+0x1b0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	699a      	ldr	r2, [r3, #24]
 8000c8e:	4b49      	ldr	r3, [pc, #292]	@ (8000db4 <join+0x1b0>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2108      	movs	r1, #8
 8000c94:	430a      	orrs	r2, r1
 8000c96:	619a      	str	r2, [r3, #24]
 8000c98:	4b46      	ldr	r3, [pc, #280]	@ (8000db4 <join+0x1b0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	699a      	ldr	r2, [r3, #24]
 8000c9e:	4b45      	ldr	r3, [pc, #276]	@ (8000db4 <join+0x1b0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	619a      	str	r2, [r3, #24]
  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8000ca8:	4b42      	ldr	r3, [pc, #264]	@ (8000db4 <join+0x1b0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2210      	movs	r2, #16
 8000cae:	621a      	str	r2, [r3, #32]

  while (total_expected > 0)
 8000cb0:	e019      	b.n	8000ce6 <join+0xe2>
  {
    HAL_UARTEx_ReceiveToIdle(&huart2, rxbuf + total_rcv, 100, &total_rcv, 10000);
 8000cb2:	2085      	movs	r0, #133	@ 0x85
 8000cb4:	0040      	lsls	r0, r0, #1
 8000cb6:	183b      	adds	r3, r7, r0
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	001a      	movs	r2, r3
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	1899      	adds	r1, r3, r2
 8000cc2:	0004      	movs	r4, r0
 8000cc4:	183b      	adds	r3, r7, r0
 8000cc6:	483b      	ldr	r0, [pc, #236]	@ (8000db4 <join+0x1b0>)
 8000cc8:	4a3d      	ldr	r2, [pc, #244]	@ (8000dc0 <join+0x1bc>)
 8000cca:	9200      	str	r2, [sp, #0]
 8000ccc:	2264      	movs	r2, #100	@ 0x64
 8000cce:	f006 f99b 	bl	8007008 <HAL_UARTEx_ReceiveToIdle>
    total_expected -= total_rcv;
 8000cd2:	2187      	movs	r1, #135	@ 0x87
 8000cd4:	0049      	lsls	r1, r1, #1
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	881a      	ldrh	r2, [r3, #0]
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	801a      	strh	r2, [r3, #0]
  while (total_expected > 0)
 8000ce6:	2387      	movs	r3, #135	@ 0x87
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	2200      	movs	r2, #0
 8000cee:	5e9b      	ldrsh	r3, [r3, r2]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	dcde      	bgt.n	8000cb2 <join+0xae>
  }

  __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8000db4 <join+0x1b0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	699a      	ldr	r2, [r3, #24]
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8000db4 <join+0x1b0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2108      	movs	r1, #8
 8000d00:	430a      	orrs	r2, r1
 8000d02:	619a      	str	r2, [r3, #24]
 8000d04:	4b2b      	ldr	r3, [pc, #172]	@ (8000db4 <join+0x1b0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	699a      	ldr	r2, [r3, #24]
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <join+0x1b0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2110      	movs	r1, #16
 8000d10:	430a      	orrs	r2, r1
 8000d12:	619a      	str	r2, [r3, #24]
  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8000d14:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <join+0x1b0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2210      	movs	r2, #16
 8000d1a:	621a      	str	r2, [r3, #32]

  char result = find_char_after((const char *)rxbuf, "JOIN: [");
 8000d1c:	250e      	movs	r5, #14
 8000d1e:	35ff      	adds	r5, #255	@ 0xff
 8000d20:	197c      	adds	r4, r7, r5
 8000d22:	4a28      	ldr	r2, [pc, #160]	@ (8000dc4 <join+0x1c0>)
 8000d24:	2308      	movs	r3, #8
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	0011      	movs	r1, r2
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f7ff feee 	bl	8000b0c <find_char_after>
 8000d30:	0003      	movs	r3, r0
 8000d32:	7023      	strb	r3, [r4, #0]
  if (result == 'O')
 8000d34:	197b      	adds	r3, r7, r5
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b4f      	cmp	r3, #79	@ 0x4f
 8000d3a:	d108      	bne.n	8000d4e <join+0x14a>
  {
    is_connected = 1;
 8000d3c:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <join+0x1a0>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]
    dbg_print_line("JOIN:success");
 8000d42:	4b21      	ldr	r3, [pc, #132]	@ (8000dc8 <join+0x1c4>)
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff fecb 	bl	8000ae0 <dbg_print_line>
    return 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e025      	b.n	8000d9a <join+0x196>
  // A JOIN Triggers an endless loop of AT+JOIN attempts that are done by
  // the module itsself. The Module will never actually stop trying to join
  // even if the STM32 is in it's 10 minute sleep cycle. That said, if we
  // fail to join, we need to explicitly tell the module to STOP joining
  // so we can take that battery savin' 10 minute nap.
  if (result == 'F') // F is for FAIL
 8000d4e:	230e      	movs	r3, #14
 8000d50:	33ff      	adds	r3, #255	@ 0xff
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b46      	cmp	r3, #70	@ 0x46
 8000d58:	d117      	bne.n	8000d8a <join+0x186>
  {
    is_connected = 0;
 8000d5a:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <join+0x1a0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)"AT\r\n", 4, 300);
 8000d60:	2396      	movs	r3, #150	@ 0x96
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4912      	ldr	r1, [pc, #72]	@ (8000db0 <join+0x1ac>)
 8000d66:	4813      	ldr	r0, [pc, #76]	@ (8000db4 <join+0x1b0>)
 8000d68:	2204      	movs	r2, #4
 8000d6a:	f005 fa4b 	bl	8006204 <HAL_UART_Transmit>
    HAL_Delay(300); // let OK come back!
 8000d6e:	2396      	movs	r3, #150	@ 0x96
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	0018      	movs	r0, r3
 8000d74:	f001 feb8 	bl	8002ae8 <HAL_Delay>
    HAL_UART_Transmit(&huart2, (uint8_t *)"AT+DROP\r\n", 9, 300);
 8000d78:	2396      	movs	r3, #150	@ 0x96
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4913      	ldr	r1, [pc, #76]	@ (8000dcc <join+0x1c8>)
 8000d7e:	480d      	ldr	r0, [pc, #52]	@ (8000db4 <join+0x1b0>)
 8000d80:	2209      	movs	r2, #9
 8000d82:	f005 fa3f 	bl	8006204 <HAL_UART_Transmit>
    return 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e007      	b.n	8000d9a <join+0x196>
    __NOP(); // success
  }
  else
  {
    is_connected = 0;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <join+0x1a0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
    dbg_print_line("JOIN:fail");
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <join+0x1cc>)
 8000d92:	0018      	movs	r0, r3
 8000d94:	f7ff fea4 	bl	8000ae0 <dbg_print_line>
    return 0;
 8000d98:	2300      	movs	r3, #0
    __NOP(); // fail
  }
}
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b044      	add	sp, #272	@ 0x110
 8000da0:	bdb0      	pop	{r4, r5, r7, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	20000264 	.word	0x20000264
 8000da8:	08007bec 	.word	0x08007bec
 8000dac:	08007bf8 	.word	0x08007bf8
 8000db0:	08007bd8 	.word	0x08007bd8
 8000db4:	200001dc 	.word	0x200001dc
 8000db8:	fffffef8 	.word	0xfffffef8
 8000dbc:	08007c04 	.word	0x08007c04
 8000dc0:	00002710 	.word	0x00002710
 8000dc4:	08007c10 	.word	0x08007c10
 8000dc8:	08007c18 	.word	0x08007c18
 8000dcc:	08007c28 	.word	0x08007c28
 8000dd0:	08007c34 	.word	0x08007c34

08000dd4 <lorawan_set_battery_level>:
    return 1;
  }
}

int lorawan_set_battery_level(UART_HandleTypeDef *huart, uint8_t battery_level)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	@ 0x30
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	000a      	movs	r2, r1
 8000dde:	1cfb      	adds	r3, r7, #3
 8000de0:	701a      	strb	r2, [r3, #0]
  char cmd[32]; // enough space for command
  int len = snprintf(cmd, sizeof(cmd), "AT+BAT %u\r\n", battery_level);
 8000de2:	1cfb      	adds	r3, r7, #3
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	4a22      	ldr	r2, [pc, #136]	@ (8000e70 <lorawan_set_battery_level+0x9c>)
 8000de8:	210c      	movs	r1, #12
 8000dea:	1878      	adds	r0, r7, r1
 8000dec:	2120      	movs	r1, #32
 8000dee:	f006 fa2b 	bl	8007248 <sniprintf>
 8000df2:	0003      	movs	r3, r0
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (len <= 0 || len >= sizeof(cmd))
 8000df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	dd02      	ble.n	8000e02 <lorawan_set_battery_level+0x2e>
 8000dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dfe:	2b1f      	cmp	r3, #31
 8000e00:	d902      	bls.n	8000e08 <lorawan_set_battery_level+0x34>
  {
    return -1; // encoding error or buffer too small
 8000e02:	2301      	movs	r3, #1
 8000e04:	425b      	negs	r3, r3
 8000e06:	e02f      	b.n	8000e68 <lorawan_set_battery_level+0x94>
  }

  // Flush / clear UART
  HAL_UART_AbortReceive(huart);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f005 fb80 	bl	8006510 <HAL_UART_AbortReceive>
  __HAL_UART_FLUSH_DRREGISTER(huart);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	699a      	ldr	r2, [r3, #24]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2108      	movs	r1, #8
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	619a      	str	r2, [r3, #24]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	699a      	ldr	r2, [r3, #24]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	619a      	str	r2, [r3, #24]
  __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2210      	movs	r2, #16
 8000e36:	621a      	str	r2, [r3, #32]
  __HAL_UART_CLEAR_FLAG(huart,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	621a      	str	r2, [r3, #32]
                        UART_CLEAR_OREF | UART_CLEAR_FEF | UART_CLEAR_PEF | UART_CLEAR_NEF);

  // Transmit command
  if (HAL_UART_Transmit(huart, (uint8_t *)cmd, (uint16_t)len, 300) != HAL_OK)
 8000e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	2396      	movs	r3, #150	@ 0x96
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	210c      	movs	r1, #12
 8000e4a:	1879      	adds	r1, r7, r1
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f005 f9d9 	bl	8006204 <HAL_UART_Transmit>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d002      	beq.n	8000e5c <lorawan_set_battery_level+0x88>
  {
    return -2; // TX error
 8000e56:	2302      	movs	r3, #2
 8000e58:	425b      	negs	r3, r3
 8000e5a:	e005      	b.n	8000e68 <lorawan_set_battery_level+0x94>
  }

  HAL_Delay(300);
 8000e5c:	2396      	movs	r3, #150	@ 0x96
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	0018      	movs	r0, r3
 8000e62:	f001 fe41 	bl	8002ae8 <HAL_Delay>
  return 0; // success
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b00c      	add	sp, #48	@ 0x30
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	08007c4c 	.word	0x08007c4c

08000e74 <LoRaWAN_set_fport>:

static void LoRaWAN_set_fport(int fPort)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b089      	sub	sp, #36	@ 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  char cmd[20]; // plenty big for "ATS 629=255\r\n"
  int n = snprintf(cmd, sizeof(cmd), "ATS 629=%d\r\n", fPort);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb4 <LoRaWAN_set_fport+0x40>)
 8000e80:	2408      	movs	r4, #8
 8000e82:	1938      	adds	r0, r7, r4
 8000e84:	2114      	movs	r1, #20
 8000e86:	f006 f9df 	bl	8007248 <sniprintf>
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	61fb      	str	r3, [r7, #28]
  if (n > 0 && n < (int)sizeof(cmd))
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	dd0a      	ble.n	8000eaa <LoRaWAN_set_fport+0x36>
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	2b13      	cmp	r3, #19
 8000e98:	dc07      	bgt.n	8000eaa <LoRaWAN_set_fport+0x36>
  {
    HAL_UART_Transmit(&huart2, (uint8_t *)cmd, (uint16_t)n, 300);
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	2396      	movs	r3, #150	@ 0x96
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	1939      	adds	r1, r7, r4
 8000ea4:	4804      	ldr	r0, [pc, #16]	@ (8000eb8 <LoRaWAN_set_fport+0x44>)
 8000ea6:	f005 f9ad 	bl	8006204 <HAL_UART_Transmit>
  }
}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b009      	add	sp, #36	@ 0x24
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	46c0      	nop			@ (mov r8, r8)
 8000eb4:	08007c58 	.word	0x08007c58
 8000eb8:	200001dc 	.word	0x200001dc

08000ebc <LoRaWAN_SendHex>:

void LoRaWAN_SendHex(const uint8_t *payload, size_t length, int fPort)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08c      	sub	sp, #48	@ 0x30
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  static const char HEX[16] = "0123456789ABCDEF";
  static const char prefix[] = "AT+SEND \"";
  static const char suffix[] = "\"\r\n";

  if (!payload || length == 0)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d100      	bne.n	8000ed0 <LoRaWAN_SendHex+0x14>
 8000ece:	e084      	b.n	8000fda <LoRaWAN_SendHex+0x11e>
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <LoRaWAN_SendHex+0x1c>
 8000ed6:	e080      	b.n	8000fda <LoRaWAN_SendHex+0x11e>

  // Max wire size = len*2 hex + 8(prefix) + 3(suffix)
  // 242B -> 484 + 11 = 495 bytes fits in 512
  static uint8_t txbuf[512];

  const size_t prefix_len = sizeof(prefix) - 1;
 8000ed8:	2309      	movs	r3, #9
 8000eda:	61fb      	str	r3, [r7, #28]
  const size_t suffix_len = sizeof(suffix) - 1;
 8000edc:	2303      	movs	r3, #3
 8000ede:	61bb      	str	r3, [r7, #24]
  const size_t need = prefix_len + (length * 2u) + suffix_len;
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	005a      	lsls	r2, r3, #1
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	18d3      	adds	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	18d3      	adds	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]

  if (need > sizeof(txbuf))
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	2380      	movs	r3, #128	@ 0x80
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d872      	bhi.n	8000fde <LoRaWAN_SendHex+0x122>
  {
    // Payload too large for our static buffer; don't send a truncated command
    return;
  }

  size_t idx = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // Copy prefix
  for (size_t i = 0; i < prefix_len; ++i)
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f00:	e00b      	b.n	8000f1a <LoRaWAN_SendHex+0x5e>
    txbuf[idx++] = (uint8_t)prefix[i];
 8000f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000f08:	4937      	ldr	r1, [pc, #220]	@ (8000fe8 <LoRaWAN_SendHex+0x12c>)
 8000f0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f0c:	188a      	adds	r2, r1, r2
 8000f0e:	7811      	ldrb	r1, [r2, #0]
 8000f10:	4a36      	ldr	r2, [pc, #216]	@ (8000fec <LoRaWAN_SendHex+0x130>)
 8000f12:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 0; i < prefix_len; ++i)
 8000f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f16:	3301      	adds	r3, #1
 8000f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d3ef      	bcc.n	8000f02 <LoRaWAN_SendHex+0x46>

  // Hex-encode payload
  for (size_t i = 0; i < length; ++i)
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f26:	e020      	b.n	8000f6a <LoRaWAN_SendHex+0xae>
  {
    uint8_t b = payload[i];
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2c:	18d2      	adds	r2, r2, r3
 8000f2e:	2013      	movs	r0, #19
 8000f30:	183b      	adds	r3, r7, r0
 8000f32:	7812      	ldrb	r2, [r2, #0]
 8000f34:	701a      	strb	r2, [r3, #0]
    txbuf[idx++] = (uint8_t)HEX[b >> 4];
 8000f36:	183b      	adds	r3, r7, r0
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	091b      	lsrs	r3, r3, #4
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	0019      	movs	r1, r3
 8000f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000f46:	4a2a      	ldr	r2, [pc, #168]	@ (8000ff0 <LoRaWAN_SendHex+0x134>)
 8000f48:	5c51      	ldrb	r1, [r2, r1]
 8000f4a:	4a28      	ldr	r2, [pc, #160]	@ (8000fec <LoRaWAN_SendHex+0x130>)
 8000f4c:	54d1      	strb	r1, [r2, r3]
    txbuf[idx++] = (uint8_t)HEX[b & 0x0F];
 8000f4e:	183b      	adds	r3, r7, r0
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	220f      	movs	r2, #15
 8000f54:	401a      	ands	r2, r3
 8000f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f58:	1c59      	adds	r1, r3, #1
 8000f5a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8000f5c:	4924      	ldr	r1, [pc, #144]	@ (8000ff0 <LoRaWAN_SendHex+0x134>)
 8000f5e:	5c89      	ldrb	r1, [r1, r2]
 8000f60:	4a22      	ldr	r2, [pc, #136]	@ (8000fec <LoRaWAN_SendHex+0x130>)
 8000f62:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 0; i < length; ++i)
 8000f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f66:	3301      	adds	r3, #1
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d3da      	bcc.n	8000f28 <LoRaWAN_SendHex+0x6c>
  }

  // Copy suffix
  for (size_t i = 0; i < suffix_len; ++i)
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
 8000f76:	e00b      	b.n	8000f90 <LoRaWAN_SendHex+0xd4>
    txbuf[idx++] = (uint8_t)suffix[i];
 8000f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000f7e:	491d      	ldr	r1, [pc, #116]	@ (8000ff4 <LoRaWAN_SendHex+0x138>)
 8000f80:	6a3a      	ldr	r2, [r7, #32]
 8000f82:	188a      	adds	r2, r1, r2
 8000f84:	7811      	ldrb	r1, [r2, #0]
 8000f86:	4a19      	ldr	r2, [pc, #100]	@ (8000fec <LoRaWAN_SendHex+0x130>)
 8000f88:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 0; i < suffix_len; ++i)
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
 8000f90:	6a3a      	ldr	r2, [r7, #32]
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3ef      	bcc.n	8000f78 <LoRaWAN_SendHex+0xbc>

  // dbg_print_u32("SEND:len", (uint32_t)length);
  HAL_UART_Transmit(&huart2, (uint8_t *)"AT\r\n", 4, 300); // WAKE MODULE!
 8000f98:	2396      	movs	r3, #150	@ 0x96
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4916      	ldr	r1, [pc, #88]	@ (8000ff8 <LoRaWAN_SendHex+0x13c>)
 8000f9e:	4817      	ldr	r0, [pc, #92]	@ (8000ffc <LoRaWAN_SendHex+0x140>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	f005 f92f 	bl	8006204 <HAL_UART_Transmit>
  HAL_Delay(400);                                          // Giving it enough ttime to wake up
 8000fa6:	23c8      	movs	r3, #200	@ 0xc8
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	0018      	movs	r0, r3
 8000fac:	f001 fd9c 	bl	8002ae8 <HAL_Delay>

  // Set FPort from the function argument (dynamic)
  LoRaWAN_set_fport(fPort);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f7ff ff5e 	bl	8000e74 <LoRaWAN_set_fport>
  HAL_Delay(300);
 8000fb8:	2396      	movs	r3, #150	@ 0x96
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f001 fd93 	bl	8002ae8 <HAL_Delay>

  HAL_UART_Transmit(&huart2, txbuf, (uint16_t)idx, 300); // SEND THE DATA!
 8000fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	2396      	movs	r3, #150	@ 0x96
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4908      	ldr	r1, [pc, #32]	@ (8000fec <LoRaWAN_SendHex+0x130>)
 8000fcc:	480b      	ldr	r0, [pc, #44]	@ (8000ffc <LoRaWAN_SendHex+0x140>)
 8000fce:	f005 f919 	bl	8006204 <HAL_UART_Transmit>

  // Return to fPort 1, probably not needed, but lets do it anyhow
  LoRaWAN_set_fport(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff ff4e 	bl	8000e74 <LoRaWAN_set_fport>
 8000fd8:	e002      	b.n	8000fe0 <LoRaWAN_SendHex+0x124>
    return;
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	e000      	b.n	8000fe0 <LoRaWAN_SendHex+0x124>
    return;
 8000fde:	46c0      	nop			@ (mov r8, r8)
  // HAL_Delay(300); // Not sure if i need this
}
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b00c      	add	sp, #48	@ 0x30
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	08007d44 	.word	0x08007d44
 8000fec:	2000026c 	.word	0x2000026c
 8000ff0:	08007d50 	.word	0x08007d50
 8000ff4:	08007d60 	.word	0x08007d60
 8000ff8:	08007bd8 	.word	0x08007bd8
 8000ffc:	200001dc 	.word	0x200001dc

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001002:	4c30      	ldr	r4, [pc, #192]	@ (80010c4 <main+0xc4>)
 8001004:	44a5      	add	sp, r4
 8001006:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001008:	f001 fcfe 	bl	8002a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100c:	f000 fb44 	bl	8001698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001010:	f000 fd04 	bl	8001a1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001014:	f000 fcd2 	bl	80019bc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001018:	f000 fc9c 	bl	8001954 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800101c:	f000 fc66 	bl	80018ec <MX_RTC_Init>
  MX_I2C1_Init();
 8001020:	f000 fc24 	bl	800186c <MX_I2C1_Init>
  MX_ADC_Init();
 8001024:	f000 fbbe 	bl	80017a4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  // Figure out baud rate
  __NOP();
 8001028:	46c0      	nop			@ (mov r8, r8)
//  HAL_UART_Transmit(&huart2, (uint8_t *)"AT\r\n", 4, 300);
//  HAL_UART_Transmit(&huart2, (uint8_t *)"AT&F\r\n", 6, 300);
//  HAL_UART_Transmit(&huart2, (uint8_t *)"ATZ\r\n", 5, 300);

    HAL_UART_Transmit(&huart2, (uint8_t *)"AT\r\n", 4, 300);
 800102a:	2396      	movs	r3, #150	@ 0x96
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4926      	ldr	r1, [pc, #152]	@ (80010c8 <main+0xc8>)
 8001030:	4826      	ldr	r0, [pc, #152]	@ (80010cc <main+0xcc>)
 8001032:	2204      	movs	r2, #4
 8001034:	f005 f8e6 	bl	8006204 <HAL_UART_Transmit>
    HAL_Delay(300); // let OK come back!
 8001038:	2396      	movs	r3, #150	@ 0x96
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	0018      	movs	r0, r3
 800103e:	f001 fd53 	bl	8002ae8 <HAL_Delay>
    uint16_t total_rcv = 0;
 8001042:	238c      	movs	r3, #140	@ 0x8c
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	2200      	movs	r2, #0
 800104a:	801a      	strh	r2, [r3, #0]
    int16_t total_expected = 16;
 800104c:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <main+0xd0>)
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	2210      	movs	r2, #16
 8001052:	801a      	strh	r2, [r3, #0]
    uint8_t rxbuf[256] = {0};
 8001054:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <main+0xd4>)
 8001056:	2292      	movs	r2, #146	@ 0x92
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	189b      	adds	r3, r3, r2
 800105c:	19db      	adds	r3, r3, r7
 800105e:	0018      	movs	r0, r3
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	001a      	movs	r2, r3
 8001066:	2100      	movs	r1, #0
 8001068:	f006 f924 	bl	80072b4 <memset>


    change_usart_baud_rate(&huart2, 115200);
 800106c:	23e1      	movs	r3, #225	@ 0xe1
 800106e:	025a      	lsls	r2, r3, #9
 8001070:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <main+0xcc>)
 8001072:	0011      	movs	r1, r2
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff fd85 	bl	8000b84 <change_usart_baud_rate>


    HAL_UART_Transmit(&huart2, (uint8_t *)"AT%S 501?\r\n", 12, 300); // GET DEV EUI
 800107a:	2396      	movs	r3, #150	@ 0x96
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4916      	ldr	r1, [pc, #88]	@ (80010d8 <main+0xd8>)
 8001080:	4812      	ldr	r0, [pc, #72]	@ (80010cc <main+0xcc>)
 8001082:	220c      	movs	r2, #12
 8001084:	f005 f8be 	bl	8006204 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart2, rxbuf, 4, 100);
 8001088:	2398      	movs	r3, #152	@ 0x98
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	18f9      	adds	r1, r7, r3
 800108e:	480f      	ldr	r0, [pc, #60]	@ (80010cc <main+0xcc>)
 8001090:	2364      	movs	r3, #100	@ 0x64
 8001092:	2204      	movs	r2, #4
 8001094:	f005 f956 	bl	8006344 <HAL_UART_Receive>
    __HAL_UART_FLUSH_DRREGISTER(&huart2);
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <main+0xcc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	699a      	ldr	r2, [r3, #24]
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <main+0xcc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2108      	movs	r1, #8
 80010a4:	430a      	orrs	r2, r1
 80010a6:	619a      	str	r2, [r3, #24]
 80010a8:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <main+0xcc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	699a      	ldr	r2, [r3, #24]
 80010ae:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <main+0xcc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2110      	movs	r1, #16
 80010b4:	430a      	orrs	r2, r1
 80010b6:	619a      	str	r2, [r3, #24]
    __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <main+0xcc>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2210      	movs	r2, #16
 80010be:	621a      	str	r2, [r3, #32]

    while (total_expected > 0)
 80010c0:	e027      	b.n	8001112 <main+0x112>
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	fffffdac 	.word	0xfffffdac
 80010c8:	08007bd8 	.word	0x08007bd8
 80010cc:	200001dc 	.word	0x200001dc
 80010d0:	00000246 	.word	0x00000246
 80010d4:	fffffee8 	.word	0xfffffee8
 80010d8:	08007c68 	.word	0x08007c68
    {
      HAL_UARTEx_ReceiveToIdle(&huart2, rxbuf + total_rcv, 100, &total_rcv, 1000);
 80010dc:	248c      	movs	r4, #140	@ 0x8c
 80010de:	00a4      	lsls	r4, r4, #2
 80010e0:	193b      	adds	r3, r7, r4
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	001a      	movs	r2, r3
 80010e6:	2398      	movs	r3, #152	@ 0x98
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	1899      	adds	r1, r3, r2
 80010ee:	193a      	adds	r2, r7, r4
 80010f0:	48b2      	ldr	r0, [pc, #712]	@ (80013bc <main+0x3bc>)
 80010f2:	23fa      	movs	r3, #250	@ 0xfa
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	0013      	movs	r3, r2
 80010fa:	2264      	movs	r2, #100	@ 0x64
 80010fc:	f005 ff84 	bl	8007008 <HAL_UARTEx_ReceiveToIdle>
      total_expected -= total_rcv;
 8001100:	49af      	ldr	r1, [pc, #700]	@ (80013c0 <main+0x3c0>)
 8001102:	187b      	adds	r3, r7, r1
 8001104:	881a      	ldrh	r2, [r3, #0]
 8001106:	193b      	adds	r3, r7, r4
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	b29a      	uxth	r2, r3
 800110e:	187b      	adds	r3, r7, r1
 8001110:	801a      	strh	r2, [r3, #0]
    while (total_expected > 0)
 8001112:	4bab      	ldr	r3, [pc, #684]	@ (80013c0 <main+0x3c0>)
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	2200      	movs	r2, #0
 8001118:	5e9b      	ldrsh	r3, [r3, r2]
 800111a:	2b00      	cmp	r3, #0
 800111c:	dcde      	bgt.n	80010dc <main+0xdc>
    }

    if (
    		(rxbuf[0] == 0 &&
 800111e:	4ba9      	ldr	r3, [pc, #676]	@ (80013c4 <main+0x3c4>)
 8001120:	2292      	movs	r2, #146	@ 0x92
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	189b      	adds	r3, r3, r2
 8001126:	19db      	adds	r3, r3, r7
 8001128:	781b      	ldrb	r3, [r3, #0]
    if (
 800112a:	2b00      	cmp	r3, #0
 800112c:	d159      	bne.n	80011e2 <main+0x1e2>
			rxbuf[1] == 0 &&
 800112e:	4ba5      	ldr	r3, [pc, #660]	@ (80013c4 <main+0x3c4>)
 8001130:	189b      	adds	r3, r3, r2
 8001132:	19db      	adds	r3, r3, r7
 8001134:	785b      	ldrb	r3, [r3, #1]
    		(rxbuf[0] == 0 &&
 8001136:	2b00      	cmp	r3, #0
 8001138:	d153      	bne.n	80011e2 <main+0x1e2>
			rxbuf[2] == 0 &&
 800113a:	4ba2      	ldr	r3, [pc, #648]	@ (80013c4 <main+0x3c4>)
 800113c:	189b      	adds	r3, r3, r2
 800113e:	19db      	adds	r3, r3, r7
 8001140:	789b      	ldrb	r3, [r3, #2]
			rxbuf[1] == 0 &&
 8001142:	2b00      	cmp	r3, #0
 8001144:	d14d      	bne.n	80011e2 <main+0x1e2>
			rxbuf[3] == 0 &&
 8001146:	4b9f      	ldr	r3, [pc, #636]	@ (80013c4 <main+0x3c4>)
 8001148:	189b      	adds	r3, r3, r2
 800114a:	19db      	adds	r3, r3, r7
 800114c:	78db      	ldrb	r3, [r3, #3]
			rxbuf[2] == 0 &&
 800114e:	2b00      	cmp	r3, #0
 8001150:	d147      	bne.n	80011e2 <main+0x1e2>
			rxbuf[4] == 0 &&
 8001152:	4b9c      	ldr	r3, [pc, #624]	@ (80013c4 <main+0x3c4>)
 8001154:	189b      	adds	r3, r3, r2
 8001156:	19db      	adds	r3, r3, r7
 8001158:	791b      	ldrb	r3, [r3, #4]
			rxbuf[3] == 0 &&
 800115a:	2b00      	cmp	r3, #0
 800115c:	d141      	bne.n	80011e2 <main+0x1e2>
			rxbuf[5] == 0 &&
 800115e:	4b99      	ldr	r3, [pc, #612]	@ (80013c4 <main+0x3c4>)
 8001160:	189b      	adds	r3, r3, r2
 8001162:	19db      	adds	r3, r3, r7
 8001164:	795b      	ldrb	r3, [r3, #5]
			rxbuf[4] == 0 &&
 8001166:	2b00      	cmp	r3, #0
 8001168:	d13b      	bne.n	80011e2 <main+0x1e2>
			rxbuf[6] == 0 &&
 800116a:	4b96      	ldr	r3, [pc, #600]	@ (80013c4 <main+0x3c4>)
 800116c:	189b      	adds	r3, r3, r2
 800116e:	19db      	adds	r3, r3, r7
 8001170:	799b      	ldrb	r3, [r3, #6]
			rxbuf[5] == 0 &&
 8001172:	2b00      	cmp	r3, #0
 8001174:	d135      	bne.n	80011e2 <main+0x1e2>
			rxbuf[7] == 0 &&
 8001176:	4b93      	ldr	r3, [pc, #588]	@ (80013c4 <main+0x3c4>)
 8001178:	189b      	adds	r3, r3, r2
 800117a:	19db      	adds	r3, r3, r7
 800117c:	79db      	ldrb	r3, [r3, #7]
			rxbuf[6] == 0 &&
 800117e:	2b00      	cmp	r3, #0
 8001180:	d12f      	bne.n	80011e2 <main+0x1e2>
			rxbuf[8] == 0 &&
 8001182:	4b90      	ldr	r3, [pc, #576]	@ (80013c4 <main+0x3c4>)
 8001184:	189b      	adds	r3, r3, r2
 8001186:	19db      	adds	r3, r3, r7
 8001188:	7a1b      	ldrb	r3, [r3, #8]
			rxbuf[7] == 0 &&
 800118a:	2b00      	cmp	r3, #0
 800118c:	d129      	bne.n	80011e2 <main+0x1e2>
			rxbuf[9] == 0 &&
 800118e:	4b8d      	ldr	r3, [pc, #564]	@ (80013c4 <main+0x3c4>)
 8001190:	189b      	adds	r3, r3, r2
 8001192:	19db      	adds	r3, r3, r7
 8001194:	7a5b      	ldrb	r3, [r3, #9]
			rxbuf[8] == 0 &&
 8001196:	2b00      	cmp	r3, #0
 8001198:	d123      	bne.n	80011e2 <main+0x1e2>
			rxbuf[10] == 0 &&
 800119a:	4b8a      	ldr	r3, [pc, #552]	@ (80013c4 <main+0x3c4>)
 800119c:	189b      	adds	r3, r3, r2
 800119e:	19db      	adds	r3, r3, r7
 80011a0:	7a9b      	ldrb	r3, [r3, #10]
			rxbuf[9] == 0 &&
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d11d      	bne.n	80011e2 <main+0x1e2>
			rxbuf[11] == 0 &&
 80011a6:	4b87      	ldr	r3, [pc, #540]	@ (80013c4 <main+0x3c4>)
 80011a8:	189b      	adds	r3, r3, r2
 80011aa:	19db      	adds	r3, r3, r7
 80011ac:	7adb      	ldrb	r3, [r3, #11]
			rxbuf[10] == 0 &&
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d117      	bne.n	80011e2 <main+0x1e2>
			rxbuf[12] == 0 &&
 80011b2:	4b84      	ldr	r3, [pc, #528]	@ (80013c4 <main+0x3c4>)
 80011b4:	189b      	adds	r3, r3, r2
 80011b6:	19db      	adds	r3, r3, r7
 80011b8:	7b1b      	ldrb	r3, [r3, #12]
			rxbuf[11] == 0 &&
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d111      	bne.n	80011e2 <main+0x1e2>
			rxbuf[13] == 0 &&
 80011be:	4b81      	ldr	r3, [pc, #516]	@ (80013c4 <main+0x3c4>)
 80011c0:	189b      	adds	r3, r3, r2
 80011c2:	19db      	adds	r3, r3, r7
 80011c4:	7b5b      	ldrb	r3, [r3, #13]
			rxbuf[12] == 0 &&
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10b      	bne.n	80011e2 <main+0x1e2>
			rxbuf[14] == 0 &&
 80011ca:	4b7e      	ldr	r3, [pc, #504]	@ (80013c4 <main+0x3c4>)
 80011cc:	189b      	adds	r3, r3, r2
 80011ce:	19db      	adds	r3, r3, r7
 80011d0:	7b9b      	ldrb	r3, [r3, #14]
			rxbuf[13] == 0 &&
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d105      	bne.n	80011e2 <main+0x1e2>
			rxbuf[15] == 0) ||
 80011d6:	4b7b      	ldr	r3, [pc, #492]	@ (80013c4 <main+0x3c4>)
 80011d8:	189b      	adds	r3, r3, r2
 80011da:	19db      	adds	r3, r3, r7
 80011dc:	7bdb      	ldrb	r3, [r3, #15]
			rxbuf[14] == 0 &&
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00a      	beq.n	80011f8 <main+0x1f8>
			rxbuf[1] == "\n"
 80011e2:	4b78      	ldr	r3, [pc, #480]	@ (80013c4 <main+0x3c4>)
 80011e4:	2292      	movs	r2, #146	@ 0x92
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	189b      	adds	r3, r3, r2
 80011ea:	19db      	adds	r3, r3, r7
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	001a      	movs	r2, r3
			rxbuf[15] == 0) ||
 80011f0:	4b75      	ldr	r3, [pc, #468]	@ (80013c8 <main+0x3c8>)
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d000      	beq.n	80011f8 <main+0x1f8>
 80011f6:	e0c0      	b.n	800137a <main+0x37a>
       )
    {
    	change_usart_baud_rate(&huart2, 115200);
 80011f8:	23e1      	movs	r3, #225	@ 0xe1
 80011fa:	025a      	lsls	r2, r3, #9
 80011fc:	4b6f      	ldr	r3, [pc, #444]	@ (80013bc <main+0x3bc>)
 80011fe:	0011      	movs	r1, r2
 8001200:	0018      	movs	r0, r3
 8001202:	f7ff fcbf 	bl	8000b84 <change_usart_baud_rate>

    	char dev_eui_cmd[64];
    	const char *join_eui = "0025CA00000055F7";
 8001206:	4b71      	ldr	r3, [pc, #452]	@ (80013cc <main+0x3cc>)
 8001208:	2490      	movs	r4, #144	@ 0x90
 800120a:	00a4      	lsls	r4, r4, #2
 800120c:	193a      	adds	r2, r7, r4
 800120e:	6013      	str	r3, [r2, #0]

    	snprintf(dev_eui_cmd, sizeof(dev_eui_cmd), "AT%%S 501=\"%s\"\r\n", dev_eui);
 8001210:	4b6f      	ldr	r3, [pc, #444]	@ (80013d0 <main+0x3d0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a6f      	ldr	r2, [pc, #444]	@ (80013d4 <main+0x3d4>)
 8001216:	1d38      	adds	r0, r7, #4
 8001218:	2140      	movs	r1, #64	@ 0x40
 800121a:	f006 f815 	bl	8007248 <sniprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t*)dev_eui_cmd, strlen(dev_eui_cmd), 300);                           // DEV EUI
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	0018      	movs	r0, r3
 8001222:	f7fe ff71 	bl	8000108 <strlen>
 8001226:	0003      	movs	r3, r0
 8001228:	b29a      	uxth	r2, r3
 800122a:	2396      	movs	r3, #150	@ 0x96
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	1d39      	adds	r1, r7, #4
 8001230:	4862      	ldr	r0, [pc, #392]	@ (80013bc <main+0x3bc>)
 8001232:	f004 ffe7 	bl	8006204 <HAL_UART_Transmit>
    	HAL_Delay(1000);
 8001236:	23fa      	movs	r3, #250	@ 0xfa
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	0018      	movs	r0, r3
 800123c:	f001 fc54 	bl	8002ae8 <HAL_Delay>

    	char app_eui_cmd[64];
    	snprintf(app_eui_cmd, sizeof(app_eui_cmd), "AT%%S 502=\"%s\"\r\n", join_eui);
 8001240:	193b      	adds	r3, r7, r4
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a64      	ldr	r2, [pc, #400]	@ (80013d8 <main+0x3d8>)
 8001246:	2544      	movs	r5, #68	@ 0x44
 8001248:	1978      	adds	r0, r7, r5
 800124a:	2140      	movs	r1, #64	@ 0x40
 800124c:	f005 fffc 	bl	8007248 <sniprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t*)app_eui_cmd, strlen(app_eui_cmd), 300);                           // JOIN EUI
 8001250:	197b      	adds	r3, r7, r5
 8001252:	0018      	movs	r0, r3
 8001254:	f7fe ff58 	bl	8000108 <strlen>
 8001258:	0003      	movs	r3, r0
 800125a:	b29a      	uxth	r2, r3
 800125c:	2396      	movs	r3, #150	@ 0x96
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	1979      	adds	r1, r7, r5
 8001262:	4856      	ldr	r0, [pc, #344]	@ (80013bc <main+0x3bc>)
 8001264:	f004 ffce 	bl	8006204 <HAL_UART_Transmit>
    	HAL_Delay(1000);
 8001268:	23fa      	movs	r3, #250	@ 0xfa
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	0018      	movs	r0, r3
 800126e:	f001 fc3b 	bl	8002ae8 <HAL_Delay>

    	char combo[64];
    	snprintf(combo, sizeof(combo), "%s%s", dev_eui, join_eui);
 8001272:	4b57      	ldr	r3, [pc, #348]	@ (80013d0 <main+0x3d0>)
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	4a59      	ldr	r2, [pc, #356]	@ (80013dc <main+0x3dc>)
 8001278:	2584      	movs	r5, #132	@ 0x84
 800127a:	1978      	adds	r0, r7, r5
 800127c:	193b      	adds	r3, r7, r4
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	000b      	movs	r3, r1
 8001284:	2140      	movs	r1, #64	@ 0x40
 8001286:	f005 ffdf 	bl	8007248 <sniprintf>
    	char app_key_cmd[96];
    	snprintf(app_key_cmd, sizeof(app_key_cmd), "AT%%S 500=\"%s\"\r\n", combo);
 800128a:	197b      	adds	r3, r7, r5
 800128c:	4a54      	ldr	r2, [pc, #336]	@ (80013e0 <main+0x3e0>)
 800128e:	24c4      	movs	r4, #196	@ 0xc4
 8001290:	1938      	adds	r0, r7, r4
 8001292:	2160      	movs	r1, #96	@ 0x60
 8001294:	f005 ffd8 	bl	8007248 <sniprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t*)app_key_cmd, strlen(app_key_cmd), 300);                          // APP KEY
 8001298:	193b      	adds	r3, r7, r4
 800129a:	0018      	movs	r0, r3
 800129c:	f7fe ff34 	bl	8000108 <strlen>
 80012a0:	0003      	movs	r3, r0
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	2396      	movs	r3, #150	@ 0x96
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	1939      	adds	r1, r7, r4
 80012aa:	4844      	ldr	r0, [pc, #272]	@ (80013bc <main+0x3bc>)
 80012ac:	f004 ffaa 	bl	8006204 <HAL_UART_Transmit>
    	HAL_Delay(1000);
 80012b0:	23fa      	movs	r3, #250	@ 0xfa
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	0018      	movs	r0, r3
 80012b6:	f001 fc17 	bl	8002ae8 <HAL_Delay>

		HAL_UART_Transmit(&huart2, (uint8_t *)"ATS 602=1\r\n", 11, 300);                                      // Activation Mode OTAA (0 = ABP, 1 = OTAA)
 80012ba:	2396      	movs	r3, #150	@ 0x96
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4949      	ldr	r1, [pc, #292]	@ (80013e4 <main+0x3e4>)
 80012c0:	483e      	ldr	r0, [pc, #248]	@ (80013bc <main+0x3bc>)
 80012c2:	220b      	movs	r2, #11
 80012c4:	f004 ff9e 	bl	8006204 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80012c8:	23fa      	movs	r3, #250	@ 0xfa
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	0018      	movs	r0, r3
 80012ce:	f001 fc0b 	bl	8002ae8 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t *)"ATS 603=0\r\n", 11, 300);                                      // Set CLASS to A
 80012d2:	2396      	movs	r3, #150	@ 0x96
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4944      	ldr	r1, [pc, #272]	@ (80013e8 <main+0x3e8>)
 80012d8:	4838      	ldr	r0, [pc, #224]	@ (80013bc <main+0x3bc>)
 80012da:	220b      	movs	r2, #11
 80012dc:	f004 ff92 	bl	8006204 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80012e0:	23fa      	movs	r3, #250	@ 0xfa
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	0018      	movs	r0, r3
 80012e6:	f001 fbff 	bl	8002ae8 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t *)"ATS 604=0\r\n", 11, 300);                                      // Conformed 0 = NO, 1 = yes
 80012ea:	2396      	movs	r3, #150	@ 0x96
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	493f      	ldr	r1, [pc, #252]	@ (80013ec <main+0x3ec>)
 80012f0:	4832      	ldr	r0, [pc, #200]	@ (80013bc <main+0x3bc>)
 80012f2:	220b      	movs	r2, #11
 80012f4:	f004 ff86 	bl	8006204 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80012f8:	23fa      	movs	r3, #250	@ 0xfa
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	0018      	movs	r0, r3
 80012fe:	f001 fbf3 	bl	8002ae8 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t *)"ATS 611=9\r\n", 11, 300);                                      // Set Region to AS923-1 (JAPAN)
 8001302:	2396      	movs	r3, #150	@ 0x96
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	493a      	ldr	r1, [pc, #232]	@ (80013f0 <main+0x3f0>)
 8001308:	482c      	ldr	r0, [pc, #176]	@ (80013bc <main+0x3bc>)
 800130a:	220b      	movs	r2, #11
 800130c:	f004 ff7a 	bl	8006204 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001310:	23fa      	movs	r3, #250	@ 0xfa
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	0018      	movs	r0, r3
 8001316:	f001 fbe7 	bl	8002ae8 <HAL_Delay>

		// Set things that will change how communication works LAST
		HAL_UART_Transmit(&huart2, (uint8_t *)"ATS 213=2000\r\n", 14, 300);                                   // Set Duration to stay awake for (before returning to sleep)
 800131a:	2396      	movs	r3, #150	@ 0x96
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4935      	ldr	r1, [pc, #212]	@ (80013f4 <main+0x3f4>)
 8001320:	4826      	ldr	r0, [pc, #152]	@ (80013bc <main+0x3bc>)
 8001322:	220e      	movs	r2, #14
 8001324:	f004 ff6e 	bl	8006204 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001328:	23fa      	movs	r3, #250	@ 0xfa
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	0018      	movs	r0, r3
 800132e:	f001 fbdb 	bl	8002ae8 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t *)"ATS 302=9600\r\n", 14, 300);                                   // Lastly change to 9600 Baud
 8001332:	2396      	movs	r3, #150	@ 0x96
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4930      	ldr	r1, [pc, #192]	@ (80013f8 <main+0x3f8>)
 8001338:	4820      	ldr	r0, [pc, #128]	@ (80013bc <main+0x3bc>)
 800133a:	220e      	movs	r2, #14
 800133c:	f004 ff62 	bl	8006204 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001340:	23fa      	movs	r3, #250	@ 0xfa
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	0018      	movs	r0, r3
 8001346:	f001 fbcf 	bl	8002ae8 <HAL_Delay>

		// Commit changes to non-volitile memory
		HAL_UART_Transmit(&huart2, (uint8_t *)"AT&W\r\n", 6, 300);                                            // SAVE ALL!
 800134a:	2396      	movs	r3, #150	@ 0x96
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	492b      	ldr	r1, [pc, #172]	@ (80013fc <main+0x3fc>)
 8001350:	481a      	ldr	r0, [pc, #104]	@ (80013bc <main+0x3bc>)
 8001352:	2206      	movs	r2, #6
 8001354:	f004 ff56 	bl	8006204 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001358:	23fa      	movs	r3, #250	@ 0xfa
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	0018      	movs	r0, r3
 800135e:	f001 fbc3 	bl	8002ae8 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t *)"ATZ\r\n", 5, 300);                                             // Soft reboot!
 8001362:	2396      	movs	r3, #150	@ 0x96
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4926      	ldr	r1, [pc, #152]	@ (8001400 <main+0x400>)
 8001368:	4814      	ldr	r0, [pc, #80]	@ (80013bc <main+0x3bc>)
 800136a:	2205      	movs	r2, #5
 800136c:	f004 ff4a 	bl	8006204 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001370:	23fa      	movs	r3, #250	@ 0xfa
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	0018      	movs	r0, r3
 8001376:	f001 fbb7 	bl	8002ae8 <HAL_Delay>
    }




    __NOP();
 800137a:	46c0      	nop			@ (mov r8, r8)
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	46c0      	nop			@ (mov r8, r8)

    /* USER CODE BEGIN 3 */

    uint16_t ticks;
    __disable_irq();
    ticks = wakeup_counter;
 8001380:	4920      	ldr	r1, [pc, #128]	@ (8001404 <main+0x404>)
 8001382:	187b      	adds	r3, r7, r1
 8001384:	4a20      	ldr	r2, [pc, #128]	@ (8001408 <main+0x408>)
 8001386:	8812      	ldrh	r2, [r2, #0]
 8001388:	801a      	strh	r2, [r3, #0]
    wakeup_counter = 0;
 800138a:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <main+0x408>)
 800138c:	2200      	movs	r2, #0
 800138e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001390:	b662      	cpsie	i
}
 8001392:	46c0      	nop			@ (mov r8, r8)
    __enable_irq();

    wakes_accum += ticks;
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <main+0x40c>)
 8001396:	881a      	ldrh	r2, [r3, #0]
 8001398:	187b      	adds	r3, r7, r1
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	18d3      	adds	r3, r2, r3
 800139e:	b29a      	uxth	r2, r3
 80013a0:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <main+0x40c>)
 80013a2:	801a      	strh	r2, [r3, #0]

    // dbg_print_u32("Loop:wakes_accum", wakes_accum);
    // dbg_print_u32("Loop:WAKEUPS_PER_CYCLE", WAKEUPS_PER_CYCLE);

    bool do_transmit = first_run || (wakes_accum >= WAKEUPS_PER_CYCLE);
 80013a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <main+0x410>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d104      	bne.n	80013b6 <main+0x3b6>
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <main+0x40c>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	2214      	movs	r2, #20
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d32e      	bcc.n	8001414 <main+0x414>
 80013b6:	2201      	movs	r2, #1
 80013b8:	e02d      	b.n	8001416 <main+0x416>
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	200001dc 	.word	0x200001dc
 80013c0:	00000246 	.word	0x00000246
 80013c4:	fffffee8 	.word	0xfffffee8
 80013c8:	08007c74 	.word	0x08007c74
 80013cc:	08007c78 	.word	0x08007c78
 80013d0:	20000000 	.word	0x20000000
 80013d4:	08007c8c 	.word	0x08007c8c
 80013d8:	08007ca0 	.word	0x08007ca0
 80013dc:	08007cb4 	.word	0x08007cb4
 80013e0:	08007cbc 	.word	0x08007cbc
 80013e4:	08007cd0 	.word	0x08007cd0
 80013e8:	08007cdc 	.word	0x08007cdc
 80013ec:	08007ce8 	.word	0x08007ce8
 80013f0:	08007cf4 	.word	0x08007cf4
 80013f4:	08007d00 	.word	0x08007d00
 80013f8:	08007d10 	.word	0x08007d10
 80013fc:	08007d20 	.word	0x08007d20
 8001400:	08007d28 	.word	0x08007d28
 8001404:	0000023e 	.word	0x0000023e
 8001408:	20000268 	.word	0x20000268
 800140c:	2000026a 	.word	0x2000026a
 8001410:	20000004 	.word	0x20000004
 8001414:	2200      	movs	r2, #0
 8001416:	4b8f      	ldr	r3, [pc, #572]	@ (8001654 <main+0x654>)
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	2101      	movs	r1, #1
 8001420:	400a      	ands	r2, r1
 8001422:	701a      	strb	r2, [r3, #0]

    // Verify UART is ready after wake-up
    if (!verify_uart_ready(&huart1) || !verify_uart_ready(&huart2))
 8001424:	4b8c      	ldr	r3, [pc, #560]	@ (8001658 <main+0x658>)
 8001426:	0018      	movs	r0, r3
 8001428:	f7ff fb22 	bl	8000a70 <verify_uart_ready>
 800142c:	0003      	movs	r3, r0
 800142e:	001a      	movs	r2, r3
 8001430:	2301      	movs	r3, #1
 8001432:	4053      	eors	r3, r2
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10a      	bne.n	8001450 <main+0x450>
 800143a:	4b88      	ldr	r3, [pc, #544]	@ (800165c <main+0x65c>)
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff fb17 	bl	8000a70 <verify_uart_ready>
 8001442:	0003      	movs	r3, r0
 8001444:	001a      	movs	r2, r3
 8001446:	2301      	movs	r3, #1
 8001448:	4053      	eors	r3, r2
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <main+0x458>
    {
      dbg_print_line("UART:reinit_failed");
 8001450:	4b83      	ldr	r3, [pc, #524]	@ (8001660 <main+0x660>)
 8001452:	0018      	movs	r0, r3
 8001454:	f7ff fb44 	bl	8000ae0 <dbg_print_line>
      // Additional recovery could be added here if needed
    }

    if (do_transmit)
 8001458:	4b7e      	ldr	r3, [pc, #504]	@ (8001654 <main+0x654>)
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d100      	bne.n	8001464 <main+0x464>
 8001462:	e0f4      	b.n	800164e <main+0x64e>
    {
      wakeup_counter = 0; // reset for next cycle
 8001464:	4b7f      	ldr	r3, [pc, #508]	@ (8001664 <main+0x664>)
 8001466:	2200      	movs	r2, #0
 8001468:	801a      	strh	r2, [r3, #0]
      wakes_accum = 0;
 800146a:	4b7f      	ldr	r3, [pc, #508]	@ (8001668 <main+0x668>)
 800146c:	2200      	movs	r2, #0
 800146e:	801a      	strh	r2, [r3, #0]
      first_run = false;
 8001470:	4b7e      	ldr	r3, [pc, #504]	@ (800166c <main+0x66c>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
      // dbg_print_u32("Loop:WAKEUPS_PER_CYCLE", WAKEUPS_PER_CYCLE);
      if (is_connected == 0)
 8001476:	4b7e      	ldr	r3, [pc, #504]	@ (8001670 <main+0x670>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d103      	bne.n	8001486 <main+0x486>
      {
        join(&huart2);
 800147e:	4b77      	ldr	r3, [pc, #476]	@ (800165c <main+0x65c>)
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff fbbf 	bl	8000c04 <join>
      }

      if (is_connected == 1)
 8001486:	4b7a      	ldr	r3, [pc, #488]	@ (8001670 <main+0x670>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d000      	beq.n	8001490 <main+0x490>
 800148e:	e0de      	b.n	800164e <main+0x64e>
      {
		  // Get I2C Data
		  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8001490:	4b78      	ldr	r3, [pc, #480]	@ (8001674 <main+0x674>)
 8001492:	2201      	movs	r2, #1
 8001494:	2120      	movs	r1, #32
 8001496:	0018      	movs	r0, r3
 8001498:	f002 fb98 	bl	8003bcc <HAL_GPIO_WritePin>
		  HAL_Delay(1000); // sensor power-up and stabilization
 800149c:	23fa      	movs	r3, #250	@ 0xfa
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f001 fb21 	bl	8002ae8 <HAL_Delay>
		  scan_i2c_bus();
 80014a6:	f000 fef9 	bl	800229c <scan_i2c_bus>
		  int i2c_success = sensor_init_and_read();
 80014aa:	f000 ff1f 	bl	80022ec <sensor_init_and_read>
 80014ae:	0003      	movs	r3, r0
 80014b0:	248e      	movs	r4, #142	@ 0x8e
 80014b2:	00a4      	lsls	r4, r4, #2
 80014b4:	193a      	adds	r2, r7, r4
 80014b6:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80014b8:	4b6e      	ldr	r3, [pc, #440]	@ (8001674 <main+0x674>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	2120      	movs	r1, #32
 80014be:	0018      	movs	r0, r3
 80014c0:	f002 fb84 	bl	8003bcc <HAL_GPIO_WritePin>

		  // Format data and send
		  uint8_t payload[5] = {0};
 80014c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001678 <main+0x678>)
 80014c6:	2592      	movs	r5, #146	@ 0x92
 80014c8:	00ad      	lsls	r5, r5, #2
 80014ca:	195b      	adds	r3, r3, r5
 80014cc:	19db      	adds	r3, r3, r7
 80014ce:	0018      	movs	r0, r3
 80014d0:	2305      	movs	r3, #5
 80014d2:	001a      	movs	r2, r3
 80014d4:	2100      	movs	r1, #0
 80014d6:	f005 feed 	bl	80072b4 <memset>
		  if (i2c_success == 0)
 80014da:	193b      	adds	r3, r7, r4
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d152      	bne.n	8001588 <main+0x588>
		  {
			HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin | I2C_ENABLE_Pin, GPIO_PIN_SET);
 80014e2:	4b64      	ldr	r3, [pc, #400]	@ (8001674 <main+0x674>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	2121      	movs	r1, #33	@ 0x21
 80014e8:	0018      	movs	r0, r3
 80014ea:	f002 fb6f 	bl	8003bcc <HAL_GPIO_WritePin>
			HAL_Delay(300);
 80014ee:	2396      	movs	r3, #150	@ 0x96
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	0018      	movs	r0, r3
 80014f4:	f001 faf8 	bl	8002ae8 <HAL_Delay>
			int aproxBatteryTemp_c = ((calculated_temp_1 - 55) / 10);
 80014f8:	4b60      	ldr	r3, [pc, #384]	@ (800167c <main+0x67c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	5e9b      	ldrsh	r3, [r3, r2]
 80014fe:	3b37      	subs	r3, #55	@ 0x37
 8001500:	210a      	movs	r1, #10
 8001502:	0018      	movs	r0, r3
 8001504:	f7fe fe9c 	bl	8000240 <__divsi3>
 8001508:	0003      	movs	r3, r0
 800150a:	228d      	movs	r2, #141	@ 0x8d
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	18b9      	adds	r1, r7, r2
 8001510:	600b      	str	r3, [r1, #0]
			uint8_t battery = vbat_measure_and_encode(&hadc, ADC_CHANNEL_0, aproxBatteryTemp_c, /*external_power_present=*/false);
 8001512:	18bb      	adds	r3, r7, r2
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b21a      	sxth	r2, r3
 8001518:	4e59      	ldr	r6, [pc, #356]	@ (8001680 <main+0x680>)
 800151a:	19bc      	adds	r4, r7, r6
 800151c:	4859      	ldr	r0, [pc, #356]	@ (8001684 <main+0x684>)
 800151e:	2300      	movs	r3, #0
 8001520:	2101      	movs	r1, #1
 8001522:	f7ff fa7b 	bl	8000a1c <vbat_measure_and_encode>
 8001526:	0003      	movs	r3, r0
 8001528:	7023      	strb	r3, [r4, #0]
			HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin | I2C_ENABLE_Pin, GPIO_PIN_RESET);
 800152a:	4b52      	ldr	r3, [pc, #328]	@ (8001674 <main+0x674>)
 800152c:	2200      	movs	r2, #0
 800152e:	2121      	movs	r1, #33	@ 0x21
 8001530:	0018      	movs	r0, r3
 8001532:	f002 fb4b 	bl	8003bcc <HAL_GPIO_WritePin>
			lorawan_set_battery_level(&huart2, battery);
 8001536:	19bb      	adds	r3, r7, r6
 8001538:	781a      	ldrb	r2, [r3, #0]
 800153a:	4b48      	ldr	r3, [pc, #288]	@ (800165c <main+0x65c>)
 800153c:	0011      	movs	r1, r2
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff fc48 	bl	8000dd4 <lorawan_set_battery_level>

			payload[0] = (uint8_t)(calculated_temp_1 >> 8);
 8001544:	4b4d      	ldr	r3, [pc, #308]	@ (800167c <main+0x67c>)
 8001546:	2200      	movs	r2, #0
 8001548:	5e9b      	ldrsh	r3, [r3, r2]
 800154a:	121b      	asrs	r3, r3, #8
 800154c:	b21b      	sxth	r3, r3
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b49      	ldr	r3, [pc, #292]	@ (8001678 <main+0x678>)
 8001552:	195b      	adds	r3, r3, r5
 8001554:	19db      	adds	r3, r3, r7
 8001556:	701a      	strb	r2, [r3, #0]
			payload[1] = (uint8_t)(calculated_temp_1 & 0xFF);
 8001558:	4b48      	ldr	r3, [pc, #288]	@ (800167c <main+0x67c>)
 800155a:	2200      	movs	r2, #0
 800155c:	5e9b      	ldrsh	r3, [r3, r2]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b45      	ldr	r3, [pc, #276]	@ (8001678 <main+0x678>)
 8001562:	195b      	adds	r3, r3, r5
 8001564:	19db      	adds	r3, r3, r7
 8001566:	705a      	strb	r2, [r3, #1]
			payload[2] = calculated_hum_1;
 8001568:	4b47      	ldr	r3, [pc, #284]	@ (8001688 <main+0x688>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b42      	ldr	r3, [pc, #264]	@ (8001678 <main+0x678>)
 8001570:	195b      	adds	r3, r3, r5
 8001572:	19db      	adds	r3, r3, r7
 8001574:	709a      	strb	r2, [r3, #2]
			LoRaWAN_SendHex(payload, 3, 1);
 8001576:	2394      	movs	r3, #148	@ 0x94
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	2201      	movs	r2, #1
 800157e:	2103      	movs	r1, #3
 8001580:	0018      	movs	r0, r3
 8001582:	f7ff fc9b 	bl	8000ebc <LoRaWAN_SendHex>
 8001586:	e062      	b.n	800164e <main+0x64e>
		  {
			// We FAILED to get a good reading for whatever reason
			// We need to specify why soon...

			// 1,2,3 all are sensor failures and will not contain data
			if (i2c_success == 1 || i2c_success == 2 || i2c_success == 3)
 8001588:	228e      	movs	r2, #142	@ 0x8e
 800158a:	0092      	lsls	r2, r2, #2
 800158c:	18bb      	adds	r3, r7, r2
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d007      	beq.n	80015a4 <main+0x5a4>
 8001594:	18bb      	adds	r3, r7, r2
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d003      	beq.n	80015a4 <main+0x5a4>
 800159c:	18bb      	adds	r3, r7, r2
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d112      	bne.n	80015ca <main+0x5ca>
			{
			  uint8_t code = (uint8_t)i2c_success;
 80015a4:	238e      	movs	r3, #142	@ 0x8e
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b37      	ldr	r3, [pc, #220]	@ (800168c <main+0x68c>)
 80015b0:	2192      	movs	r1, #146	@ 0x92
 80015b2:	0089      	lsls	r1, r1, #2
 80015b4:	185b      	adds	r3, r3, r1
 80015b6:	19db      	adds	r3, r3, r7
 80015b8:	701a      	strb	r2, [r3, #0]
			  LoRaWAN_SendHex(&code, 1, 10);
 80015ba:	2328      	movs	r3, #40	@ 0x28
 80015bc:	33ff      	adds	r3, #255	@ 0xff
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	220a      	movs	r2, #10
 80015c2:	2101      	movs	r1, #1
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff fc79 	bl	8000ebc <LoRaWAN_SendHex>
			}
			// if i2c_success is 4, then the sensors returned data, but do not agree on the correct temp
			if (i2c_success == 4)
 80015ca:	238e      	movs	r3, #142	@ 0x8e
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d13b      	bne.n	800164e <main+0x64e>
			{
			  // add the dis-agreed sensor info to payload

			  payload[0] = (uint8_t)(calculated_temp_1 >> 8);
 80015d6:	4b29      	ldr	r3, [pc, #164]	@ (800167c <main+0x67c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	5e9b      	ldrsh	r3, [r3, r2]
 80015dc:	121b      	asrs	r3, r3, #8
 80015de:	b21b      	sxth	r3, r3
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b25      	ldr	r3, [pc, #148]	@ (8001678 <main+0x678>)
 80015e4:	2192      	movs	r1, #146	@ 0x92
 80015e6:	0089      	lsls	r1, r1, #2
 80015e8:	185b      	adds	r3, r3, r1
 80015ea:	19db      	adds	r3, r3, r7
 80015ec:	701a      	strb	r2, [r3, #0]
			  payload[1] = (uint8_t)(calculated_temp_1 & 0xFF);
 80015ee:	4b23      	ldr	r3, [pc, #140]	@ (800167c <main+0x67c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	5e9b      	ldrsh	r3, [r3, r2]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <main+0x678>)
 80015f8:	185b      	adds	r3, r3, r1
 80015fa:	19db      	adds	r3, r3, r7
 80015fc:	705a      	strb	r2, [r3, #1]
			  payload[2] = calculated_hum_1;
 80015fe:	4b22      	ldr	r3, [pc, #136]	@ (8001688 <main+0x688>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <main+0x678>)
 8001606:	185b      	adds	r3, r3, r1
 8001608:	19db      	adds	r3, r3, r7
 800160a:	709a      	strb	r2, [r3, #2]

			  payload[3] = (uint8_t)(calculated_temp_2 >> 8);
 800160c:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <main+0x690>)
 800160e:	2200      	movs	r2, #0
 8001610:	5e9b      	ldrsh	r3, [r3, r2]
 8001612:	121b      	asrs	r3, r3, #8
 8001614:	b21b      	sxth	r3, r3
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <main+0x678>)
 800161a:	185b      	adds	r3, r3, r1
 800161c:	19db      	adds	r3, r3, r7
 800161e:	70da      	strb	r2, [r3, #3]
			  payload[4] = (uint8_t)(calculated_temp_2 & 0xFF);
 8001620:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <main+0x690>)
 8001622:	2200      	movs	r2, #0
 8001624:	5e9b      	ldrsh	r3, [r3, r2]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <main+0x678>)
 800162a:	185b      	adds	r3, r3, r1
 800162c:	19db      	adds	r3, r3, r7
 800162e:	711a      	strb	r2, [r3, #4]
			  payload[5] = calculated_hum_2;
 8001630:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <main+0x694>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <main+0x678>)
 8001638:	185b      	adds	r3, r3, r1
 800163a:	19db      	adds	r3, r3, r7
 800163c:	715a      	strb	r2, [r3, #5]
			  LoRaWAN_SendHex(payload, 6, 11); // send both dis-agreed values and an error
 800163e:	2394      	movs	r3, #148	@ 0x94
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	220b      	movs	r2, #11
 8001646:	2106      	movs	r1, #6
 8001648:	0018      	movs	r0, r3
 800164a:	f7ff fc37 	bl	8000ebc <LoRaWAN_SendHex>
			}
		}
      }
    }
    // Always go back to deep sleep to allow next RTC wake
    EnterDeepSleepMode();
 800164e:	f000 fb19 	bl	8001c84 <EnterDeepSleepMode>
  {
 8001652:	e693      	b.n	800137c <main+0x37c>
 8001654:	0000023d 	.word	0x0000023d
 8001658:	20000154 	.word	0x20000154
 800165c:	200001dc 	.word	0x200001dc
 8001660:	08007d30 	.word	0x08007d30
 8001664:	20000268 	.word	0x20000268
 8001668:	2000026a 	.word	0x2000026a
 800166c:	20000004 	.word	0x20000004
 8001670:	20000264 	.word	0x20000264
 8001674:	50000400 	.word	0x50000400
 8001678:	fffffee0 	.word	0xfffffee0
 800167c:	2000047c 	.word	0x2000047c
 8001680:	00000233 	.word	0x00000233
 8001684:	20000080 	.word	0x20000080
 8001688:	2000047e 	.word	0x2000047e
 800168c:	fffffedf 	.word	0xfffffedf
 8001690:	20000480 	.word	0x20000480
 8001694:	20000482 	.word	0x20000482

08001698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b09f      	sub	sp, #124	@ 0x7c
 800169c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169e:	2440      	movs	r4, #64	@ 0x40
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	0018      	movs	r0, r3
 80016a4:	2338      	movs	r3, #56	@ 0x38
 80016a6:	001a      	movs	r2, r3
 80016a8:	2100      	movs	r1, #0
 80016aa:	f005 fe03 	bl	80072b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ae:	232c      	movs	r3, #44	@ 0x2c
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	0018      	movs	r0, r3
 80016b4:	2314      	movs	r3, #20
 80016b6:	001a      	movs	r2, r3
 80016b8:	2100      	movs	r1, #0
 80016ba:	f005 fdfb 	bl	80072b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	0018      	movs	r0, r3
 80016c2:	2328      	movs	r3, #40	@ 0x28
 80016c4:	001a      	movs	r2, r3
 80016c6:	2100      	movs	r1, #0
 80016c8:	f005 fdf4 	bl	80072b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	4b32      	ldr	r3, [pc, #200]	@ (8001798 <SystemClock_Config+0x100>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a32      	ldr	r2, [pc, #200]	@ (800179c <SystemClock_Config+0x104>)
 80016d2:	401a      	ands	r2, r3
 80016d4:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <SystemClock_Config+0x100>)
 80016d6:	2180      	movs	r1, #128	@ 0x80
 80016d8:	0109      	lsls	r1, r1, #4
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016de:	f003 fa03 	bl	8004ae8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80016e2:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <SystemClock_Config+0x108>)
 80016e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016e6:	4b2e      	ldr	r3, [pc, #184]	@ (80017a0 <SystemClock_Config+0x108>)
 80016e8:	492c      	ldr	r1, [pc, #176]	@ (800179c <SystemClock_Config+0x104>)
 80016ea:	400a      	ands	r2, r1
 80016ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80016ee:	193b      	adds	r3, r7, r4
 80016f0:	2214      	movs	r2, #20
 80016f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016f4:	193b      	adds	r3, r7, r4
 80016f6:	2280      	movs	r2, #128	@ 0x80
 80016f8:	0052      	lsls	r2, r2, #1
 80016fa:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016fc:	0021      	movs	r1, r4
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	2201      	movs	r2, #1
 8001702:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2200      	movs	r2, #0
 8001708:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800170a:	187b      	adds	r3, r7, r1
 800170c:	22a0      	movs	r2, #160	@ 0xa0
 800170e:	0212      	lsls	r2, r2, #8
 8001710:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001712:	187b      	adds	r3, r7, r1
 8001714:	2200      	movs	r2, #0
 8001716:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001718:	187b      	adds	r3, r7, r1
 800171a:	0018      	movs	r0, r3
 800171c:	f003 fabe 	bl	8004c9c <HAL_RCC_OscConfig>
 8001720:	1e03      	subs	r3, r0, #0
 8001722:	d001      	beq.n	8001728 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001724:	f000 fb48 	bl	8001db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001728:	212c      	movs	r1, #44	@ 0x2c
 800172a:	187b      	adds	r3, r7, r1
 800172c:	220f      	movs	r2, #15
 800172e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001730:	187b      	adds	r3, r7, r1
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001736:	187b      	adds	r3, r7, r1
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800173c:	187b      	adds	r3, r7, r1
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001742:	187b      	adds	r3, r7, r1
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001748:	187b      	adds	r3, r7, r1
 800174a:	2100      	movs	r1, #0
 800174c:	0018      	movs	r0, r3
 800174e:	f003 fe79 	bl	8005444 <HAL_RCC_ClockConfig>
 8001752:	1e03      	subs	r3, r0, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001756:	f000 fb2f 	bl	8001db8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	222b      	movs	r2, #43	@ 0x2b
 800175e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2280      	movs	r2, #128	@ 0x80
 8001776:	0252      	lsls	r2, r2, #9
 8001778:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	0018      	movs	r0, r3
 800177e:	f004 f865 	bl	800584c <HAL_RCCEx_PeriphCLKConfig>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001786:	f000 fb17 	bl	8001db8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 800178a:	f004 f9fd 	bl	8005b88 <HAL_RCCEx_EnableLSECSS>
}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	b01f      	add	sp, #124	@ 0x7c
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	40007000 	.word	0x40007000
 800179c:	ffffe7ff 	.word	0xffffe7ff
 80017a0:	40021000 	.word	0x40021000

080017a4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017aa:	003b      	movs	r3, r7
 80017ac:	0018      	movs	r0, r3
 80017ae:	2308      	movs	r3, #8
 80017b0:	001a      	movs	r2, r3
 80017b2:	2100      	movs	r1, #0
 80017b4:	f005 fd7e 	bl	80072b4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80017b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001864 <MX_ADC_Init+0xc0>)
 80017ba:	4a2b      	ldr	r2, [pc, #172]	@ (8001868 <MX_ADC_Init+0xc4>)
 80017bc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80017be:	4b29      	ldr	r3, [pc, #164]	@ (8001864 <MX_ADC_Init+0xc0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80017c4:	4b27      	ldr	r3, [pc, #156]	@ (8001864 <MX_ADC_Init+0xc0>)
 80017c6:	22c0      	movs	r2, #192	@ 0xc0
 80017c8:	0612      	lsls	r2, r2, #24
 80017ca:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80017cc:	4b25      	ldr	r3, [pc, #148]	@ (8001864 <MX_ADC_Init+0xc0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80017d2:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <MX_ADC_Init+0xc0>)
 80017d4:	2207      	movs	r2, #7
 80017d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80017d8:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <MX_ADC_Init+0xc0>)
 80017da:	2201      	movs	r2, #1
 80017dc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017de:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <MX_ADC_Init+0xc0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80017e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001864 <MX_ADC_Init+0xc0>)
 80017e6:	2220      	movs	r2, #32
 80017e8:	2100      	movs	r1, #0
 80017ea:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <MX_ADC_Init+0xc0>)
 80017ee:	2221      	movs	r2, #33	@ 0x21
 80017f0:	2100      	movs	r1, #0
 80017f2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <MX_ADC_Init+0xc0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <MX_ADC_Init+0xc0>)
 80017fc:	22c2      	movs	r2, #194	@ 0xc2
 80017fe:	32ff      	adds	r2, #255	@ 0xff
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001802:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <MX_ADC_Init+0xc0>)
 8001804:	222c      	movs	r2, #44	@ 0x2c
 8001806:	2100      	movs	r1, #0
 8001808:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800180a:	4b16      	ldr	r3, [pc, #88]	@ (8001864 <MX_ADC_Init+0xc0>)
 800180c:	2204      	movs	r2, #4
 800180e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001810:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <MX_ADC_Init+0xc0>)
 8001812:	2200      	movs	r2, #0
 8001814:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001816:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <MX_ADC_Init+0xc0>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 800181c:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <MX_ADC_Init+0xc0>)
 800181e:	2201      	movs	r2, #1
 8001820:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <MX_ADC_Init+0xc0>)
 8001824:	2200      	movs	r2, #0
 8001826:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001828:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <MX_ADC_Init+0xc0>)
 800182a:	0018      	movs	r0, r3
 800182c:	f001 f9a4 	bl	8002b78 <HAL_ADC_Init>
 8001830:	1e03      	subs	r3, r0, #0
 8001832:	d001      	beq.n	8001838 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001834:	f000 fac0 	bl	8001db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001838:	003b      	movs	r3, r7
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800183e:	003b      	movs	r3, r7
 8001840:	2280      	movs	r2, #128	@ 0x80
 8001842:	0152      	lsls	r2, r2, #5
 8001844:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001846:	003a      	movs	r2, r7
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <MX_ADC_Init+0xc0>)
 800184a:	0011      	movs	r1, r2
 800184c:	0018      	movs	r0, r3
 800184e:	f001 fc43 	bl	80030d8 <HAL_ADC_ConfigChannel>
 8001852:	1e03      	subs	r3, r0, #0
 8001854:	d001      	beq.n	800185a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001856:	f000 faaf 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800185a:	46c0      	nop			@ (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	b002      	add	sp, #8
 8001860:	bd80      	pop	{r7, pc}
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	20000080 	.word	0x20000080
 8001868:	40012400 	.word	0x40012400

0800186c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001870:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <MX_I2C1_Init+0x78>)
 8001872:	4a1d      	ldr	r2, [pc, #116]	@ (80018e8 <MX_I2C1_Init+0x7c>)
 8001874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8001876:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <MX_I2C1_Init+0x78>)
 8001878:	22c1      	movs	r2, #193	@ 0xc1
 800187a:	00d2      	lsls	r2, r2, #3
 800187c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800187e:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <MX_I2C1_Init+0x78>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001884:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <MX_I2C1_Init+0x78>)
 8001886:	2201      	movs	r2, #1
 8001888:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <MX_I2C1_Init+0x78>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001890:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <MX_I2C1_Init+0x78>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001896:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <MX_I2C1_Init+0x78>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <MX_I2C1_Init+0x78>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <MX_I2C1_Init+0x78>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018a8:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <MX_I2C1_Init+0x78>)
 80018aa:	0018      	movs	r0, r3
 80018ac:	f002 f9ac 	bl	8003c08 <HAL_I2C_Init>
 80018b0:	1e03      	subs	r3, r0, #0
 80018b2:	d001      	beq.n	80018b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018b4:	f000 fa80 	bl	8001db8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018b8:	4b0a      	ldr	r3, [pc, #40]	@ (80018e4 <MX_I2C1_Init+0x78>)
 80018ba:	2100      	movs	r1, #0
 80018bc:	0018      	movs	r0, r3
 80018be:	f003 f87b 	bl	80049b8 <HAL_I2CEx_ConfigAnalogFilter>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d001      	beq.n	80018ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80018c6:	f000 fa77 	bl	8001db8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <MX_I2C1_Init+0x78>)
 80018cc:	2100      	movs	r1, #0
 80018ce:	0018      	movs	r0, r3
 80018d0:	f003 f8be 	bl	8004a50 <HAL_I2CEx_ConfigDigitalFilter>
 80018d4:	1e03      	subs	r3, r0, #0
 80018d6:	d001      	beq.n	80018dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80018d8:	f000 fa6e 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018dc:	46c0      	nop			@ (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	200000dc 	.word	0x200000dc
 80018e8:	40005400 	.word	0x40005400

080018ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018f0:	4b16      	ldr	r3, [pc, #88]	@ (800194c <MX_RTC_Init+0x60>)
 80018f2:	4a17      	ldr	r2, [pc, #92]	@ (8001950 <MX_RTC_Init+0x64>)
 80018f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <MX_RTC_Init+0x60>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018fc:	4b13      	ldr	r3, [pc, #76]	@ (800194c <MX_RTC_Init+0x60>)
 80018fe:	227f      	movs	r2, #127	@ 0x7f
 8001900:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001902:	4b12      	ldr	r3, [pc, #72]	@ (800194c <MX_RTC_Init+0x60>)
 8001904:	22ff      	movs	r2, #255	@ 0xff
 8001906:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001908:	4b10      	ldr	r3, [pc, #64]	@ (800194c <MX_RTC_Init+0x60>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800190e:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <MX_RTC_Init+0x60>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001914:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <MX_RTC_Init+0x60>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800191a:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <MX_RTC_Init+0x60>)
 800191c:	2200      	movs	r2, #0
 800191e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001920:	4b0a      	ldr	r3, [pc, #40]	@ (800194c <MX_RTC_Init+0x60>)
 8001922:	0018      	movs	r0, r3
 8001924:	f004 f93e 	bl	8005ba4 <HAL_RTC_Init>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d001      	beq.n	8001930 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800192c:	f000 fa44 	bl	8001db8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <MX_RTC_Init+0x60>)
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	0018      	movs	r0, r3
 8001938:	f004 fa66 	bl	8005e08 <HAL_RTCEx_SetWakeUpTimer_IT>
 800193c:	1e03      	subs	r3, r0, #0
 800193e:	d001      	beq.n	8001944 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001940:	f000 fa3a 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001944:	46c0      	nop			@ (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	46c0      	nop			@ (mov r8, r8)
 800194c:	20000130 	.word	0x20000130
 8001950:	40002800 	.word	0x40002800

08001954 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001958:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <MX_USART1_UART_Init+0x60>)
 800195a:	4a17      	ldr	r2, [pc, #92]	@ (80019b8 <MX_USART1_UART_Init+0x64>)
 800195c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <MX_USART1_UART_Init+0x60>)
 8001960:	2296      	movs	r2, #150	@ 0x96
 8001962:	0192      	lsls	r2, r2, #6
 8001964:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001966:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <MX_USART1_UART_Init+0x60>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_USART1_UART_Init+0x60>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <MX_USART1_UART_Init+0x60>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001978:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <MX_USART1_UART_Init+0x60>)
 800197a:	220c      	movs	r2, #12
 800197c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197e:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <MX_USART1_UART_Init+0x60>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001984:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <MX_USART1_UART_Init+0x60>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198a:	4b0a      	ldr	r3, [pc, #40]	@ (80019b4 <MX_USART1_UART_Init+0x60>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001990:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <MX_USART1_UART_Init+0x60>)
 8001992:	2220      	movs	r2, #32
 8001994:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001996:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <MX_USART1_UART_Init+0x60>)
 8001998:	2280      	movs	r2, #128	@ 0x80
 800199a:	0192      	lsls	r2, r2, #6
 800199c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800199e:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <MX_USART1_UART_Init+0x60>)
 80019a0:	0018      	movs	r0, r3
 80019a2:	f004 fb9d 	bl	80060e0 <HAL_UART_Init>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80019aa:	f000 fa05 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000154 	.word	0x20000154
 80019b8:	40013800 	.word	0x40013800

080019bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c0:	4b14      	ldr	r3, [pc, #80]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019c2:	4a15      	ldr	r2, [pc, #84]	@ (8001a18 <MX_USART2_UART_Init+0x5c>)
 80019c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80019c6:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019c8:	2296      	movs	r2, #150	@ 0x96
 80019ca:	0192      	lsls	r2, r2, #6
 80019cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ce:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019da:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019e2:	220c      	movs	r2, #12
 80019e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019fe:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <MX_USART2_UART_Init+0x58>)
 8001a00:	0018      	movs	r0, r3
 8001a02:	f004 fb6d 	bl	80060e0 <HAL_UART_Init>
 8001a06:	1e03      	subs	r3, r0, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a0a:	f000 f9d5 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200001dc 	.word	0x200001dc
 8001a18:	40004400 	.word	0x40004400

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b089      	sub	sp, #36	@ 0x24
 8001a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	240c      	movs	r4, #12
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	0018      	movs	r0, r3
 8001a28:	2314      	movs	r3, #20
 8001a2a:	001a      	movs	r2, r3
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	f005 fc41 	bl	80072b4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <MX_GPIO_Init+0xcc>)
 8001a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a36:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae8 <MX_GPIO_Init+0xcc>)
 8001a38:	2104      	movs	r1, #4
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae8 <MX_GPIO_Init+0xcc>)
 8001a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a42:	2204      	movs	r2, #4
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ae8 <MX_GPIO_Init+0xcc>)
 8001a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <MX_GPIO_Init+0xcc>)
 8001a50:	2101      	movs	r1, #1
 8001a52:	430a      	orrs	r2, r1
 8001a54:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a56:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <MX_GPIO_Init+0xcc>)
 8001a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <MX_GPIO_Init+0xcc>)
 8001a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a66:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <MX_GPIO_Init+0xcc>)
 8001a68:	2102      	movs	r1, #2
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <MX_GPIO_Init+0xcc>)
 8001a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a72:	2202      	movs	r2, #2
 8001a74:	4013      	ands	r3, r2
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_LED_GPIO_Port, DBG_LED_Pin, GPIO_PIN_RESET);
 8001a7a:	23a0      	movs	r3, #160	@ 0xa0
 8001a7c:	05db      	lsls	r3, r3, #23
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2120      	movs	r1, #32
 8001a82:	0018      	movs	r0, r3
 8001a84:	f002 f8a2 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8001a88:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <MX_GPIO_Init+0xd0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2121      	movs	r1, #33	@ 0x21
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f002 f89c 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DBG_LED_Pin */
  GPIO_InitStruct.Pin = DBG_LED_Pin;
 8001a94:	193b      	adds	r3, r7, r4
 8001a96:	2220      	movs	r2, #32
 8001a98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	193b      	adds	r3, r7, r4
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DBG_LED_GPIO_Port, &GPIO_InitStruct);
 8001aac:	193a      	adds	r2, r7, r4
 8001aae:	23a0      	movs	r3, #160	@ 0xa0
 8001ab0:	05db      	lsls	r3, r3, #23
 8001ab2:	0011      	movs	r1, r2
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f001 fe29 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : VBAT_MEAS_EN_Pin I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin;
 8001aba:	0021      	movs	r1, r4
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	2221      	movs	r2, #33	@ 0x21
 8001ac0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <MX_GPIO_Init+0xd0>)
 8001ad8:	0019      	movs	r1, r3
 8001ada:	0010      	movs	r0, r2
 8001adc:	f001 fe16 	bl	800370c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ae0:	46c0      	nop			@ (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b009      	add	sp, #36	@ 0x24
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	50000400 	.word	0x50000400

08001af0 <configWakeupTime>:

/* USER CODE BEGIN 4 */

void configWakeupTime()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
  // Optional visual indicator that we (re)armed the wake-up
  uint32_t wakeup_timer_value = (uint32_t)SLEEP_INTERVAL_SECONDS * 2048u - 1u; // 32 seconds default
 8001af6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <configWakeupTime+0x30>)
 8001af8:	607b      	str	r3, [r7, #4]
  // Deactivate previous timer before re-arming (HAL recommendation when changing value)
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <configWakeupTime+0x34>)
 8001afc:	0018      	movs	r0, r3
 8001afe:	f004 fa5b 	bl	8005fb8 <HAL_RTCEx_DeactivateWakeUpTimer>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_timer_value, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <configWakeupTime+0x34>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f004 f97d 	bl	8005e08 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001b0e:	1e03      	subs	r3, r0, #0
 8001b10:	d001      	beq.n	8001b16 <configWakeupTime+0x26>
  {
    Error_Handler();
 8001b12:	f000 f951 	bl	8001db8 <Error_Handler>
  }
}
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b002      	add	sp, #8
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	0000efff 	.word	0x0000efff
 8001b24:	20000130 	.word	0x20000130

08001b28 <HAL_RTCEx_WakeUpTimerEventCallback>:
 * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 *                the configuration information for RTC.
 * @retval None
 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Increment counter - process LoRaWAN based on SLEEP_TIME_MINUTES setting */

  wakeup_counter++;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <HAL_RTCEx_WakeUpTimerEventCallback+0x34>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <HAL_RTCEx_WakeUpTimerEventCallback+0x34>)
 8001b3c:	801a      	strh	r2, [r3, #0]

  /* Clear the wake-up timer flag to acknowledge the interrupt */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	22ff      	movs	r2, #255	@ 0xff
 8001b46:	401a      	ands	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4904      	ldr	r1, [pc, #16]	@ (8001b60 <HAL_RTCEx_WakeUpTimerEventCallback+0x38>)
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	60da      	str	r2, [r3, #12]
}
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b002      	add	sp, #8
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	20000268 	.word	0x20000268
 8001b60:	fffffb7f 	.word	0xfffffb7f

08001b64 <ConfigureGPIOForLowPower>:
/**
 * @brief  Configure GPIOs for ultra-low power consumption
 * @retval None
 */
void ConfigureGPIOForLowPower(void)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b08b      	sub	sp, #44	@ 0x2c
 8001b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6a:	2414      	movs	r4, #20
 8001b6c:	193b      	adds	r3, r7, r4
 8001b6e:	0018      	movs	r0, r3
 8001b70:	2314      	movs	r3, #20
 8001b72:	001a      	movs	r2, r3
 8001b74:	2100      	movs	r1, #0
 8001b76:	f005 fb9d 	bl	80072b4 <memset>

  /* Enable all GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b7e:	4b39      	ldr	r3, [pc, #228]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001b80:	2101      	movs	r1, #1
 8001b82:	430a      	orrs	r2, r1
 8001b84:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b86:	4b37      	ldr	r3, [pc, #220]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	4b34      	ldr	r3, [pc, #208]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b96:	4b33      	ldr	r3, [pc, #204]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001b98:	2102      	movs	r1, #2
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b9e:	4b31      	ldr	r3, [pc, #196]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001baa:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bae:	4b2d      	ldr	r3, [pc, #180]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc2:	4b28      	ldr	r3, [pc, #160]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc6:	4b27      	ldr	r3, [pc, #156]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001bc8:	2108      	movs	r1, #8
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bce:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bda:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bde:	4b21      	ldr	r3, [pc, #132]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001be0:	2180      	movs	r1, #128	@ 0x80
 8001be2:	430a      	orrs	r2, r1
 8001be4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001be6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c64 <ConfigureGPIOForLowPower+0x100>)
 8001be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bea:	2280      	movs	r2, #128	@ 0x80
 8001bec:	4013      	ands	r3, r2
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]

  /* Configure all GPIO pins as analog to reduce power consumption */
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf2:	193b      	adds	r3, r7, r4
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	193b      	adds	r3, r7, r4
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]

  /* Configure GPIOA pins (except UART pins PA2, PA3 and PA9, PA10) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 |
 8001bfe:	193b      	adds	r3, r7, r4
 8001c00:	4a19      	ldr	r2, [pc, #100]	@ (8001c68 <ConfigureGPIOForLowPower+0x104>)
 8001c02:	601a      	str	r2, [r3, #0]
                        GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 |
                        GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	193a      	adds	r2, r7, r4
 8001c06:	23a0      	movs	r3, #160	@ 0xa0
 8001c08:	05db      	lsls	r3, r3, #23
 8001c0a:	0011      	movs	r1, r2
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f001 fd7d 	bl	800370c <HAL_GPIO_Init>

  /* Configure all GPIOB pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8001c12:	193b      	adds	r3, r7, r4
 8001c14:	4a15      	ldr	r2, [pc, #84]	@ (8001c6c <ConfigureGPIOForLowPower+0x108>)
 8001c16:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	193b      	adds	r3, r7, r4
 8001c1a:	4a15      	ldr	r2, [pc, #84]	@ (8001c70 <ConfigureGPIOForLowPower+0x10c>)
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	0010      	movs	r0, r2
 8001c20:	f001 fd74 	bl	800370c <HAL_GPIO_Init>

  /* Configure GPIOC pins (except PC14, PC15 for LSE crystal) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 |
 8001c24:	193b      	adds	r3, r7, r4
 8001c26:	4a13      	ldr	r2, [pc, #76]	@ (8001c74 <ConfigureGPIOForLowPower+0x110>)
 8001c28:	601a      	str	r2, [r3, #0]
                        GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 |
                        GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |
                        GPIO_PIN_12 | GPIO_PIN_13;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2a:	193b      	adds	r3, r7, r4
 8001c2c:	4a12      	ldr	r2, [pc, #72]	@ (8001c78 <ConfigureGPIOForLowPower+0x114>)
 8001c2e:	0019      	movs	r1, r3
 8001c30:	0010      	movs	r0, r2
 8001c32:	f001 fd6b 	bl	800370c <HAL_GPIO_Init>

  /* Configure all GPIOD pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8001c36:	193b      	adds	r3, r7, r4
 8001c38:	4a0c      	ldr	r2, [pc, #48]	@ (8001c6c <ConfigureGPIOForLowPower+0x108>)
 8001c3a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3c:	193b      	adds	r3, r7, r4
 8001c3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c7c <ConfigureGPIOForLowPower+0x118>)
 8001c40:	0019      	movs	r1, r3
 8001c42:	0010      	movs	r0, r2
 8001c44:	f001 fd62 	bl	800370c <HAL_GPIO_Init>

  /* Configure all GPIOH pins */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8001c48:	0021      	movs	r1, r4
 8001c4a:	187b      	adds	r3, r7, r1
 8001c4c:	4a07      	ldr	r2, [pc, #28]	@ (8001c6c <ConfigureGPIOForLowPower+0x108>)
 8001c4e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	4a0b      	ldr	r2, [pc, #44]	@ (8001c80 <ConfigureGPIOForLowPower+0x11c>)
 8001c54:	0019      	movs	r1, r3
 8001c56:	0010      	movs	r0, r2
 8001c58:	f001 fd58 	bl	800370c <HAL_GPIO_Init>
}
 8001c5c:	46c0      	nop			@ (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b00b      	add	sp, #44	@ 0x2c
 8001c62:	bd90      	pop	{r4, r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	0000f9f3 	.word	0x0000f9f3
 8001c6c:	0000ffff 	.word	0x0000ffff
 8001c70:	50000400 	.word	0x50000400
 8001c74:	00003fff 	.word	0x00003fff
 8001c78:	50000800 	.word	0x50000800
 8001c7c:	50000c00 	.word	0x50000c00
 8001c80:	50001c00 	.word	0x50001c00

08001c84 <EnterDeepSleepMode>:
/**
 * @brief  Enter Deep Sleep Mode using STOP mode with RTC wake-up
 * @retval None
 */
void EnterDeepSleepMode(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
  /* Properly deinitialize UARTs before sleep */
  HAL_UART_DeInit(&huart1);
 8001c8a:	4b42      	ldr	r3, [pc, #264]	@ (8001d94 <EnterDeepSleepMode+0x110>)
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f004 fa7b 	bl	8006188 <HAL_UART_DeInit>
  //  HAL_UART_DeInit(&huart2);
  HAL_I2C_DeInit(&hi2c1);
 8001c92:	4b41      	ldr	r3, [pc, #260]	@ (8001d98 <EnterDeepSleepMode+0x114>)
 8001c94:	0018      	movs	r0, r3
 8001c96:	f002 f85d 	bl	8003d54 <HAL_I2C_DeInit>

  /* Configure all GPIOs for ultra-low power */
  ConfigureGPIOForLowPower();
 8001c9a:	f7ff ff63 	bl	8001b64 <ConfigureGPIOForLowPower>

  /* Disable unnecessary peripheral clocks */
  __HAL_RCC_I2C1_CLK_DISABLE();
 8001c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001ca0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001ca4:	493e      	ldr	r1, [pc, #248]	@ (8001da0 <EnterDeepSleepMode+0x11c>)
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_USART1_CLK_DISABLE();
 8001caa:	4b3c      	ldr	r3, [pc, #240]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001cac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cae:	4b3b      	ldr	r3, [pc, #236]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001cb0:	493c      	ldr	r1, [pc, #240]	@ (8001da4 <EnterDeepSleepMode+0x120>)
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_USART2_CLK_DISABLE();
 8001cb6:	4b39      	ldr	r3, [pc, #228]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001cb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cba:	4b38      	ldr	r3, [pc, #224]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001cbc:	493a      	ldr	r1, [pc, #232]	@ (8001da8 <EnterDeepSleepMode+0x124>)
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8001cc2:	4b36      	ldr	r3, [pc, #216]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cc6:	4b35      	ldr	r3, [pc, #212]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001cc8:	2102      	movs	r1, #2
 8001cca:	438a      	bics	r2, r1
 8001ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
  //  __HAL_RCC_GPIOC_CLK_DISABLE(); // DO NOT DISABLE GPIO C, That is what the Crystal is connected to!!!
  __HAL_RCC_GPIOD_CLK_DISABLE();
 8001cce:	4b33      	ldr	r3, [pc, #204]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cd2:	4b32      	ldr	r3, [pc, #200]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001cd4:	2108      	movs	r1, #8
 8001cd6:	438a      	bics	r2, r1
 8001cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8001cda:	4b30      	ldr	r3, [pc, #192]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cde:	4b2f      	ldr	r3, [pc, #188]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001ce0:	2180      	movs	r1, #128	@ 0x80
 8001ce2:	438a      	bics	r2, r1
 8001ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Suspend SysTick to avoid wake-up from SysTick interrupt */
  HAL_SuspendTick();
 8001ce6:	f000 ff23 	bl	8002b30 <HAL_SuspendTick>

  /* Clear any pending wake-up flags before sleeping */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001cea:	4b30      	ldr	r3, [pc, #192]	@ (8001dac <EnterDeepSleepMode+0x128>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4b2f      	ldr	r3, [pc, #188]	@ (8001dac <EnterDeepSleepMode+0x128>)
 8001cf0:	2104      	movs	r1, #4
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8001cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8001db0 <EnterDeepSleepMode+0x12c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	22ff      	movs	r2, #255	@ 0xff
 8001cfe:	401a      	ands	r2, r3
 8001d00:	4b2b      	ldr	r3, [pc, #172]	@ (8001db0 <EnterDeepSleepMode+0x12c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	492b      	ldr	r1, [pc, #172]	@ (8001db4 <EnterDeepSleepMode+0x130>)
 8001d06:	430a      	orrs	r2, r1
 8001d08:	60da      	str	r2, [r3, #12]

  /* Restart the RTC wake-up timer for next wake-up */
  configWakeupTime();
 8001d0a:	f7ff fef1 	bl	8001af0 <configWakeupTime>

  /* Enter STOP Mode with Low Power Regulator */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001d0e:	2101      	movs	r1, #1
 8001d10:	2001      	movs	r0, #1
 8001d12:	f002 ff67 	bl	8004be4 <HAL_PWR_EnterSTOPMode>

  /* === DEVICE IS NOW IN DEEP SLEEP === */
  /* === WAKE UP OCCURS HERE === */

  /* Upon wake-up, the system clock needs to be reconfigured */
  SystemClock_Config();
 8001d16:	f7ff fcbf 	bl	8001698 <SystemClock_Config>

  /* Re-enable peripheral clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b20      	ldr	r3, [pc, #128]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001d20:	2101      	movs	r1, #1
 8001d22:	430a      	orrs	r2, r1
 8001d24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d26:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d36:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001d38:	2102      	movs	r1, #2
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d3e:	4b17      	ldr	r3, [pc, #92]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d42:	2202      	movs	r2, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_I2C1_CLK_ENABLE();
 8001d4a:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d4e:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001d50:	2180      	movs	r1, #128	@ 0x80
 8001d52:	0389      	lsls	r1, r1, #14
 8001d54:	430a      	orrs	r2, r1
 8001d56:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_USART1_CLK_ENABLE();
 8001d58:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001d5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001d5e:	2180      	movs	r1, #128	@ 0x80
 8001d60:	01c9      	lsls	r1, r1, #7
 8001d62:	430a      	orrs	r2, r1
 8001d64:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_USART2_CLK_ENABLE();
 8001d66:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001d68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <EnterDeepSleepMode+0x118>)
 8001d6c:	2180      	movs	r1, #128	@ 0x80
 8001d6e:	0289      	lsls	r1, r1, #10
 8001d70:	430a      	orrs	r2, r1
 8001d72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Restore GPIO configuration for normal operation */
  MX_GPIO_Init();
 8001d74:	f7ff fe52 	bl	8001a1c <MX_GPIO_Init>

  /* Re-initialize peripherals with proper sequence */
  MX_I2C1_Init();
 8001d78:	f7ff fd78 	bl	800186c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001d7c:	f7ff fdea 	bl	8001954 <MX_USART1_UART_Init>
  //  MX_USART2_UART_Init();

  /* Resume SysTick */
  HAL_ResumeTick();
 8001d80:	f000 fee4 	bl	8002b4c <HAL_ResumeTick>

  /* Add longer delay for UART stabilization */
  HAL_Delay(100);
 8001d84:	2064      	movs	r0, #100	@ 0x64
 8001d86:	f000 feaf 	bl	8002ae8 <HAL_Delay>
}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b002      	add	sp, #8
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	20000154 	.word	0x20000154
 8001d98:	200000dc 	.word	0x200000dc
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	ffdfffff 	.word	0xffdfffff
 8001da4:	ffffbfff 	.word	0xffffbfff
 8001da8:	fffdffff 	.word	0xfffdffff
 8001dac:	40007000 	.word	0x40007000
 8001db0:	20000130 	.word	0x20000130
 8001db4:	fffffb7f 	.word	0xfffffb7f

08001db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  //  while (1)
  //  {
  //  }
  HAL_NVIC_SystemReset();
 8001dc0:	f001 fc49 	bl	8003656 <HAL_NVIC_SystemReset>
  /* USER CODE END Error_Handler_Debug */
}
 8001dc4:	46c0      	nop			@ (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8001dd2:	003b      	movs	r3, r7
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	2308      	movs	r3, #8
 8001dd8:	001a      	movs	r2, r3
 8001dda:	2100      	movs	r1, #0
 8001ddc:	f005 fa6a 	bl	80072b4 <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <HAL_MspInit+0x50>)
 8001de2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001de4:	4b0d      	ldr	r3, [pc, #52]	@ (8001e1c <HAL_MspInit+0x50>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	430a      	orrs	r2, r1
 8001dea:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <HAL_MspInit+0x50>)
 8001dee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001df0:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <HAL_MspInit+0x50>)
 8001df2:	2180      	movs	r1, #128	@ 0x80
 8001df4:	0549      	lsls	r1, r1, #21
 8001df6:	430a      	orrs	r2, r1
 8001df8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8001dfa:	003b      	movs	r3, r7
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8001e00:	003b      	movs	r3, r7
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001e06:	003b      	movs	r3, r7
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f002 fe7b 	bl	8004b04 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8001e0e:	f002 fedb 	bl	8004bc8 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b002      	add	sp, #8
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			@ (mov r8, r8)
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b089      	sub	sp, #36	@ 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	240c      	movs	r4, #12
 8001e2a:	193b      	adds	r3, r7, r4
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	2314      	movs	r3, #20
 8001e30:	001a      	movs	r2, r3
 8001e32:	2100      	movs	r1, #0
 8001e34:	f005 fa3e 	bl	80072b4 <memset>
  if(hadc->Instance==ADC1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a14      	ldr	r2, [pc, #80]	@ (8001e90 <HAL_ADC_MspInit+0x70>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d122      	bne.n	8001e88 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e42:	4b14      	ldr	r3, [pc, #80]	@ (8001e94 <HAL_ADC_MspInit+0x74>)
 8001e44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e46:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <HAL_ADC_MspInit+0x74>)
 8001e48:	2180      	movs	r1, #128	@ 0x80
 8001e4a:	0089      	lsls	r1, r1, #2
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e50:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <HAL_ADC_MspInit+0x74>)
 8001e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e54:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <HAL_ADC_MspInit+0x74>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e94 <HAL_ADC_MspInit+0x74>)
 8001e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e60:	2201      	movs	r2, #1
 8001e62:	4013      	ands	r3, r2
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC_IN0_Pin;
 8001e68:	193b      	adds	r3, r7, r4
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6e:	193b      	adds	r3, r7, r4
 8001e70:	2203      	movs	r2, #3
 8001e72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	193b      	adds	r3, r7, r4
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_IN0_GPIO_Port, &GPIO_InitStruct);
 8001e7a:	193a      	adds	r2, r7, r4
 8001e7c:	23a0      	movs	r3, #160	@ 0xa0
 8001e7e:	05db      	lsls	r3, r3, #23
 8001e80:	0011      	movs	r1, r2
 8001e82:	0018      	movs	r0, r3
 8001e84:	f001 fc42 	bl	800370c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e88:	46c0      	nop			@ (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b009      	add	sp, #36	@ 0x24
 8001e8e:	bd90      	pop	{r4, r7, pc}
 8001e90:	40012400 	.word	0x40012400
 8001e94:	40021000 	.word	0x40021000

08001e98 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b089      	sub	sp, #36	@ 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	240c      	movs	r4, #12
 8001ea2:	193b      	adds	r3, r7, r4
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	2314      	movs	r3, #20
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	2100      	movs	r1, #0
 8001eac:	f005 fa02 	bl	80072b4 <memset>
  if(hi2c->Instance==I2C1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a17      	ldr	r2, [pc, #92]	@ (8001f14 <HAL_I2C_MspInit+0x7c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d128      	bne.n	8001f0c <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <HAL_I2C_MspInit+0x80>)
 8001ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ebe:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <HAL_I2C_MspInit+0x80>)
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ec6:	4b14      	ldr	r3, [pc, #80]	@ (8001f18 <HAL_I2C_MspInit+0x80>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ed2:	0021      	movs	r1, r4
 8001ed4:	187b      	adds	r3, r7, r1
 8001ed6:	22c0      	movs	r2, #192	@ 0xc0
 8001ed8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	2212      	movs	r2, #18
 8001ede:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	2203      	movs	r2, #3
 8001eea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	2201      	movs	r2, #1
 8001ef0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	4a09      	ldr	r2, [pc, #36]	@ (8001f1c <HAL_I2C_MspInit+0x84>)
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	0010      	movs	r0, r2
 8001efa:	f001 fc07 	bl	800370c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_I2C_MspInit+0x80>)
 8001f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f02:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_I2C_MspInit+0x80>)
 8001f04:	2180      	movs	r1, #128	@ 0x80
 8001f06:	0389      	lsls	r1, r1, #14
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f0c:	46c0      	nop			@ (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b009      	add	sp, #36	@ 0x24
 8001f12:	bd90      	pop	{r4, r7, pc}
 8001f14:	40005400 	.word	0x40005400
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	50000400 	.word	0x50000400

08001f20 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f5c <HAL_I2C_MspDeInit+0x3c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10f      	bne.n	8001f52 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001f32:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_I2C_MspDeInit+0x40>)
 8001f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f36:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <HAL_I2C_MspDeInit+0x40>)
 8001f38:	490a      	ldr	r1, [pc, #40]	@ (8001f64 <HAL_I2C_MspDeInit+0x44>)
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <HAL_I2C_MspDeInit+0x48>)
 8001f40:	2140      	movs	r1, #64	@ 0x40
 8001f42:	0018      	movs	r0, r3
 8001f44:	f001 fd60 	bl	8003a08 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001f48:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <HAL_I2C_MspDeInit+0x48>)
 8001f4a:	2180      	movs	r1, #128	@ 0x80
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f001 fd5b 	bl	8003a08 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b002      	add	sp, #8
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	40005400 	.word	0x40005400
 8001f60:	40021000 	.word	0x40021000
 8001f64:	ffdfffff 	.word	0xffdfffff
 8001f68:	50000400 	.word	0x50000400

08001f6c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa4 <HAL_RTC_MspInit+0x38>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d10e      	bne.n	8001f9c <HAL_RTC_MspInit+0x30>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <HAL_RTC_MspInit+0x3c>)
 8001f80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f82:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <HAL_RTC_MspInit+0x3c>)
 8001f84:	2180      	movs	r1, #128	@ 0x80
 8001f86:	02c9      	lsls	r1, r1, #11
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2002      	movs	r0, #2
 8001f92:	f001 fb3b 	bl	800360c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001f96:	2002      	movs	r0, #2
 8001f98:	f001 fb4d 	bl	8003636 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001f9c:	46c0      	nop			@ (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b002      	add	sp, #8
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40002800 	.word	0x40002800
 8001fa8:	40021000 	.word	0x40021000

08001fac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b08b      	sub	sp, #44	@ 0x2c
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	2414      	movs	r4, #20
 8001fb6:	193b      	adds	r3, r7, r4
 8001fb8:	0018      	movs	r0, r3
 8001fba:	2314      	movs	r3, #20
 8001fbc:	001a      	movs	r2, r3
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	f005 f978 	bl	80072b4 <memset>
  if(huart->Instance==USART1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a30      	ldr	r2, [pc, #192]	@ (800208c <HAL_UART_MspInit+0xe0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d12b      	bne.n	8002026 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fce:	4b30      	ldr	r3, [pc, #192]	@ (8002090 <HAL_UART_MspInit+0xe4>)
 8001fd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002090 <HAL_UART_MspInit+0xe4>)
 8001fd4:	2180      	movs	r1, #128	@ 0x80
 8001fd6:	01c9      	lsls	r1, r1, #7
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fdc:	4b2c      	ldr	r3, [pc, #176]	@ (8002090 <HAL_UART_MspInit+0xe4>)
 8001fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8002090 <HAL_UART_MspInit+0xe4>)
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001fe8:	4b29      	ldr	r3, [pc, #164]	@ (8002090 <HAL_UART_MspInit+0xe4>)
 8001fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fec:	2201      	movs	r2, #1
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ff4:	193b      	adds	r3, r7, r4
 8001ff6:	22c0      	movs	r2, #192	@ 0xc0
 8001ff8:	00d2      	lsls	r2, r2, #3
 8001ffa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	0021      	movs	r1, r4
 8001ffe:	187b      	adds	r3, r7, r1
 8002000:	2202      	movs	r2, #2
 8002002:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	187b      	adds	r3, r7, r1
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	187b      	adds	r3, r7, r1
 800200c:	2203      	movs	r2, #3
 800200e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002010:	187b      	adds	r3, r7, r1
 8002012:	2204      	movs	r2, #4
 8002014:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	187a      	adds	r2, r7, r1
 8002018:	23a0      	movs	r3, #160	@ 0xa0
 800201a:	05db      	lsls	r3, r3, #23
 800201c:	0011      	movs	r1, r2
 800201e:	0018      	movs	r0, r3
 8002020:	f001 fb74 	bl	800370c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002024:	e02e      	b.n	8002084 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1a      	ldr	r2, [pc, #104]	@ (8002094 <HAL_UART_MspInit+0xe8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d129      	bne.n	8002084 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002030:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <HAL_UART_MspInit+0xe4>)
 8002032:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002034:	4b16      	ldr	r3, [pc, #88]	@ (8002090 <HAL_UART_MspInit+0xe4>)
 8002036:	2180      	movs	r1, #128	@ 0x80
 8002038:	0289      	lsls	r1, r1, #10
 800203a:	430a      	orrs	r2, r1
 800203c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <HAL_UART_MspInit+0xe4>)
 8002040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002042:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <HAL_UART_MspInit+0xe4>)
 8002044:	2101      	movs	r1, #1
 8002046:	430a      	orrs	r2, r1
 8002048:	62da      	str	r2, [r3, #44]	@ 0x2c
 800204a:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <HAL_UART_MspInit+0xe4>)
 800204c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204e:	2201      	movs	r2, #1
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002056:	2114      	movs	r1, #20
 8002058:	187b      	adds	r3, r7, r1
 800205a:	220c      	movs	r2, #12
 800205c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	187b      	adds	r3, r7, r1
 8002060:	2202      	movs	r2, #2
 8002062:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	187b      	adds	r3, r7, r1
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	187b      	adds	r3, r7, r1
 800206c:	2203      	movs	r2, #3
 800206e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002070:	187b      	adds	r3, r7, r1
 8002072:	2204      	movs	r2, #4
 8002074:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	187a      	adds	r2, r7, r1
 8002078:	23a0      	movs	r3, #160	@ 0xa0
 800207a:	05db      	lsls	r3, r3, #23
 800207c:	0011      	movs	r1, r2
 800207e:	0018      	movs	r0, r3
 8002080:	f001 fb44 	bl	800370c <HAL_GPIO_Init>
}
 8002084:	46c0      	nop			@ (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b00b      	add	sp, #44	@ 0x2c
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	40013800 	.word	0x40013800
 8002090:	40021000 	.word	0x40021000
 8002094:	40004400 	.word	0x40004400

08002098 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a13      	ldr	r2, [pc, #76]	@ (80020f4 <HAL_UART_MspDeInit+0x5c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10e      	bne.n	80020c8 <HAL_UART_MspDeInit+0x30>
  {
    /* USER CODE BEGIN USART1_MspDeInit 0 */

    /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80020aa:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <HAL_UART_MspDeInit+0x60>)
 80020ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020ae:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <HAL_UART_MspDeInit+0x60>)
 80020b0:	4912      	ldr	r1, [pc, #72]	@ (80020fc <HAL_UART_MspDeInit+0x64>)
 80020b2:	400a      	ands	r2, r1
 80020b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80020b6:	23c0      	movs	r3, #192	@ 0xc0
 80020b8:	00da      	lsls	r2, r3, #3
 80020ba:	23a0      	movs	r3, #160	@ 0xa0
 80020bc:	05db      	lsls	r3, r3, #23
 80020be:	0011      	movs	r1, r2
 80020c0:	0018      	movs	r0, r3
 80020c2:	f001 fca1 	bl	8003a08 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80020c6:	e010      	b.n	80020ea <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002100 <HAL_UART_MspDeInit+0x68>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d10b      	bne.n	80020ea <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 80020d2:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <HAL_UART_MspDeInit+0x60>)
 80020d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020d6:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <HAL_UART_MspDeInit+0x60>)
 80020d8:	490a      	ldr	r1, [pc, #40]	@ (8002104 <HAL_UART_MspDeInit+0x6c>)
 80020da:	400a      	ands	r2, r1
 80020dc:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80020de:	23a0      	movs	r3, #160	@ 0xa0
 80020e0:	05db      	lsls	r3, r3, #23
 80020e2:	210c      	movs	r1, #12
 80020e4:	0018      	movs	r0, r3
 80020e6:	f001 fc8f 	bl	8003a08 <HAL_GPIO_DeInit>
}
 80020ea:	46c0      	nop			@ (mov r8, r8)
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b002      	add	sp, #8
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	40013800 	.word	0x40013800
 80020f8:	40021000 	.word	0x40021000
 80020fc:	ffffbfff 	.word	0xffffbfff
 8002100:	40004400 	.word	0x40004400
 8002104:	fffdffff 	.word	0xfffdffff

08002108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800210c:	46c0      	nop			@ (mov r8, r8)
 800210e:	e7fd      	b.n	800210c <NMI_Handler+0x4>

08002110 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002114:	46c0      	nop			@ (mov r8, r8)
 8002116:	e7fd      	b.n	8002114 <HardFault_Handler+0x4>

08002118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800211c:	46c0      	nop			@ (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002130:	f000 fcbe 	bl	8002ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002134:	46c0      	nop			@ (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002140:	4b03      	ldr	r3, [pc, #12]	@ (8002150 <RTC_IRQHandler+0x14>)
 8002142:	0018      	movs	r0, r3
 8002144:	f003 ff9c 	bl	8006080 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002148:	46c0      	nop			@ (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	20000130 	.word	0x20000130

08002154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800215c:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <_sbrk+0x5c>)
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <_sbrk+0x60>)
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002168:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <_sbrk+0x64>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002170:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <_sbrk+0x64>)
 8002172:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <_sbrk+0x68>)
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	18d3      	adds	r3, r2, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d207      	bcs.n	8002194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002184:	f005 f89e 	bl	80072c4 <__errno>
 8002188:	0003      	movs	r3, r0
 800218a:	220c      	movs	r2, #12
 800218c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218e:	2301      	movs	r3, #1
 8002190:	425b      	negs	r3, r3
 8002192:	e009      	b.n	80021a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	18d2      	adds	r2, r2, r3
 80021a2:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <_sbrk+0x64>)
 80021a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80021a6:	68fb      	ldr	r3, [r7, #12]
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b006      	add	sp, #24
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20005000 	.word	0x20005000
 80021b4:	00000400 	.word	0x00000400
 80021b8:	2000046c 	.word	0x2000046c
 80021bc:	200005e0 	.word	0x200005e0

080021c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c4:	46c0      	nop			@ (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <sht4x_temp_centi_from_ticks>:
#include <stdbool.h>

extern I2C_HandleTypeDef hi2c1;

// was: static inline int16_t sht4x_temp_centi_from_ticks(uint16_t t_ticks)
int16_t sht4x_temp_centi_from_ticks(uint16_t t_ticks) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	0002      	movs	r2, r0
 80021d4:	1dbb      	adds	r3, r7, #6
 80021d6:	801a      	strh	r2, [r3, #0]
    uint32_t num = 17500u * (uint32_t)t_ticks + 32767u;  // nearest rounding
 80021d8:	1dbb      	adds	r3, r7, #6
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	4a10      	ldr	r2, [pc, #64]	@ (8002220 <sht4x_temp_centi_from_ticks+0x54>)
 80021de:	4353      	muls	r3, r2
 80021e0:	4a10      	ldr	r2, [pc, #64]	@ (8002224 <sht4x_temp_centi_from_ticks+0x58>)
 80021e2:	4694      	mov	ip, r2
 80021e4:	4463      	add	r3, ip
 80021e6:	60bb      	str	r3, [r7, #8]
    int32_t centi = (int32_t)(num / 65535u) - 4500;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	490f      	ldr	r1, [pc, #60]	@ (8002228 <sht4x_temp_centi_from_ticks+0x5c>)
 80021ec:	0018      	movs	r0, r3
 80021ee:	f7fd ff9d 	bl	800012c <__udivsi3>
 80021f2:	0003      	movs	r3, r0
 80021f4:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <sht4x_temp_centi_from_ticks+0x60>)
 80021f6:	4694      	mov	ip, r2
 80021f8:	4463      	add	r3, ip
 80021fa:	60fb      	str	r3, [r7, #12]
    if (centi < -4500) centi = -4500;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4a0b      	ldr	r2, [pc, #44]	@ (800222c <sht4x_temp_centi_from_ticks+0x60>)
 8002200:	4293      	cmp	r3, r2
 8002202:	da01      	bge.n	8002208 <sht4x_temp_centi_from_ticks+0x3c>
 8002204:	4b09      	ldr	r3, [pc, #36]	@ (800222c <sht4x_temp_centi_from_ticks+0x60>)
 8002206:	60fb      	str	r3, [r7, #12]
    if (centi > 13000) centi = 13000;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4a09      	ldr	r2, [pc, #36]	@ (8002230 <sht4x_temp_centi_from_ticks+0x64>)
 800220c:	4293      	cmp	r3, r2
 800220e:	dd01      	ble.n	8002214 <sht4x_temp_centi_from_ticks+0x48>
 8002210:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <sht4x_temp_centi_from_ticks+0x64>)
 8002212:	60fb      	str	r3, [r7, #12]
    return (int16_t)centi;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	b21b      	sxth	r3, r3
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b004      	add	sp, #16
 800221e:	bd80      	pop	{r7, pc}
 8002220:	0000445c 	.word	0x0000445c
 8002224:	00007fff 	.word	0x00007fff
 8002228:	0000ffff 	.word	0x0000ffff
 800222c:	ffffee6c 	.word	0xffffee6c
 8002230:	000032c8 	.word	0x000032c8

08002234 <sht4x_rh_centi_from_ticks>:

// was: static inline uint16_t sht4x_rh_centi_from_ticks(uint16_t rh_ticks)
uint16_t sht4x_rh_centi_from_ticks(uint16_t rh_ticks) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	0002      	movs	r2, r0
 800223c:	1dbb      	adds	r3, r7, #6
 800223e:	801a      	strh	r2, [r3, #0]
    uint32_t num = 12500u * (uint32_t)rh_ticks + 32767u; // nearest rounding
 8002240:	1dbb      	adds	r3, r7, #6
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	4a10      	ldr	r2, [pc, #64]	@ (8002288 <sht4x_rh_centi_from_ticks+0x54>)
 8002246:	4353      	muls	r3, r2
 8002248:	4a10      	ldr	r2, [pc, #64]	@ (800228c <sht4x_rh_centi_from_ticks+0x58>)
 800224a:	4694      	mov	ip, r2
 800224c:	4463      	add	r3, ip
 800224e:	60bb      	str	r3, [r7, #8]
    int32_t centi = (int32_t)(num / 65535u) - 600;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	490f      	ldr	r1, [pc, #60]	@ (8002290 <sht4x_rh_centi_from_ticks+0x5c>)
 8002254:	0018      	movs	r0, r3
 8002256:	f7fd ff69 	bl	800012c <__udivsi3>
 800225a:	0003      	movs	r3, r0
 800225c:	4a0d      	ldr	r2, [pc, #52]	@ (8002294 <sht4x_rh_centi_from_ticks+0x60>)
 800225e:	4694      	mov	ip, r2
 8002260:	4463      	add	r3, ip
 8002262:	60fb      	str	r3, [r7, #12]
    if (centi < 0)      centi = 0;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	da01      	bge.n	800226e <sht4x_rh_centi_from_ticks+0x3a>
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
    if (centi > 10000)  centi = 10000;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4a09      	ldr	r2, [pc, #36]	@ (8002298 <sht4x_rh_centi_from_ticks+0x64>)
 8002272:	4293      	cmp	r3, r2
 8002274:	dd01      	ble.n	800227a <sht4x_rh_centi_from_ticks+0x46>
 8002276:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <sht4x_rh_centi_from_ticks+0x64>)
 8002278:	60fb      	str	r3, [r7, #12]
    return (uint16_t)centi;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	b29b      	uxth	r3, r3
}
 800227e:	0018      	movs	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	b004      	add	sp, #16
 8002284:	bd80      	pop	{r7, pc}
 8002286:	46c0      	nop			@ (mov r8, r8)
 8002288:	000030d4 	.word	0x000030d4
 800228c:	00007fff 	.word	0x00007fff
 8002290:	0000ffff 	.word	0x0000ffff
 8002294:	fffffda8 	.word	0xfffffda8
 8002298:	00002710 	.word	0x00002710

0800229c <scan_i2c_bus>:
uint16_t calculated_hum_2;

int16_t i2c_error_code = 0;

void scan_i2c_bus(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
    // re-set these to false because we want to check every time for safety
    has_sensor_1 = false;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <scan_i2c_bus+0x44>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
    has_sensor_2 = false;
 80022a6:	4b0f      	ldr	r3, [pc, #60]	@ (80022e4 <scan_i2c_bus+0x48>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]

    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x44 << 1, 1, 10) == HAL_OK) has_sensor_1 = true;
 80022ac:	480e      	ldr	r0, [pc, #56]	@ (80022e8 <scan_i2c_bus+0x4c>)
 80022ae:	230a      	movs	r3, #10
 80022b0:	2201      	movs	r2, #1
 80022b2:	2188      	movs	r1, #136	@ 0x88
 80022b4:	f001 ffb0 	bl	8004218 <HAL_I2C_IsDeviceReady>
 80022b8:	1e03      	subs	r3, r0, #0
 80022ba:	d102      	bne.n	80022c2 <scan_i2c_bus+0x26>
 80022bc:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <scan_i2c_bus+0x44>)
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x46 << 1, 1, 10) == HAL_OK) has_sensor_2 = true;
 80022c2:	4809      	ldr	r0, [pc, #36]	@ (80022e8 <scan_i2c_bus+0x4c>)
 80022c4:	230a      	movs	r3, #10
 80022c6:	2201      	movs	r2, #1
 80022c8:	218c      	movs	r1, #140	@ 0x8c
 80022ca:	f001 ffa5 	bl	8004218 <HAL_I2C_IsDeviceReady>
 80022ce:	1e03      	subs	r3, r0, #0
 80022d0:	d102      	bne.n	80022d8 <scan_i2c_bus+0x3c>
 80022d2:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <scan_i2c_bus+0x48>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
}
 80022d8:	46c0      	nop			@ (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	20000470 	.word	0x20000470
 80022e4:	20000471 	.word	0x20000471
 80022e8:	200000dc 	.word	0x200000dc

080022ec <sensor_init_and_read>:

int sensor_init_and_read(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
    // If either sensor is missing => error
    if (!has_sensor_1 || !has_sensor_2) {
 80022f2:	4b5e      	ldr	r3, [pc, #376]	@ (800246c <sensor_init_and_read+0x180>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2201      	movs	r2, #1
 80022f8:	4053      	eors	r3, r2
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d106      	bne.n	800230e <sensor_init_and_read+0x22>
 8002300:	4b5b      	ldr	r3, [pc, #364]	@ (8002470 <sensor_init_and_read+0x184>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2201      	movs	r2, #1
 8002306:	4053      	eors	r3, r2
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d004      	beq.n	8002318 <sensor_init_and_read+0x2c>
        i2c_error_code = NO_SENSORS_FOUND;
 800230e:	4b59      	ldr	r3, [pc, #356]	@ (8002474 <sensor_init_and_read+0x188>)
 8002310:	2201      	movs	r2, #1
 8002312:	801a      	strh	r2, [r3, #0]
        return 1; // sensor 1 or 2 not found
 8002314:	2301      	movs	r3, #1
 8002316:	e0a5      	b.n	8002464 <sensor_init_and_read+0x178>
    }

    i2c_error_code = NO_ERROR;
 8002318:	4b56      	ldr	r3, [pc, #344]	@ (8002474 <sensor_init_and_read+0x188>)
 800231a:	2200      	movs	r2, #0
 800231c:	801a      	strh	r2, [r3, #0]
    HAL_Delay(100);
 800231e:	2064      	movs	r0, #100	@ 0x64
 8002320:	f000 fbe2 	bl	8002ae8 <HAL_Delay>

    if (has_sensor_1) {
 8002324:	4b51      	ldr	r3, [pc, #324]	@ (800246c <sensor_init_and_read+0x180>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01c      	beq.n	8002366 <sensor_init_and_read+0x7a>
        sht4x_init(SHT43_I2C_ADDR_44);
 800232c:	2044      	movs	r0, #68	@ 0x44
 800232e:	f000 fa91 	bl	8002854 <sht4x_init>
        sht4x_soft_reset();
 8002332:	f000 fb03 	bl	800293c <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 8002336:	4b50      	ldr	r3, [pc, #320]	@ (8002478 <sensor_init_and_read+0x18c>)
 8002338:	0018      	movs	r0, r3
 800233a:	f000 fa61 	bl	8002800 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT43_I2C_ADDR_44);
 800233e:	2044      	movs	r0, #68	@ 0x44
 8002340:	f000 fa88 	bl	8002854 <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 8002344:	4a4d      	ldr	r2, [pc, #308]	@ (800247c <sensor_init_and_read+0x190>)
 8002346:	4b4e      	ldr	r3, [pc, #312]	@ (8002480 <sensor_init_and_read+0x194>)
 8002348:	0011      	movs	r1, r2
 800234a:	0018      	movs	r0, r3
 800234c:	f000 fa92 	bl	8002874 <sht4x_measure_high_precision_ticks>
 8002350:	0003      	movs	r3, r0
 8002352:	001a      	movs	r2, r3
 8002354:	4b47      	ldr	r3, [pc, #284]	@ (8002474 <sensor_init_and_read+0x188>)
 8002356:	801a      	strh	r2, [r3, #0]
        if (i2c_error_code) return 2; // hard fault on read
 8002358:	4b46      	ldr	r3, [pc, #280]	@ (8002474 <sensor_init_and_read+0x188>)
 800235a:	2200      	movs	r2, #0
 800235c:	5e9b      	ldrsh	r3, [r3, r2]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <sensor_init_and_read+0x7a>
 8002362:	2302      	movs	r3, #2
 8002364:	e07e      	b.n	8002464 <sensor_init_and_read+0x178>
    }

    if (has_sensor_2) {
 8002366:	4b42      	ldr	r3, [pc, #264]	@ (8002470 <sensor_init_and_read+0x184>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d01c      	beq.n	80023a8 <sensor_init_and_read+0xbc>
        sht4x_init(SHT40_I2C_ADDR_46);
 800236e:	2046      	movs	r0, #70	@ 0x46
 8002370:	f000 fa70 	bl	8002854 <sht4x_init>
        sht4x_soft_reset();
 8002374:	f000 fae2 	bl	800293c <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 8002378:	4b3f      	ldr	r3, [pc, #252]	@ (8002478 <sensor_init_and_read+0x18c>)
 800237a:	0018      	movs	r0, r3
 800237c:	f000 fa40 	bl	8002800 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT40_I2C_ADDR_46);
 8002380:	2046      	movs	r0, #70	@ 0x46
 8002382:	f000 fa67 	bl	8002854 <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 8002386:	4a3f      	ldr	r2, [pc, #252]	@ (8002484 <sensor_init_and_read+0x198>)
 8002388:	4b3f      	ldr	r3, [pc, #252]	@ (8002488 <sensor_init_and_read+0x19c>)
 800238a:	0011      	movs	r1, r2
 800238c:	0018      	movs	r0, r3
 800238e:	f000 fa71 	bl	8002874 <sht4x_measure_high_precision_ticks>
 8002392:	0003      	movs	r3, r0
 8002394:	001a      	movs	r2, r3
 8002396:	4b37      	ldr	r3, [pc, #220]	@ (8002474 <sensor_init_and_read+0x188>)
 8002398:	801a      	strh	r2, [r3, #0]
        if (i2c_error_code) return 3; // hard fault on read
 800239a:	4b36      	ldr	r3, [pc, #216]	@ (8002474 <sensor_init_and_read+0x188>)
 800239c:	2200      	movs	r2, #0
 800239e:	5e9b      	ldrsh	r3, [r3, r2]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <sensor_init_and_read+0xbc>
 80023a4:	2303      	movs	r3, #3
 80023a6:	e05d      	b.n	8002464 <sensor_init_and_read+0x178>
    }

    if (has_soil_sensor_1) {
 80023a8:	4b38      	ldr	r3, [pc, #224]	@ (800248c <sensor_init_and_read+0x1a0>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d000      	beq.n	80023b2 <sensor_init_and_read+0xc6>
    	__NOP();
 80023b0:	46c0      	nop			@ (mov r8, r8)
    }

    // Convert using exact integer math with rounding (centi-units)
    calculated_temp_1 = sht4x_temp_centi_from_ticks(temp_ticks_1);  // °C×100
 80023b2:	4b33      	ldr	r3, [pc, #204]	@ (8002480 <sensor_init_and_read+0x194>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7ff ff08 	bl	80021cc <sht4x_temp_centi_from_ticks>
 80023bc:	0003      	movs	r3, r0
 80023be:	001a      	movs	r2, r3
 80023c0:	4b33      	ldr	r3, [pc, #204]	@ (8002490 <sensor_init_and_read+0x1a4>)
 80023c2:	801a      	strh	r2, [r3, #0]
    calculated_temp_2 = sht4x_temp_centi_from_ticks(temp_ticks_2);  // °C×100
 80023c4:	4b30      	ldr	r3, [pc, #192]	@ (8002488 <sensor_init_and_read+0x19c>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7ff feff 	bl	80021cc <sht4x_temp_centi_from_ticks>
 80023ce:	0003      	movs	r3, r0
 80023d0:	001a      	movs	r2, r3
 80023d2:	4b30      	ldr	r3, [pc, #192]	@ (8002494 <sensor_init_and_read+0x1a8>)
 80023d4:	801a      	strh	r2, [r3, #0]
    calculated_hum_1  = sht4x_rh_centi_from_ticks(hum_ticks_1);     // %×100
 80023d6:	4b29      	ldr	r3, [pc, #164]	@ (800247c <sensor_init_and_read+0x190>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	0018      	movs	r0, r3
 80023dc:	f7ff ff2a 	bl	8002234 <sht4x_rh_centi_from_ticks>
 80023e0:	0003      	movs	r3, r0
 80023e2:	001a      	movs	r2, r3
 80023e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002498 <sensor_init_and_read+0x1ac>)
 80023e6:	801a      	strh	r2, [r3, #0]
    calculated_hum_2  = sht4x_rh_centi_from_ticks(hum_ticks_2);     // %×100
 80023e8:	4b26      	ldr	r3, [pc, #152]	@ (8002484 <sensor_init_and_read+0x198>)
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f7ff ff21 	bl	8002234 <sht4x_rh_centi_from_ticks>
 80023f2:	0003      	movs	r3, r0
 80023f4:	001a      	movs	r2, r3
 80023f6:	4b29      	ldr	r3, [pc, #164]	@ (800249c <sensor_init_and_read+0x1b0>)
 80023f8:	801a      	strh	r2, [r3, #0]

    // Compute absolute temperature delta in centi-degrees
    int16_t temp_diff  = (int16_t)(calculated_temp_1 - calculated_temp_2);
 80023fa:	4b25      	ldr	r3, [pc, #148]	@ (8002490 <sensor_init_and_read+0x1a4>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	5e9b      	ldrsh	r3, [r3, r2]
 8002400:	b29a      	uxth	r2, r3
 8002402:	4b24      	ldr	r3, [pc, #144]	@ (8002494 <sensor_init_and_read+0x1a8>)
 8002404:	2100      	movs	r1, #0
 8002406:	5e5b      	ldrsh	r3, [r3, r1]
 8002408:	b29b      	uxth	r3, r3
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	b29a      	uxth	r2, r3
 800240e:	1dbb      	adds	r3, r7, #6
 8002410:	801a      	strh	r2, [r3, #0]
    uint16_t temp_delta = (temp_diff < 0) ? (uint16_t)(-temp_diff) : (uint16_t)temp_diff;
 8002412:	1dbb      	adds	r3, r7, #6
 8002414:	2200      	movs	r2, #0
 8002416:	5e9b      	ldrsh	r3, [r3, r2]
 8002418:	2b00      	cmp	r3, #0
 800241a:	da04      	bge.n	8002426 <sensor_init_and_read+0x13a>
 800241c:	1dbb      	adds	r3, r7, #6
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	425b      	negs	r3, r3
 8002422:	b29b      	uxth	r3, r3
 8002424:	e001      	b.n	800242a <sensor_init_and_read+0x13e>
 8002426:	1dbb      	adds	r3, r7, #6
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	1d3a      	adds	r2, r7, #4
 800242c:	8013      	strh	r3, [r2, #0]

    // If the difference between the two temp sensors is greater than 5.00 °C
    if (temp_delta > 500) {
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	881a      	ldrh	r2, [r3, #0]
 8002432:	23fa      	movs	r3, #250	@ 0xfa
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	429a      	cmp	r2, r3
 8002438:	d901      	bls.n	800243e <sensor_init_and_read+0x152>
        return 4;
 800243a:	2304      	movs	r3, #4
 800243c:	e012      	b.n	8002464 <sensor_init_and_read+0x178>
    }

    // If you need +55.00 °C offset for transmission, do it here without
    // polluting the stored/calculated values:
    calculated_temp_1 = calculated_temp_1 + 5500;
 800243e:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <sensor_init_and_read+0x1a4>)
 8002440:	2200      	movs	r2, #0
 8002442:	5e9b      	ldrsh	r3, [r3, r2]
 8002444:	b29b      	uxth	r3, r3
 8002446:	4a16      	ldr	r2, [pc, #88]	@ (80024a0 <sensor_init_and_read+0x1b4>)
 8002448:	4694      	mov	ip, r2
 800244a:	4463      	add	r3, ip
 800244c:	b29b      	uxth	r3, r3
 800244e:	b21a      	sxth	r2, r3
 8002450:	4b0f      	ldr	r3, [pc, #60]	@ (8002490 <sensor_init_and_read+0x1a4>)
 8002452:	801a      	strh	r2, [r3, #0]
    // (use tx_temp_* to build your payload)

    if (i2c_error_code) {
 8002454:	4b07      	ldr	r3, [pc, #28]	@ (8002474 <sensor_init_and_read+0x188>)
 8002456:	2200      	movs	r2, #0
 8002458:	5e9b      	ldrsh	r3, [r3, r2]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <sensor_init_and_read+0x176>
        return 1;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <sensor_init_and_read+0x178>
    }
    return 0;
 8002462:	2300      	movs	r3, #0
}
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b002      	add	sp, #8
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000470 	.word	0x20000470
 8002470:	20000471 	.word	0x20000471
 8002474:	20000484 	.word	0x20000484
 8002478:	00002710 	.word	0x00002710
 800247c:	20000476 	.word	0x20000476
 8002480:	20000474 	.word	0x20000474
 8002484:	2000047a 	.word	0x2000047a
 8002488:	20000478 	.word	0x20000478
 800248c:	20000472 	.word	0x20000472
 8002490:	2000047c 	.word	0x2000047c
 8002494:	20000480 	.word	0x20000480
 8002498:	2000047e 	.word	0x2000047e
 800249c:	20000482 	.word	0x20000482
 80024a0:	0000157c 	.word	0x0000157c

080024a4 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	b21a      	sxth	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3301      	adds	r3, #1
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	b21b      	sxth	r3, r3
 80024be:	4313      	orrs	r3, r2
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	b29b      	uxth	r3, r3
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	000a      	movs	r2, r1
 80024d6:	1cbb      	adds	r3, r7, #2
 80024d8:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80024da:	230d      	movs	r3, #13
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	22ff      	movs	r2, #255	@ 0xff
 80024e0:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80024e2:	230e      	movs	r3, #14
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	2200      	movs	r2, #0
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	e038      	b.n	800255e <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 80024ec:	230e      	movs	r3, #14
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	18d3      	adds	r3, r2, r3
 80024f6:	7819      	ldrb	r1, [r3, #0]
 80024f8:	220d      	movs	r2, #13
 80024fa:	18bb      	adds	r3, r7, r2
 80024fc:	18ba      	adds	r2, r7, r2
 80024fe:	7812      	ldrb	r2, [r2, #0]
 8002500:	404a      	eors	r2, r1
 8002502:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8002504:	230c      	movs	r3, #12
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	2208      	movs	r2, #8
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	e01c      	b.n	8002548 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 800250e:	210d      	movs	r1, #13
 8002510:	187b      	adds	r3, r7, r1
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b25b      	sxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	da0a      	bge.n	8002530 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800251a:	187b      	adds	r3, r7, r1
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	b25b      	sxtb	r3, r3
 8002520:	18db      	adds	r3, r3, r3
 8002522:	b25b      	sxtb	r3, r3
 8002524:	2231      	movs	r2, #49	@ 0x31
 8002526:	4053      	eors	r3, r2
 8002528:	b25a      	sxtb	r2, r3
 800252a:	187b      	adds	r3, r7, r1
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e005      	b.n	800253c <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8002530:	230d      	movs	r3, #13
 8002532:	18fa      	adds	r2, r7, r3
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	18db      	adds	r3, r3, r3
 800253a:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800253c:	220c      	movs	r2, #12
 800253e:	18bb      	adds	r3, r7, r2
 8002540:	18ba      	adds	r2, r7, r2
 8002542:	7812      	ldrb	r2, [r2, #0]
 8002544:	3a01      	subs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	230c      	movs	r3, #12
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1dd      	bne.n	800250e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8002552:	220e      	movs	r2, #14
 8002554:	18bb      	adds	r3, r7, r2
 8002556:	18ba      	adds	r2, r7, r2
 8002558:	8812      	ldrh	r2, [r2, #0]
 800255a:	3201      	adds	r2, #1
 800255c:	801a      	strh	r2, [r3, #0]
 800255e:	230e      	movs	r3, #14
 8002560:	18fa      	adds	r2, r7, r3
 8002562:	1cbb      	adds	r3, r7, #2
 8002564:	8812      	ldrh	r2, [r2, #0]
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d3bf      	bcc.n	80024ec <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800256c:	230d      	movs	r3, #13
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	781b      	ldrb	r3, [r3, #0]
}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b004      	add	sp, #16
 8002578:	bd80      	pop	{r7, pc}

0800257a <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	0008      	movs	r0, r1
 8002584:	0011      	movs	r1, r2
 8002586:	1cbb      	adds	r3, r7, #2
 8002588:	1c02      	adds	r2, r0, #0
 800258a:	801a      	strh	r2, [r3, #0]
 800258c:	1c7b      	adds	r3, r7, #1
 800258e:	1c0a      	adds	r2, r1, #0
 8002590:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8002592:	1cbb      	adds	r3, r7, #2
 8002594:	881a      	ldrh	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	0011      	movs	r1, r2
 800259a:	0018      	movs	r0, r3
 800259c:	f7ff ff96 	bl	80024cc <sensirion_i2c_generate_crc>
 80025a0:	0003      	movs	r3, r0
 80025a2:	001a      	movs	r2, r3
 80025a4:	1c7b      	adds	r3, r7, #1
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d001      	beq.n	80025b0 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b002      	add	sp, #8
 80025b8:	bd80      	pop	{r7, pc}

080025ba <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	0008      	movs	r0, r1
 80025c4:	0011      	movs	r1, r2
 80025c6:	1cbb      	adds	r3, r7, #2
 80025c8:	1c02      	adds	r2, r0, #0
 80025ca:	801a      	strh	r2, [r3, #0]
 80025cc:	1c7b      	adds	r3, r7, #1
 80025ce:	1c0a      	adds	r2, r1, #0
 80025d0:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 80025d2:	1cbb      	adds	r3, r7, #2
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	1cba      	adds	r2, r7, #2
 80025d8:	1c59      	adds	r1, r3, #1
 80025da:	8011      	strh	r1, [r2, #0]
 80025dc:	001a      	movs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	189b      	adds	r3, r3, r2
 80025e2:	1c7a      	adds	r2, r7, #1
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	701a      	strb	r2, [r3, #0]
    return offset;
 80025e8:	1cbb      	adds	r3, r7, #2
 80025ea:	881b      	ldrh	r3, [r3, #0]
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b002      	add	sp, #8
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6039      	str	r1, [r7, #0]
 80025fc:	0011      	movs	r1, r2
 80025fe:	1dfb      	adds	r3, r7, #7
 8002600:	1c02      	adds	r2, r0, #0
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	1c0a      	adds	r2, r1, #0
 8002608:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	6839      	ldr	r1, [r7, #0]
 8002612:	1dfb      	adds	r3, r7, #7
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	0018      	movs	r0, r3
 8002618:	f000 f8c4 	bl	80027a4 <sensirion_i2c_hal_write>
 800261c:	0003      	movs	r3, r0
}
 800261e:	0018      	movs	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	b002      	add	sp, #8
 8002624:	bd80      	pop	{r7, pc}

08002626 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8002626:	b5b0      	push	{r4, r5, r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	0011      	movs	r1, r2
 8002630:	1dfb      	adds	r3, r7, #7
 8002632:	1c02      	adds	r2, r0, #0
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	1c0a      	adds	r2, r1, #0
 800263a:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	085b      	lsrs	r3, r3, #1
 8002642:	b29b      	uxth	r3, r3
 8002644:	220a      	movs	r2, #10
 8002646:	18ba      	adds	r2, r7, r2
 8002648:	1c19      	adds	r1, r3, #0
 800264a:	1c0b      	adds	r3, r1, #0
 800264c:	18db      	adds	r3, r3, r3
 800264e:	185b      	adds	r3, r3, r1
 8002650:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	2201      	movs	r2, #1
 8002658:	4013      	ands	r3, r2
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8002660:	2304      	movs	r3, #4
 8002662:	e06c      	b.n	800273e <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8002664:	230a      	movs	r3, #10
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	6839      	ldr	r1, [r7, #0]
 800266e:	1dfb      	adds	r3, r7, #7
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	0018      	movs	r0, r3
 8002674:	f000 f868 	bl	8002748 <sensirion_i2c_hal_read>
 8002678:	0003      	movs	r3, r0
 800267a:	001a      	movs	r2, r3
 800267c:	2108      	movs	r1, #8
 800267e:	187b      	adds	r3, r7, r1
 8002680:	801a      	strh	r2, [r3, #0]
    if (error) {
 8002682:	000a      	movs	r2, r1
 8002684:	18bb      	adds	r3, r7, r2
 8002686:	2100      	movs	r1, #0
 8002688:	5e5b      	ldrsh	r3, [r3, r1]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <sensirion_i2c_read_data_inplace+0x70>
        return error;
 800268e:	18bb      	adds	r3, r7, r2
 8002690:	2200      	movs	r2, #0
 8002692:	5e9b      	ldrsh	r3, [r3, r2]
 8002694:	e053      	b.n	800273e <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8002696:	230e      	movs	r3, #14
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	2200      	movs	r2, #0
 800269c:	801a      	strh	r2, [r3, #0]
 800269e:	230c      	movs	r3, #12
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	2200      	movs	r2, #0
 80026a4:	801a      	strh	r2, [r3, #0]
 80026a6:	e041      	b.n	800272c <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80026a8:	210e      	movs	r1, #14
 80026aa:	187b      	adds	r3, r7, r1
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	3302      	adds	r3, #2
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	001a      	movs	r2, r3
 80026c0:	2102      	movs	r1, #2
 80026c2:	f7ff ff5a 	bl	800257a <sensirion_i2c_check_crc>
 80026c6:	0003      	movs	r3, r0
 80026c8:	001a      	movs	r2, r3
 80026ca:	2108      	movs	r1, #8
 80026cc:	187b      	adds	r3, r7, r1
 80026ce:	801a      	strh	r2, [r3, #0]
        if (error) {
 80026d0:	000a      	movs	r2, r1
 80026d2:	18bb      	adds	r3, r7, r2
 80026d4:	2100      	movs	r1, #0
 80026d6:	5e5b      	ldrsh	r3, [r3, r1]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 80026dc:	18bb      	adds	r3, r7, r2
 80026de:	2200      	movs	r2, #0
 80026e0:	5e9b      	ldrsh	r3, [r3, r2]
 80026e2:	e02c      	b.n	800273e <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 80026e4:	240e      	movs	r4, #14
 80026e6:	193b      	adds	r3, r7, r4
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	18d2      	adds	r2, r2, r3
 80026ee:	250c      	movs	r5, #12
 80026f0:	197b      	adds	r3, r7, r5
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	1979      	adds	r1, r7, r5
 80026f6:	1c58      	adds	r0, r3, #1
 80026f8:	8008      	strh	r0, [r1, #0]
 80026fa:	0019      	movs	r1, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	185b      	adds	r3, r3, r1
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8002704:	193b      	adds	r3, r7, r4
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	3301      	adds	r3, #1
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	18d2      	adds	r2, r2, r3
 800270e:	197b      	adds	r3, r7, r5
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	1979      	adds	r1, r7, r5
 8002714:	1c58      	adds	r0, r3, #1
 8002716:	8008      	strh	r0, [r1, #0]
 8002718:	0019      	movs	r1, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	185b      	adds	r3, r3, r1
 800271e:	7812      	ldrb	r2, [r2, #0]
 8002720:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8002722:	193b      	adds	r3, r7, r4
 8002724:	193a      	adds	r2, r7, r4
 8002726:	8812      	ldrh	r2, [r2, #0]
 8002728:	3203      	adds	r2, #3
 800272a:	801a      	strh	r2, [r3, #0]
 800272c:	230e      	movs	r3, #14
 800272e:	18fa      	adds	r2, r7, r3
 8002730:	230a      	movs	r3, #10
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	8812      	ldrh	r2, [r2, #0]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d3b5      	bcc.n	80026a8 <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 800273c:	2300      	movs	r3, #0
}
 800273e:	0018      	movs	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	b004      	add	sp, #16
 8002744:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002748 <sensirion_i2c_hal_read>:

void sensirion_i2c_hal_free(void) {
    /* nothing to free */
}

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 8002748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800274a:	b087      	sub	sp, #28
 800274c:	af02      	add	r7, sp, #8
 800274e:	6039      	str	r1, [r7, #0]
 8002750:	0011      	movs	r1, r2
 8002752:	1dfb      	adds	r3, r7, #7
 8002754:	1c02      	adds	r2, r0, #0
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	1dbb      	adds	r3, r7, #6
 800275a:	1c0a      	adds	r2, r1, #0
 800275c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1), data, count, 1000);
 800275e:	1dfb      	adds	r3, r7, #7
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	18db      	adds	r3, r3, r3
 8002766:	b299      	uxth	r1, r3
 8002768:	1dbb      	adds	r3, r7, #6
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	b29d      	uxth	r5, r3
 800276e:	260f      	movs	r6, #15
 8002770:	19bc      	adds	r4, r7, r6
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	480a      	ldr	r0, [pc, #40]	@ (80027a0 <sensirion_i2c_hal_read+0x58>)
 8002776:	23fa      	movs	r3, #250	@ 0xfa
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	002b      	movs	r3, r5
 800277e:	f001 fc43 	bl	8004008 <HAL_I2C_Master_Receive>
 8002782:	0003      	movs	r3, r0
 8002784:	7023      	strb	r3, [r4, #0]
    return (status == HAL_OK) ? 0 : -1;
 8002786:	19bb      	adds	r3, r7, r6
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <sensirion_i2c_hal_read+0x4a>
 800278e:	2300      	movs	r3, #0
 8002790:	e001      	b.n	8002796 <sensirion_i2c_hal_read+0x4e>
 8002792:	2301      	movs	r3, #1
 8002794:	425b      	negs	r3, r3
}
 8002796:	0018      	movs	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	b005      	add	sp, #20
 800279c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800279e:	46c0      	nop			@ (mov r8, r8)
 80027a0:	200000dc 	.word	0x200000dc

080027a4 <sensirion_i2c_hal_write>:

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint8_t count) {
 80027a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	6039      	str	r1, [r7, #0]
 80027ac:	0011      	movs	r1, r2
 80027ae:	1dfb      	adds	r3, r7, #7
 80027b0:	1c02      	adds	r2, r0, #0
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	1dbb      	adds	r3, r7, #6
 80027b6:	1c0a      	adds	r2, r1, #0
 80027b8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1), (uint8_t*)data, count, 1000);
 80027ba:	1dfb      	adds	r3, r7, #7
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	18db      	adds	r3, r3, r3
 80027c2:	b299      	uxth	r1, r3
 80027c4:	1dbb      	adds	r3, r7, #6
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	b29d      	uxth	r5, r3
 80027ca:	260f      	movs	r6, #15
 80027cc:	19bc      	adds	r4, r7, r6
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	480a      	ldr	r0, [pc, #40]	@ (80027fc <sensirion_i2c_hal_write+0x58>)
 80027d2:	23fa      	movs	r3, #250	@ 0xfa
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	002b      	movs	r3, r5
 80027da:	f001 faeb 	bl	8003db4 <HAL_I2C_Master_Transmit>
 80027de:	0003      	movs	r3, r0
 80027e0:	7023      	strb	r3, [r4, #0]
    return (status == HAL_OK) ? 0 : -1;
 80027e2:	19bb      	adds	r3, r7, r6
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <sensirion_i2c_hal_write+0x4a>
 80027ea:	2300      	movs	r3, #0
 80027ec:	e001      	b.n	80027f2 <sensirion_i2c_hal_write+0x4e>
 80027ee:	2301      	movs	r3, #1
 80027f0:	425b      	negs	r3, r3
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b005      	add	sp, #20
 80027f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027fa:	46c0      	nop			@ (mov r8, r8)
 80027fc:	200000dc 	.word	0x200000dc

08002800 <sensirion_i2c_hal_sleep_usec>:

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	22fa      	movs	r2, #250	@ 0xfa
 800280c:	0091      	lsls	r1, r2, #2
 800280e:	0018      	movs	r0, r3
 8002810:	f7fd fc8c 	bl	800012c <__udivsi3>
 8002814:	0003      	movs	r3, r0
 8002816:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	22fa      	movs	r2, #250	@ 0xfa
 800281c:	0091      	lsls	r1, r2, #2
 800281e:	0018      	movs	r0, r3
 8002820:	f7fd fd0a 	bl	8000238 <__aeabi_uidivmod>
 8002824:	1e0b      	subs	r3, r1, #0
 8002826:	d002      	beq.n	800282e <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3301      	adds	r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_GetHalVersion() < 0x01010100) {
 800282e:	f000 f99b 	bl	8002b68 <HAL_GetHalVersion>
 8002832:	0003      	movs	r3, r0
 8002834:	4a06      	ldr	r2, [pc, #24]	@ (8002850 <sensirion_i2c_hal_sleep_usec+0x50>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d802      	bhi.n	8002840 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3301      	adds	r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	0018      	movs	r0, r3
 8002844:	f000 f950 	bl	8002ae8 <HAL_Delay>
}
 8002848:	46c0      	nop			@ (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b004      	add	sp, #16
 800284e:	bd80      	pop	{r7, pc}
 8002850:	010100ff 	.word	0x010100ff

08002854 <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	0002      	movs	r2, r0
 800285c:	1dfb      	adds	r3, r7, #7
 800285e:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 8002860:	4b03      	ldr	r3, [pc, #12]	@ (8002870 <sht4x_init+0x1c>)
 8002862:	1dfa      	adds	r2, r7, #7
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	701a      	strb	r2, [r3, #0]
}
 8002868:	46c0      	nop			@ (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}
 8002870:	2000048e 	.word	0x2000048e

08002874 <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 8002874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 800287e:	2516      	movs	r5, #22
 8002880:	197b      	adds	r3, r7, r5
 8002882:	2200      	movs	r2, #0
 8002884:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8002886:	4b2a      	ldr	r3, [pc, #168]	@ (8002930 <sht4x_measure_high_precision_ticks+0xbc>)
 8002888:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 800288a:	260e      	movs	r6, #14
 800288c:	19bb      	adds	r3, r7, r6
 800288e:	2200      	movs	r2, #0
 8002890:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 8002892:	19bc      	adds	r4, r7, r6
 8002894:	19bb      	adds	r3, r7, r6
 8002896:	8819      	ldrh	r1, [r3, #0]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	22fd      	movs	r2, #253	@ 0xfd
 800289c:	0018      	movs	r0, r3
 800289e:	f7ff fe8c 	bl	80025ba <sensirion_i2c_add_command8_to_buffer>
 80028a2:	0003      	movs	r3, r0
 80028a4:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 80028a6:	4b23      	ldr	r3, [pc, #140]	@ (8002934 <sht4x_measure_high_precision_ticks+0xc0>)
 80028a8:	7818      	ldrb	r0, [r3, #0]
 80028aa:	197c      	adds	r4, r7, r5
 80028ac:	19bb      	adds	r3, r7, r6
 80028ae:	881a      	ldrh	r2, [r3, #0]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	0019      	movs	r1, r3
 80028b4:	f7ff fe9e 	bl	80025f4 <sensirion_i2c_write_data>
 80028b8:	0003      	movs	r3, r0
 80028ba:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 80028bc:	197b      	adds	r3, r7, r5
 80028be:	2200      	movs	r2, #0
 80028c0:	5e9b      	ldrsh	r3, [r3, r2]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 80028c6:	197b      	adds	r3, r7, r5
 80028c8:	2200      	movs	r2, #0
 80028ca:	5e9b      	ldrsh	r3, [r3, r2]
 80028cc:	e02c      	b.n	8002928 <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80028ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002938 <sht4x_measure_high_precision_ticks+0xc4>)
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7ff ff95 	bl	8002800 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 80028d6:	4b17      	ldr	r3, [pc, #92]	@ (8002934 <sht4x_measure_high_precision_ticks+0xc0>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2516      	movs	r5, #22
 80028dc:	197c      	adds	r4, r7, r5
 80028de:	6939      	ldr	r1, [r7, #16]
 80028e0:	2204      	movs	r2, #4
 80028e2:	0018      	movs	r0, r3
 80028e4:	f7ff fe9f 	bl	8002626 <sensirion_i2c_read_data_inplace>
 80028e8:	0003      	movs	r3, r0
 80028ea:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 80028ec:	197b      	adds	r3, r7, r5
 80028ee:	2200      	movs	r2, #0
 80028f0:	5e9b      	ldrsh	r3, [r3, r2]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 80028f6:	197b      	adds	r3, r7, r5
 80028f8:	2200      	movs	r2, #0
 80028fa:	5e9b      	ldrsh	r3, [r3, r2]
 80028fc:	e014      	b.n	8002928 <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	0018      	movs	r0, r3
 8002902:	f7ff fdcf 	bl	80024a4 <sensirion_common_bytes_to_uint16_t>
 8002906:	0003      	movs	r3, r0
 8002908:	001a      	movs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	3302      	adds	r3, #2
 8002912:	0018      	movs	r0, r3
 8002914:	f7ff fdc6 	bl	80024a4 <sensirion_common_bytes_to_uint16_t>
 8002918:	0003      	movs	r3, r0
 800291a:	001a      	movs	r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	801a      	strh	r2, [r3, #0]
    return local_error;
 8002920:	2316      	movs	r3, #22
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	2200      	movs	r2, #0
 8002926:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002928:	0018      	movs	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	b007      	add	sp, #28
 800292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002930:	20000488 	.word	0x20000488
 8002934:	2000048e 	.word	0x2000048e
 8002938:	00002710 	.word	0x00002710

0800293c <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 800293c:	b5b0      	push	{r4, r5, r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8002942:	250e      	movs	r5, #14
 8002944:	197b      	adds	r3, r7, r5
 8002946:	2200      	movs	r2, #0
 8002948:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 800294a:	4b17      	ldr	r3, [pc, #92]	@ (80029a8 <sht4x_soft_reset+0x6c>)
 800294c:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 800294e:	1dbb      	adds	r3, r7, #6
 8002950:	2200      	movs	r2, #0
 8002952:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 8002954:	1dbc      	adds	r4, r7, #6
 8002956:	1dbb      	adds	r3, r7, #6
 8002958:	8819      	ldrh	r1, [r3, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2294      	movs	r2, #148	@ 0x94
 800295e:	0018      	movs	r0, r3
 8002960:	f7ff fe2b 	bl	80025ba <sensirion_i2c_add_command8_to_buffer>
 8002964:	0003      	movs	r3, r0
 8002966:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8002968:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <sht4x_soft_reset+0x70>)
 800296a:	7818      	ldrb	r0, [r3, #0]
 800296c:	197c      	adds	r4, r7, r5
 800296e:	1dbb      	adds	r3, r7, #6
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	0019      	movs	r1, r3
 8002976:	f7ff fe3d 	bl	80025f4 <sensirion_i2c_write_data>
 800297a:	0003      	movs	r3, r0
 800297c:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 800297e:	197b      	adds	r3, r7, r5
 8002980:	2200      	movs	r2, #0
 8002982:	5e9b      	ldrsh	r3, [r3, r2]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <sht4x_soft_reset+0x54>
        return local_error;
 8002988:	197b      	adds	r3, r7, r5
 800298a:	2200      	movs	r2, #0
 800298c:	5e9b      	ldrsh	r3, [r3, r2]
 800298e:	e007      	b.n	80029a0 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8002990:	4b07      	ldr	r3, [pc, #28]	@ (80029b0 <sht4x_soft_reset+0x74>)
 8002992:	0018      	movs	r0, r3
 8002994:	f7ff ff34 	bl	8002800 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8002998:	230e      	movs	r3, #14
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	2200      	movs	r2, #0
 800299e:	5e9b      	ldrsh	r3, [r3, r2]
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b004      	add	sp, #16
 80029a6:	bdb0      	pop	{r4, r5, r7, pc}
 80029a8:	20000488 	.word	0x20000488
 80029ac:	2000048e 	.word	0x2000048e
 80029b0:	00002710 	.word	0x00002710

080029b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80029b4:	480d      	ldr	r0, [pc, #52]	@ (80029ec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80029b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029b8:	f7ff fc02 	bl	80021c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029bc:	480c      	ldr	r0, [pc, #48]	@ (80029f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80029be:	490d      	ldr	r1, [pc, #52]	@ (80029f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029c0:	4a0d      	ldr	r2, [pc, #52]	@ (80029f8 <LoopForever+0xe>)
  movs r3, #0
 80029c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c4:	e002      	b.n	80029cc <LoopCopyDataInit>

080029c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ca:	3304      	adds	r3, #4

080029cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d0:	d3f9      	bcc.n	80029c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029d2:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80029d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002a00 <LoopForever+0x16>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d8:	e001      	b.n	80029de <LoopFillZerobss>

080029da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029dc:	3204      	adds	r2, #4

080029de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e0:	d3fb      	bcc.n	80029da <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80029e2:	f004 fc75 	bl	80072d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029e6:	f7fe fb0b 	bl	8001000 <main>

080029ea <LoopForever>:

LoopForever:
    b LoopForever
 80029ea:	e7fe      	b.n	80029ea <LoopForever>
   ldr   r0, =_estack
 80029ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80029f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80029f8:	08007e14 	.word	0x08007e14
  ldr r2, =_sbss
 80029fc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002a00:	200005dc 	.word	0x200005dc

08002a04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a04:	e7fe      	b.n	8002a04 <ADC1_COMP_IRQHandler>
	...

08002a08 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a0e:	1dfb      	adds	r3, r7, #7
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002a14:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <HAL_Init+0x3c>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <HAL_Init+0x3c>)
 8002a1a:	2140      	movs	r1, #64	@ 0x40
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a20:	2003      	movs	r0, #3
 8002a22:	f000 f811 	bl	8002a48 <HAL_InitTick>
 8002a26:	1e03      	subs	r3, r0, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002a2a:	1dfb      	adds	r3, r7, #7
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	e001      	b.n	8002a36 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a32:	f7ff f9cb 	bl	8001dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	781b      	ldrb	r3, [r3, #0]
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b002      	add	sp, #8
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	40022000 	.word	0x40022000

08002a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a50:	4b14      	ldr	r3, [pc, #80]	@ (8002aa4 <HAL_InitTick+0x5c>)
 8002a52:	681c      	ldr	r4, [r3, #0]
 8002a54:	4b14      	ldr	r3, [pc, #80]	@ (8002aa8 <HAL_InitTick+0x60>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	0019      	movs	r1, r3
 8002a5a:	23fa      	movs	r3, #250	@ 0xfa
 8002a5c:	0098      	lsls	r0, r3, #2
 8002a5e:	f7fd fb65 	bl	800012c <__udivsi3>
 8002a62:	0003      	movs	r3, r0
 8002a64:	0019      	movs	r1, r3
 8002a66:	0020      	movs	r0, r4
 8002a68:	f7fd fb60 	bl	800012c <__udivsi3>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 fdf5 	bl	800365e <HAL_SYSTICK_Config>
 8002a74:	1e03      	subs	r3, r0, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e00f      	b.n	8002a9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d80b      	bhi.n	8002a9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	2301      	movs	r3, #1
 8002a86:	425b      	negs	r3, r3
 8002a88:	2200      	movs	r2, #0
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 fdbe 	bl	800360c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a90:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <HAL_InitTick+0x64>)
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e000      	b.n	8002a9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b003      	add	sp, #12
 8002aa2:	bd90      	pop	{r4, r7, pc}
 8002aa4:	20000008 	.word	0x20000008
 8002aa8:	20000010 	.word	0x20000010
 8002aac:	2000000c 	.word	0x2000000c

08002ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ab4:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <HAL_IncTick+0x1c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	001a      	movs	r2, r3
 8002aba:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <HAL_IncTick+0x20>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	18d2      	adds	r2, r2, r3
 8002ac0:	4b03      	ldr	r3, [pc, #12]	@ (8002ad0 <HAL_IncTick+0x20>)
 8002ac2:	601a      	str	r2, [r3, #0]
}
 8002ac4:	46c0      	nop			@ (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	20000010 	.word	0x20000010
 8002ad0:	20000490 	.word	0x20000490

08002ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad8:	4b02      	ldr	r3, [pc, #8]	@ (8002ae4 <HAL_GetTick+0x10>)
 8002ada:	681b      	ldr	r3, [r3, #0]
}
 8002adc:	0018      	movs	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	20000490 	.word	0x20000490

08002ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff fff0 	bl	8002ad4 <HAL_GetTick>
 8002af4:	0003      	movs	r3, r0
 8002af6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	3301      	adds	r3, #1
 8002b00:	d005      	beq.n	8002b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b02:	4b0a      	ldr	r3, [pc, #40]	@ (8002b2c <HAL_Delay+0x44>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	001a      	movs	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	189b      	adds	r3, r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	f7ff ffe0 	bl	8002ad4 <HAL_GetTick>
 8002b14:	0002      	movs	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d8f7      	bhi.n	8002b10 <HAL_Delay+0x28>
  {
  }
}
 8002b20:	46c0      	nop			@ (mov r8, r8)
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b004      	add	sp, #16
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	20000010 	.word	0x20000010

08002b30 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002b34:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <HAL_SuspendTick+0x18>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b03      	ldr	r3, [pc, #12]	@ (8002b48 <HAL_SuspendTick+0x18>)
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
}
 8002b40:	46c0      	nop			@ (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			@ (mov r8, r8)
 8002b48:	e000e010 	.word	0xe000e010

08002b4c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <HAL_ResumeTick+0x18>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b03      	ldr	r3, [pc, #12]	@ (8002b64 <HAL_ResumeTick+0x18>)
 8002b56:	2102      	movs	r1, #2
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]
}
 8002b5c:	46c0      	nop			@ (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	e000e010 	.word	0xe000e010

08002b68 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8002b6c:	4b01      	ldr	r3, [pc, #4]	@ (8002b74 <HAL_GetHalVersion+0xc>)
}
 8002b6e:	0018      	movs	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	010a0700 	.word	0x010a0700

08002b78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e159      	b.n	8002e3e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2250      	movs	r2, #80	@ 0x50
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f7ff f93c 	bl	8001e20 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bac:	2210      	movs	r2, #16
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d005      	beq.n	8002bc0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002bbe:	d00b      	beq.n	8002bd8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2250      	movs	r2, #80	@ 0x50
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e132      	b.n	8002e3e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bdc:	4a9a      	ldr	r2, [pc, #616]	@ (8002e48 <HAL_ADC_Init+0x2d0>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	2202      	movs	r2, #2
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2203      	movs	r2, #3
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d108      	bne.n	8002c08 <HAL_ADC_Init+0x90>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_Init+0x90>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_ADC_Init+0x92>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d149      	bne.n	8002ca2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	23c0      	movs	r3, #192	@ 0xc0
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d00b      	beq.n	8002c32 <HAL_ADC_Init+0xba>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	05db      	lsls	r3, r3, #23
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d005      	beq.n	8002c32 <HAL_ADC_Init+0xba>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	2380      	movs	r3, #128	@ 0x80
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d111      	bne.n	8002c56 <HAL_ADC_Init+0xde>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	0092      	lsls	r2, r2, #2
 8002c3e:	0892      	lsrs	r2, r2, #2
 8002c40:	611a      	str	r2, [r3, #16]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6919      	ldr	r1, [r3, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	611a      	str	r2, [r3, #16]
 8002c54:	e014      	b.n	8002c80 <HAL_ADC_Init+0x108>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0092      	lsls	r2, r2, #2
 8002c62:	0892      	lsrs	r2, r2, #2
 8002c64:	611a      	str	r2, [r3, #16]
 8002c66:	4b79      	ldr	r3, [pc, #484]	@ (8002e4c <HAL_ADC_Init+0x2d4>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4b78      	ldr	r3, [pc, #480]	@ (8002e4c <HAL_ADC_Init+0x2d4>)
 8002c6c:	4978      	ldr	r1, [pc, #480]	@ (8002e50 <HAL_ADC_Init+0x2d8>)
 8002c6e:	400a      	ands	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	4b76      	ldr	r3, [pc, #472]	@ (8002e4c <HAL_ADC_Init+0x2d4>)
 8002c74:	6819      	ldr	r1, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	4b74      	ldr	r3, [pc, #464]	@ (8002e4c <HAL_ADC_Init+0x2d4>)
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2118      	movs	r1, #24
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68d9      	ldr	r1, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002ca2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e4c <HAL_ADC_Init+0x2d4>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4b69      	ldr	r3, [pc, #420]	@ (8002e4c <HAL_ADC_Init+0x2d4>)
 8002ca8:	496a      	ldr	r1, [pc, #424]	@ (8002e54 <HAL_ADC_Init+0x2dc>)
 8002caa:	400a      	ands	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8002cae:	4b67      	ldr	r3, [pc, #412]	@ (8002e4c <HAL_ADC_Init+0x2d4>)
 8002cb0:	6819      	ldr	r1, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb6:	065a      	lsls	r2, r3, #25
 8002cb8:	4b64      	ldr	r3, [pc, #400]	@ (8002e4c <HAL_ADC_Init+0x2d4>)
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	2380      	movs	r3, #128	@ 0x80
 8002cc6:	055b      	lsls	r3, r3, #21
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d108      	bne.n	8002cde <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2180      	movs	r1, #128	@ 0x80
 8002cd8:	0549      	lsls	r1, r1, #21
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	495b      	ldr	r1, [pc, #364]	@ (8002e58 <HAL_ADC_Init+0x2e0>)
 8002cea:	400a      	ands	r2, r1
 8002cec:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68d9      	ldr	r1, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_Init+0x18c>
 8002d00:	2304      	movs	r3, #4
 8002d02:	e000      	b.n	8002d06 <HAL_ADC_Init+0x18e>
 8002d04:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002d06:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2020      	movs	r0, #32
 8002d0c:	5c1b      	ldrb	r3, [r3, r0]
 8002d0e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002d10:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	202c      	movs	r0, #44	@ 0x2c
 8002d16:	5c1b      	ldrb	r3, [r3, r0]
 8002d18:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d1a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002d20:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002d28:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002d30:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d3e:	23c2      	movs	r3, #194	@ 0xc2
 8002d40:	33ff      	adds	r3, #255	@ 0xff
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d00b      	beq.n	8002d5e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68d9      	ldr	r1, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2221      	movs	r2, #33	@ 0x21
 8002d62:	5c9b      	ldrb	r3, [r3, r2]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d11a      	bne.n	8002d9e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	5c9b      	ldrb	r3, [r3, r2]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2180      	movs	r1, #128	@ 0x80
 8002d7e:	0249      	lsls	r1, r1, #9
 8002d80:	430a      	orrs	r2, r1
 8002d82:	60da      	str	r2, [r3, #12]
 8002d84:	e00b      	b.n	8002d9e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d96:	2201      	movs	r2, #1
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d11f      	bne.n	8002de6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	492a      	ldr	r1, [pc, #168]	@ (8002e5c <HAL_ADC_Init+0x2e4>)
 8002db2:	400a      	ands	r2, r1
 8002db4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6919      	ldr	r1, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002dc4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8002dca:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2101      	movs	r1, #1
 8002de0:	430a      	orrs	r2, r1
 8002de2:	611a      	str	r2, [r3, #16]
 8002de4:	e00e      	b.n	8002e04 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	2201      	movs	r2, #1
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d107      	bne.n	8002e04 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2101      	movs	r1, #1
 8002e00:	438a      	bics	r2, r1
 8002e02:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2107      	movs	r1, #7
 8002e10:	438a      	bics	r2, r1
 8002e12:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6959      	ldr	r1, [r3, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e30:	2203      	movs	r2, #3
 8002e32:	4393      	bics	r3, r2
 8002e34:	2201      	movs	r2, #1
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	0018      	movs	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b002      	add	sp, #8
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			@ (mov r8, r8)
 8002e48:	fffffefd 	.word	0xfffffefd
 8002e4c:	40012708 	.word	0x40012708
 8002e50:	ffc3ffff 	.word	0xffc3ffff
 8002e54:	fdffffff 	.word	0xfdffffff
 8002e58:	fffe0219 	.word	0xfffe0219
 8002e5c:	fffffc03 	.word	0xfffffc03

08002e60 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e68:	230f      	movs	r3, #15
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2204      	movs	r2, #4
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d138      	bne.n	8002eee <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2250      	movs	r2, #80	@ 0x50
 8002e80:	5c9b      	ldrb	r3, [r3, r2]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_Start+0x2a>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e038      	b.n	8002efc <HAL_ADC_Start+0x9c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2250      	movs	r2, #80	@ 0x50
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d007      	beq.n	8002eaa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002e9a:	230f      	movs	r3, #15
 8002e9c:	18fc      	adds	r4, r7, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f000 f9b9 	bl	8003218 <ADC_Enable>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002eaa:	230f      	movs	r3, #15
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d120      	bne.n	8002ef6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb8:	4a12      	ldr	r2, [pc, #72]	@ (8002f04 <HAL_ADC_Start+0xa4>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2280      	movs	r2, #128	@ 0x80
 8002ebe:	0052      	lsls	r2, r2, #1
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2250      	movs	r2, #80	@ 0x50
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	221c      	movs	r2, #28
 8002eda:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2104      	movs	r1, #4
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	e003      	b.n	8002ef6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002eee:	230f      	movs	r3, #15
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ef6:	230f      	movs	r3, #15
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	781b      	ldrb	r3, [r3, #0]
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b005      	add	sp, #20
 8002f02:	bd90      	pop	{r4, r7, pc}
 8002f04:	fffff0fe 	.word	0xfffff0fe

08002f08 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002f08:	b5b0      	push	{r4, r5, r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f10:	230f      	movs	r3, #15
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2250      	movs	r2, #80	@ 0x50
 8002f1c:	5c9b      	ldrb	r3, [r3, r2]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_Stop+0x1e>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e029      	b.n	8002f7a <HAL_ADC_Stop+0x72>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2250      	movs	r2, #80	@ 0x50
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002f2e:	250f      	movs	r5, #15
 8002f30:	197c      	adds	r4, r7, r5
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f000 fa3e 	bl	80033b6 <ADC_ConversionStop>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f3e:	197b      	adds	r3, r7, r5
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d112      	bne.n	8002f6c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002f46:	197c      	adds	r4, r7, r5
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f000 f9cc 	bl	80032e8 <ADC_Disable>
 8002f50:	0003      	movs	r3, r0
 8002f52:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f54:	197b      	adds	r3, r7, r5
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d107      	bne.n	8002f6c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f60:	4a08      	ldr	r2, [pc, #32]	@ (8002f84 <HAL_ADC_Stop+0x7c>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	2201      	movs	r2, #1
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2250      	movs	r2, #80	@ 0x50
 8002f70:	2100      	movs	r1, #0
 8002f72:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002f74:	230f      	movs	r3, #15
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	781b      	ldrb	r3, [r3, #0]
}
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b004      	add	sp, #16
 8002f80:	bdb0      	pop	{r4, r5, r7, pc}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	fffffefe 	.word	0xfffffefe

08002f88 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d102      	bne.n	8002fa8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e014      	b.n	8002fd2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d10b      	bne.n	8002fce <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fba:	2220      	movs	r2, #32
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2250      	movs	r2, #80	@ 0x50
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e072      	b.n	80030b4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002fce:	230c      	movs	r3, #12
 8002fd0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002fd2:	f7ff fd7f 	bl	8002ad4 <HAL_GetTick>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002fda:	e01f      	b.n	800301c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	d01c      	beq.n	800301c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <HAL_ADC_PollForConversion+0x70>
 8002fe8:	f7ff fd74 	bl	8002ad4 <HAL_GetTick>
 8002fec:	0002      	movs	r2, r0
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d211      	bcs.n	800301c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4013      	ands	r3, r2
 8003002:	d10b      	bne.n	800301c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003008:	2204      	movs	r2, #4
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2250      	movs	r2, #80	@ 0x50
 8003014:	2100      	movs	r1, #0
 8003016:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e04b      	b.n	80030b4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4013      	ands	r3, r2
 8003026:	d0d9      	beq.n	8002fdc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302c:	2280      	movs	r2, #128	@ 0x80
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	23c0      	movs	r3, #192	@ 0xc0
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	4013      	ands	r3, r2
 8003042:	d12e      	bne.n	80030a2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800304a:	2b00      	cmp	r3, #0
 800304c:	d129      	bne.n	80030a2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2208      	movs	r2, #8
 8003056:	4013      	ands	r3, r2
 8003058:	2b08      	cmp	r3, #8
 800305a:	d122      	bne.n	80030a2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2204      	movs	r2, #4
 8003064:	4013      	ands	r3, r2
 8003066:	d110      	bne.n	800308a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	210c      	movs	r1, #12
 8003074:	438a      	bics	r2, r1
 8003076:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307c:	4a0f      	ldr	r2, [pc, #60]	@ (80030bc <HAL_ADC_PollForConversion+0x134>)
 800307e:	4013      	ands	r3, r2
 8003080:	2201      	movs	r2, #1
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	@ 0x54
 8003088:	e00b      	b.n	80030a2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308e:	2220      	movs	r2, #32
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309a:	2201      	movs	r2, #1
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	220c      	movs	r2, #12
 80030b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b004      	add	sp, #16
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	fffffefe 	.word	0xfffffefe

080030c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b002      	add	sp, #8
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2250      	movs	r2, #80	@ 0x50
 80030e6:	5c9b      	ldrb	r3, [r3, r2]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x18>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e085      	b.n	80031fc <HAL_ADC_ConfigChannel+0x124>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2250      	movs	r2, #80	@ 0x50
 80030f4:	2101      	movs	r1, #1
 80030f6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2204      	movs	r2, #4
 8003100:	4013      	ands	r3, r2
 8003102:	d00b      	beq.n	800311c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003108:	2220      	movs	r2, #32
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2250      	movs	r2, #80	@ 0x50
 8003114:	2100      	movs	r1, #0
 8003116:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e06f      	b.n	80031fc <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a38      	ldr	r2, [pc, #224]	@ (8003204 <HAL_ADC_ConfigChannel+0x12c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d035      	beq.n	8003192 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	035b      	lsls	r3, r3, #13
 8003132:	0b5a      	lsrs	r2, r3, #13
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	2380      	movs	r3, #128	@ 0x80
 8003142:	02db      	lsls	r3, r3, #11
 8003144:	4013      	ands	r3, r2
 8003146:	d009      	beq.n	800315c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8003148:	4b2f      	ldr	r3, [pc, #188]	@ (8003208 <HAL_ADC_ConfigChannel+0x130>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b2e      	ldr	r3, [pc, #184]	@ (8003208 <HAL_ADC_ConfigChannel+0x130>)
 800314e:	2180      	movs	r1, #128	@ 0x80
 8003150:	0409      	lsls	r1, r1, #16
 8003152:	430a      	orrs	r2, r1
 8003154:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003156:	200a      	movs	r0, #10
 8003158:	f000 f97a 	bl	8003450 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	2380      	movs	r3, #128	@ 0x80
 8003162:	029b      	lsls	r3, r3, #10
 8003164:	4013      	ands	r3, r2
 8003166:	d006      	beq.n	8003176 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8003168:	4b27      	ldr	r3, [pc, #156]	@ (8003208 <HAL_ADC_ConfigChannel+0x130>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b26      	ldr	r3, [pc, #152]	@ (8003208 <HAL_ADC_ConfigChannel+0x130>)
 800316e:	2180      	movs	r1, #128	@ 0x80
 8003170:	03c9      	lsls	r1, r1, #15
 8003172:	430a      	orrs	r2, r1
 8003174:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	2380      	movs	r3, #128	@ 0x80
 800317c:	025b      	lsls	r3, r3, #9
 800317e:	4013      	ands	r3, r2
 8003180:	d037      	beq.n	80031f2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8003182:	4b21      	ldr	r3, [pc, #132]	@ (8003208 <HAL_ADC_ConfigChannel+0x130>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b20      	ldr	r3, [pc, #128]	@ (8003208 <HAL_ADC_ConfigChannel+0x130>)
 8003188:	2180      	movs	r1, #128	@ 0x80
 800318a:	0449      	lsls	r1, r1, #17
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e02f      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	035b      	lsls	r3, r3, #13
 800319e:	0b5b      	lsrs	r3, r3, #13
 80031a0:	43d9      	mvns	r1, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	400a      	ands	r2, r1
 80031a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	2380      	movs	r3, #128	@ 0x80
 80031b0:	02db      	lsls	r3, r3, #11
 80031b2:	4013      	ands	r3, r2
 80031b4:	d005      	beq.n	80031c2 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80031b6:	4b14      	ldr	r3, [pc, #80]	@ (8003208 <HAL_ADC_ConfigChannel+0x130>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4b13      	ldr	r3, [pc, #76]	@ (8003208 <HAL_ADC_ConfigChannel+0x130>)
 80031bc:	4913      	ldr	r1, [pc, #76]	@ (800320c <HAL_ADC_ConfigChannel+0x134>)
 80031be:	400a      	ands	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	2380      	movs	r3, #128	@ 0x80
 80031c8:	029b      	lsls	r3, r3, #10
 80031ca:	4013      	ands	r3, r2
 80031cc:	d005      	beq.n	80031da <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80031ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003208 <HAL_ADC_ConfigChannel+0x130>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003208 <HAL_ADC_ConfigChannel+0x130>)
 80031d4:	490e      	ldr	r1, [pc, #56]	@ (8003210 <HAL_ADC_ConfigChannel+0x138>)
 80031d6:	400a      	ands	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	025b      	lsls	r3, r3, #9
 80031e2:	4013      	ands	r3, r2
 80031e4:	d005      	beq.n	80031f2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 80031e6:	4b08      	ldr	r3, [pc, #32]	@ (8003208 <HAL_ADC_ConfigChannel+0x130>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	4b07      	ldr	r3, [pc, #28]	@ (8003208 <HAL_ADC_ConfigChannel+0x130>)
 80031ec:	4909      	ldr	r1, [pc, #36]	@ (8003214 <HAL_ADC_ConfigChannel+0x13c>)
 80031ee:	400a      	ands	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2250      	movs	r2, #80	@ 0x50
 80031f6:	2100      	movs	r1, #0
 80031f8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	0018      	movs	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	b002      	add	sp, #8
 8003202:	bd80      	pop	{r7, pc}
 8003204:	00001001 	.word	0x00001001
 8003208:	40012708 	.word	0x40012708
 800320c:	ff7fffff 	.word	0xff7fffff
 8003210:	ffbfffff 	.word	0xffbfffff
 8003214:	feffffff 	.word	0xfeffffff

08003218 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2203      	movs	r2, #3
 800322c:	4013      	ands	r3, r2
 800322e:	2b01      	cmp	r3, #1
 8003230:	d108      	bne.n	8003244 <ADC_Enable+0x2c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2201      	movs	r2, #1
 800323a:	4013      	ands	r3, r2
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <ADC_Enable+0x2c>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <ADC_Enable+0x2e>
 8003244:	2300      	movs	r3, #0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d146      	bne.n	80032d8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a24      	ldr	r2, [pc, #144]	@ (80032e4 <ADC_Enable+0xcc>)
 8003252:	4013      	ands	r3, r2
 8003254:	d00d      	beq.n	8003272 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325a:	2210      	movs	r2, #16
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003266:	2201      	movs	r2, #1
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e033      	b.n	80032da <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2101      	movs	r1, #1
 800327e:	430a      	orrs	r2, r1
 8003280:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003282:	2001      	movs	r0, #1
 8003284:	f000 f8e4 	bl	8003450 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003288:	f7ff fc24 	bl	8002ad4 <HAL_GetTick>
 800328c:	0003      	movs	r3, r0
 800328e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003290:	e01b      	b.n	80032ca <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003292:	f7ff fc1f 	bl	8002ad4 <HAL_GetTick>
 8003296:	0002      	movs	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b0a      	cmp	r3, #10
 800329e:	d914      	bls.n	80032ca <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2201      	movs	r2, #1
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d00d      	beq.n	80032ca <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b2:	2210      	movs	r2, #16
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032be:	2201      	movs	r2, #1
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e007      	b.n	80032da <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2201      	movs	r2, #1
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d1dc      	bne.n	8003292 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b004      	add	sp, #16
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	80000017 	.word	0x80000017

080032e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2203      	movs	r2, #3
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d108      	bne.n	8003314 <ADC_Disable+0x2c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2201      	movs	r2, #1
 800330a:	4013      	ands	r3, r2
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <ADC_Disable+0x2c>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <ADC_Disable+0x2e>
 8003314:	2300      	movs	r3, #0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d048      	beq.n	80033ac <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2205      	movs	r2, #5
 8003322:	4013      	ands	r3, r2
 8003324:	2b01      	cmp	r3, #1
 8003326:	d110      	bne.n	800334a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2102      	movs	r1, #2
 8003334:	430a      	orrs	r2, r1
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2203      	movs	r2, #3
 800333e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003340:	f7ff fbc8 	bl	8002ad4 <HAL_GetTick>
 8003344:	0003      	movs	r3, r0
 8003346:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003348:	e029      	b.n	800339e <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334e:	2210      	movs	r2, #16
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335a:	2201      	movs	r2, #1
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e023      	b.n	80033ae <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003366:	f7ff fbb5 	bl	8002ad4 <HAL_GetTick>
 800336a:	0002      	movs	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b0a      	cmp	r3, #10
 8003372:	d914      	bls.n	800339e <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2201      	movs	r2, #1
 800337c:	4013      	ands	r3, r2
 800337e:	2b01      	cmp	r3, #1
 8003380:	d10d      	bne.n	800339e <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003386:	2210      	movs	r2, #16
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003392:	2201      	movs	r2, #1
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e007      	b.n	80033ae <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2201      	movs	r2, #1
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d0dc      	beq.n	8003366 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b004      	add	sp, #16
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2204      	movs	r2, #4
 80033ca:	4013      	ands	r3, r2
 80033cc:	d03a      	beq.n	8003444 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2204      	movs	r2, #4
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d10d      	bne.n	80033f8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2202      	movs	r2, #2
 80033e4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80033e6:	d107      	bne.n	80033f8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2110      	movs	r1, #16
 80033f4:	430a      	orrs	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033f8:	f7ff fb6c 	bl	8002ad4 <HAL_GetTick>
 80033fc:	0003      	movs	r3, r0
 80033fe:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003400:	e01a      	b.n	8003438 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003402:	f7ff fb67 	bl	8002ad4 <HAL_GetTick>
 8003406:	0002      	movs	r2, r0
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b0a      	cmp	r3, #10
 800340e:	d913      	bls.n	8003438 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2204      	movs	r2, #4
 8003418:	4013      	ands	r3, r2
 800341a:	d00d      	beq.n	8003438 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003420:	2210      	movs	r2, #16
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342c:	2201      	movs	r2, #1
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e006      	b.n	8003446 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2204      	movs	r2, #4
 8003440:	4013      	ands	r3, r2
 8003442:	d1de      	bne.n	8003402 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	0018      	movs	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	b004      	add	sp, #16
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003458:	4b0b      	ldr	r3, [pc, #44]	@ (8003488 <ADC_DelayMicroSecond+0x38>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	490b      	ldr	r1, [pc, #44]	@ (800348c <ADC_DelayMicroSecond+0x3c>)
 800345e:	0018      	movs	r0, r3
 8003460:	f7fc fe64 	bl	800012c <__udivsi3>
 8003464:	0003      	movs	r3, r0
 8003466:	001a      	movs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4353      	muls	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800346e:	e002      	b.n	8003476 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3b01      	subs	r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f9      	bne.n	8003470 <ADC_DelayMicroSecond+0x20>
  }
}
 800347c:	46c0      	nop			@ (mov r8, r8)
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b004      	add	sp, #16
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	20000008 	.word	0x20000008
 800348c:	000f4240 	.word	0x000f4240

08003490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	0002      	movs	r2, r0
 8003498:	1dfb      	adds	r3, r7, #7
 800349a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800349c:	1dfb      	adds	r3, r7, #7
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80034a2:	d809      	bhi.n	80034b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034a4:	1dfb      	adds	r3, r7, #7
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	001a      	movs	r2, r3
 80034aa:	231f      	movs	r3, #31
 80034ac:	401a      	ands	r2, r3
 80034ae:	4b04      	ldr	r3, [pc, #16]	@ (80034c0 <__NVIC_EnableIRQ+0x30>)
 80034b0:	2101      	movs	r1, #1
 80034b2:	4091      	lsls	r1, r2
 80034b4:	000a      	movs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
  }
}
 80034b8:	46c0      	nop			@ (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	e000e100 	.word	0xe000e100

080034c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	0002      	movs	r2, r0
 80034cc:	6039      	str	r1, [r7, #0]
 80034ce:	1dfb      	adds	r3, r7, #7
 80034d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034d2:	1dfb      	adds	r3, r7, #7
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80034d8:	d828      	bhi.n	800352c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034da:	4a2f      	ldr	r2, [pc, #188]	@ (8003598 <__NVIC_SetPriority+0xd4>)
 80034dc:	1dfb      	adds	r3, r7, #7
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	b25b      	sxtb	r3, r3
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	33c0      	adds	r3, #192	@ 0xc0
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	589b      	ldr	r3, [r3, r2]
 80034ea:	1dfa      	adds	r2, r7, #7
 80034ec:	7812      	ldrb	r2, [r2, #0]
 80034ee:	0011      	movs	r1, r2
 80034f0:	2203      	movs	r2, #3
 80034f2:	400a      	ands	r2, r1
 80034f4:	00d2      	lsls	r2, r2, #3
 80034f6:	21ff      	movs	r1, #255	@ 0xff
 80034f8:	4091      	lsls	r1, r2
 80034fa:	000a      	movs	r2, r1
 80034fc:	43d2      	mvns	r2, r2
 80034fe:	401a      	ands	r2, r3
 8003500:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	019b      	lsls	r3, r3, #6
 8003506:	22ff      	movs	r2, #255	@ 0xff
 8003508:	401a      	ands	r2, r3
 800350a:	1dfb      	adds	r3, r7, #7
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	0018      	movs	r0, r3
 8003510:	2303      	movs	r3, #3
 8003512:	4003      	ands	r3, r0
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003518:	481f      	ldr	r0, [pc, #124]	@ (8003598 <__NVIC_SetPriority+0xd4>)
 800351a:	1dfb      	adds	r3, r7, #7
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	b25b      	sxtb	r3, r3
 8003520:	089b      	lsrs	r3, r3, #2
 8003522:	430a      	orrs	r2, r1
 8003524:	33c0      	adds	r3, #192	@ 0xc0
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800352a:	e031      	b.n	8003590 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800352c:	4a1b      	ldr	r2, [pc, #108]	@ (800359c <__NVIC_SetPriority+0xd8>)
 800352e:	1dfb      	adds	r3, r7, #7
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	0019      	movs	r1, r3
 8003534:	230f      	movs	r3, #15
 8003536:	400b      	ands	r3, r1
 8003538:	3b08      	subs	r3, #8
 800353a:	089b      	lsrs	r3, r3, #2
 800353c:	3306      	adds	r3, #6
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	18d3      	adds	r3, r2, r3
 8003542:	3304      	adds	r3, #4
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	1dfa      	adds	r2, r7, #7
 8003548:	7812      	ldrb	r2, [r2, #0]
 800354a:	0011      	movs	r1, r2
 800354c:	2203      	movs	r2, #3
 800354e:	400a      	ands	r2, r1
 8003550:	00d2      	lsls	r2, r2, #3
 8003552:	21ff      	movs	r1, #255	@ 0xff
 8003554:	4091      	lsls	r1, r2
 8003556:	000a      	movs	r2, r1
 8003558:	43d2      	mvns	r2, r2
 800355a:	401a      	ands	r2, r3
 800355c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	019b      	lsls	r3, r3, #6
 8003562:	22ff      	movs	r2, #255	@ 0xff
 8003564:	401a      	ands	r2, r3
 8003566:	1dfb      	adds	r3, r7, #7
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	0018      	movs	r0, r3
 800356c:	2303      	movs	r3, #3
 800356e:	4003      	ands	r3, r0
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003574:	4809      	ldr	r0, [pc, #36]	@ (800359c <__NVIC_SetPriority+0xd8>)
 8003576:	1dfb      	adds	r3, r7, #7
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	001c      	movs	r4, r3
 800357c:	230f      	movs	r3, #15
 800357e:	4023      	ands	r3, r4
 8003580:	3b08      	subs	r3, #8
 8003582:	089b      	lsrs	r3, r3, #2
 8003584:	430a      	orrs	r2, r1
 8003586:	3306      	adds	r3, #6
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	18c3      	adds	r3, r0, r3
 800358c:	3304      	adds	r3, #4
 800358e:	601a      	str	r2, [r3, #0]
}
 8003590:	46c0      	nop			@ (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b003      	add	sp, #12
 8003596:	bd90      	pop	{r4, r7, pc}
 8003598:	e000e100 	.word	0xe000e100
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80035a4:	f3bf 8f4f 	dsb	sy
}
 80035a8:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035aa:	4b04      	ldr	r3, [pc, #16]	@ (80035bc <__NVIC_SystemReset+0x1c>)
 80035ac:	4a04      	ldr	r2, [pc, #16]	@ (80035c0 <__NVIC_SystemReset+0x20>)
 80035ae:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80035b0:	f3bf 8f4f 	dsb	sy
}
 80035b4:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	e7fd      	b.n	80035b6 <__NVIC_SystemReset+0x16>
 80035ba:	46c0      	nop			@ (mov r8, r8)
 80035bc:	e000ed00 	.word	0xe000ed00
 80035c0:	05fa0004 	.word	0x05fa0004

080035c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	1e5a      	subs	r2, r3, #1
 80035d0:	2380      	movs	r3, #128	@ 0x80
 80035d2:	045b      	lsls	r3, r3, #17
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d301      	bcc.n	80035dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035d8:	2301      	movs	r3, #1
 80035da:	e010      	b.n	80035fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <SysTick_Config+0x44>)
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	3a01      	subs	r2, #1
 80035e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035e4:	2301      	movs	r3, #1
 80035e6:	425b      	negs	r3, r3
 80035e8:	2103      	movs	r1, #3
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7ff ff6a 	bl	80034c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f0:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <SysTick_Config+0x44>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035f6:	4b04      	ldr	r3, [pc, #16]	@ (8003608 <SysTick_Config+0x44>)
 80035f8:	2207      	movs	r2, #7
 80035fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b002      	add	sp, #8
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	e000e010 	.word	0xe000e010

0800360c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	210f      	movs	r1, #15
 8003618:	187b      	adds	r3, r7, r1
 800361a:	1c02      	adds	r2, r0, #0
 800361c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	187b      	adds	r3, r7, r1
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	b25b      	sxtb	r3, r3
 8003626:	0011      	movs	r1, r2
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff ff4b 	bl	80034c4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	46bd      	mov	sp, r7
 8003632:	b004      	add	sp, #16
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	0002      	movs	r2, r0
 800363e:	1dfb      	adds	r3, r7, #7
 8003640:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003642:	1dfb      	adds	r3, r7, #7
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	b25b      	sxtb	r3, r3
 8003648:	0018      	movs	r0, r3
 800364a:	f7ff ff21 	bl	8003490 <__NVIC_EnableIRQ>
}
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	46bd      	mov	sp, r7
 8003652:	b002      	add	sp, #8
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800365a:	f7ff ffa1 	bl	80035a0 <__NVIC_SystemReset>

0800365e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	0018      	movs	r0, r3
 800366a:	f7ff ffab 	bl	80035c4 <SysTick_Config>
 800366e:	0003      	movs	r3, r0
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003680:	230f      	movs	r3, #15
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2225      	movs	r2, #37	@ 0x25
 800368c:	5c9b      	ldrb	r3, [r3, r2]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d008      	beq.n	80036a6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2204      	movs	r2, #4
 8003698:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2224      	movs	r2, #36	@ 0x24
 800369e:	2100      	movs	r1, #0
 80036a0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e024      	b.n	80036f0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	210e      	movs	r1, #14
 80036b2:	438a      	bics	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2101      	movs	r1, #1
 80036c2:	438a      	bics	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ca:	221c      	movs	r2, #28
 80036cc:	401a      	ands	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	2101      	movs	r1, #1
 80036d4:	4091      	lsls	r1, r2
 80036d6:	000a      	movs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2225      	movs	r2, #37	@ 0x25
 80036de:	2101      	movs	r1, #1
 80036e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2224      	movs	r2, #36	@ 0x24
 80036e6:	2100      	movs	r1, #0
 80036e8:	5499      	strb	r1, [r3, r2]

    return status;
 80036ea:	230f      	movs	r3, #15
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003704:	0018      	movs	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	b002      	add	sp, #8
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003722:	e155      	b.n	80039d0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2101      	movs	r1, #1
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4091      	lsls	r1, r2
 800372e:	000a      	movs	r2, r1
 8003730:	4013      	ands	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d100      	bne.n	800373c <HAL_GPIO_Init+0x30>
 800373a:	e146      	b.n	80039ca <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2203      	movs	r2, #3
 8003742:	4013      	ands	r3, r2
 8003744:	2b01      	cmp	r3, #1
 8003746:	d005      	beq.n	8003754 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2203      	movs	r2, #3
 800374e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003750:	2b02      	cmp	r3, #2
 8003752:	d130      	bne.n	80037b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2203      	movs	r2, #3
 8003760:	409a      	lsls	r2, r3
 8003762:	0013      	movs	r3, r2
 8003764:	43da      	mvns	r2, r3
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	409a      	lsls	r2, r3
 8003776:	0013      	movs	r3, r2
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800378a:	2201      	movs	r2, #1
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	409a      	lsls	r2, r3
 8003790:	0013      	movs	r3, r2
 8003792:	43da      	mvns	r2, r3
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	2201      	movs	r2, #1
 80037a2:	401a      	ands	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	409a      	lsls	r2, r3
 80037a8:	0013      	movs	r3, r2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2203      	movs	r2, #3
 80037bc:	4013      	ands	r3, r2
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d017      	beq.n	80037f2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	2203      	movs	r2, #3
 80037ce:	409a      	lsls	r2, r3
 80037d0:	0013      	movs	r3, r2
 80037d2:	43da      	mvns	r2, r3
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4013      	ands	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	409a      	lsls	r2, r3
 80037e4:	0013      	movs	r3, r2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2203      	movs	r2, #3
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d123      	bne.n	8003846 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	08da      	lsrs	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3208      	adds	r2, #8
 8003806:	0092      	lsls	r2, r2, #2
 8003808:	58d3      	ldr	r3, [r2, r3]
 800380a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2207      	movs	r2, #7
 8003810:	4013      	ands	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	220f      	movs	r2, #15
 8003816:	409a      	lsls	r2, r3
 8003818:	0013      	movs	r3, r2
 800381a:	43da      	mvns	r2, r3
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2107      	movs	r1, #7
 800382a:	400b      	ands	r3, r1
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	409a      	lsls	r2, r3
 8003830:	0013      	movs	r3, r2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	08da      	lsrs	r2, r3, #3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3208      	adds	r2, #8
 8003840:	0092      	lsls	r2, r2, #2
 8003842:	6939      	ldr	r1, [r7, #16]
 8003844:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	2203      	movs	r2, #3
 8003852:	409a      	lsls	r2, r3
 8003854:	0013      	movs	r3, r2
 8003856:	43da      	mvns	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2203      	movs	r2, #3
 8003864:	401a      	ands	r2, r3
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	409a      	lsls	r2, r3
 800386c:	0013      	movs	r3, r2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	23c0      	movs	r3, #192	@ 0xc0
 8003880:	029b      	lsls	r3, r3, #10
 8003882:	4013      	ands	r3, r2
 8003884:	d100      	bne.n	8003888 <HAL_GPIO_Init+0x17c>
 8003886:	e0a0      	b.n	80039ca <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003888:	4b57      	ldr	r3, [pc, #348]	@ (80039e8 <HAL_GPIO_Init+0x2dc>)
 800388a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800388c:	4b56      	ldr	r3, [pc, #344]	@ (80039e8 <HAL_GPIO_Init+0x2dc>)
 800388e:	2101      	movs	r1, #1
 8003890:	430a      	orrs	r2, r1
 8003892:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003894:	4a55      	ldr	r2, [pc, #340]	@ (80039ec <HAL_GPIO_Init+0x2e0>)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	3302      	adds	r3, #2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	589b      	ldr	r3, [r3, r2]
 80038a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2203      	movs	r2, #3
 80038a6:	4013      	ands	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	220f      	movs	r2, #15
 80038ac:	409a      	lsls	r2, r3
 80038ae:	0013      	movs	r3, r2
 80038b0:	43da      	mvns	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	23a0      	movs	r3, #160	@ 0xa0
 80038bc:	05db      	lsls	r3, r3, #23
 80038be:	429a      	cmp	r2, r3
 80038c0:	d01f      	beq.n	8003902 <HAL_GPIO_Init+0x1f6>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4a      	ldr	r2, [pc, #296]	@ (80039f0 <HAL_GPIO_Init+0x2e4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d019      	beq.n	80038fe <HAL_GPIO_Init+0x1f2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a49      	ldr	r2, [pc, #292]	@ (80039f4 <HAL_GPIO_Init+0x2e8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_GPIO_Init+0x1ee>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a48      	ldr	r2, [pc, #288]	@ (80039f8 <HAL_GPIO_Init+0x2ec>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00d      	beq.n	80038f6 <HAL_GPIO_Init+0x1ea>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a47      	ldr	r2, [pc, #284]	@ (80039fc <HAL_GPIO_Init+0x2f0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <HAL_GPIO_Init+0x1e6>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a46      	ldr	r2, [pc, #280]	@ (8003a00 <HAL_GPIO_Init+0x2f4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d101      	bne.n	80038ee <HAL_GPIO_Init+0x1e2>
 80038ea:	2305      	movs	r3, #5
 80038ec:	e00a      	b.n	8003904 <HAL_GPIO_Init+0x1f8>
 80038ee:	2306      	movs	r3, #6
 80038f0:	e008      	b.n	8003904 <HAL_GPIO_Init+0x1f8>
 80038f2:	2304      	movs	r3, #4
 80038f4:	e006      	b.n	8003904 <HAL_GPIO_Init+0x1f8>
 80038f6:	2303      	movs	r3, #3
 80038f8:	e004      	b.n	8003904 <HAL_GPIO_Init+0x1f8>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e002      	b.n	8003904 <HAL_GPIO_Init+0x1f8>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_GPIO_Init+0x1f8>
 8003902:	2300      	movs	r3, #0
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	2103      	movs	r1, #3
 8003908:	400a      	ands	r2, r1
 800390a:	0092      	lsls	r2, r2, #2
 800390c:	4093      	lsls	r3, r2
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003914:	4935      	ldr	r1, [pc, #212]	@ (80039ec <HAL_GPIO_Init+0x2e0>)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	3302      	adds	r3, #2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003922:	4b38      	ldr	r3, [pc, #224]	@ (8003a04 <HAL_GPIO_Init+0x2f8>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	43da      	mvns	r2, r3
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4013      	ands	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	2380      	movs	r3, #128	@ 0x80
 8003938:	035b      	lsls	r3, r3, #13
 800393a:	4013      	ands	r3, r2
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003946:	4b2f      	ldr	r3, [pc, #188]	@ (8003a04 <HAL_GPIO_Init+0x2f8>)
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800394c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a04 <HAL_GPIO_Init+0x2f8>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	43da      	mvns	r2, r3
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4013      	ands	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	2380      	movs	r3, #128	@ 0x80
 8003962:	039b      	lsls	r3, r3, #14
 8003964:	4013      	ands	r3, r2
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003970:	4b24      	ldr	r3, [pc, #144]	@ (8003a04 <HAL_GPIO_Init+0x2f8>)
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003976:	4b23      	ldr	r3, [pc, #140]	@ (8003a04 <HAL_GPIO_Init+0x2f8>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	43da      	mvns	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	029b      	lsls	r3, r3, #10
 800398e:	4013      	ands	r3, r2
 8003990:	d003      	beq.n	800399a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800399a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a04 <HAL_GPIO_Init+0x2f8>)
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039a0:	4b18      	ldr	r3, [pc, #96]	@ (8003a04 <HAL_GPIO_Init+0x2f8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	43da      	mvns	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4013      	ands	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	2380      	movs	r3, #128	@ 0x80
 80039b6:	025b      	lsls	r3, r3, #9
 80039b8:	4013      	ands	r3, r2
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a04 <HAL_GPIO_Init+0x2f8>)
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	3301      	adds	r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	40da      	lsrs	r2, r3
 80039d8:	1e13      	subs	r3, r2, #0
 80039da:	d000      	beq.n	80039de <HAL_GPIO_Init+0x2d2>
 80039dc:	e6a2      	b.n	8003724 <HAL_GPIO_Init+0x18>
  }
}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	46c0      	nop			@ (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b006      	add	sp, #24
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40010000 	.word	0x40010000
 80039f0:	50000400 	.word	0x50000400
 80039f4:	50000800 	.word	0x50000800
 80039f8:	50000c00 	.word	0x50000c00
 80039fc:	50001000 	.word	0x50001000
 8003a00:	50001c00 	.word	0x50001c00
 8003a04:	40010400 	.word	0x40010400

08003a08 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8003a1e:	e0bc      	b.n	8003b9a <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8003a20:	2201      	movs	r2, #1
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	409a      	lsls	r2, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d100      	bne.n	8003a34 <HAL_GPIO_DeInit+0x2c>
 8003a32:	e0af      	b.n	8003b94 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8003a34:	4a5e      	ldr	r2, [pc, #376]	@ (8003bb0 <HAL_GPIO_DeInit+0x1a8>)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	089b      	lsrs	r3, r3, #2
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	589b      	ldr	r3, [r3, r2]
 8003a40:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2203      	movs	r2, #3
 8003a46:	4013      	ands	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	220f      	movs	r2, #15
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	23a0      	movs	r3, #160	@ 0xa0
 8003a58:	05db      	lsls	r3, r3, #23
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d01f      	beq.n	8003a9e <HAL_GPIO_DeInit+0x96>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a54      	ldr	r2, [pc, #336]	@ (8003bb4 <HAL_GPIO_DeInit+0x1ac>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d019      	beq.n	8003a9a <HAL_GPIO_DeInit+0x92>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a53      	ldr	r2, [pc, #332]	@ (8003bb8 <HAL_GPIO_DeInit+0x1b0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <HAL_GPIO_DeInit+0x8e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a52      	ldr	r2, [pc, #328]	@ (8003bbc <HAL_GPIO_DeInit+0x1b4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00d      	beq.n	8003a92 <HAL_GPIO_DeInit+0x8a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a51      	ldr	r2, [pc, #324]	@ (8003bc0 <HAL_GPIO_DeInit+0x1b8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <HAL_GPIO_DeInit+0x86>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a50      	ldr	r2, [pc, #320]	@ (8003bc4 <HAL_GPIO_DeInit+0x1bc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_GPIO_DeInit+0x82>
 8003a86:	2305      	movs	r3, #5
 8003a88:	e00a      	b.n	8003aa0 <HAL_GPIO_DeInit+0x98>
 8003a8a:	2306      	movs	r3, #6
 8003a8c:	e008      	b.n	8003aa0 <HAL_GPIO_DeInit+0x98>
 8003a8e:	2304      	movs	r3, #4
 8003a90:	e006      	b.n	8003aa0 <HAL_GPIO_DeInit+0x98>
 8003a92:	2303      	movs	r3, #3
 8003a94:	e004      	b.n	8003aa0 <HAL_GPIO_DeInit+0x98>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e002      	b.n	8003aa0 <HAL_GPIO_DeInit+0x98>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_GPIO_DeInit+0x98>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	2103      	movs	r1, #3
 8003aa4:	400a      	ands	r2, r1
 8003aa6:	0092      	lsls	r2, r2, #2
 8003aa8:	4093      	lsls	r3, r2
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d132      	bne.n	8003b16 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ab0:	4b45      	ldr	r3, [pc, #276]	@ (8003bc8 <HAL_GPIO_DeInit+0x1c0>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	43d9      	mvns	r1, r3
 8003ab8:	4b43      	ldr	r3, [pc, #268]	@ (8003bc8 <HAL_GPIO_DeInit+0x1c0>)
 8003aba:	400a      	ands	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003abe:	4b42      	ldr	r3, [pc, #264]	@ (8003bc8 <HAL_GPIO_DeInit+0x1c0>)
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	43d9      	mvns	r1, r3
 8003ac6:	4b40      	ldr	r3, [pc, #256]	@ (8003bc8 <HAL_GPIO_DeInit+0x1c0>)
 8003ac8:	400a      	ands	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003acc:	4b3e      	ldr	r3, [pc, #248]	@ (8003bc8 <HAL_GPIO_DeInit+0x1c0>)
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	43d9      	mvns	r1, r3
 8003ad4:	4b3c      	ldr	r3, [pc, #240]	@ (8003bc8 <HAL_GPIO_DeInit+0x1c0>)
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ada:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc8 <HAL_GPIO_DeInit+0x1c0>)
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	43d9      	mvns	r1, r3
 8003ae2:	4b39      	ldr	r3, [pc, #228]	@ (8003bc8 <HAL_GPIO_DeInit+0x1c0>)
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2203      	movs	r2, #3
 8003aec:	4013      	ands	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	220f      	movs	r2, #15
 8003af2:	409a      	lsls	r2, r3
 8003af4:	0013      	movs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003af8:	4a2d      	ldr	r2, [pc, #180]	@ (8003bb0 <HAL_GPIO_DeInit+0x1a8>)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	089b      	lsrs	r3, r3, #2
 8003afe:	3302      	adds	r3, #2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	589a      	ldr	r2, [r3, r2]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	43d9      	mvns	r1, r3
 8003b08:	4829      	ldr	r0, [pc, #164]	@ (8003bb0 <HAL_GPIO_DeInit+0x1a8>)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	400a      	ands	r2, r1
 8003b10:	3302      	adds	r3, #2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	2103      	movs	r1, #3
 8003b20:	4099      	lsls	r1, r3
 8003b22:	000b      	movs	r3, r1
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	08da      	lsrs	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3208      	adds	r2, #8
 8003b32:	0092      	lsls	r2, r2, #2
 8003b34:	58d3      	ldr	r3, [r2, r3]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	2107      	movs	r1, #7
 8003b3a:	400a      	ands	r2, r1
 8003b3c:	0092      	lsls	r2, r2, #2
 8003b3e:	210f      	movs	r1, #15
 8003b40:	4091      	lsls	r1, r2
 8003b42:	000a      	movs	r2, r1
 8003b44:	43d1      	mvns	r1, r2
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	08d2      	lsrs	r2, r2, #3
 8003b4a:	4019      	ands	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3208      	adds	r2, #8
 8003b50:	0092      	lsls	r2, r2, #2
 8003b52:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	0052      	lsls	r2, r2, #1
 8003b5c:	2103      	movs	r1, #3
 8003b5e:	4091      	lsls	r1, r2
 8003b60:	000a      	movs	r2, r1
 8003b62:	43d2      	mvns	r2, r2
 8003b64:	401a      	ands	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2101      	movs	r1, #1
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4091      	lsls	r1, r2
 8003b74:	000a      	movs	r2, r1
 8003b76:	43d2      	mvns	r2, r2
 8003b78:	401a      	ands	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	0052      	lsls	r2, r2, #1
 8003b86:	2103      	movs	r1, #3
 8003b88:	4091      	lsls	r1, r2
 8003b8a:	000a      	movs	r2, r1
 8003b8c:	43d2      	mvns	r2, r2
 8003b8e:	401a      	ands	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	609a      	str	r2, [r3, #8]
    }
    position++;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	3301      	adds	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	40da      	lsrs	r2, r3
 8003ba0:	1e13      	subs	r3, r2, #0
 8003ba2:	d000      	beq.n	8003ba6 <HAL_GPIO_DeInit+0x19e>
 8003ba4:	e73c      	b.n	8003a20 <HAL_GPIO_DeInit+0x18>
  }
}
 8003ba6:	46c0      	nop			@ (mov r8, r8)
 8003ba8:	46c0      	nop			@ (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b006      	add	sp, #24
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40010000 	.word	0x40010000
 8003bb4:	50000400 	.word	0x50000400
 8003bb8:	50000800 	.word	0x50000800
 8003bbc:	50000c00 	.word	0x50000c00
 8003bc0:	50001000 	.word	0x50001000
 8003bc4:	50001c00 	.word	0x50001c00
 8003bc8:	40010400 	.word	0x40010400

08003bcc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	0008      	movs	r0, r1
 8003bd6:	0011      	movs	r1, r2
 8003bd8:	1cbb      	adds	r3, r7, #2
 8003bda:	1c02      	adds	r2, r0, #0
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	1c7b      	adds	r3, r7, #1
 8003be0:	1c0a      	adds	r2, r1, #0
 8003be2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003be4:	1c7b      	adds	r3, r7, #1
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d004      	beq.n	8003bf6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bec:	1cbb      	adds	r3, r7, #2
 8003bee:	881a      	ldrh	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003bf4:	e003      	b.n	8003bfe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003bf6:	1cbb      	adds	r3, r7, #2
 8003bf8:	881a      	ldrh	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b002      	add	sp, #8
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e08f      	b.n	8003d3a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2241      	movs	r2, #65	@ 0x41
 8003c1e:	5c9b      	ldrb	r3, [r3, r2]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2240      	movs	r2, #64	@ 0x40
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	0018      	movs	r0, r3
 8003c32:	f7fe f931 	bl	8001e98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2241      	movs	r2, #65	@ 0x41
 8003c3a:	2124      	movs	r1, #36	@ 0x24
 8003c3c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2101      	movs	r1, #1
 8003c4a:	438a      	bics	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	493b      	ldr	r1, [pc, #236]	@ (8003d44 <HAL_I2C_Init+0x13c>)
 8003c58:	400a      	ands	r2, r1
 8003c5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4938      	ldr	r1, [pc, #224]	@ (8003d48 <HAL_I2C_Init+0x140>)
 8003c68:	400a      	ands	r2, r1
 8003c6a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d108      	bne.n	8003c86 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2180      	movs	r1, #128	@ 0x80
 8003c7e:	0209      	lsls	r1, r1, #8
 8003c80:	430a      	orrs	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	e007      	b.n	8003c96 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2184      	movs	r1, #132	@ 0x84
 8003c90:	0209      	lsls	r1, r1, #8
 8003c92:	430a      	orrs	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d109      	bne.n	8003cb2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2180      	movs	r1, #128	@ 0x80
 8003caa:	0109      	lsls	r1, r1, #4
 8003cac:	430a      	orrs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]
 8003cb0:	e007      	b.n	8003cc2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4923      	ldr	r1, [pc, #140]	@ (8003d4c <HAL_I2C_Init+0x144>)
 8003cbe:	400a      	ands	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4920      	ldr	r1, [pc, #128]	@ (8003d50 <HAL_I2C_Init+0x148>)
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	491a      	ldr	r1, [pc, #104]	@ (8003d48 <HAL_I2C_Init+0x140>)
 8003cde:	400a      	ands	r2, r1
 8003ce0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69d9      	ldr	r1, [r3, #28]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2101      	movs	r1, #1
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2241      	movs	r2, #65	@ 0x41
 8003d26:	2120      	movs	r1, #32
 8003d28:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2242      	movs	r2, #66	@ 0x42
 8003d34:	2100      	movs	r1, #0
 8003d36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	f0ffffff 	.word	0xf0ffffff
 8003d48:	ffff7fff 	.word	0xffff7fff
 8003d4c:	fffff7ff 	.word	0xfffff7ff
 8003d50:	02008000 	.word	0x02008000

08003d54 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e022      	b.n	8003dac <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2241      	movs	r2, #65	@ 0x41
 8003d6a:	2124      	movs	r1, #36	@ 0x24
 8003d6c:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2101      	movs	r1, #1
 8003d7a:	438a      	bics	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7fe f8cd 	bl	8001f20 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2241      	movs	r2, #65	@ 0x41
 8003d90:	2100      	movs	r1, #0
 8003d92:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2242      	movs	r2, #66	@ 0x42
 8003d9e:	2100      	movs	r1, #0
 8003da0:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2240      	movs	r2, #64	@ 0x40
 8003da6:	2100      	movs	r1, #0
 8003da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b002      	add	sp, #8
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b089      	sub	sp, #36	@ 0x24
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	0008      	movs	r0, r1
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	0019      	movs	r1, r3
 8003dc2:	230a      	movs	r3, #10
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	1c02      	adds	r2, r0, #0
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	2308      	movs	r3, #8
 8003dcc:	18fb      	adds	r3, r7, r3
 8003dce:	1c0a      	adds	r2, r1, #0
 8003dd0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2241      	movs	r2, #65	@ 0x41
 8003dd6:	5c9b      	ldrb	r3, [r3, r2]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d000      	beq.n	8003de0 <HAL_I2C_Master_Transmit+0x2c>
 8003dde:	e10a      	b.n	8003ff6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2240      	movs	r2, #64	@ 0x40
 8003de4:	5c9b      	ldrb	r3, [r3, r2]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_I2C_Master_Transmit+0x3a>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e104      	b.n	8003ff8 <HAL_I2C_Master_Transmit+0x244>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2240      	movs	r2, #64	@ 0x40
 8003df2:	2101      	movs	r1, #1
 8003df4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003df6:	f7fe fe6d 	bl	8002ad4 <HAL_GetTick>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dfe:	2380      	movs	r3, #128	@ 0x80
 8003e00:	0219      	lsls	r1, r3, #8
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2319      	movs	r3, #25
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f000 fb22 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8003e10:	1e03      	subs	r3, r0, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0ef      	b.n	8003ff8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2241      	movs	r2, #65	@ 0x41
 8003e1c:	2121      	movs	r1, #33	@ 0x21
 8003e1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2242      	movs	r2, #66	@ 0x42
 8003e24:	2110      	movs	r1, #16
 8003e26:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2208      	movs	r2, #8
 8003e38:	18ba      	adds	r2, r7, r2
 8003e3a:	8812      	ldrh	r2, [r2, #0]
 8003e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2bff      	cmp	r3, #255	@ 0xff
 8003e4c:	d906      	bls.n	8003e5c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	22ff      	movs	r2, #255	@ 0xff
 8003e52:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003e54:	2380      	movs	r3, #128	@ 0x80
 8003e56:	045b      	lsls	r3, r3, #17
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e007      	b.n	8003e6c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003e66:	2380      	movs	r3, #128	@ 0x80
 8003e68:	049b      	lsls	r3, r3, #18
 8003e6a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d027      	beq.n	8003ec4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	781a      	ldrb	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	697c      	ldr	r4, [r7, #20]
 8003eb0:	230a      	movs	r3, #10
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	8819      	ldrh	r1, [r3, #0]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	4b51      	ldr	r3, [pc, #324]	@ (8004000 <HAL_I2C_Master_Transmit+0x24c>)
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	0023      	movs	r3, r4
 8003ebe:	f000 fd41 	bl	8004944 <I2C_TransferConfig>
 8003ec2:	e06f      	b.n	8003fa4 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	697c      	ldr	r4, [r7, #20]
 8003ecc:	230a      	movs	r3, #10
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	8819      	ldrh	r1, [r3, #0]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	4b4a      	ldr	r3, [pc, #296]	@ (8004000 <HAL_I2C_Master_Transmit+0x24c>)
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	0023      	movs	r3, r4
 8003eda:	f000 fd33 	bl	8004944 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ede:	e061      	b.n	8003fa4 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f000 fb0c 	bl	8004504 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eec:	1e03      	subs	r3, r0, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e081      	b.n	8003ff8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	781a      	ldrb	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d03a      	beq.n	8003fa4 <HAL_I2C_Master_Transmit+0x1f0>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d136      	bne.n	8003fa4 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	0013      	movs	r3, r2
 8003f40:	2200      	movs	r2, #0
 8003f42:	2180      	movs	r1, #128	@ 0x80
 8003f44:	f000 fa86 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8003f48:	1e03      	subs	r3, r0, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e053      	b.n	8003ff8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2bff      	cmp	r3, #255	@ 0xff
 8003f58:	d911      	bls.n	8003f7e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	22ff      	movs	r2, #255	@ 0xff
 8003f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	2380      	movs	r3, #128	@ 0x80
 8003f68:	045c      	lsls	r4, r3, #17
 8003f6a:	230a      	movs	r3, #10
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	8819      	ldrh	r1, [r3, #0]
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	2300      	movs	r3, #0
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	0023      	movs	r3, r4
 8003f78:	f000 fce4 	bl	8004944 <I2C_TransferConfig>
 8003f7c:	e012      	b.n	8003fa4 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	2380      	movs	r3, #128	@ 0x80
 8003f90:	049c      	lsls	r4, r3, #18
 8003f92:	230a      	movs	r3, #10
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	8819      	ldrh	r1, [r3, #0]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	0023      	movs	r3, r4
 8003fa0:	f000 fcd0 	bl	8004944 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d198      	bne.n	8003ee0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f000 faeb 	bl	8004590 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fba:	1e03      	subs	r3, r0, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e01a      	b.n	8003ff8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	490b      	ldr	r1, [pc, #44]	@ (8004004 <HAL_I2C_Master_Transmit+0x250>)
 8003fd6:	400a      	ands	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2241      	movs	r2, #65	@ 0x41
 8003fde:	2120      	movs	r1, #32
 8003fe0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2242      	movs	r2, #66	@ 0x42
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2240      	movs	r2, #64	@ 0x40
 8003fee:	2100      	movs	r1, #0
 8003ff0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e000      	b.n	8003ff8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
  }
}
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b007      	add	sp, #28
 8003ffe:	bd90      	pop	{r4, r7, pc}
 8004000:	80002000 	.word	0x80002000
 8004004:	fe00e800 	.word	0xfe00e800

08004008 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b089      	sub	sp, #36	@ 0x24
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	0008      	movs	r0, r1
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	0019      	movs	r1, r3
 8004016:	230a      	movs	r3, #10
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	1c02      	adds	r2, r0, #0
 800401c:	801a      	strh	r2, [r3, #0]
 800401e:	2308      	movs	r3, #8
 8004020:	18fb      	adds	r3, r7, r3
 8004022:	1c0a      	adds	r2, r1, #0
 8004024:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2241      	movs	r2, #65	@ 0x41
 800402a:	5c9b      	ldrb	r3, [r3, r2]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b20      	cmp	r3, #32
 8004030:	d000      	beq.n	8004034 <HAL_I2C_Master_Receive+0x2c>
 8004032:	e0e8      	b.n	8004206 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2240      	movs	r2, #64	@ 0x40
 8004038:	5c9b      	ldrb	r3, [r3, r2]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_I2C_Master_Receive+0x3a>
 800403e:	2302      	movs	r3, #2
 8004040:	e0e2      	b.n	8004208 <HAL_I2C_Master_Receive+0x200>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2240      	movs	r2, #64	@ 0x40
 8004046:	2101      	movs	r1, #1
 8004048:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800404a:	f7fe fd43 	bl	8002ad4 <HAL_GetTick>
 800404e:	0003      	movs	r3, r0
 8004050:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004052:	2380      	movs	r3, #128	@ 0x80
 8004054:	0219      	lsls	r1, r3, #8
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	2319      	movs	r3, #25
 800405e:	2201      	movs	r2, #1
 8004060:	f000 f9f8 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8004064:	1e03      	subs	r3, r0, #0
 8004066:	d001      	beq.n	800406c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0cd      	b.n	8004208 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2241      	movs	r2, #65	@ 0x41
 8004070:	2122      	movs	r1, #34	@ 0x22
 8004072:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2242      	movs	r2, #66	@ 0x42
 8004078:	2110      	movs	r1, #16
 800407a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2208      	movs	r2, #8
 800408c:	18ba      	adds	r2, r7, r2
 800408e:	8812      	ldrh	r2, [r2, #0]
 8004090:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2bff      	cmp	r3, #255	@ 0xff
 80040a0:	d911      	bls.n	80040c6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	045c      	lsls	r4, r3, #17
 80040b2:	230a      	movs	r3, #10
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	8819      	ldrh	r1, [r3, #0]
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	4b55      	ldr	r3, [pc, #340]	@ (8004210 <HAL_I2C_Master_Receive+0x208>)
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	0023      	movs	r3, r4
 80040c0:	f000 fc40 	bl	8004944 <I2C_TransferConfig>
 80040c4:	e076      	b.n	80041b4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	2380      	movs	r3, #128	@ 0x80
 80040d8:	049c      	lsls	r4, r3, #18
 80040da:	230a      	movs	r3, #10
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	8819      	ldrh	r1, [r3, #0]
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004210 <HAL_I2C_Master_Receive+0x208>)
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	0023      	movs	r3, r4
 80040e8:	f000 fc2c 	bl	8004944 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80040ec:	e062      	b.n	80041b4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	0018      	movs	r0, r3
 80040f6:	f000 fa8f 	bl	8004618 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040fa:	1e03      	subs	r3, r0, #0
 80040fc:	d001      	beq.n	8004102 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e082      	b.n	8004208 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d03a      	beq.n	80041b4 <HAL_I2C_Master_Receive+0x1ac>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d136      	bne.n	80041b4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004146:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	0013      	movs	r3, r2
 8004150:	2200      	movs	r2, #0
 8004152:	2180      	movs	r1, #128	@ 0x80
 8004154:	f000 f97e 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8004158:	1e03      	subs	r3, r0, #0
 800415a:	d001      	beq.n	8004160 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e053      	b.n	8004208 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	2bff      	cmp	r3, #255	@ 0xff
 8004168:	d911      	bls.n	800418e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	22ff      	movs	r2, #255	@ 0xff
 800416e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004174:	b2da      	uxtb	r2, r3
 8004176:	2380      	movs	r3, #128	@ 0x80
 8004178:	045c      	lsls	r4, r3, #17
 800417a:	230a      	movs	r3, #10
 800417c:	18fb      	adds	r3, r7, r3
 800417e:	8819      	ldrh	r1, [r3, #0]
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	2300      	movs	r3, #0
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	0023      	movs	r3, r4
 8004188:	f000 fbdc 	bl	8004944 <I2C_TransferConfig>
 800418c:	e012      	b.n	80041b4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419c:	b2da      	uxtb	r2, r3
 800419e:	2380      	movs	r3, #128	@ 0x80
 80041a0:	049c      	lsls	r4, r3, #18
 80041a2:	230a      	movs	r3, #10
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	8819      	ldrh	r1, [r3, #0]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	2300      	movs	r3, #0
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	0023      	movs	r3, r4
 80041b0:	f000 fbc8 	bl	8004944 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d197      	bne.n	80040ee <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	0018      	movs	r0, r3
 80041c6:	f000 f9e3 	bl	8004590 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041ca:	1e03      	subs	r3, r0, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e01a      	b.n	8004208 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2220      	movs	r2, #32
 80041d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	490b      	ldr	r1, [pc, #44]	@ (8004214 <HAL_I2C_Master_Receive+0x20c>)
 80041e6:	400a      	ands	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2241      	movs	r2, #65	@ 0x41
 80041ee:	2120      	movs	r1, #32
 80041f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2242      	movs	r2, #66	@ 0x42
 80041f6:	2100      	movs	r1, #0
 80041f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2240      	movs	r2, #64	@ 0x40
 80041fe:	2100      	movs	r1, #0
 8004200:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e000      	b.n	8004208 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004206:	2302      	movs	r3, #2
  }
}
 8004208:	0018      	movs	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	b007      	add	sp, #28
 800420e:	bd90      	pop	{r4, r7, pc}
 8004210:	80002400 	.word	0x80002400
 8004214:	fe00e800 	.word	0xfe00e800

08004218 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	@ 0x28
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	230a      	movs	r3, #10
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	1c0a      	adds	r2, r1, #0
 800422a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800422c:	2300      	movs	r3, #0
 800422e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2241      	movs	r2, #65	@ 0x41
 8004234:	5c9b      	ldrb	r3, [r3, r2]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b20      	cmp	r3, #32
 800423a:	d000      	beq.n	800423e <HAL_I2C_IsDeviceReady+0x26>
 800423c:	e0df      	b.n	80043fe <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699a      	ldr	r2, [r3, #24]
 8004244:	2380      	movs	r3, #128	@ 0x80
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	401a      	ands	r2, r3
 800424a:	2380      	movs	r3, #128	@ 0x80
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	429a      	cmp	r2, r3
 8004250:	d101      	bne.n	8004256 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8004252:	2302      	movs	r3, #2
 8004254:	e0d4      	b.n	8004400 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2240      	movs	r2, #64	@ 0x40
 800425a:	5c9b      	ldrb	r3, [r3, r2]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_I2C_IsDeviceReady+0x4c>
 8004260:	2302      	movs	r3, #2
 8004262:	e0cd      	b.n	8004400 <HAL_I2C_IsDeviceReady+0x1e8>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2240      	movs	r2, #64	@ 0x40
 8004268:	2101      	movs	r1, #1
 800426a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2241      	movs	r2, #65	@ 0x41
 8004270:	2124      	movs	r1, #36	@ 0x24
 8004272:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d107      	bne.n	8004292 <HAL_I2C_IsDeviceReady+0x7a>
 8004282:	230a      	movs	r3, #10
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	059b      	lsls	r3, r3, #22
 800428a:	0d9b      	lsrs	r3, r3, #22
 800428c:	4a5e      	ldr	r2, [pc, #376]	@ (8004408 <HAL_I2C_IsDeviceReady+0x1f0>)
 800428e:	431a      	orrs	r2, r3
 8004290:	e006      	b.n	80042a0 <HAL_I2C_IsDeviceReady+0x88>
 8004292:	230a      	movs	r3, #10
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	059b      	lsls	r3, r3, #22
 800429a:	0d9b      	lsrs	r3, r3, #22
 800429c:	4a5b      	ldr	r2, [pc, #364]	@ (800440c <HAL_I2C_IsDeviceReady+0x1f4>)
 800429e:	431a      	orrs	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80042a6:	f7fe fc15 	bl	8002ad4 <HAL_GetTick>
 80042aa:	0003      	movs	r3, r0
 80042ac:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	2220      	movs	r2, #32
 80042b6:	4013      	ands	r3, r2
 80042b8:	3b20      	subs	r3, #32
 80042ba:	425a      	negs	r2, r3
 80042bc:	4153      	adcs	r3, r2
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	231f      	movs	r3, #31
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2210      	movs	r2, #16
 80042ce:	4013      	ands	r3, r2
 80042d0:	3b10      	subs	r3, #16
 80042d2:	425a      	negs	r2, r3
 80042d4:	4153      	adcs	r3, r2
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	231e      	movs	r3, #30
 80042da:	18fb      	adds	r3, r7, r3
 80042dc:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80042de:	e035      	b.n	800434c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	d01a      	beq.n	800431c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042e6:	f7fe fbf5 	bl	8002ad4 <HAL_GetTick>
 80042ea:	0002      	movs	r2, r0
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d302      	bcc.n	80042fc <HAL_I2C_IsDeviceReady+0xe4>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10f      	bne.n	800431c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2241      	movs	r2, #65	@ 0x41
 8004300:	2120      	movs	r1, #32
 8004302:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004308:	2220      	movs	r2, #32
 800430a:	431a      	orrs	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2240      	movs	r2, #64	@ 0x40
 8004314:	2100      	movs	r1, #0
 8004316:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e071      	b.n	8004400 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2220      	movs	r2, #32
 8004324:	4013      	ands	r3, r2
 8004326:	3b20      	subs	r3, #32
 8004328:	425a      	negs	r2, r3
 800432a:	4153      	adcs	r3, r2
 800432c:	b2da      	uxtb	r2, r3
 800432e:	231f      	movs	r3, #31
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2210      	movs	r2, #16
 800433c:	4013      	ands	r3, r2
 800433e:	3b10      	subs	r3, #16
 8004340:	425a      	negs	r2, r3
 8004342:	4153      	adcs	r3, r2
 8004344:	b2da      	uxtb	r2, r3
 8004346:	231e      	movs	r3, #30
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800434c:	231f      	movs	r3, #31
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d104      	bne.n	8004360 <HAL_I2C_IsDeviceReady+0x148>
 8004356:	231e      	movs	r3, #30
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0bf      	beq.n	80042e0 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2210      	movs	r2, #16
 8004368:	4013      	ands	r3, r2
 800436a:	2b10      	cmp	r3, #16
 800436c:	d01a      	beq.n	80043a4 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	0013      	movs	r3, r2
 8004378:	2200      	movs	r2, #0
 800437a:	2120      	movs	r1, #32
 800437c:	f000 f86a 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8004380:	1e03      	subs	r3, r0, #0
 8004382:	d001      	beq.n	8004388 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e03b      	b.n	8004400 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2220      	movs	r2, #32
 800438e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2241      	movs	r2, #65	@ 0x41
 8004394:	2120      	movs	r1, #32
 8004396:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2240      	movs	r2, #64	@ 0x40
 800439c:	2100      	movs	r1, #0
 800439e:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e02d      	b.n	8004400 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	0013      	movs	r3, r2
 80043ae:	2200      	movs	r2, #0
 80043b0:	2120      	movs	r1, #32
 80043b2:	f000 f84f 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 80043b6:	1e03      	subs	r3, r0, #0
 80043b8:	d001      	beq.n	80043be <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e020      	b.n	8004400 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2210      	movs	r2, #16
 80043c4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2220      	movs	r2, #32
 80043cc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	3301      	adds	r3, #1
 80043d2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d900      	bls.n	80043de <HAL_I2C_IsDeviceReady+0x1c6>
 80043dc:	e74d      	b.n	800427a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2241      	movs	r2, #65	@ 0x41
 80043e2:	2120      	movs	r1, #32
 80043e4:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ea:	2220      	movs	r2, #32
 80043ec:	431a      	orrs	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2240      	movs	r2, #64	@ 0x40
 80043f6:	2100      	movs	r1, #0
 80043f8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
  }
}
 8004400:	0018      	movs	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	b008      	add	sp, #32
 8004406:	bd80      	pop	{r7, pc}
 8004408:	02002000 	.word	0x02002000
 800440c:	02002800 	.word	0x02002800

08004410 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2202      	movs	r2, #2
 8004420:	4013      	ands	r3, r2
 8004422:	2b02      	cmp	r3, #2
 8004424:	d103      	bne.n	800442e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2200      	movs	r2, #0
 800442c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2201      	movs	r2, #1
 8004436:	4013      	ands	r3, r2
 8004438:	2b01      	cmp	r3, #1
 800443a:	d007      	beq.n	800444c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2101      	movs	r1, #1
 8004448:	430a      	orrs	r2, r1
 800444a:	619a      	str	r2, [r3, #24]
  }
}
 800444c:	46c0      	nop			@ (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b002      	add	sp, #8
 8004452:	bd80      	pop	{r7, pc}

08004454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	1dfb      	adds	r3, r7, #7
 8004462:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004464:	e03a      	b.n	80044dc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	6839      	ldr	r1, [r7, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	0018      	movs	r0, r3
 800446e:	f000 f971 	bl	8004754 <I2C_IsErrorOccurred>
 8004472:	1e03      	subs	r3, r0, #0
 8004474:	d001      	beq.n	800447a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e040      	b.n	80044fc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	d02d      	beq.n	80044dc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004480:	f7fe fb28 	bl	8002ad4 <HAL_GetTick>
 8004484:	0002      	movs	r2, r0
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d302      	bcc.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x42>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d122      	bne.n	80044dc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	4013      	ands	r3, r2
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	425a      	negs	r2, r3
 80044a6:	4153      	adcs	r3, r2
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	001a      	movs	r2, r3
 80044ac:	1dfb      	adds	r3, r7, #7
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d113      	bne.n	80044dc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b8:	2220      	movs	r2, #32
 80044ba:	431a      	orrs	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2241      	movs	r2, #65	@ 0x41
 80044c4:	2120      	movs	r1, #32
 80044c6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2242      	movs	r2, #66	@ 0x42
 80044cc:	2100      	movs	r1, #0
 80044ce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2240      	movs	r2, #64	@ 0x40
 80044d4:	2100      	movs	r1, #0
 80044d6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e00f      	b.n	80044fc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	4013      	ands	r3, r2
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	425a      	negs	r2, r3
 80044ec:	4153      	adcs	r3, r2
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	001a      	movs	r2, r3
 80044f2:	1dfb      	adds	r3, r7, #7
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d0b5      	beq.n	8004466 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b004      	add	sp, #16
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004510:	e032      	b.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	0018      	movs	r0, r3
 800451a:	f000 f91b 	bl	8004754 <I2C_IsErrorOccurred>
 800451e:	1e03      	subs	r3, r0, #0
 8004520:	d001      	beq.n	8004526 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e030      	b.n	8004588 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	3301      	adds	r3, #1
 800452a:	d025      	beq.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452c:	f7fe fad2 	bl	8002ad4 <HAL_GetTick>
 8004530:	0002      	movs	r2, r0
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	429a      	cmp	r2, r3
 800453a:	d302      	bcc.n	8004542 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d11a      	bne.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	2202      	movs	r2, #2
 800454a:	4013      	ands	r3, r2
 800454c:	2b02      	cmp	r3, #2
 800454e:	d013      	beq.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004554:	2220      	movs	r2, #32
 8004556:	431a      	orrs	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2241      	movs	r2, #65	@ 0x41
 8004560:	2120      	movs	r1, #32
 8004562:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2242      	movs	r2, #66	@ 0x42
 8004568:	2100      	movs	r1, #0
 800456a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2240      	movs	r2, #64	@ 0x40
 8004570:	2100      	movs	r1, #0
 8004572:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e007      	b.n	8004588 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2202      	movs	r2, #2
 8004580:	4013      	ands	r3, r2
 8004582:	2b02      	cmp	r3, #2
 8004584:	d1c5      	bne.n	8004512 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	0018      	movs	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	b004      	add	sp, #16
 800458e:	bd80      	pop	{r7, pc}

08004590 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800459c:	e02f      	b.n	80045fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	0018      	movs	r0, r3
 80045a6:	f000 f8d5 	bl	8004754 <I2C_IsErrorOccurred>
 80045aa:	1e03      	subs	r3, r0, #0
 80045ac:	d001      	beq.n	80045b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e02d      	b.n	800460e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b2:	f7fe fa8f 	bl	8002ad4 <HAL_GetTick>
 80045b6:	0002      	movs	r2, r0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d302      	bcc.n	80045c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d11a      	bne.n	80045fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2220      	movs	r2, #32
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d013      	beq.n	80045fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045da:	2220      	movs	r2, #32
 80045dc:	431a      	orrs	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2241      	movs	r2, #65	@ 0x41
 80045e6:	2120      	movs	r1, #32
 80045e8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2242      	movs	r2, #66	@ 0x42
 80045ee:	2100      	movs	r1, #0
 80045f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2240      	movs	r2, #64	@ 0x40
 80045f6:	2100      	movs	r1, #0
 80045f8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e007      	b.n	800460e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2220      	movs	r2, #32
 8004606:	4013      	ands	r3, r2
 8004608:	2b20      	cmp	r3, #32
 800460a:	d1c8      	bne.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b004      	add	sp, #16
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004624:	2317      	movs	r3, #23
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800462c:	e07b      	b.n	8004726 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	0018      	movs	r0, r3
 8004636:	f000 f88d 	bl	8004754 <I2C_IsErrorOccurred>
 800463a:	1e03      	subs	r3, r0, #0
 800463c:	d003      	beq.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800463e:	2317      	movs	r3, #23
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	2201      	movs	r2, #1
 8004644:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2220      	movs	r2, #32
 800464e:	4013      	ands	r3, r2
 8004650:	2b20      	cmp	r3, #32
 8004652:	d140      	bne.n	80046d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004654:	2117      	movs	r1, #23
 8004656:	187b      	adds	r3, r7, r1
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d13b      	bne.n	80046d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2204      	movs	r2, #4
 8004666:	4013      	ands	r3, r2
 8004668:	2b04      	cmp	r3, #4
 800466a:	d106      	bne.n	800467a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004674:	187b      	adds	r3, r7, r1
 8004676:	2200      	movs	r2, #0
 8004678:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	2210      	movs	r2, #16
 8004682:	4013      	ands	r3, r2
 8004684:	2b10      	cmp	r3, #16
 8004686:	d123      	bne.n	80046d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2210      	movs	r2, #16
 800468e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2204      	movs	r2, #4
 8004694:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2220      	movs	r2, #32
 800469c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4929      	ldr	r1, [pc, #164]	@ (8004750 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80046aa:	400a      	ands	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2241      	movs	r2, #65	@ 0x41
 80046b2:	2120      	movs	r1, #32
 80046b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2242      	movs	r2, #66	@ 0x42
 80046ba:	2100      	movs	r1, #0
 80046bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2240      	movs	r2, #64	@ 0x40
 80046c2:	2100      	movs	r1, #0
 80046c4:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80046c6:	2317      	movs	r3, #23
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	2201      	movs	r2, #1
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	e002      	b.n	80046d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80046d6:	f7fe f9fd 	bl	8002ad4 <HAL_GetTick>
 80046da:	0002      	movs	r2, r0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d302      	bcc.n	80046ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d11c      	bne.n	8004726 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80046ec:	2017      	movs	r0, #23
 80046ee:	183b      	adds	r3, r7, r0
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d117      	bne.n	8004726 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	2204      	movs	r2, #4
 80046fe:	4013      	ands	r3, r2
 8004700:	2b04      	cmp	r3, #4
 8004702:	d010      	beq.n	8004726 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004708:	2220      	movs	r2, #32
 800470a:	431a      	orrs	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2241      	movs	r2, #65	@ 0x41
 8004714:	2120      	movs	r1, #32
 8004716:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2240      	movs	r2, #64	@ 0x40
 800471c:	2100      	movs	r1, #0
 800471e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004720:	183b      	adds	r3, r7, r0
 8004722:	2201      	movs	r2, #1
 8004724:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2204      	movs	r2, #4
 800472e:	4013      	ands	r3, r2
 8004730:	2b04      	cmp	r3, #4
 8004732:	d005      	beq.n	8004740 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004734:	2317      	movs	r3, #23
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d100      	bne.n	8004740 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800473e:	e776      	b.n	800462e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004740:	2317      	movs	r3, #23
 8004742:	18fb      	adds	r3, r7, r3
 8004744:	781b      	ldrb	r3, [r3, #0]
}
 8004746:	0018      	movs	r0, r3
 8004748:	46bd      	mov	sp, r7
 800474a:	b006      	add	sp, #24
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			@ (mov r8, r8)
 8004750:	fe00e800 	.word	0xfe00e800

08004754 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08a      	sub	sp, #40	@ 0x28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004760:	2327      	movs	r3, #39	@ 0x27
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	2200      	movs	r2, #0
 8004766:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2210      	movs	r2, #16
 800477c:	4013      	ands	r3, r2
 800477e:	d100      	bne.n	8004782 <I2C_IsErrorOccurred+0x2e>
 8004780:	e079      	b.n	8004876 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2210      	movs	r2, #16
 8004788:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800478a:	e057      	b.n	800483c <I2C_IsErrorOccurred+0xe8>
 800478c:	2227      	movs	r2, #39	@ 0x27
 800478e:	18bb      	adds	r3, r7, r2
 8004790:	18ba      	adds	r2, r7, r2
 8004792:	7812      	ldrb	r2, [r2, #0]
 8004794:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	3301      	adds	r3, #1
 800479a:	d04f      	beq.n	800483c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800479c:	f7fe f99a 	bl	8002ad4 <HAL_GetTick>
 80047a0:	0002      	movs	r2, r0
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d302      	bcc.n	80047b2 <I2C_IsErrorOccurred+0x5e>
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d144      	bne.n	800483c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	2380      	movs	r3, #128	@ 0x80
 80047ba:	01db      	lsls	r3, r3, #7
 80047bc:	4013      	ands	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80047c0:	2013      	movs	r0, #19
 80047c2:	183b      	adds	r3, r7, r0
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	2142      	movs	r1, #66	@ 0x42
 80047c8:	5c52      	ldrb	r2, [r2, r1]
 80047ca:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	2380      	movs	r3, #128	@ 0x80
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	401a      	ands	r2, r3
 80047d8:	2380      	movs	r3, #128	@ 0x80
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	429a      	cmp	r2, r3
 80047de:	d126      	bne.n	800482e <I2C_IsErrorOccurred+0xda>
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	2380      	movs	r3, #128	@ 0x80
 80047e4:	01db      	lsls	r3, r3, #7
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d021      	beq.n	800482e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80047ea:	183b      	adds	r3, r7, r0
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d01d      	beq.n	800482e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2180      	movs	r1, #128	@ 0x80
 80047fe:	01c9      	lsls	r1, r1, #7
 8004800:	430a      	orrs	r2, r1
 8004802:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004804:	f7fe f966 	bl	8002ad4 <HAL_GetTick>
 8004808:	0003      	movs	r3, r0
 800480a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800480c:	e00f      	b.n	800482e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800480e:	f7fe f961 	bl	8002ad4 <HAL_GetTick>
 8004812:	0002      	movs	r2, r0
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b19      	cmp	r3, #25
 800481a:	d908      	bls.n	800482e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	2220      	movs	r2, #32
 8004820:	4313      	orrs	r3, r2
 8004822:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004824:	2327      	movs	r3, #39	@ 0x27
 8004826:	18fb      	adds	r3, r7, r3
 8004828:	2201      	movs	r2, #1
 800482a:	701a      	strb	r2, [r3, #0]

              break;
 800482c:	e006      	b.n	800483c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	2220      	movs	r2, #32
 8004836:	4013      	ands	r3, r2
 8004838:	2b20      	cmp	r3, #32
 800483a:	d1e8      	bne.n	800480e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2220      	movs	r2, #32
 8004844:	4013      	ands	r3, r2
 8004846:	2b20      	cmp	r3, #32
 8004848:	d004      	beq.n	8004854 <I2C_IsErrorOccurred+0x100>
 800484a:	2327      	movs	r3, #39	@ 0x27
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d09b      	beq.n	800478c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004854:	2327      	movs	r3, #39	@ 0x27
 8004856:	18fb      	adds	r3, r7, r3
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2220      	movs	r2, #32
 8004864:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	2204      	movs	r2, #4
 800486a:	4313      	orrs	r3, r2
 800486c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800486e:	2327      	movs	r3, #39	@ 0x27
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	2201      	movs	r2, #1
 8004874:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	2380      	movs	r3, #128	@ 0x80
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4013      	ands	r3, r2
 8004886:	d00c      	beq.n	80048a2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	2201      	movs	r2, #1
 800488c:	4313      	orrs	r3, r2
 800488e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2280      	movs	r2, #128	@ 0x80
 8004896:	0052      	lsls	r2, r2, #1
 8004898:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800489a:	2327      	movs	r3, #39	@ 0x27
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	2201      	movs	r2, #1
 80048a0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	2380      	movs	r3, #128	@ 0x80
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4013      	ands	r3, r2
 80048aa:	d00c      	beq.n	80048c6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	2208      	movs	r2, #8
 80048b0:	4313      	orrs	r3, r2
 80048b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2280      	movs	r2, #128	@ 0x80
 80048ba:	00d2      	lsls	r2, r2, #3
 80048bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048be:	2327      	movs	r3, #39	@ 0x27
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	2201      	movs	r2, #1
 80048c4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	2380      	movs	r3, #128	@ 0x80
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4013      	ands	r3, r2
 80048ce:	d00c      	beq.n	80048ea <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	2202      	movs	r2, #2
 80048d4:	4313      	orrs	r3, r2
 80048d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2280      	movs	r2, #128	@ 0x80
 80048de:	0092      	lsls	r2, r2, #2
 80048e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048e2:	2327      	movs	r3, #39	@ 0x27
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	2201      	movs	r2, #1
 80048e8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80048ea:	2327      	movs	r3, #39	@ 0x27
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01d      	beq.n	8004930 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	0018      	movs	r0, r3
 80048f8:	f7ff fd8a 	bl	8004410 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	490e      	ldr	r1, [pc, #56]	@ (8004940 <I2C_IsErrorOccurred+0x1ec>)
 8004908:	400a      	ands	r2, r1
 800490a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	431a      	orrs	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2241      	movs	r2, #65	@ 0x41
 800491c:	2120      	movs	r1, #32
 800491e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2242      	movs	r2, #66	@ 0x42
 8004924:	2100      	movs	r1, #0
 8004926:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2240      	movs	r2, #64	@ 0x40
 800492c:	2100      	movs	r1, #0
 800492e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004930:	2327      	movs	r3, #39	@ 0x27
 8004932:	18fb      	adds	r3, r7, r3
 8004934:	781b      	ldrb	r3, [r3, #0]
}
 8004936:	0018      	movs	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	b00a      	add	sp, #40	@ 0x28
 800493c:	bd80      	pop	{r7, pc}
 800493e:	46c0      	nop			@ (mov r8, r8)
 8004940:	fe00e800 	.word	0xfe00e800

08004944 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	0008      	movs	r0, r1
 800494e:	0011      	movs	r1, r2
 8004950:	607b      	str	r3, [r7, #4]
 8004952:	240a      	movs	r4, #10
 8004954:	193b      	adds	r3, r7, r4
 8004956:	1c02      	adds	r2, r0, #0
 8004958:	801a      	strh	r2, [r3, #0]
 800495a:	2009      	movs	r0, #9
 800495c:	183b      	adds	r3, r7, r0
 800495e:	1c0a      	adds	r2, r1, #0
 8004960:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004962:	193b      	adds	r3, r7, r4
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	059b      	lsls	r3, r3, #22
 8004968:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800496a:	183b      	adds	r3, r7, r0
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	0419      	lsls	r1, r3, #16
 8004970:	23ff      	movs	r3, #255	@ 0xff
 8004972:	041b      	lsls	r3, r3, #16
 8004974:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004976:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	4313      	orrs	r3, r2
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	085b      	lsrs	r3, r3, #1
 8004984:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800498e:	0d51      	lsrs	r1, r2, #21
 8004990:	2280      	movs	r2, #128	@ 0x80
 8004992:	00d2      	lsls	r2, r2, #3
 8004994:	400a      	ands	r2, r1
 8004996:	4907      	ldr	r1, [pc, #28]	@ (80049b4 <I2C_TransferConfig+0x70>)
 8004998:	430a      	orrs	r2, r1
 800499a:	43d2      	mvns	r2, r2
 800499c:	401a      	ands	r2, r3
 800499e:	0011      	movs	r1, r2
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80049aa:	46c0      	nop			@ (mov r8, r8)
 80049ac:	46bd      	mov	sp, r7
 80049ae:	b007      	add	sp, #28
 80049b0:	bd90      	pop	{r4, r7, pc}
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	03ff63ff 	.word	0x03ff63ff

080049b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2241      	movs	r2, #65	@ 0x41
 80049c6:	5c9b      	ldrb	r3, [r3, r2]
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d138      	bne.n	8004a40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2240      	movs	r2, #64	@ 0x40
 80049d2:	5c9b      	ldrb	r3, [r3, r2]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049d8:	2302      	movs	r3, #2
 80049da:	e032      	b.n	8004a42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2240      	movs	r2, #64	@ 0x40
 80049e0:	2101      	movs	r1, #1
 80049e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2241      	movs	r2, #65	@ 0x41
 80049e8:	2124      	movs	r1, #36	@ 0x24
 80049ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2101      	movs	r1, #1
 80049f8:	438a      	bics	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4911      	ldr	r1, [pc, #68]	@ (8004a4c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004a08:	400a      	ands	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6819      	ldr	r1, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2101      	movs	r1, #1
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2241      	movs	r2, #65	@ 0x41
 8004a30:	2120      	movs	r1, #32
 8004a32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2240      	movs	r2, #64	@ 0x40
 8004a38:	2100      	movs	r1, #0
 8004a3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	e000      	b.n	8004a42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a40:	2302      	movs	r3, #2
  }
}
 8004a42:	0018      	movs	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b002      	add	sp, #8
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	ffffefff 	.word	0xffffefff

08004a50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2241      	movs	r2, #65	@ 0x41
 8004a5e:	5c9b      	ldrb	r3, [r3, r2]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d139      	bne.n	8004ada <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2240      	movs	r2, #64	@ 0x40
 8004a6a:	5c9b      	ldrb	r3, [r3, r2]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e033      	b.n	8004adc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2240      	movs	r2, #64	@ 0x40
 8004a78:	2101      	movs	r1, #1
 8004a7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2241      	movs	r2, #65	@ 0x41
 8004a80:	2124      	movs	r1, #36	@ 0x24
 8004a82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2101      	movs	r1, #1
 8004a90:	438a      	bics	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a11      	ldr	r2, [pc, #68]	@ (8004ae4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2241      	movs	r2, #65	@ 0x41
 8004aca:	2120      	movs	r1, #32
 8004acc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2240      	movs	r2, #64	@ 0x40
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e000      	b.n	8004adc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ada:	2302      	movs	r3, #2
  }
}
 8004adc:	0018      	movs	r0, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b004      	add	sp, #16
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	fffff0ff 	.word	0xfffff0ff

08004ae8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aec:	4b04      	ldr	r3, [pc, #16]	@ (8004b00 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4b03      	ldr	r3, [pc, #12]	@ (8004b00 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004af2:	2180      	movs	r1, #128	@ 0x80
 8004af4:	0049      	lsls	r1, r1, #1
 8004af6:	430a      	orrs	r2, r1
 8004af8:	601a      	str	r2, [r3, #0]
}
 8004afa:	46c0      	nop			@ (mov r8, r8)
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40007000 	.word	0x40007000

08004b04 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8004b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bbc <HAL_PWR_ConfigPVD+0xb8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	22e0      	movs	r2, #224	@ 0xe0
 8004b12:	4393      	bics	r3, r2
 8004b14:	0019      	movs	r1, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4b28      	ldr	r3, [pc, #160]	@ (8004bbc <HAL_PWR_ConfigPVD+0xb8>)
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8004b20:	4b27      	ldr	r3, [pc, #156]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	4b26      	ldr	r3, [pc, #152]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004b26:	4927      	ldr	r1, [pc, #156]	@ (8004bc4 <HAL_PWR_ConfigPVD+0xc0>)
 8004b28:	400a      	ands	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8004b2c:	4b24      	ldr	r3, [pc, #144]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b23      	ldr	r3, [pc, #140]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004b32:	4924      	ldr	r1, [pc, #144]	@ (8004bc4 <HAL_PWR_ConfigPVD+0xc0>)
 8004b34:	400a      	ands	r2, r1
 8004b36:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8004b38:	4b21      	ldr	r3, [pc, #132]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	4b20      	ldr	r3, [pc, #128]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004b3e:	4921      	ldr	r1, [pc, #132]	@ (8004bc4 <HAL_PWR_ConfigPVD+0xc0>)
 8004b40:	400a      	ands	r2, r1
 8004b42:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8004b44:	4b1e      	ldr	r3, [pc, #120]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004b4a:	491e      	ldr	r1, [pc, #120]	@ (8004bc4 <HAL_PWR_ConfigPVD+0xc0>)
 8004b4c:	400a      	ands	r2, r1
 8004b4e:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	2380      	movs	r3, #128	@ 0x80
 8004b56:	025b      	lsls	r3, r3, #9
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d006      	beq.n	8004b6a <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004b5c:	4b18      	ldr	r3, [pc, #96]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	4b17      	ldr	r3, [pc, #92]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004b62:	2180      	movs	r1, #128	@ 0x80
 8004b64:	0249      	lsls	r1, r1, #9
 8004b66:	430a      	orrs	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	2380      	movs	r3, #128	@ 0x80
 8004b70:	029b      	lsls	r3, r3, #10
 8004b72:	4013      	ands	r3, r2
 8004b74:	d006      	beq.n	8004b84 <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8004b76:	4b12      	ldr	r3, [pc, #72]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	4b11      	ldr	r3, [pc, #68]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004b7c:	2180      	movs	r1, #128	@ 0x80
 8004b7e:	0249      	lsls	r1, r1, #9
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d006      	beq.n	8004b9c <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8004b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004b94:	2180      	movs	r1, #128	@ 0x80
 8004b96:	0249      	lsls	r1, r1, #9
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d006      	beq.n	8004bb4 <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8004ba6:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	4b05      	ldr	r3, [pc, #20]	@ (8004bc0 <HAL_PWR_ConfigPVD+0xbc>)
 8004bac:	2180      	movs	r1, #128	@ 0x80
 8004bae:	0249      	lsls	r1, r1, #9
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	60da      	str	r2, [r3, #12]
  }
}
 8004bb4:	46c0      	nop			@ (mov r8, r8)
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b002      	add	sp, #8
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40007000 	.word	0x40007000
 8004bc0:	40010400 	.word	0x40010400
 8004bc4:	fffeffff 	.word	0xfffeffff

08004bc8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8004bcc:	4b04      	ldr	r3, [pc, #16]	@ (8004be0 <HAL_PWR_EnablePVD+0x18>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	4b03      	ldr	r3, [pc, #12]	@ (8004be0 <HAL_PWR_EnablePVD+0x18>)
 8004bd2:	2110      	movs	r1, #16
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]
}
 8004bd8:	46c0      	nop			@ (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	46c0      	nop			@ (mov r8, r8)
 8004be0:	40007000 	.word	0x40007000

08004be4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	000a      	movs	r2, r1
 8004bee:	1cfb      	adds	r3, r7, #3
 8004bf0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004bf6:	4b25      	ldr	r3, [pc, #148]	@ (8004c8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	2380      	movs	r3, #128	@ 0x80
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4013      	ands	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8004c02:	4b23      	ldr	r3, [pc, #140]	@ (8004c90 <HAL_PWR_EnterSTOPMode+0xac>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	2201      	movs	r2, #1
 8004c08:	4013      	ands	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <HAL_PWR_EnterSTOPMode+0x40>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004c18:	4b1c      	ldr	r3, [pc, #112]	@ (8004c8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004c8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004c1e:	491d      	ldr	r1, [pc, #116]	@ (8004c94 <HAL_PWR_EnterSTOPMode+0xb0>)
 8004c20:	400a      	ands	r2, r1
 8004c22:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004c24:	4b19      	ldr	r3, [pc, #100]	@ (8004c8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	4393      	bics	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8004c3a:	4b14      	ldr	r3, [pc, #80]	@ (8004c8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004c40:	4b15      	ldr	r3, [pc, #84]	@ (8004c98 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	4b14      	ldr	r3, [pc, #80]	@ (8004c98 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004c46:	2104      	movs	r1, #4
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004c4c:	1cfb      	adds	r3, r7, #3
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004c54:	bf30      	wfi
 8004c56:	e002      	b.n	8004c5e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004c58:	bf40      	sev
    __WFE();
 8004c5a:	bf20      	wfe
    __WFE();
 8004c5c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c98 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	4b0d      	ldr	r3, [pc, #52]	@ (8004c98 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004c64:	2104      	movs	r1, #4
 8004c66:	438a      	bics	r2, r1
 8004c68:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d009      	beq.n	8004c84 <HAL_PWR_EnterSTOPMode+0xa0>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d006      	beq.n	8004c84 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8004c76:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4b04      	ldr	r3, [pc, #16]	@ (8004c8c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004c7c:	2180      	movs	r1, #128	@ 0x80
 8004c7e:	0089      	lsls	r1, r1, #2
 8004c80:	430a      	orrs	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]
  }
}
 8004c84:	46c0      	nop			@ (mov r8, r8)
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b006      	add	sp, #24
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40007000 	.word	0x40007000
 8004c90:	40010000 	.word	0x40010000
 8004c94:	fffffdff 	.word	0xfffffdff
 8004c98:	e000ed00 	.word	0xe000ed00

08004c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c9c:	b5b0      	push	{r4, r5, r7, lr}
 8004c9e:	b08a      	sub	sp, #40	@ 0x28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d102      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	f000 fbbf 	bl	800542e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb0:	4bc9      	ldr	r3, [pc, #804]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	220c      	movs	r2, #12
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cba:	4bc7      	ldr	r3, [pc, #796]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	2380      	movs	r3, #128	@ 0x80
 8004cc0:	025b      	lsls	r3, r3, #9
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d100      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x36>
 8004cd0:	e07e      	b.n	8004dd0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d007      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d112      	bne.n	8004d04 <HAL_RCC_OscConfig+0x68>
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	2380      	movs	r3, #128	@ 0x80
 8004ce2:	025b      	lsls	r3, r3, #9
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d10d      	bne.n	8004d04 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce8:	4bbb      	ldr	r3, [pc, #748]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	2380      	movs	r3, #128	@ 0x80
 8004cee:	029b      	lsls	r3, r3, #10
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d100      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x5a>
 8004cf4:	e06b      	b.n	8004dce <HAL_RCC_OscConfig+0x132>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d167      	bne.n	8004dce <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f000 fb95 	bl	800542e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	2380      	movs	r3, #128	@ 0x80
 8004d0a:	025b      	lsls	r3, r3, #9
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d107      	bne.n	8004d20 <HAL_RCC_OscConfig+0x84>
 8004d10:	4bb1      	ldr	r3, [pc, #708]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4bb0      	ldr	r3, [pc, #704]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004d16:	2180      	movs	r1, #128	@ 0x80
 8004d18:	0249      	lsls	r1, r1, #9
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	e027      	b.n	8004d70 <HAL_RCC_OscConfig+0xd4>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	23a0      	movs	r3, #160	@ 0xa0
 8004d26:	02db      	lsls	r3, r3, #11
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d10e      	bne.n	8004d4a <HAL_RCC_OscConfig+0xae>
 8004d2c:	4baa      	ldr	r3, [pc, #680]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4ba9      	ldr	r3, [pc, #676]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004d32:	2180      	movs	r1, #128	@ 0x80
 8004d34:	02c9      	lsls	r1, r1, #11
 8004d36:	430a      	orrs	r2, r1
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	4ba7      	ldr	r3, [pc, #668]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4ba6      	ldr	r3, [pc, #664]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004d40:	2180      	movs	r1, #128	@ 0x80
 8004d42:	0249      	lsls	r1, r1, #9
 8004d44:	430a      	orrs	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	e012      	b.n	8004d70 <HAL_RCC_OscConfig+0xd4>
 8004d4a:	4ba3      	ldr	r3, [pc, #652]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4ba2      	ldr	r3, [pc, #648]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004d50:	49a2      	ldr	r1, [pc, #648]	@ (8004fdc <HAL_RCC_OscConfig+0x340>)
 8004d52:	400a      	ands	r2, r1
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	4ba0      	ldr	r3, [pc, #640]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	2380      	movs	r3, #128	@ 0x80
 8004d5c:	025b      	lsls	r3, r3, #9
 8004d5e:	4013      	ands	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4b9c      	ldr	r3, [pc, #624]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b9b      	ldr	r3, [pc, #620]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004d6a:	499d      	ldr	r1, [pc, #628]	@ (8004fe0 <HAL_RCC_OscConfig+0x344>)
 8004d6c:	400a      	ands	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d015      	beq.n	8004da4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d78:	f7fd feac 	bl	8002ad4 <HAL_GetTick>
 8004d7c:	0003      	movs	r3, r0
 8004d7e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d80:	e009      	b.n	8004d96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d82:	f7fd fea7 	bl	8002ad4 <HAL_GetTick>
 8004d86:	0002      	movs	r2, r0
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b64      	cmp	r3, #100	@ 0x64
 8004d8e:	d902      	bls.n	8004d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	f000 fb4c 	bl	800542e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d96:	4b90      	ldr	r3, [pc, #576]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	2380      	movs	r3, #128	@ 0x80
 8004d9c:	029b      	lsls	r3, r3, #10
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d0ef      	beq.n	8004d82 <HAL_RCC_OscConfig+0xe6>
 8004da2:	e015      	b.n	8004dd0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da4:	f7fd fe96 	bl	8002ad4 <HAL_GetTick>
 8004da8:	0003      	movs	r3, r0
 8004daa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dae:	f7fd fe91 	bl	8002ad4 <HAL_GetTick>
 8004db2:	0002      	movs	r2, r0
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b64      	cmp	r3, #100	@ 0x64
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e336      	b.n	800542e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dc0:	4b85      	ldr	r3, [pc, #532]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	2380      	movs	r3, #128	@ 0x80
 8004dc6:	029b      	lsls	r3, r3, #10
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d1f0      	bne.n	8004dae <HAL_RCC_OscConfig+0x112>
 8004dcc:	e000      	b.n	8004dd0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d100      	bne.n	8004ddc <HAL_RCC_OscConfig+0x140>
 8004dda:	e099      	b.n	8004f10 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	2220      	movs	r2, #32
 8004de6:	4013      	ands	r3, r2
 8004de8:	d009      	beq.n	8004dfe <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004dea:	4b7b      	ldr	r3, [pc, #492]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b7a      	ldr	r3, [pc, #488]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004df0:	2120      	movs	r1, #32
 8004df2:	430a      	orrs	r2, r1
 8004df4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	2220      	movs	r2, #32
 8004dfa:	4393      	bics	r3, r2
 8004dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d005      	beq.n	8004e10 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	2b0c      	cmp	r3, #12
 8004e08:	d13e      	bne.n	8004e88 <HAL_RCC_OscConfig+0x1ec>
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d13b      	bne.n	8004e88 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004e10:	4b71      	ldr	r3, [pc, #452]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2204      	movs	r2, #4
 8004e16:	4013      	ands	r3, r2
 8004e18:	d004      	beq.n	8004e24 <HAL_RCC_OscConfig+0x188>
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e304      	b.n	800542e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e24:	4b6c      	ldr	r3, [pc, #432]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	4a6e      	ldr	r2, [pc, #440]	@ (8004fe4 <HAL_RCC_OscConfig+0x348>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	0019      	movs	r1, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	021a      	lsls	r2, r3, #8
 8004e34:	4b68      	ldr	r3, [pc, #416]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004e3a:	4b67      	ldr	r3, [pc, #412]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2209      	movs	r2, #9
 8004e40:	4393      	bics	r3, r2
 8004e42:	0019      	movs	r1, r3
 8004e44:	4b64      	ldr	r3, [pc, #400]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e4c:	f000 fc42 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 8004e50:	0001      	movs	r1, r0
 8004e52:	4b61      	ldr	r3, [pc, #388]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	091b      	lsrs	r3, r3, #4
 8004e58:	220f      	movs	r2, #15
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	4a62      	ldr	r2, [pc, #392]	@ (8004fe8 <HAL_RCC_OscConfig+0x34c>)
 8004e5e:	5cd3      	ldrb	r3, [r2, r3]
 8004e60:	000a      	movs	r2, r1
 8004e62:	40da      	lsrs	r2, r3
 8004e64:	4b61      	ldr	r3, [pc, #388]	@ (8004fec <HAL_RCC_OscConfig+0x350>)
 8004e66:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004e68:	4b61      	ldr	r3, [pc, #388]	@ (8004ff0 <HAL_RCC_OscConfig+0x354>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2513      	movs	r5, #19
 8004e6e:	197c      	adds	r4, r7, r5
 8004e70:	0018      	movs	r0, r3
 8004e72:	f7fd fde9 	bl	8002a48 <HAL_InitTick>
 8004e76:	0003      	movs	r3, r0
 8004e78:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004e7a:	197b      	adds	r3, r7, r5
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d046      	beq.n	8004f10 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004e82:	197b      	adds	r3, r7, r5
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	e2d2      	b.n	800542e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d027      	beq.n	8004ede <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004e8e:	4b52      	ldr	r3, [pc, #328]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2209      	movs	r2, #9
 8004e94:	4393      	bics	r3, r2
 8004e96:	0019      	movs	r1, r3
 8004e98:	4b4f      	ldr	r3, [pc, #316]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7fd fe18 	bl	8002ad4 <HAL_GetTick>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eaa:	f7fd fe13 	bl	8002ad4 <HAL_GetTick>
 8004eae:	0002      	movs	r2, r0
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e2b8      	b.n	800542e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ebc:	4b46      	ldr	r3, [pc, #280]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d0f1      	beq.n	8004eaa <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec6:	4b44      	ldr	r3, [pc, #272]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4a46      	ldr	r2, [pc, #280]	@ (8004fe4 <HAL_RCC_OscConfig+0x348>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	0019      	movs	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	021a      	lsls	r2, r3, #8
 8004ed6:	4b40      	ldr	r3, [pc, #256]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
 8004edc:	e018      	b.n	8004f10 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ede:	4b3e      	ldr	r3, [pc, #248]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	438a      	bics	r2, r1
 8004ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eea:	f7fd fdf3 	bl	8002ad4 <HAL_GetTick>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ef4:	f7fd fdee 	bl	8002ad4 <HAL_GetTick>
 8004ef8:	0002      	movs	r2, r0
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e293      	b.n	800542e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f06:	4b34      	ldr	r3, [pc, #208]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d1f1      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2210      	movs	r2, #16
 8004f16:	4013      	ands	r3, r2
 8004f18:	d100      	bne.n	8004f1c <HAL_RCC_OscConfig+0x280>
 8004f1a:	e0a2      	b.n	8005062 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d140      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f22:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	2380      	movs	r3, #128	@ 0x80
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d005      	beq.n	8004f3a <HAL_RCC_OscConfig+0x29e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e279      	b.n	800542e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f3a:	4b27      	ldr	r3, [pc, #156]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ff4 <HAL_RCC_OscConfig+0x358>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	0019      	movs	r1, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f48:	4b23      	ldr	r3, [pc, #140]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f4e:	4b22      	ldr	r3, [pc, #136]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	0a19      	lsrs	r1, r3, #8
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	061a      	lsls	r2, r3, #24
 8004f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f66:	0b5b      	lsrs	r3, r3, #13
 8004f68:	3301      	adds	r3, #1
 8004f6a:	2280      	movs	r2, #128	@ 0x80
 8004f6c:	0212      	lsls	r2, r2, #8
 8004f6e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004f70:	4b19      	ldr	r3, [pc, #100]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	091b      	lsrs	r3, r3, #4
 8004f76:	210f      	movs	r1, #15
 8004f78:	400b      	ands	r3, r1
 8004f7a:	491b      	ldr	r1, [pc, #108]	@ (8004fe8 <HAL_RCC_OscConfig+0x34c>)
 8004f7c:	5ccb      	ldrb	r3, [r1, r3]
 8004f7e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004f80:	4b1a      	ldr	r3, [pc, #104]	@ (8004fec <HAL_RCC_OscConfig+0x350>)
 8004f82:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004f84:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff0 <HAL_RCC_OscConfig+0x354>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2513      	movs	r5, #19
 8004f8a:	197c      	adds	r4, r7, r5
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f7fd fd5b 	bl	8002a48 <HAL_InitTick>
 8004f92:	0003      	movs	r3, r0
 8004f94:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004f96:	197b      	adds	r3, r7, r5
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d061      	beq.n	8005062 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004f9e:	197b      	adds	r3, r7, r5
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	e244      	b.n	800542e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d040      	beq.n	800502e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fac:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	4b09      	ldr	r3, [pc, #36]	@ (8004fd8 <HAL_RCC_OscConfig+0x33c>)
 8004fb2:	2180      	movs	r1, #128	@ 0x80
 8004fb4:	0049      	lsls	r1, r1, #1
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fba:	f7fd fd8b 	bl	8002ad4 <HAL_GetTick>
 8004fbe:	0003      	movs	r3, r0
 8004fc0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004fc2:	e019      	b.n	8004ff8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fc4:	f7fd fd86 	bl	8002ad4 <HAL_GetTick>
 8004fc8:	0002      	movs	r2, r0
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d912      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e22b      	b.n	800542e <HAL_RCC_OscConfig+0x792>
 8004fd6:	46c0      	nop			@ (mov r8, r8)
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	fffeffff 	.word	0xfffeffff
 8004fe0:	fffbffff 	.word	0xfffbffff
 8004fe4:	ffffe0ff 	.word	0xffffe0ff
 8004fe8:	08007d64 	.word	0x08007d64
 8004fec:	20000008 	.word	0x20000008
 8004ff0:	2000000c 	.word	0x2000000c
 8004ff4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ff8:	4bca      	ldr	r3, [pc, #808]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	2380      	movs	r3, #128	@ 0x80
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4013      	ands	r3, r2
 8005002:	d0df      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005004:	4bc7      	ldr	r3, [pc, #796]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	4ac7      	ldr	r2, [pc, #796]	@ (8005328 <HAL_RCC_OscConfig+0x68c>)
 800500a:	4013      	ands	r3, r2
 800500c:	0019      	movs	r1, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005012:	4bc4      	ldr	r3, [pc, #784]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005014:	430a      	orrs	r2, r1
 8005016:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005018:	4bc2      	ldr	r3, [pc, #776]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	0a19      	lsrs	r1, r3, #8
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	061a      	lsls	r2, r3, #24
 8005026:	4bbf      	ldr	r3, [pc, #764]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
 800502c:	e019      	b.n	8005062 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800502e:	4bbd      	ldr	r3, [pc, #756]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4bbc      	ldr	r3, [pc, #752]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005034:	49bd      	ldr	r1, [pc, #756]	@ (800532c <HAL_RCC_OscConfig+0x690>)
 8005036:	400a      	ands	r2, r1
 8005038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503a:	f7fd fd4b 	bl	8002ad4 <HAL_GetTick>
 800503e:	0003      	movs	r3, r0
 8005040:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005044:	f7fd fd46 	bl	8002ad4 <HAL_GetTick>
 8005048:	0002      	movs	r2, r0
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e1eb      	b.n	800542e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005056:	4bb3      	ldr	r3, [pc, #716]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	2380      	movs	r3, #128	@ 0x80
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4013      	ands	r3, r2
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2208      	movs	r2, #8
 8005068:	4013      	ands	r3, r2
 800506a:	d036      	beq.n	80050da <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d019      	beq.n	80050a8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005074:	4bab      	ldr	r3, [pc, #684]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005076:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005078:	4baa      	ldr	r3, [pc, #680]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 800507a:	2101      	movs	r1, #1
 800507c:	430a      	orrs	r2, r1
 800507e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005080:	f7fd fd28 	bl	8002ad4 <HAL_GetTick>
 8005084:	0003      	movs	r3, r0
 8005086:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800508a:	f7fd fd23 	bl	8002ad4 <HAL_GetTick>
 800508e:	0002      	movs	r2, r0
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e1c8      	b.n	800542e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800509c:	4ba1      	ldr	r3, [pc, #644]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 800509e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050a0:	2202      	movs	r2, #2
 80050a2:	4013      	ands	r3, r2
 80050a4:	d0f1      	beq.n	800508a <HAL_RCC_OscConfig+0x3ee>
 80050a6:	e018      	b.n	80050da <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a8:	4b9e      	ldr	r3, [pc, #632]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80050aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050ac:	4b9d      	ldr	r3, [pc, #628]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80050ae:	2101      	movs	r1, #1
 80050b0:	438a      	bics	r2, r1
 80050b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b4:	f7fd fd0e 	bl	8002ad4 <HAL_GetTick>
 80050b8:	0003      	movs	r3, r0
 80050ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050be:	f7fd fd09 	bl	8002ad4 <HAL_GetTick>
 80050c2:	0002      	movs	r2, r0
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e1ae      	b.n	800542e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050d0:	4b94      	ldr	r3, [pc, #592]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80050d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d4:	2202      	movs	r2, #2
 80050d6:	4013      	ands	r3, r2
 80050d8:	d1f1      	bne.n	80050be <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2204      	movs	r2, #4
 80050e0:	4013      	ands	r3, r2
 80050e2:	d100      	bne.n	80050e6 <HAL_RCC_OscConfig+0x44a>
 80050e4:	e0ae      	b.n	8005244 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e6:	2023      	movs	r0, #35	@ 0x23
 80050e8:	183b      	adds	r3, r7, r0
 80050ea:	2200      	movs	r2, #0
 80050ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80050f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050f2:	2380      	movs	r3, #128	@ 0x80
 80050f4:	055b      	lsls	r3, r3, #21
 80050f6:	4013      	ands	r3, r2
 80050f8:	d109      	bne.n	800510e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fa:	4b8a      	ldr	r3, [pc, #552]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80050fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050fe:	4b89      	ldr	r3, [pc, #548]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005100:	2180      	movs	r1, #128	@ 0x80
 8005102:	0549      	lsls	r1, r1, #21
 8005104:	430a      	orrs	r2, r1
 8005106:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005108:	183b      	adds	r3, r7, r0
 800510a:	2201      	movs	r2, #1
 800510c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510e:	4b88      	ldr	r3, [pc, #544]	@ (8005330 <HAL_RCC_OscConfig+0x694>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	2380      	movs	r3, #128	@ 0x80
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	4013      	ands	r3, r2
 8005118:	d11a      	bne.n	8005150 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800511a:	4b85      	ldr	r3, [pc, #532]	@ (8005330 <HAL_RCC_OscConfig+0x694>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b84      	ldr	r3, [pc, #528]	@ (8005330 <HAL_RCC_OscConfig+0x694>)
 8005120:	2180      	movs	r1, #128	@ 0x80
 8005122:	0049      	lsls	r1, r1, #1
 8005124:	430a      	orrs	r2, r1
 8005126:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005128:	f7fd fcd4 	bl	8002ad4 <HAL_GetTick>
 800512c:	0003      	movs	r3, r0
 800512e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005132:	f7fd fccf 	bl	8002ad4 <HAL_GetTick>
 8005136:	0002      	movs	r2, r0
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b64      	cmp	r3, #100	@ 0x64
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e174      	b.n	800542e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005144:	4b7a      	ldr	r3, [pc, #488]	@ (8005330 <HAL_RCC_OscConfig+0x694>)
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	2380      	movs	r3, #128	@ 0x80
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	4013      	ands	r3, r2
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	2380      	movs	r3, #128	@ 0x80
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	429a      	cmp	r2, r3
 800515a:	d107      	bne.n	800516c <HAL_RCC_OscConfig+0x4d0>
 800515c:	4b71      	ldr	r3, [pc, #452]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 800515e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005160:	4b70      	ldr	r3, [pc, #448]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005162:	2180      	movs	r1, #128	@ 0x80
 8005164:	0049      	lsls	r1, r1, #1
 8005166:	430a      	orrs	r2, r1
 8005168:	651a      	str	r2, [r3, #80]	@ 0x50
 800516a:	e031      	b.n	80051d0 <HAL_RCC_OscConfig+0x534>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10c      	bne.n	800518e <HAL_RCC_OscConfig+0x4f2>
 8005174:	4b6b      	ldr	r3, [pc, #428]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005176:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005178:	4b6a      	ldr	r3, [pc, #424]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 800517a:	496c      	ldr	r1, [pc, #432]	@ (800532c <HAL_RCC_OscConfig+0x690>)
 800517c:	400a      	ands	r2, r1
 800517e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005180:	4b68      	ldr	r3, [pc, #416]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005182:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005184:	4b67      	ldr	r3, [pc, #412]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005186:	496b      	ldr	r1, [pc, #428]	@ (8005334 <HAL_RCC_OscConfig+0x698>)
 8005188:	400a      	ands	r2, r1
 800518a:	651a      	str	r2, [r3, #80]	@ 0x50
 800518c:	e020      	b.n	80051d0 <HAL_RCC_OscConfig+0x534>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	23a0      	movs	r3, #160	@ 0xa0
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	429a      	cmp	r2, r3
 8005198:	d10e      	bne.n	80051b8 <HAL_RCC_OscConfig+0x51c>
 800519a:	4b62      	ldr	r3, [pc, #392]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 800519c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800519e:	4b61      	ldr	r3, [pc, #388]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80051a0:	2180      	movs	r1, #128	@ 0x80
 80051a2:	00c9      	lsls	r1, r1, #3
 80051a4:	430a      	orrs	r2, r1
 80051a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80051a8:	4b5e      	ldr	r3, [pc, #376]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80051aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051ac:	4b5d      	ldr	r3, [pc, #372]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80051ae:	2180      	movs	r1, #128	@ 0x80
 80051b0:	0049      	lsls	r1, r1, #1
 80051b2:	430a      	orrs	r2, r1
 80051b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80051b6:	e00b      	b.n	80051d0 <HAL_RCC_OscConfig+0x534>
 80051b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80051ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051bc:	4b59      	ldr	r3, [pc, #356]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80051be:	495b      	ldr	r1, [pc, #364]	@ (800532c <HAL_RCC_OscConfig+0x690>)
 80051c0:	400a      	ands	r2, r1
 80051c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80051c4:	4b57      	ldr	r3, [pc, #348]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80051c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051c8:	4b56      	ldr	r3, [pc, #344]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80051ca:	495a      	ldr	r1, [pc, #360]	@ (8005334 <HAL_RCC_OscConfig+0x698>)
 80051cc:	400a      	ands	r2, r1
 80051ce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d015      	beq.n	8005204 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d8:	f7fd fc7c 	bl	8002ad4 <HAL_GetTick>
 80051dc:	0003      	movs	r3, r0
 80051de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051e0:	e009      	b.n	80051f6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7fd fc77 	bl	8002ad4 <HAL_GetTick>
 80051e6:	0002      	movs	r2, r0
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	4a52      	ldr	r2, [pc, #328]	@ (8005338 <HAL_RCC_OscConfig+0x69c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e11b      	b.n	800542e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80051f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051fa:	2380      	movs	r3, #128	@ 0x80
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4013      	ands	r3, r2
 8005200:	d0ef      	beq.n	80051e2 <HAL_RCC_OscConfig+0x546>
 8005202:	e014      	b.n	800522e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005204:	f7fd fc66 	bl	8002ad4 <HAL_GetTick>
 8005208:	0003      	movs	r3, r0
 800520a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800520c:	e009      	b.n	8005222 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520e:	f7fd fc61 	bl	8002ad4 <HAL_GetTick>
 8005212:	0002      	movs	r2, r0
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	4a47      	ldr	r2, [pc, #284]	@ (8005338 <HAL_RCC_OscConfig+0x69c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e105      	b.n	800542e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005222:	4b40      	ldr	r3, [pc, #256]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005224:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005226:	2380      	movs	r3, #128	@ 0x80
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4013      	ands	r3, r2
 800522c:	d1ef      	bne.n	800520e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800522e:	2323      	movs	r3, #35	@ 0x23
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d105      	bne.n	8005244 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005238:	4b3a      	ldr	r3, [pc, #232]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 800523a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800523c:	4b39      	ldr	r3, [pc, #228]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 800523e:	493f      	ldr	r1, [pc, #252]	@ (800533c <HAL_RCC_OscConfig+0x6a0>)
 8005240:	400a      	ands	r2, r1
 8005242:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2220      	movs	r2, #32
 800524a:	4013      	ands	r3, r2
 800524c:	d049      	beq.n	80052e2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d026      	beq.n	80052a4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005256:	4b33      	ldr	r3, [pc, #204]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	4b32      	ldr	r3, [pc, #200]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 800525c:	2101      	movs	r1, #1
 800525e:	430a      	orrs	r2, r1
 8005260:	609a      	str	r2, [r3, #8]
 8005262:	4b30      	ldr	r3, [pc, #192]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005266:	4b2f      	ldr	r3, [pc, #188]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005268:	2101      	movs	r1, #1
 800526a:	430a      	orrs	r2, r1
 800526c:	635a      	str	r2, [r3, #52]	@ 0x34
 800526e:	4b34      	ldr	r3, [pc, #208]	@ (8005340 <HAL_RCC_OscConfig+0x6a4>)
 8005270:	6a1a      	ldr	r2, [r3, #32]
 8005272:	4b33      	ldr	r3, [pc, #204]	@ (8005340 <HAL_RCC_OscConfig+0x6a4>)
 8005274:	2180      	movs	r1, #128	@ 0x80
 8005276:	0189      	lsls	r1, r1, #6
 8005278:	430a      	orrs	r2, r1
 800527a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527c:	f7fd fc2a 	bl	8002ad4 <HAL_GetTick>
 8005280:	0003      	movs	r3, r0
 8005282:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005286:	f7fd fc25 	bl	8002ad4 <HAL_GetTick>
 800528a:	0002      	movs	r2, r0
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e0ca      	b.n	800542e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005298:	4b22      	ldr	r3, [pc, #136]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2202      	movs	r2, #2
 800529e:	4013      	ands	r3, r2
 80052a0:	d0f1      	beq.n	8005286 <HAL_RCC_OscConfig+0x5ea>
 80052a2:	e01e      	b.n	80052e2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80052a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80052aa:	2101      	movs	r1, #1
 80052ac:	438a      	bics	r2, r1
 80052ae:	609a      	str	r2, [r3, #8]
 80052b0:	4b23      	ldr	r3, [pc, #140]	@ (8005340 <HAL_RCC_OscConfig+0x6a4>)
 80052b2:	6a1a      	ldr	r2, [r3, #32]
 80052b4:	4b22      	ldr	r3, [pc, #136]	@ (8005340 <HAL_RCC_OscConfig+0x6a4>)
 80052b6:	4923      	ldr	r1, [pc, #140]	@ (8005344 <HAL_RCC_OscConfig+0x6a8>)
 80052b8:	400a      	ands	r2, r1
 80052ba:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fd fc0a 	bl	8002ad4 <HAL_GetTick>
 80052c0:	0003      	movs	r3, r0
 80052c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052c6:	f7fd fc05 	bl	8002ad4 <HAL_GetTick>
 80052ca:	0002      	movs	r2, r0
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e0aa      	b.n	800542e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052d8:	4b12      	ldr	r3, [pc, #72]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2202      	movs	r2, #2
 80052de:	4013      	ands	r3, r2
 80052e0:	d1f1      	bne.n	80052c6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d100      	bne.n	80052ec <HAL_RCC_OscConfig+0x650>
 80052ea:	e09f      	b.n	800542c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	2b0c      	cmp	r3, #12
 80052f0:	d100      	bne.n	80052f4 <HAL_RCC_OscConfig+0x658>
 80052f2:	e078      	b.n	80053e6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d159      	bne.n	80053b0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052fc:	4b09      	ldr	r3, [pc, #36]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	4b08      	ldr	r3, [pc, #32]	@ (8005324 <HAL_RCC_OscConfig+0x688>)
 8005302:	4911      	ldr	r1, [pc, #68]	@ (8005348 <HAL_RCC_OscConfig+0x6ac>)
 8005304:	400a      	ands	r2, r1
 8005306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005308:	f7fd fbe4 	bl	8002ad4 <HAL_GetTick>
 800530c:	0003      	movs	r3, r0
 800530e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005310:	e01c      	b.n	800534c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005312:	f7fd fbdf 	bl	8002ad4 <HAL_GetTick>
 8005316:	0002      	movs	r2, r0
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d915      	bls.n	800534c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e084      	b.n	800542e <HAL_RCC_OscConfig+0x792>
 8005324:	40021000 	.word	0x40021000
 8005328:	ffff1fff 	.word	0xffff1fff
 800532c:	fffffeff 	.word	0xfffffeff
 8005330:	40007000 	.word	0x40007000
 8005334:	fffffbff 	.word	0xfffffbff
 8005338:	00001388 	.word	0x00001388
 800533c:	efffffff 	.word	0xefffffff
 8005340:	40010000 	.word	0x40010000
 8005344:	ffffdfff 	.word	0xffffdfff
 8005348:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800534c:	4b3a      	ldr	r3, [pc, #232]	@ (8005438 <HAL_RCC_OscConfig+0x79c>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	2380      	movs	r3, #128	@ 0x80
 8005352:	049b      	lsls	r3, r3, #18
 8005354:	4013      	ands	r3, r2
 8005356:	d1dc      	bne.n	8005312 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005358:	4b37      	ldr	r3, [pc, #220]	@ (8005438 <HAL_RCC_OscConfig+0x79c>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4a37      	ldr	r2, [pc, #220]	@ (800543c <HAL_RCC_OscConfig+0x7a0>)
 800535e:	4013      	ands	r3, r2
 8005360:	0019      	movs	r1, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005370:	431a      	orrs	r2, r3
 8005372:	4b31      	ldr	r3, [pc, #196]	@ (8005438 <HAL_RCC_OscConfig+0x79c>)
 8005374:	430a      	orrs	r2, r1
 8005376:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005378:	4b2f      	ldr	r3, [pc, #188]	@ (8005438 <HAL_RCC_OscConfig+0x79c>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4b2e      	ldr	r3, [pc, #184]	@ (8005438 <HAL_RCC_OscConfig+0x79c>)
 800537e:	2180      	movs	r1, #128	@ 0x80
 8005380:	0449      	lsls	r1, r1, #17
 8005382:	430a      	orrs	r2, r1
 8005384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005386:	f7fd fba5 	bl	8002ad4 <HAL_GetTick>
 800538a:	0003      	movs	r3, r0
 800538c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005390:	f7fd fba0 	bl	8002ad4 <HAL_GetTick>
 8005394:	0002      	movs	r2, r0
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e045      	b.n	800542e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80053a2:	4b25      	ldr	r3, [pc, #148]	@ (8005438 <HAL_RCC_OscConfig+0x79c>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	2380      	movs	r3, #128	@ 0x80
 80053a8:	049b      	lsls	r3, r3, #18
 80053aa:	4013      	ands	r3, r2
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0x6f4>
 80053ae:	e03d      	b.n	800542c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b0:	4b21      	ldr	r3, [pc, #132]	@ (8005438 <HAL_RCC_OscConfig+0x79c>)
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	4b20      	ldr	r3, [pc, #128]	@ (8005438 <HAL_RCC_OscConfig+0x79c>)
 80053b6:	4922      	ldr	r1, [pc, #136]	@ (8005440 <HAL_RCC_OscConfig+0x7a4>)
 80053b8:	400a      	ands	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053bc:	f7fd fb8a 	bl	8002ad4 <HAL_GetTick>
 80053c0:	0003      	movs	r3, r0
 80053c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c6:	f7fd fb85 	bl	8002ad4 <HAL_GetTick>
 80053ca:	0002      	movs	r2, r0
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e02a      	b.n	800542e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80053d8:	4b17      	ldr	r3, [pc, #92]	@ (8005438 <HAL_RCC_OscConfig+0x79c>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	2380      	movs	r3, #128	@ 0x80
 80053de:	049b      	lsls	r3, r3, #18
 80053e0:	4013      	ands	r3, r2
 80053e2:	d1f0      	bne.n	80053c6 <HAL_RCC_OscConfig+0x72a>
 80053e4:	e022      	b.n	800542c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e01d      	b.n	800542e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053f2:	4b11      	ldr	r3, [pc, #68]	@ (8005438 <HAL_RCC_OscConfig+0x79c>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	2380      	movs	r3, #128	@ 0x80
 80053fc:	025b      	lsls	r3, r3, #9
 80053fe:	401a      	ands	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005404:	429a      	cmp	r2, r3
 8005406:	d10f      	bne.n	8005428 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	23f0      	movs	r3, #240	@ 0xf0
 800540c:	039b      	lsls	r3, r3, #14
 800540e:	401a      	ands	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005414:	429a      	cmp	r2, r3
 8005416:	d107      	bne.n	8005428 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	23c0      	movs	r3, #192	@ 0xc0
 800541c:	041b      	lsls	r3, r3, #16
 800541e:	401a      	ands	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005424:	429a      	cmp	r2, r3
 8005426:	d001      	beq.n	800542c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	0018      	movs	r0, r3
 8005430:	46bd      	mov	sp, r7
 8005432:	b00a      	add	sp, #40	@ 0x28
 8005434:	bdb0      	pop	{r4, r5, r7, pc}
 8005436:	46c0      	nop			@ (mov r8, r8)
 8005438:	40021000 	.word	0x40021000
 800543c:	ff02ffff 	.word	0xff02ffff
 8005440:	feffffff 	.word	0xfeffffff

08005444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005444:	b5b0      	push	{r4, r5, r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e128      	b.n	80056aa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005458:	4b96      	ldr	r3, [pc, #600]	@ (80056b4 <HAL_RCC_ClockConfig+0x270>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2201      	movs	r2, #1
 800545e:	4013      	ands	r3, r2
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d91e      	bls.n	80054a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005466:	4b93      	ldr	r3, [pc, #588]	@ (80056b4 <HAL_RCC_ClockConfig+0x270>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2201      	movs	r2, #1
 800546c:	4393      	bics	r3, r2
 800546e:	0019      	movs	r1, r3
 8005470:	4b90      	ldr	r3, [pc, #576]	@ (80056b4 <HAL_RCC_ClockConfig+0x270>)
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005478:	f7fd fb2c 	bl	8002ad4 <HAL_GetTick>
 800547c:	0003      	movs	r3, r0
 800547e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005480:	e009      	b.n	8005496 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005482:	f7fd fb27 	bl	8002ad4 <HAL_GetTick>
 8005486:	0002      	movs	r2, r0
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	4a8a      	ldr	r2, [pc, #552]	@ (80056b8 <HAL_RCC_ClockConfig+0x274>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e109      	b.n	80056aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005496:	4b87      	ldr	r3, [pc, #540]	@ (80056b4 <HAL_RCC_ClockConfig+0x270>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2201      	movs	r2, #1
 800549c:	4013      	ands	r3, r2
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d1ee      	bne.n	8005482 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2202      	movs	r2, #2
 80054aa:	4013      	ands	r3, r2
 80054ac:	d009      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ae:	4b83      	ldr	r3, [pc, #524]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	22f0      	movs	r2, #240	@ 0xf0
 80054b4:	4393      	bics	r3, r2
 80054b6:	0019      	movs	r1, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	4b7f      	ldr	r3, [pc, #508]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 80054be:	430a      	orrs	r2, r1
 80054c0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2201      	movs	r2, #1
 80054c8:	4013      	ands	r3, r2
 80054ca:	d100      	bne.n	80054ce <HAL_RCC_ClockConfig+0x8a>
 80054cc:	e089      	b.n	80055e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d107      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054d6:	4b79      	ldr	r3, [pc, #484]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	2380      	movs	r3, #128	@ 0x80
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	4013      	ands	r3, r2
 80054e0:	d120      	bne.n	8005524 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e0e1      	b.n	80056aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d107      	bne.n	80054fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054ee:	4b73      	ldr	r3, [pc, #460]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	2380      	movs	r3, #128	@ 0x80
 80054f4:	049b      	lsls	r3, r3, #18
 80054f6:	4013      	ands	r3, r2
 80054f8:	d114      	bne.n	8005524 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e0d5      	b.n	80056aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d106      	bne.n	8005514 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005506:	4b6d      	ldr	r3, [pc, #436]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2204      	movs	r2, #4
 800550c:	4013      	ands	r3, r2
 800550e:	d109      	bne.n	8005524 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0ca      	b.n	80056aa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005514:	4b69      	ldr	r3, [pc, #420]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	2380      	movs	r3, #128	@ 0x80
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4013      	ands	r3, r2
 800551e:	d101      	bne.n	8005524 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e0c2      	b.n	80056aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005524:	4b65      	ldr	r3, [pc, #404]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2203      	movs	r2, #3
 800552a:	4393      	bics	r3, r2
 800552c:	0019      	movs	r1, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	4b62      	ldr	r3, [pc, #392]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 8005534:	430a      	orrs	r2, r1
 8005536:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005538:	f7fd facc 	bl	8002ad4 <HAL_GetTick>
 800553c:	0003      	movs	r3, r0
 800553e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d111      	bne.n	800556c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005548:	e009      	b.n	800555e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554a:	f7fd fac3 	bl	8002ad4 <HAL_GetTick>
 800554e:	0002      	movs	r2, r0
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	4a58      	ldr	r2, [pc, #352]	@ (80056b8 <HAL_RCC_ClockConfig+0x274>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d901      	bls.n	800555e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e0a5      	b.n	80056aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800555e:	4b57      	ldr	r3, [pc, #348]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	220c      	movs	r2, #12
 8005564:	4013      	ands	r3, r2
 8005566:	2b08      	cmp	r3, #8
 8005568:	d1ef      	bne.n	800554a <HAL_RCC_ClockConfig+0x106>
 800556a:	e03a      	b.n	80055e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2b03      	cmp	r3, #3
 8005572:	d111      	bne.n	8005598 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005574:	e009      	b.n	800558a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005576:	f7fd faad 	bl	8002ad4 <HAL_GetTick>
 800557a:	0002      	movs	r2, r0
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	4a4d      	ldr	r2, [pc, #308]	@ (80056b8 <HAL_RCC_ClockConfig+0x274>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d901      	bls.n	800558a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e08f      	b.n	80056aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800558a:	4b4c      	ldr	r3, [pc, #304]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	220c      	movs	r2, #12
 8005590:	4013      	ands	r3, r2
 8005592:	2b0c      	cmp	r3, #12
 8005594:	d1ef      	bne.n	8005576 <HAL_RCC_ClockConfig+0x132>
 8005596:	e024      	b.n	80055e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d11b      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80055a0:	e009      	b.n	80055b6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a2:	f7fd fa97 	bl	8002ad4 <HAL_GetTick>
 80055a6:	0002      	movs	r2, r0
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	4a42      	ldr	r2, [pc, #264]	@ (80056b8 <HAL_RCC_ClockConfig+0x274>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e079      	b.n	80056aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80055b6:	4b41      	ldr	r3, [pc, #260]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	220c      	movs	r2, #12
 80055bc:	4013      	ands	r3, r2
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d1ef      	bne.n	80055a2 <HAL_RCC_ClockConfig+0x15e>
 80055c2:	e00e      	b.n	80055e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c4:	f7fd fa86 	bl	8002ad4 <HAL_GetTick>
 80055c8:	0002      	movs	r2, r0
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	4a3a      	ldr	r2, [pc, #232]	@ (80056b8 <HAL_RCC_ClockConfig+0x274>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e068      	b.n	80056aa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80055d8:	4b38      	ldr	r3, [pc, #224]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	220c      	movs	r2, #12
 80055de:	4013      	ands	r3, r2
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055e2:	4b34      	ldr	r3, [pc, #208]	@ (80056b4 <HAL_RCC_ClockConfig+0x270>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	4013      	ands	r3, r2
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d21e      	bcs.n	800562e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f0:	4b30      	ldr	r3, [pc, #192]	@ (80056b4 <HAL_RCC_ClockConfig+0x270>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2201      	movs	r2, #1
 80055f6:	4393      	bics	r3, r2
 80055f8:	0019      	movs	r1, r3
 80055fa:	4b2e      	ldr	r3, [pc, #184]	@ (80056b4 <HAL_RCC_ClockConfig+0x270>)
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005602:	f7fd fa67 	bl	8002ad4 <HAL_GetTick>
 8005606:	0003      	movs	r3, r0
 8005608:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800560a:	e009      	b.n	8005620 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560c:	f7fd fa62 	bl	8002ad4 <HAL_GetTick>
 8005610:	0002      	movs	r2, r0
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	4a28      	ldr	r2, [pc, #160]	@ (80056b8 <HAL_RCC_ClockConfig+0x274>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e044      	b.n	80056aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005620:	4b24      	ldr	r3, [pc, #144]	@ (80056b4 <HAL_RCC_ClockConfig+0x270>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2201      	movs	r2, #1
 8005626:	4013      	ands	r3, r2
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d1ee      	bne.n	800560c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2204      	movs	r2, #4
 8005634:	4013      	ands	r3, r2
 8005636:	d009      	beq.n	800564c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005638:	4b20      	ldr	r3, [pc, #128]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4a20      	ldr	r2, [pc, #128]	@ (80056c0 <HAL_RCC_ClockConfig+0x27c>)
 800563e:	4013      	ands	r3, r2
 8005640:	0019      	movs	r1, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	4b1d      	ldr	r3, [pc, #116]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 8005648:	430a      	orrs	r2, r1
 800564a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2208      	movs	r2, #8
 8005652:	4013      	ands	r3, r2
 8005654:	d00a      	beq.n	800566c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005656:	4b19      	ldr	r3, [pc, #100]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	4a1a      	ldr	r2, [pc, #104]	@ (80056c4 <HAL_RCC_ClockConfig+0x280>)
 800565c:	4013      	ands	r3, r2
 800565e:	0019      	movs	r1, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	00da      	lsls	r2, r3, #3
 8005666:	4b15      	ldr	r3, [pc, #84]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 8005668:	430a      	orrs	r2, r1
 800566a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800566c:	f000 f832 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 8005670:	0001      	movs	r1, r0
 8005672:	4b12      	ldr	r3, [pc, #72]	@ (80056bc <HAL_RCC_ClockConfig+0x278>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	091b      	lsrs	r3, r3, #4
 8005678:	220f      	movs	r2, #15
 800567a:	4013      	ands	r3, r2
 800567c:	4a12      	ldr	r2, [pc, #72]	@ (80056c8 <HAL_RCC_ClockConfig+0x284>)
 800567e:	5cd3      	ldrb	r3, [r2, r3]
 8005680:	000a      	movs	r2, r1
 8005682:	40da      	lsrs	r2, r3
 8005684:	4b11      	ldr	r3, [pc, #68]	@ (80056cc <HAL_RCC_ClockConfig+0x288>)
 8005686:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005688:	4b11      	ldr	r3, [pc, #68]	@ (80056d0 <HAL_RCC_ClockConfig+0x28c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	250b      	movs	r5, #11
 800568e:	197c      	adds	r4, r7, r5
 8005690:	0018      	movs	r0, r3
 8005692:	f7fd f9d9 	bl	8002a48 <HAL_InitTick>
 8005696:	0003      	movs	r3, r0
 8005698:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800569a:	197b      	adds	r3, r7, r5
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80056a2:	197b      	adds	r3, r7, r5
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	e000      	b.n	80056aa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	0018      	movs	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b004      	add	sp, #16
 80056b0:	bdb0      	pop	{r4, r5, r7, pc}
 80056b2:	46c0      	nop			@ (mov r8, r8)
 80056b4:	40022000 	.word	0x40022000
 80056b8:	00001388 	.word	0x00001388
 80056bc:	40021000 	.word	0x40021000
 80056c0:	fffff8ff 	.word	0xfffff8ff
 80056c4:	ffffc7ff 	.word	0xffffc7ff
 80056c8:	08007d64 	.word	0x08007d64
 80056cc:	20000008 	.word	0x20000008
 80056d0:	2000000c 	.word	0x2000000c

080056d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80056da:	4b3c      	ldr	r3, [pc, #240]	@ (80057cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	220c      	movs	r2, #12
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b0c      	cmp	r3, #12
 80056e8:	d013      	beq.n	8005712 <HAL_RCC_GetSysClockFreq+0x3e>
 80056ea:	d85c      	bhi.n	80057a6 <HAL_RCC_GetSysClockFreq+0xd2>
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d002      	beq.n	80056f6 <HAL_RCC_GetSysClockFreq+0x22>
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d00b      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x38>
 80056f4:	e057      	b.n	80057a6 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80056f6:	4b35      	ldr	r3, [pc, #212]	@ (80057cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2210      	movs	r2, #16
 80056fc:	4013      	ands	r3, r2
 80056fe:	d002      	beq.n	8005706 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005700:	4b33      	ldr	r3, [pc, #204]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005702:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005704:	e05d      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8005706:	4b33      	ldr	r3, [pc, #204]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005708:	613b      	str	r3, [r7, #16]
      break;
 800570a:	e05a      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800570c:	4b32      	ldr	r3, [pc, #200]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0x104>)
 800570e:	613b      	str	r3, [r7, #16]
      break;
 8005710:	e057      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	0c9b      	lsrs	r3, r3, #18
 8005716:	220f      	movs	r2, #15
 8005718:	4013      	ands	r3, r2
 800571a:	4a30      	ldr	r2, [pc, #192]	@ (80057dc <HAL_RCC_GetSysClockFreq+0x108>)
 800571c:	5cd3      	ldrb	r3, [r2, r3]
 800571e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	0d9b      	lsrs	r3, r3, #22
 8005724:	2203      	movs	r2, #3
 8005726:	4013      	ands	r3, r2
 8005728:	3301      	adds	r3, #1
 800572a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800572c:	4b27      	ldr	r3, [pc, #156]	@ (80057cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	2380      	movs	r3, #128	@ 0x80
 8005732:	025b      	lsls	r3, r3, #9
 8005734:	4013      	ands	r3, r2
 8005736:	d00f      	beq.n	8005758 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	000a      	movs	r2, r1
 800573c:	0152      	lsls	r2, r2, #5
 800573e:	1a52      	subs	r2, r2, r1
 8005740:	0193      	lsls	r3, r2, #6
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	185b      	adds	r3, r3, r1
 8005748:	025b      	lsls	r3, r3, #9
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	0018      	movs	r0, r3
 800574e:	f7fa fced 	bl	800012c <__udivsi3>
 8005752:	0003      	movs	r3, r0
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	e023      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005758:	4b1c      	ldr	r3, [pc, #112]	@ (80057cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2210      	movs	r2, #16
 800575e:	4013      	ands	r3, r2
 8005760:	d00f      	beq.n	8005782 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	000a      	movs	r2, r1
 8005766:	0152      	lsls	r2, r2, #5
 8005768:	1a52      	subs	r2, r2, r1
 800576a:	0193      	lsls	r3, r2, #6
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	185b      	adds	r3, r3, r1
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	0018      	movs	r0, r3
 8005778:	f7fa fcd8 	bl	800012c <__udivsi3>
 800577c:	0003      	movs	r3, r0
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	e00e      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	000a      	movs	r2, r1
 8005786:	0152      	lsls	r2, r2, #5
 8005788:	1a52      	subs	r2, r2, r1
 800578a:	0193      	lsls	r3, r2, #6
 800578c:	1a9b      	subs	r3, r3, r2
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	185b      	adds	r3, r3, r1
 8005792:	029b      	lsls	r3, r3, #10
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	0018      	movs	r0, r3
 8005798:	f7fa fcc8 	bl	800012c <__udivsi3>
 800579c:	0003      	movs	r3, r0
 800579e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	613b      	str	r3, [r7, #16]
      break;
 80057a4:	e00d      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80057a6:	4b09      	ldr	r3, [pc, #36]	@ (80057cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	0b5b      	lsrs	r3, r3, #13
 80057ac:	2207      	movs	r2, #7
 80057ae:	4013      	ands	r3, r2
 80057b0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	3301      	adds	r3, #1
 80057b6:	2280      	movs	r2, #128	@ 0x80
 80057b8:	0212      	lsls	r2, r2, #8
 80057ba:	409a      	lsls	r2, r3
 80057bc:	0013      	movs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
      break;
 80057c0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80057c2:	693b      	ldr	r3, [r7, #16]
}
 80057c4:	0018      	movs	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	b006      	add	sp, #24
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40021000 	.word	0x40021000
 80057d0:	003d0900 	.word	0x003d0900
 80057d4:	00f42400 	.word	0x00f42400
 80057d8:	007a1200 	.word	0x007a1200
 80057dc:	08007d7c 	.word	0x08007d7c

080057e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057e4:	4b02      	ldr	r3, [pc, #8]	@ (80057f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80057e6:	681b      	ldr	r3, [r3, #0]
}
 80057e8:	0018      	movs	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	20000008 	.word	0x20000008

080057f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057f8:	f7ff fff2 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 80057fc:	0001      	movs	r1, r0
 80057fe:	4b06      	ldr	r3, [pc, #24]	@ (8005818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	0a1b      	lsrs	r3, r3, #8
 8005804:	2207      	movs	r2, #7
 8005806:	4013      	ands	r3, r2
 8005808:	4a04      	ldr	r2, [pc, #16]	@ (800581c <HAL_RCC_GetPCLK1Freq+0x28>)
 800580a:	5cd3      	ldrb	r3, [r2, r3]
 800580c:	40d9      	lsrs	r1, r3
 800580e:	000b      	movs	r3, r1
}
 8005810:	0018      	movs	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	46c0      	nop			@ (mov r8, r8)
 8005818:	40021000 	.word	0x40021000
 800581c:	08007d74 	.word	0x08007d74

08005820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005824:	f7ff ffdc 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 8005828:	0001      	movs	r1, r0
 800582a:	4b06      	ldr	r3, [pc, #24]	@ (8005844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	0adb      	lsrs	r3, r3, #11
 8005830:	2207      	movs	r2, #7
 8005832:	4013      	ands	r3, r2
 8005834:	4a04      	ldr	r2, [pc, #16]	@ (8005848 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005836:	5cd3      	ldrb	r3, [r2, r3]
 8005838:	40d9      	lsrs	r1, r3
 800583a:	000b      	movs	r3, r1
}
 800583c:	0018      	movs	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	46c0      	nop			@ (mov r8, r8)
 8005844:	40021000 	.word	0x40021000
 8005848:	08007d74 	.word	0x08007d74

0800584c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005854:	2317      	movs	r3, #23
 8005856:	18fb      	adds	r3, r7, r3
 8005858:	2200      	movs	r2, #0
 800585a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2220      	movs	r2, #32
 8005862:	4013      	ands	r3, r2
 8005864:	d106      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	2380      	movs	r3, #128	@ 0x80
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	4013      	ands	r3, r2
 8005870:	d100      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005872:	e104      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005874:	4bb9      	ldr	r3, [pc, #740]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005876:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005878:	2380      	movs	r3, #128	@ 0x80
 800587a:	055b      	lsls	r3, r3, #21
 800587c:	4013      	ands	r3, r2
 800587e:	d10a      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005880:	4bb6      	ldr	r3, [pc, #728]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005882:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005884:	4bb5      	ldr	r3, [pc, #724]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005886:	2180      	movs	r1, #128	@ 0x80
 8005888:	0549      	lsls	r1, r1, #21
 800588a:	430a      	orrs	r2, r1
 800588c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800588e:	2317      	movs	r3, #23
 8005890:	18fb      	adds	r3, r7, r3
 8005892:	2201      	movs	r2, #1
 8005894:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005896:	4bb2      	ldr	r3, [pc, #712]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	2380      	movs	r3, #128	@ 0x80
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	4013      	ands	r3, r2
 80058a0:	d11a      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058a2:	4baf      	ldr	r3, [pc, #700]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4bae      	ldr	r3, [pc, #696]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80058a8:	2180      	movs	r1, #128	@ 0x80
 80058aa:	0049      	lsls	r1, r1, #1
 80058ac:	430a      	orrs	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058b0:	f7fd f910 	bl	8002ad4 <HAL_GetTick>
 80058b4:	0003      	movs	r3, r0
 80058b6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b8:	e008      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ba:	f7fd f90b 	bl	8002ad4 <HAL_GetTick>
 80058be:	0002      	movs	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b64      	cmp	r3, #100	@ 0x64
 80058c6:	d901      	bls.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e143      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058cc:	4ba4      	ldr	r3, [pc, #656]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	2380      	movs	r3, #128	@ 0x80
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	4013      	ands	r3, r2
 80058d6:	d0f0      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80058d8:	4ba0      	ldr	r3, [pc, #640]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	23c0      	movs	r3, #192	@ 0xc0
 80058de:	039b      	lsls	r3, r3, #14
 80058e0:	4013      	ands	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	23c0      	movs	r3, #192	@ 0xc0
 80058ea:	039b      	lsls	r3, r3, #14
 80058ec:	4013      	ands	r3, r2
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d107      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	23c0      	movs	r3, #192	@ 0xc0
 80058fa:	039b      	lsls	r3, r3, #14
 80058fc:	4013      	ands	r3, r2
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	429a      	cmp	r2, r3
 8005902:	d013      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	23c0      	movs	r3, #192	@ 0xc0
 800590a:	029b      	lsls	r3, r3, #10
 800590c:	401a      	ands	r2, r3
 800590e:	23c0      	movs	r3, #192	@ 0xc0
 8005910:	029b      	lsls	r3, r3, #10
 8005912:	429a      	cmp	r2, r3
 8005914:	d10a      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005916:	4b91      	ldr	r3, [pc, #580]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	2380      	movs	r3, #128	@ 0x80
 800591c:	029b      	lsls	r3, r3, #10
 800591e:	401a      	ands	r2, r3
 8005920:	2380      	movs	r3, #128	@ 0x80
 8005922:	029b      	lsls	r3, r3, #10
 8005924:	429a      	cmp	r2, r3
 8005926:	d101      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e113      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800592c:	4b8b      	ldr	r3, [pc, #556]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800592e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005930:	23c0      	movs	r3, #192	@ 0xc0
 8005932:	029b      	lsls	r3, r3, #10
 8005934:	4013      	ands	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d049      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	23c0      	movs	r3, #192	@ 0xc0
 8005944:	029b      	lsls	r3, r3, #10
 8005946:	4013      	ands	r3, r2
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	429a      	cmp	r2, r3
 800594c:	d004      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2220      	movs	r2, #32
 8005954:	4013      	ands	r3, r2
 8005956:	d10d      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	23c0      	movs	r3, #192	@ 0xc0
 800595e:	029b      	lsls	r3, r3, #10
 8005960:	4013      	ands	r3, r2
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	429a      	cmp	r2, r3
 8005966:	d034      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	2380      	movs	r3, #128	@ 0x80
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	4013      	ands	r3, r2
 8005972:	d02e      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005974:	4b79      	ldr	r3, [pc, #484]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005978:	4a7a      	ldr	r2, [pc, #488]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800597a:	4013      	ands	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800597e:	4b77      	ldr	r3, [pc, #476]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005980:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005982:	4b76      	ldr	r3, [pc, #472]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005984:	2180      	movs	r1, #128	@ 0x80
 8005986:	0309      	lsls	r1, r1, #12
 8005988:	430a      	orrs	r2, r1
 800598a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800598c:	4b73      	ldr	r3, [pc, #460]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800598e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005990:	4b72      	ldr	r3, [pc, #456]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005992:	4975      	ldr	r1, [pc, #468]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005994:	400a      	ands	r2, r1
 8005996:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005998:	4b70      	ldr	r3, [pc, #448]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	2380      	movs	r3, #128	@ 0x80
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	4013      	ands	r3, r2
 80059a6:	d014      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a8:	f7fd f894 	bl	8002ad4 <HAL_GetTick>
 80059ac:	0003      	movs	r3, r0
 80059ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059b0:	e009      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b2:	f7fd f88f 	bl	8002ad4 <HAL_GetTick>
 80059b6:	0002      	movs	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	4a6b      	ldr	r2, [pc, #428]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e0c6      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059c6:	4b65      	ldr	r3, [pc, #404]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80059c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059ca:	2380      	movs	r3, #128	@ 0x80
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4013      	ands	r3, r2
 80059d0:	d0ef      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	2380      	movs	r3, #128	@ 0x80
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	4013      	ands	r3, r2
 80059dc:	d01f      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	23c0      	movs	r3, #192	@ 0xc0
 80059e4:	029b      	lsls	r3, r3, #10
 80059e6:	401a      	ands	r2, r3
 80059e8:	23c0      	movs	r3, #192	@ 0xc0
 80059ea:	029b      	lsls	r3, r3, #10
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d10c      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80059f0:	4b5a      	ldr	r3, [pc, #360]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a5e      	ldr	r2, [pc, #376]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	0019      	movs	r1, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	23c0      	movs	r3, #192	@ 0xc0
 8005a00:	039b      	lsls	r3, r3, #14
 8005a02:	401a      	ands	r2, r3
 8005a04:	4b55      	ldr	r3, [pc, #340]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a06:	430a      	orrs	r2, r1
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	4b54      	ldr	r3, [pc, #336]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a0c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	23c0      	movs	r3, #192	@ 0xc0
 8005a14:	029b      	lsls	r3, r3, #10
 8005a16:	401a      	ands	r2, r3
 8005a18:	4b50      	ldr	r3, [pc, #320]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2220      	movs	r2, #32
 8005a24:	4013      	ands	r3, r2
 8005a26:	d01f      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	23c0      	movs	r3, #192	@ 0xc0
 8005a2e:	029b      	lsls	r3, r3, #10
 8005a30:	401a      	ands	r2, r3
 8005a32:	23c0      	movs	r3, #192	@ 0xc0
 8005a34:	029b      	lsls	r3, r3, #10
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d10c      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005a3a:	4b48      	ldr	r3, [pc, #288]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a4c      	ldr	r2, [pc, #304]	@ (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	0019      	movs	r1, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	23c0      	movs	r3, #192	@ 0xc0
 8005a4a:	039b      	lsls	r3, r3, #14
 8005a4c:	401a      	ands	r2, r3
 8005a4e:	4b43      	ldr	r3, [pc, #268]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a50:	430a      	orrs	r2, r1
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	4b41      	ldr	r3, [pc, #260]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a56:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	23c0      	movs	r3, #192	@ 0xc0
 8005a5e:	029b      	lsls	r3, r3, #10
 8005a60:	401a      	ands	r2, r3
 8005a62:	4b3e      	ldr	r3, [pc, #248]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a64:	430a      	orrs	r2, r1
 8005a66:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a68:	2317      	movs	r3, #23
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d105      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a72:	4b3a      	ldr	r3, [pc, #232]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a76:	4b39      	ldr	r3, [pc, #228]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a78:	493e      	ldr	r1, [pc, #248]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005a7a:	400a      	ands	r2, r1
 8005a7c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2201      	movs	r2, #1
 8005a84:	4013      	ands	r3, r2
 8005a86:	d009      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a88:	4b34      	ldr	r3, [pc, #208]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	4393      	bics	r3, r2
 8005a90:	0019      	movs	r1, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	4b31      	ldr	r3, [pc, #196]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d009      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aaa:	220c      	movs	r2, #12
 8005aac:	4393      	bics	r3, r2
 8005aae:	0019      	movs	r1, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	4b29      	ldr	r3, [pc, #164]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ac4:	4b25      	ldr	r3, [pc, #148]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	0019      	movs	r1, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695a      	ldr	r2, [r3, #20]
 8005ad2:	4b22      	ldr	r3, [pc, #136]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2208      	movs	r2, #8
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d009      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ae6:	4a25      	ldr	r2, [pc, #148]	@ (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	0019      	movs	r1, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699a      	ldr	r2, [r3, #24]
 8005af0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005af2:	430a      	orrs	r2, r1
 8005af4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	2380      	movs	r3, #128	@ 0x80
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	4013      	ands	r3, r2
 8005b00:	d009      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b02:	4b16      	ldr	r3, [pc, #88]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b06:	4a17      	ldr	r2, [pc, #92]	@ (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	0019      	movs	r1, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	4b12      	ldr	r3, [pc, #72]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b12:	430a      	orrs	r2, r1
 8005b14:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2240      	movs	r2, #64	@ 0x40
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d009      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b20:	4b0e      	ldr	r3, [pc, #56]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b24:	4a16      	ldr	r2, [pc, #88]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	0019      	movs	r1, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b30:	430a      	orrs	r2, r1
 8005b32:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2280      	movs	r2, #128	@ 0x80
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d009      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005b3e:	4b07      	ldr	r3, [pc, #28]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b42:	4a10      	ldr	r2, [pc, #64]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	0019      	movs	r1, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1a      	ldr	r2, [r3, #32]
 8005b4c:	4b03      	ldr	r3, [pc, #12]	@ (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	0018      	movs	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b006      	add	sp, #24
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40007000 	.word	0x40007000
 8005b64:	fffcffff 	.word	0xfffcffff
 8005b68:	fff7ffff 	.word	0xfff7ffff
 8005b6c:	00001388 	.word	0x00001388
 8005b70:	ffcfffff 	.word	0xffcfffff
 8005b74:	efffffff 	.word	0xefffffff
 8005b78:	fffff3ff 	.word	0xfffff3ff
 8005b7c:	ffffcfff 	.word	0xffffcfff
 8005b80:	fbffffff 	.word	0xfbffffff
 8005b84:	fff3ffff 	.word	0xfff3ffff

08005b88 <HAL_RCCEx_EnableLSECSS>:
/**
  * @brief  Enables the LSE Clock Security System.
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSECSSON) ;
 8005b8c:	4b04      	ldr	r3, [pc, #16]	@ (8005ba0 <HAL_RCCEx_EnableLSECSS+0x18>)
 8005b8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b90:	4b03      	ldr	r3, [pc, #12]	@ (8005ba0 <HAL_RCCEx_EnableLSECSS+0x18>)
 8005b92:	2180      	movs	r1, #128	@ 0x80
 8005b94:	0189      	lsls	r1, r1, #6
 8005b96:	430a      	orrs	r2, r1
 8005b98:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005b9a:	46c0      	nop			@ (mov r8, r8)
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40021000 	.word	0x40021000

08005ba4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ba4:	b5b0      	push	{r4, r5, r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005bac:	230f      	movs	r3, #15
 8005bae:	18fb      	adds	r3, r7, r3
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e088      	b.n	8005cd0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2221      	movs	r2, #33	@ 0x21
 8005bc2:	5c9b      	ldrb	r3, [r3, r2]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d107      	bne.n	8005bda <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	2100      	movs	r1, #0
 8005bd0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f7fc f9c9 	bl	8001f6c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2221      	movs	r2, #33	@ 0x21
 8005bde:	2102      	movs	r1, #2
 8005be0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2210      	movs	r2, #16
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b10      	cmp	r3, #16
 8005bee:	d05f      	beq.n	8005cb0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	22ca      	movs	r2, #202	@ 0xca
 8005bf6:	625a      	str	r2, [r3, #36]	@ 0x24
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2253      	movs	r2, #83	@ 0x53
 8005bfe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005c00:	250f      	movs	r5, #15
 8005c02:	197c      	adds	r4, r7, r5
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	0018      	movs	r0, r3
 8005c08:	f000 f890 	bl	8005d2c <RTC_EnterInitMode>
 8005c0c:	0003      	movs	r3, r0
 8005c0e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8005c10:	0028      	movs	r0, r5
 8005c12:	183b      	adds	r3, r7, r0
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d12c      	bne.n	8005c74 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	492c      	ldr	r1, [pc, #176]	@ (8005cd8 <HAL_RTC_Init+0x134>)
 8005c26:	400a      	ands	r2, r1
 8005c28:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6899      	ldr	r1, [r3, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	68d2      	ldr	r2, [r2, #12]
 8005c50:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6919      	ldr	r1, [r3, #16]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	041a      	lsls	r2, r3, #16
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005c66:	183c      	adds	r4, r7, r0
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f000 f8a2 	bl	8005db4 <RTC_ExitInitMode>
 8005c70:	0003      	movs	r3, r0
 8005c72:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8005c74:	230f      	movs	r3, #15
 8005c76:	18fb      	adds	r3, r7, r3
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d113      	bne.n	8005ca6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2103      	movs	r1, #3
 8005c8a:	438a      	bics	r2, r1
 8005c8c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	22ff      	movs	r2, #255	@ 0xff
 8005cac:	625a      	str	r2, [r3, #36]	@ 0x24
 8005cae:	e003      	b.n	8005cb8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005cb0:	230f      	movs	r3, #15
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8005cb8:	230f      	movs	r3, #15
 8005cba:	18fb      	adds	r3, r7, r3
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d103      	bne.n	8005cca <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2221      	movs	r2, #33	@ 0x21
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005cca:	230f      	movs	r3, #15
 8005ccc:	18fb      	adds	r3, r7, r3
 8005cce:	781b      	ldrb	r3, [r3, #0]
}
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b004      	add	sp, #16
 8005cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8005cd8:	ff8fffbf 	.word	0xff8fffbf

08005cdc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a0e      	ldr	r2, [pc, #56]	@ (8005d28 <HAL_RTC_WaitForSynchro+0x4c>)
 8005cee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cf0:	f7fc fef0 	bl	8002ad4 <HAL_GetTick>
 8005cf4:	0003      	movs	r3, r0
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cf8:	e00a      	b.n	8005d10 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cfa:	f7fc feeb 	bl	8002ad4 <HAL_GetTick>
 8005cfe:	0002      	movs	r2, r0
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	1ad2      	subs	r2, r2, r3
 8005d04:	23fa      	movs	r3, #250	@ 0xfa
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d901      	bls.n	8005d10 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e006      	b.n	8005d1e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	4013      	ands	r3, r2
 8005d1a:	d0ee      	beq.n	8005cfa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	0018      	movs	r0, r3
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b004      	add	sp, #16
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	46c0      	nop			@ (mov r8, r8)
 8005d28:	0001ff5f 	.word	0x0001ff5f

08005d2c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d38:	230f      	movs	r3, #15
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	2240      	movs	r2, #64	@ 0x40
 8005d48:	4013      	ands	r3, r2
 8005d4a:	d12c      	bne.n	8005da6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2180      	movs	r1, #128	@ 0x80
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d5c:	f7fc feba 	bl	8002ad4 <HAL_GetTick>
 8005d60:	0003      	movs	r3, r0
 8005d62:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d64:	e014      	b.n	8005d90 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d66:	f7fc feb5 	bl	8002ad4 <HAL_GetTick>
 8005d6a:	0002      	movs	r2, r0
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	1ad2      	subs	r2, r2, r3
 8005d70:	200f      	movs	r0, #15
 8005d72:	183b      	adds	r3, r7, r0
 8005d74:	1839      	adds	r1, r7, r0
 8005d76:	7809      	ldrb	r1, [r1, #0]
 8005d78:	7019      	strb	r1, [r3, #0]
 8005d7a:	23fa      	movs	r3, #250	@ 0xfa
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d906      	bls.n	8005d90 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2221      	movs	r2, #33	@ 0x21
 8005d86:	2104      	movs	r1, #4
 8005d88:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8005d8a:	183b      	adds	r3, r7, r0
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	2240      	movs	r2, #64	@ 0x40
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d104      	bne.n	8005da6 <RTC_EnterInitMode+0x7a>
 8005d9c:	230f      	movs	r3, #15
 8005d9e:	18fb      	adds	r3, r7, r3
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d1df      	bne.n	8005d66 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8005da6:	230f      	movs	r3, #15
 8005da8:	18fb      	adds	r3, r7, r3
 8005daa:	781b      	ldrb	r3, [r3, #0]
}
 8005dac:	0018      	movs	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b004      	add	sp, #16
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005db4:	b590      	push	{r4, r7, lr}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dbc:	240f      	movs	r4, #15
 8005dbe:	193b      	adds	r3, r7, r4
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2180      	movs	r1, #128	@ 0x80
 8005dd0:	438a      	bics	r2, r1
 8005dd2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d10c      	bne.n	8005dfa <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	0018      	movs	r0, r3
 8005de4:	f7ff ff7a 	bl	8005cdc <HAL_RTC_WaitForSynchro>
 8005de8:	1e03      	subs	r3, r0, #0
 8005dea:	d006      	beq.n	8005dfa <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2221      	movs	r2, #33	@ 0x21
 8005df0:	2104      	movs	r1, #4
 8005df2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8005df4:	193b      	adds	r3, r7, r4
 8005df6:	2201      	movs	r2, #1
 8005df8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005dfa:	230f      	movs	r3, #15
 8005dfc:	18fb      	adds	r3, r7, r3
 8005dfe:	781b      	ldrb	r3, [r3, #0]
}
 8005e00:	0018      	movs	r0, r3
 8005e02:	46bd      	mov	sp, r7
 8005e04:	b005      	add	sp, #20
 8005e06:	bd90      	pop	{r4, r7, pc}

08005e08 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005e14:	4b64      	ldr	r3, [pc, #400]	@ (8005fa8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	22fa      	movs	r2, #250	@ 0xfa
 8005e1a:	01d1      	lsls	r1, r2, #7
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f7fa f985 	bl	800012c <__udivsi3>
 8005e22:	0003      	movs	r3, r0
 8005e24:	001a      	movs	r2, r3
 8005e26:	0013      	movs	r3, r2
 8005e28:	015b      	lsls	r3, r3, #5
 8005e2a:	1a9b      	subs	r3, r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	189b      	adds	r3, r3, r2
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2220      	movs	r2, #32
 8005e38:	5c9b      	ldrb	r3, [r3, r2]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e0ad      	b.n	8005f9e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2220      	movs	r2, #32
 8005e46:	2101      	movs	r1, #1
 8005e48:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2221      	movs	r2, #33	@ 0x21
 8005e4e:	2102      	movs	r1, #2
 8005e50:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	22ca      	movs	r2, #202	@ 0xca
 8005e58:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2253      	movs	r2, #83	@ 0x53
 8005e60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	2380      	movs	r3, #128	@ 0x80
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d019      	beq.n	8005ea4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10d      	bne.n	8005e98 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	22ff      	movs	r2, #255	@ 0xff
 8005e82:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2221      	movs	r2, #33	@ 0x21
 8005e88:	2103      	movs	r1, #3
 8005e8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	2100      	movs	r1, #0
 8005e92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e082      	b.n	8005f9e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	d1e5      	bne.n	8005e70 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	493f      	ldr	r1, [pc, #252]	@ (8005fac <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8005eb0:	400a      	ands	r2, r1
 8005eb2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	22ff      	movs	r2, #255	@ 0xff
 8005ebc:	401a      	ands	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	493b      	ldr	r1, [pc, #236]	@ (8005fb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005ec8:	4b37      	ldr	r3, [pc, #220]	@ (8005fa8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	22fa      	movs	r2, #250	@ 0xfa
 8005ece:	01d1      	lsls	r1, r2, #7
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f7fa f92b 	bl	800012c <__udivsi3>
 8005ed6:	0003      	movs	r3, r0
 8005ed8:	001a      	movs	r2, r3
 8005eda:	0013      	movs	r3, r2
 8005edc:	015b      	lsls	r3, r3, #5
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	189b      	adds	r3, r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10d      	bne.n	8005f10 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	22ff      	movs	r2, #255	@ 0xff
 8005efa:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2221      	movs	r2, #33	@ 0x21
 8005f00:	2103      	movs	r1, #3
 8005f02:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	2100      	movs	r1, #0
 8005f0a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e046      	b.n	8005f9e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	2204      	movs	r2, #4
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d0e5      	beq.n	8005ee8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2107      	movs	r1, #7
 8005f28:	438a      	bics	r2, r1
 8005f2a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6899      	ldr	r1, [r3, #8]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005f44:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	4b1a      	ldr	r3, [pc, #104]	@ (8005fb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005f4a:	2180      	movs	r1, #128	@ 0x80
 8005f4c:	0349      	lsls	r1, r1, #13
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005f52:	4b18      	ldr	r3, [pc, #96]	@ (8005fb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	4b17      	ldr	r3, [pc, #92]	@ (8005fb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005f58:	2180      	movs	r1, #128	@ 0x80
 8005f5a:	0349      	lsls	r1, r1, #13
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2180      	movs	r1, #128	@ 0x80
 8005f6c:	01c9      	lsls	r1, r1, #7
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2180      	movs	r1, #128	@ 0x80
 8005f7e:	00c9      	lsls	r1, r1, #3
 8005f80:	430a      	orrs	r2, r1
 8005f82:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	22ff      	movs	r2, #255	@ 0xff
 8005f8a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2221      	movs	r2, #33	@ 0x21
 8005f90:	2101      	movs	r1, #1
 8005f92:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	2100      	movs	r1, #0
 8005f9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	b006      	add	sp, #24
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	46c0      	nop			@ (mov r8, r8)
 8005fa8:	20000008 	.word	0x20000008
 8005fac:	fffffbff 	.word	0xfffffbff
 8005fb0:	fffffb7f 	.word	0xfffffb7f
 8005fb4:	40010400 	.word	0x40010400

08005fb8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	5c9b      	ldrb	r3, [r3, r2]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e04e      	b.n	8006070 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2221      	movs	r2, #33	@ 0x21
 8005fde:	2102      	movs	r1, #2
 8005fe0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	22ca      	movs	r2, #202	@ 0xca
 8005fe8:	625a      	str	r2, [r3, #36]	@ 0x24
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2253      	movs	r2, #83	@ 0x53
 8005ff0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	491e      	ldr	r1, [pc, #120]	@ (8006078 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8005ffe:	400a      	ands	r2, r1
 8006000:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	491b      	ldr	r1, [pc, #108]	@ (800607c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 800600e:	400a      	ands	r2, r1
 8006010:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006012:	f7fc fd5f 	bl	8002ad4 <HAL_GetTick>
 8006016:	0003      	movs	r3, r0
 8006018:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800601a:	e016      	b.n	800604a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800601c:	f7fc fd5a 	bl	8002ad4 <HAL_GetTick>
 8006020:	0002      	movs	r2, r0
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1ad2      	subs	r2, r2, r3
 8006026:	23fa      	movs	r3, #250	@ 0xfa
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	429a      	cmp	r2, r3
 800602c:	d90d      	bls.n	800604a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	22ff      	movs	r2, #255	@ 0xff
 8006034:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2221      	movs	r2, #33	@ 0x21
 800603a:	2103      	movs	r1, #3
 800603c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	2100      	movs	r1, #0
 8006044:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e012      	b.n	8006070 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	2204      	movs	r2, #4
 8006052:	4013      	ands	r3, r2
 8006054:	d0e2      	beq.n	800601c <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	22ff      	movs	r2, #255	@ 0xff
 800605c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2221      	movs	r2, #33	@ 0x21
 8006062:	2101      	movs	r1, #1
 8006064:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	2100      	movs	r1, #0
 800606c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	0018      	movs	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	b004      	add	sp, #16
 8006076:	bd80      	pop	{r7, pc}
 8006078:	fffffbff 	.word	0xfffffbff
 800607c:	ffffbfff 	.word	0xffffbfff

08006080 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006088:	4b13      	ldr	r3, [pc, #76]	@ (80060d8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 800608a:	2280      	movs	r2, #128	@ 0x80
 800608c:	0352      	lsls	r2, r2, #13
 800608e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	2380      	movs	r3, #128	@ 0x80
 8006098:	01db      	lsls	r3, r3, #7
 800609a:	4013      	ands	r3, r2
 800609c:	d014      	beq.n	80060c8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	2380      	movs	r3, #128	@ 0x80
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	4013      	ands	r3, r2
 80060aa:	d00d      	beq.n	80060c8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	22ff      	movs	r2, #255	@ 0xff
 80060b4:	401a      	ands	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4908      	ldr	r1, [pc, #32]	@ (80060dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80060bc:	430a      	orrs	r2, r1
 80060be:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	0018      	movs	r0, r3
 80060c4:	f7fb fd30 	bl	8001b28 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2221      	movs	r2, #33	@ 0x21
 80060cc:	2101      	movs	r1, #1
 80060ce:	5499      	strb	r1, [r3, r2]
}
 80060d0:	46c0      	nop			@ (mov r8, r8)
 80060d2:	46bd      	mov	sp, r7
 80060d4:	b002      	add	sp, #8
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	40010400 	.word	0x40010400
 80060dc:	fffffb7f 	.word	0xfffffb7f

080060e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e044      	b.n	800617c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d107      	bne.n	800610a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2278      	movs	r2, #120	@ 0x78
 80060fe:	2100      	movs	r1, #0
 8006100:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	0018      	movs	r0, r3
 8006106:	f7fb ff51 	bl	8001fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2224      	movs	r2, #36	@ 0x24
 800610e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2101      	movs	r1, #1
 800611c:	438a      	bics	r2, r1
 800611e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	0018      	movs	r0, r3
 800612c:	f000 fd3c 	bl	8006ba8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	0018      	movs	r0, r3
 8006134:	f000 fa9a 	bl	800666c <UART_SetConfig>
 8006138:	0003      	movs	r3, r0
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e01c      	b.n	800617c <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	490d      	ldr	r1, [pc, #52]	@ (8006184 <HAL_UART_Init+0xa4>)
 800614e:	400a      	ands	r2, r1
 8006150:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	212a      	movs	r1, #42	@ 0x2a
 800615e:	438a      	bics	r2, r1
 8006160:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2101      	movs	r1, #1
 800616e:	430a      	orrs	r2, r1
 8006170:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	0018      	movs	r0, r3
 8006176:	f000 fdcb 	bl	8006d10 <UART_CheckIdleState>
 800617a:	0003      	movs	r3, r0
}
 800617c:	0018      	movs	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	b002      	add	sp, #8
 8006182:	bd80      	pop	{r7, pc}
 8006184:	ffffb7ff 	.word	0xffffb7ff

08006188 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e030      	b.n	80061fc <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2224      	movs	r2, #36	@ 0x24
 800619e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2101      	movs	r1, #1
 80061ac:	438a      	bics	r2, r1
 80061ae:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2200      	movs	r2, #0
 80061be:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2200      	movs	r2, #0
 80061c6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	0018      	movs	r0, r3
 80061cc:	f7fb ff64 	bl	8002098 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2284      	movs	r2, #132	@ 0x84
 80061d4:	2100      	movs	r1, #0
 80061d6:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2280      	movs	r2, #128	@ 0x80
 80061e2:	2100      	movs	r1, #0
 80061e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2278      	movs	r2, #120	@ 0x78
 80061f6:	2100      	movs	r1, #0
 80061f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	0018      	movs	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	b002      	add	sp, #8
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	@ 0x28
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	603b      	str	r3, [r7, #0]
 8006210:	1dbb      	adds	r3, r7, #6
 8006212:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006218:	2b20      	cmp	r3, #32
 800621a:	d000      	beq.n	800621e <HAL_UART_Transmit+0x1a>
 800621c:	e08c      	b.n	8006338 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_UART_Transmit+0x28>
 8006224:	1dbb      	adds	r3, r7, #6
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e084      	b.n	800633a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	2380      	movs	r3, #128	@ 0x80
 8006236:	015b      	lsls	r3, r3, #5
 8006238:	429a      	cmp	r2, r3
 800623a:	d109      	bne.n	8006250 <HAL_UART_Transmit+0x4c>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2201      	movs	r2, #1
 8006248:	4013      	ands	r3, r2
 800624a:	d001      	beq.n	8006250 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e074      	b.n	800633a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2284      	movs	r2, #132	@ 0x84
 8006254:	2100      	movs	r1, #0
 8006256:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2221      	movs	r2, #33	@ 0x21
 800625c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800625e:	f7fc fc39 	bl	8002ad4 <HAL_GetTick>
 8006262:	0003      	movs	r3, r0
 8006264:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	1dba      	adds	r2, r7, #6
 800626a:	2150      	movs	r1, #80	@ 0x50
 800626c:	8812      	ldrh	r2, [r2, #0]
 800626e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	1dba      	adds	r2, r7, #6
 8006274:	2152      	movs	r1, #82	@ 0x52
 8006276:	8812      	ldrh	r2, [r2, #0]
 8006278:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	2380      	movs	r3, #128	@ 0x80
 8006280:	015b      	lsls	r3, r3, #5
 8006282:	429a      	cmp	r2, r3
 8006284:	d108      	bne.n	8006298 <HAL_UART_Transmit+0x94>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d104      	bne.n	8006298 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800628e:	2300      	movs	r3, #0
 8006290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	61bb      	str	r3, [r7, #24]
 8006296:	e003      	b.n	80062a0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800629c:	2300      	movs	r3, #0
 800629e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062a0:	e02f      	b.n	8006302 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	0013      	movs	r3, r2
 80062ac:	2200      	movs	r2, #0
 80062ae:	2180      	movs	r1, #128	@ 0x80
 80062b0:	f000 fdd6 	bl	8006e60 <UART_WaitOnFlagUntilTimeout>
 80062b4:	1e03      	subs	r3, r0, #0
 80062b6:	d004      	beq.n	80062c2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e03b      	b.n	800633a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10b      	bne.n	80062e0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	001a      	movs	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	05d2      	lsls	r2, r2, #23
 80062d4:	0dd2      	lsrs	r2, r2, #23
 80062d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	3302      	adds	r3, #2
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	e007      	b.n	80062f0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	3301      	adds	r3, #1
 80062ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2252      	movs	r2, #82	@ 0x52
 80062f4:	5a9b      	ldrh	r3, [r3, r2]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b299      	uxth	r1, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2252      	movs	r2, #82	@ 0x52
 8006300:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2252      	movs	r2, #82	@ 0x52
 8006306:	5a9b      	ldrh	r3, [r3, r2]
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1c9      	bne.n	80062a2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	0013      	movs	r3, r2
 8006318:	2200      	movs	r2, #0
 800631a:	2140      	movs	r1, #64	@ 0x40
 800631c:	f000 fda0 	bl	8006e60 <UART_WaitOnFlagUntilTimeout>
 8006320:	1e03      	subs	r3, r0, #0
 8006322:	d004      	beq.n	800632e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e005      	b.n	800633a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2220      	movs	r2, #32
 8006332:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	e000      	b.n	800633a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8006338:	2302      	movs	r3, #2
  }
}
 800633a:	0018      	movs	r0, r3
 800633c:	46bd      	mov	sp, r7
 800633e:	b008      	add	sp, #32
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08a      	sub	sp, #40	@ 0x28
 8006348:	af02      	add	r7, sp, #8
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	1dbb      	adds	r3, r7, #6
 8006352:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2280      	movs	r2, #128	@ 0x80
 8006358:	589b      	ldr	r3, [r3, r2]
 800635a:	2b20      	cmp	r3, #32
 800635c:	d000      	beq.n	8006360 <HAL_UART_Receive+0x1c>
 800635e:	e0d0      	b.n	8006502 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_UART_Receive+0x2a>
 8006366:	1dbb      	adds	r3, r7, #6
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e0c8      	b.n	8006504 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	2380      	movs	r3, #128	@ 0x80
 8006378:	015b      	lsls	r3, r3, #5
 800637a:	429a      	cmp	r2, r3
 800637c:	d109      	bne.n	8006392 <HAL_UART_Receive+0x4e>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d105      	bne.n	8006392 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2201      	movs	r2, #1
 800638a:	4013      	ands	r3, r2
 800638c:	d001      	beq.n	8006392 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e0b8      	b.n	8006504 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2284      	movs	r2, #132	@ 0x84
 8006396:	2100      	movs	r1, #0
 8006398:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2280      	movs	r2, #128	@ 0x80
 800639e:	2122      	movs	r1, #34	@ 0x22
 80063a0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063a8:	f7fc fb94 	bl	8002ad4 <HAL_GetTick>
 80063ac:	0003      	movs	r3, r0
 80063ae:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	1dba      	adds	r2, r7, #6
 80063b4:	2158      	movs	r1, #88	@ 0x58
 80063b6:	8812      	ldrh	r2, [r2, #0]
 80063b8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	1dba      	adds	r2, r7, #6
 80063be:	215a      	movs	r1, #90	@ 0x5a
 80063c0:	8812      	ldrh	r2, [r2, #0]
 80063c2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	2380      	movs	r3, #128	@ 0x80
 80063ca:	015b      	lsls	r3, r3, #5
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d10d      	bne.n	80063ec <HAL_UART_Receive+0xa8>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d104      	bne.n	80063e2 <HAL_UART_Receive+0x9e>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	225c      	movs	r2, #92	@ 0x5c
 80063dc:	494b      	ldr	r1, [pc, #300]	@ (800650c <HAL_UART_Receive+0x1c8>)
 80063de:	5299      	strh	r1, [r3, r2]
 80063e0:	e02e      	b.n	8006440 <HAL_UART_Receive+0xfc>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	225c      	movs	r2, #92	@ 0x5c
 80063e6:	21ff      	movs	r1, #255	@ 0xff
 80063e8:	5299      	strh	r1, [r3, r2]
 80063ea:	e029      	b.n	8006440 <HAL_UART_Receive+0xfc>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10d      	bne.n	8006410 <HAL_UART_Receive+0xcc>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d104      	bne.n	8006406 <HAL_UART_Receive+0xc2>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	225c      	movs	r2, #92	@ 0x5c
 8006400:	21ff      	movs	r1, #255	@ 0xff
 8006402:	5299      	strh	r1, [r3, r2]
 8006404:	e01c      	b.n	8006440 <HAL_UART_Receive+0xfc>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	225c      	movs	r2, #92	@ 0x5c
 800640a:	217f      	movs	r1, #127	@ 0x7f
 800640c:	5299      	strh	r1, [r3, r2]
 800640e:	e017      	b.n	8006440 <HAL_UART_Receive+0xfc>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	2380      	movs	r3, #128	@ 0x80
 8006416:	055b      	lsls	r3, r3, #21
 8006418:	429a      	cmp	r2, r3
 800641a:	d10d      	bne.n	8006438 <HAL_UART_Receive+0xf4>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d104      	bne.n	800642e <HAL_UART_Receive+0xea>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	225c      	movs	r2, #92	@ 0x5c
 8006428:	217f      	movs	r1, #127	@ 0x7f
 800642a:	5299      	strh	r1, [r3, r2]
 800642c:	e008      	b.n	8006440 <HAL_UART_Receive+0xfc>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	225c      	movs	r2, #92	@ 0x5c
 8006432:	213f      	movs	r1, #63	@ 0x3f
 8006434:	5299      	strh	r1, [r3, r2]
 8006436:	e003      	b.n	8006440 <HAL_UART_Receive+0xfc>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	225c      	movs	r2, #92	@ 0x5c
 800643c:	2100      	movs	r1, #0
 800643e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006440:	2312      	movs	r3, #18
 8006442:	18fb      	adds	r3, r7, r3
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	215c      	movs	r1, #92	@ 0x5c
 8006448:	5a52      	ldrh	r2, [r2, r1]
 800644a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	2380      	movs	r3, #128	@ 0x80
 8006452:	015b      	lsls	r3, r3, #5
 8006454:	429a      	cmp	r2, r3
 8006456:	d108      	bne.n	800646a <HAL_UART_Receive+0x126>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d104      	bne.n	800646a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006460:	2300      	movs	r3, #0
 8006462:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	e003      	b.n	8006472 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800646e:	2300      	movs	r3, #0
 8006470:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006472:	e03a      	b.n	80064ea <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	0013      	movs	r3, r2
 800647e:	2200      	movs	r2, #0
 8006480:	2120      	movs	r1, #32
 8006482:	f000 fced 	bl	8006e60 <UART_WaitOnFlagUntilTimeout>
 8006486:	1e03      	subs	r3, r0, #0
 8006488:	d005      	beq.n	8006496 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2280      	movs	r2, #128	@ 0x80
 800648e:	2120      	movs	r1, #32
 8006490:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e036      	b.n	8006504 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10e      	bne.n	80064ba <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2212      	movs	r2, #18
 80064a6:	18ba      	adds	r2, r7, r2
 80064a8:	8812      	ldrh	r2, [r2, #0]
 80064aa:	4013      	ands	r3, r2
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	3302      	adds	r3, #2
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	e00e      	b.n	80064d8 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2212      	movs	r2, #18
 80064c4:	18ba      	adds	r2, r7, r2
 80064c6:	8812      	ldrh	r2, [r2, #0]
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	4013      	ands	r3, r2
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	3301      	adds	r3, #1
 80064d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	225a      	movs	r2, #90	@ 0x5a
 80064dc:	5a9b      	ldrh	r3, [r3, r2]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b299      	uxth	r1, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	225a      	movs	r2, #90	@ 0x5a
 80064e8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	225a      	movs	r2, #90	@ 0x5a
 80064ee:	5a9b      	ldrh	r3, [r3, r2]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1be      	bne.n	8006474 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2280      	movs	r2, #128	@ 0x80
 80064fa:	2120      	movs	r1, #32
 80064fc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	e000      	b.n	8006504 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8006502:	2302      	movs	r3, #2
  }
}
 8006504:	0018      	movs	r0, r3
 8006506:	46bd      	mov	sp, r7
 8006508:	b008      	add	sp, #32
 800650a:	bd80      	pop	{r7, pc}
 800650c:	000001ff 	.word	0x000001ff

08006510 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b092      	sub	sp, #72	@ 0x48
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006518:	f3ef 8310 	mrs	r3, PRIMASK
 800651c:	623b      	str	r3, [r7, #32]
  return(result);
 800651e:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006520:	647b      	str	r3, [r7, #68]	@ 0x44
 8006522:	2301      	movs	r3, #1
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	f383 8810 	msr	PRIMASK, r3
}
 800652c:	46c0      	nop			@ (mov r8, r8)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	494b      	ldr	r1, [pc, #300]	@ (8006668 <HAL_UART_AbortReceive+0x158>)
 800653a:	400a      	ands	r2, r1
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006540:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006544:	f383 8810 	msr	PRIMASK, r3
}
 8006548:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800654a:	f3ef 8310 	mrs	r3, PRIMASK
 800654e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8006550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006552:	643b      	str	r3, [r7, #64]	@ 0x40
 8006554:	2301      	movs	r3, #1
 8006556:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655a:	f383 8810 	msr	PRIMASK, r3
}
 800655e:	46c0      	nop			@ (mov r8, r8)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2101      	movs	r1, #1
 800656c:	438a      	bics	r2, r1
 800656e:	609a      	str	r2, [r3, #8]
 8006570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006572:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006576:	f383 8810 	msr	PRIMASK, r3
}
 800657a:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006580:	2b01      	cmp	r3, #1
 8006582:	d118      	bne.n	80065b6 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006584:	f3ef 8310 	mrs	r3, PRIMASK
 8006588:	617b      	str	r3, [r7, #20]
  return(result);
 800658a:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800658c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800658e:	2301      	movs	r3, #1
 8006590:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f383 8810 	msr	PRIMASK, r3
}
 8006598:	46c0      	nop			@ (mov r8, r8)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2110      	movs	r1, #16
 80065a6:	438a      	bics	r2, r1
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	f383 8810 	msr	PRIMASK, r3
}
 80065b4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2240      	movs	r2, #64	@ 0x40
 80065be:	4013      	ands	r3, r2
 80065c0:	2b40      	cmp	r3, #64	@ 0x40
 80065c2:	d135      	bne.n	8006630 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065c4:	f3ef 8310 	mrs	r3, PRIMASK
 80065c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80065ca:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065ce:	2301      	movs	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f383 8810 	msr	PRIMASK, r3
}
 80065d8:	46c0      	nop			@ (mov r8, r8)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2140      	movs	r1, #64	@ 0x40
 80065e6:	438a      	bics	r2, r1
 80065e8:	609a      	str	r2, [r3, #8]
 80065ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f383 8810 	msr	PRIMASK, r3
}
 80065f4:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d018      	beq.n	8006630 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006602:	2200      	movs	r2, #0
 8006604:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800660a:	0018      	movs	r0, r3
 800660c:	f7fd f834 	bl	8003678 <HAL_DMA_Abort>
 8006610:	1e03      	subs	r3, r0, #0
 8006612:	d00d      	beq.n	8006630 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006618:	0018      	movs	r0, r3
 800661a:	f7fd f86d 	bl	80036f8 <HAL_DMA_GetError>
 800661e:	0003      	movs	r3, r0
 8006620:	2b20      	cmp	r3, #32
 8006622:	d105      	bne.n	8006630 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2284      	movs	r2, #132	@ 0x84
 8006628:	2110      	movs	r1, #16
 800662a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e017      	b.n	8006660 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	225a      	movs	r2, #90	@ 0x5a
 8006634:	2100      	movs	r1, #0
 8006636:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	220f      	movs	r2, #15
 800663e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2108      	movs	r1, #8
 800664c:	430a      	orrs	r2, r1
 800664e:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2280      	movs	r2, #128	@ 0x80
 8006654:	2120      	movs	r1, #32
 8006656:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	0018      	movs	r0, r3
 8006662:	46bd      	mov	sp, r7
 8006664:	b012      	add	sp, #72	@ 0x48
 8006666:	bd80      	pop	{r7, pc}
 8006668:	fffffedf 	.word	0xfffffedf

0800666c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800666c:	b5b0      	push	{r4, r5, r7, lr}
 800666e:	b08e      	sub	sp, #56	@ 0x38
 8006670:	af00      	add	r7, sp, #0
 8006672:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006674:	231a      	movs	r3, #26
 8006676:	2218      	movs	r2, #24
 8006678:	189b      	adds	r3, r3, r2
 800667a:	19db      	adds	r3, r3, r7
 800667c:	2200      	movs	r2, #0
 800667e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	431a      	orrs	r2, r3
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	431a      	orrs	r2, r3
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	4313      	orrs	r3, r2
 8006696:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4ac3      	ldr	r2, [pc, #780]	@ (80069ac <UART_SetConfig+0x340>)
 80066a0:	4013      	ands	r3, r2
 80066a2:	0019      	movs	r1, r3
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066aa:	430a      	orrs	r2, r1
 80066ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	4abe      	ldr	r2, [pc, #760]	@ (80069b0 <UART_SetConfig+0x344>)
 80066b6:	4013      	ands	r3, r2
 80066b8:	0019      	movs	r1, r3
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4ab8      	ldr	r2, [pc, #736]	@ (80069b4 <UART_SetConfig+0x348>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066dc:	4313      	orrs	r3, r2
 80066de:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	4ab4      	ldr	r2, [pc, #720]	@ (80069b8 <UART_SetConfig+0x34c>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	0019      	movs	r1, r3
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066f2:	430a      	orrs	r2, r1
 80066f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4ab0      	ldr	r2, [pc, #704]	@ (80069bc <UART_SetConfig+0x350>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d131      	bne.n	8006764 <UART_SetConfig+0xf8>
 8006700:	4baf      	ldr	r3, [pc, #700]	@ (80069c0 <UART_SetConfig+0x354>)
 8006702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006704:	2203      	movs	r2, #3
 8006706:	4013      	ands	r3, r2
 8006708:	2b03      	cmp	r3, #3
 800670a:	d01d      	beq.n	8006748 <UART_SetConfig+0xdc>
 800670c:	d823      	bhi.n	8006756 <UART_SetConfig+0xea>
 800670e:	2b02      	cmp	r3, #2
 8006710:	d00c      	beq.n	800672c <UART_SetConfig+0xc0>
 8006712:	d820      	bhi.n	8006756 <UART_SetConfig+0xea>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <UART_SetConfig+0xb2>
 8006718:	2b01      	cmp	r3, #1
 800671a:	d00e      	beq.n	800673a <UART_SetConfig+0xce>
 800671c:	e01b      	b.n	8006756 <UART_SetConfig+0xea>
 800671e:	231b      	movs	r3, #27
 8006720:	2218      	movs	r2, #24
 8006722:	189b      	adds	r3, r3, r2
 8006724:	19db      	adds	r3, r3, r7
 8006726:	2201      	movs	r2, #1
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	e0b4      	b.n	8006896 <UART_SetConfig+0x22a>
 800672c:	231b      	movs	r3, #27
 800672e:	2218      	movs	r2, #24
 8006730:	189b      	adds	r3, r3, r2
 8006732:	19db      	adds	r3, r3, r7
 8006734:	2202      	movs	r2, #2
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	e0ad      	b.n	8006896 <UART_SetConfig+0x22a>
 800673a:	231b      	movs	r3, #27
 800673c:	2218      	movs	r2, #24
 800673e:	189b      	adds	r3, r3, r2
 8006740:	19db      	adds	r3, r3, r7
 8006742:	2204      	movs	r2, #4
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	e0a6      	b.n	8006896 <UART_SetConfig+0x22a>
 8006748:	231b      	movs	r3, #27
 800674a:	2218      	movs	r2, #24
 800674c:	189b      	adds	r3, r3, r2
 800674e:	19db      	adds	r3, r3, r7
 8006750:	2208      	movs	r2, #8
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	e09f      	b.n	8006896 <UART_SetConfig+0x22a>
 8006756:	231b      	movs	r3, #27
 8006758:	2218      	movs	r2, #24
 800675a:	189b      	adds	r3, r3, r2
 800675c:	19db      	adds	r3, r3, r7
 800675e:	2210      	movs	r2, #16
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	e098      	b.n	8006896 <UART_SetConfig+0x22a>
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a96      	ldr	r2, [pc, #600]	@ (80069c4 <UART_SetConfig+0x358>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d131      	bne.n	80067d2 <UART_SetConfig+0x166>
 800676e:	4b94      	ldr	r3, [pc, #592]	@ (80069c0 <UART_SetConfig+0x354>)
 8006770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006772:	220c      	movs	r2, #12
 8006774:	4013      	ands	r3, r2
 8006776:	2b0c      	cmp	r3, #12
 8006778:	d01d      	beq.n	80067b6 <UART_SetConfig+0x14a>
 800677a:	d823      	bhi.n	80067c4 <UART_SetConfig+0x158>
 800677c:	2b08      	cmp	r3, #8
 800677e:	d00c      	beq.n	800679a <UART_SetConfig+0x12e>
 8006780:	d820      	bhi.n	80067c4 <UART_SetConfig+0x158>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <UART_SetConfig+0x120>
 8006786:	2b04      	cmp	r3, #4
 8006788:	d00e      	beq.n	80067a8 <UART_SetConfig+0x13c>
 800678a:	e01b      	b.n	80067c4 <UART_SetConfig+0x158>
 800678c:	231b      	movs	r3, #27
 800678e:	2218      	movs	r2, #24
 8006790:	189b      	adds	r3, r3, r2
 8006792:	19db      	adds	r3, r3, r7
 8006794:	2200      	movs	r2, #0
 8006796:	701a      	strb	r2, [r3, #0]
 8006798:	e07d      	b.n	8006896 <UART_SetConfig+0x22a>
 800679a:	231b      	movs	r3, #27
 800679c:	2218      	movs	r2, #24
 800679e:	189b      	adds	r3, r3, r2
 80067a0:	19db      	adds	r3, r3, r7
 80067a2:	2202      	movs	r2, #2
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	e076      	b.n	8006896 <UART_SetConfig+0x22a>
 80067a8:	231b      	movs	r3, #27
 80067aa:	2218      	movs	r2, #24
 80067ac:	189b      	adds	r3, r3, r2
 80067ae:	19db      	adds	r3, r3, r7
 80067b0:	2204      	movs	r2, #4
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	e06f      	b.n	8006896 <UART_SetConfig+0x22a>
 80067b6:	231b      	movs	r3, #27
 80067b8:	2218      	movs	r2, #24
 80067ba:	189b      	adds	r3, r3, r2
 80067bc:	19db      	adds	r3, r3, r7
 80067be:	2208      	movs	r2, #8
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	e068      	b.n	8006896 <UART_SetConfig+0x22a>
 80067c4:	231b      	movs	r3, #27
 80067c6:	2218      	movs	r2, #24
 80067c8:	189b      	adds	r3, r3, r2
 80067ca:	19db      	adds	r3, r3, r7
 80067cc:	2210      	movs	r2, #16
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	e061      	b.n	8006896 <UART_SetConfig+0x22a>
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a7c      	ldr	r2, [pc, #496]	@ (80069c8 <UART_SetConfig+0x35c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d106      	bne.n	80067ea <UART_SetConfig+0x17e>
 80067dc:	231b      	movs	r3, #27
 80067de:	2218      	movs	r2, #24
 80067e0:	189b      	adds	r3, r3, r2
 80067e2:	19db      	adds	r3, r3, r7
 80067e4:	2200      	movs	r2, #0
 80067e6:	701a      	strb	r2, [r3, #0]
 80067e8:	e055      	b.n	8006896 <UART_SetConfig+0x22a>
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a77      	ldr	r2, [pc, #476]	@ (80069cc <UART_SetConfig+0x360>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d106      	bne.n	8006802 <UART_SetConfig+0x196>
 80067f4:	231b      	movs	r3, #27
 80067f6:	2218      	movs	r2, #24
 80067f8:	189b      	adds	r3, r3, r2
 80067fa:	19db      	adds	r3, r3, r7
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	e049      	b.n	8006896 <UART_SetConfig+0x22a>
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a6b      	ldr	r2, [pc, #428]	@ (80069b4 <UART_SetConfig+0x348>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d13e      	bne.n	800688a <UART_SetConfig+0x21e>
 800680c:	4b6c      	ldr	r3, [pc, #432]	@ (80069c0 <UART_SetConfig+0x354>)
 800680e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006810:	23c0      	movs	r3, #192	@ 0xc0
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	4013      	ands	r3, r2
 8006816:	22c0      	movs	r2, #192	@ 0xc0
 8006818:	0112      	lsls	r2, r2, #4
 800681a:	4293      	cmp	r3, r2
 800681c:	d027      	beq.n	800686e <UART_SetConfig+0x202>
 800681e:	22c0      	movs	r2, #192	@ 0xc0
 8006820:	0112      	lsls	r2, r2, #4
 8006822:	4293      	cmp	r3, r2
 8006824:	d82a      	bhi.n	800687c <UART_SetConfig+0x210>
 8006826:	2280      	movs	r2, #128	@ 0x80
 8006828:	0112      	lsls	r2, r2, #4
 800682a:	4293      	cmp	r3, r2
 800682c:	d011      	beq.n	8006852 <UART_SetConfig+0x1e6>
 800682e:	2280      	movs	r2, #128	@ 0x80
 8006830:	0112      	lsls	r2, r2, #4
 8006832:	4293      	cmp	r3, r2
 8006834:	d822      	bhi.n	800687c <UART_SetConfig+0x210>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <UART_SetConfig+0x1d8>
 800683a:	2280      	movs	r2, #128	@ 0x80
 800683c:	00d2      	lsls	r2, r2, #3
 800683e:	4293      	cmp	r3, r2
 8006840:	d00e      	beq.n	8006860 <UART_SetConfig+0x1f4>
 8006842:	e01b      	b.n	800687c <UART_SetConfig+0x210>
 8006844:	231b      	movs	r3, #27
 8006846:	2218      	movs	r2, #24
 8006848:	189b      	adds	r3, r3, r2
 800684a:	19db      	adds	r3, r3, r7
 800684c:	2200      	movs	r2, #0
 800684e:	701a      	strb	r2, [r3, #0]
 8006850:	e021      	b.n	8006896 <UART_SetConfig+0x22a>
 8006852:	231b      	movs	r3, #27
 8006854:	2218      	movs	r2, #24
 8006856:	189b      	adds	r3, r3, r2
 8006858:	19db      	adds	r3, r3, r7
 800685a:	2202      	movs	r2, #2
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e01a      	b.n	8006896 <UART_SetConfig+0x22a>
 8006860:	231b      	movs	r3, #27
 8006862:	2218      	movs	r2, #24
 8006864:	189b      	adds	r3, r3, r2
 8006866:	19db      	adds	r3, r3, r7
 8006868:	2204      	movs	r2, #4
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	e013      	b.n	8006896 <UART_SetConfig+0x22a>
 800686e:	231b      	movs	r3, #27
 8006870:	2218      	movs	r2, #24
 8006872:	189b      	adds	r3, r3, r2
 8006874:	19db      	adds	r3, r3, r7
 8006876:	2208      	movs	r2, #8
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	e00c      	b.n	8006896 <UART_SetConfig+0x22a>
 800687c:	231b      	movs	r3, #27
 800687e:	2218      	movs	r2, #24
 8006880:	189b      	adds	r3, r3, r2
 8006882:	19db      	adds	r3, r3, r7
 8006884:	2210      	movs	r2, #16
 8006886:	701a      	strb	r2, [r3, #0]
 8006888:	e005      	b.n	8006896 <UART_SetConfig+0x22a>
 800688a:	231b      	movs	r3, #27
 800688c:	2218      	movs	r2, #24
 800688e:	189b      	adds	r3, r3, r2
 8006890:	19db      	adds	r3, r3, r7
 8006892:	2210      	movs	r2, #16
 8006894:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a46      	ldr	r2, [pc, #280]	@ (80069b4 <UART_SetConfig+0x348>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d000      	beq.n	80068a2 <UART_SetConfig+0x236>
 80068a0:	e09a      	b.n	80069d8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068a2:	231b      	movs	r3, #27
 80068a4:	2218      	movs	r2, #24
 80068a6:	189b      	adds	r3, r3, r2
 80068a8:	19db      	adds	r3, r3, r7
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d01d      	beq.n	80068ec <UART_SetConfig+0x280>
 80068b0:	dc20      	bgt.n	80068f4 <UART_SetConfig+0x288>
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d015      	beq.n	80068e2 <UART_SetConfig+0x276>
 80068b6:	dc1d      	bgt.n	80068f4 <UART_SetConfig+0x288>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <UART_SetConfig+0x256>
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d005      	beq.n	80068cc <UART_SetConfig+0x260>
 80068c0:	e018      	b.n	80068f4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c2:	f7fe ff97 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 80068c6:	0003      	movs	r3, r0
 80068c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80068ca:	e01c      	b.n	8006906 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068cc:	4b3c      	ldr	r3, [pc, #240]	@ (80069c0 <UART_SetConfig+0x354>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2210      	movs	r2, #16
 80068d2:	4013      	ands	r3, r2
 80068d4:	d002      	beq.n	80068dc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80068d6:	4b3e      	ldr	r3, [pc, #248]	@ (80069d0 <UART_SetConfig+0x364>)
 80068d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068da:	e014      	b.n	8006906 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80068dc:	4b3d      	ldr	r3, [pc, #244]	@ (80069d4 <UART_SetConfig+0x368>)
 80068de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80068e0:	e011      	b.n	8006906 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068e2:	f7fe fef7 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 80068e6:	0003      	movs	r3, r0
 80068e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80068ea:	e00c      	b.n	8006906 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ec:	2380      	movs	r3, #128	@ 0x80
 80068ee:	021b      	lsls	r3, r3, #8
 80068f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80068f2:	e008      	b.n	8006906 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80068f8:	231a      	movs	r3, #26
 80068fa:	2218      	movs	r2, #24
 80068fc:	189b      	adds	r3, r3, r2
 80068fe:	19db      	adds	r3, r3, r7
 8006900:	2201      	movs	r2, #1
 8006902:	701a      	strb	r2, [r3, #0]
        break;
 8006904:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006908:	2b00      	cmp	r3, #0
 800690a:	d100      	bne.n	800690e <UART_SetConfig+0x2a2>
 800690c:	e133      	b.n	8006b76 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	0013      	movs	r3, r2
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	189b      	adds	r3, r3, r2
 8006918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800691a:	429a      	cmp	r2, r3
 800691c:	d305      	bcc.n	800692a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006926:	429a      	cmp	r2, r3
 8006928:	d906      	bls.n	8006938 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800692a:	231a      	movs	r3, #26
 800692c:	2218      	movs	r2, #24
 800692e:	189b      	adds	r3, r3, r2
 8006930:	19db      	adds	r3, r3, r7
 8006932:	2201      	movs	r2, #1
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	e11e      	b.n	8006b76 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693a:	613b      	str	r3, [r7, #16]
 800693c:	2300      	movs	r3, #0
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	6939      	ldr	r1, [r7, #16]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	000b      	movs	r3, r1
 8006946:	0e1b      	lsrs	r3, r3, #24
 8006948:	0010      	movs	r0, r2
 800694a:	0205      	lsls	r5, r0, #8
 800694c:	431d      	orrs	r5, r3
 800694e:	000b      	movs	r3, r1
 8006950:	021c      	lsls	r4, r3, #8
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	085b      	lsrs	r3, r3, #1
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	68b8      	ldr	r0, [r7, #8]
 8006960:	68f9      	ldr	r1, [r7, #12]
 8006962:	1900      	adds	r0, r0, r4
 8006964:	4169      	adcs	r1, r5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	2300      	movs	r3, #0
 800696e:	607b      	str	r3, [r7, #4]
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f7f9 fd50 	bl	8000418 <__aeabi_uldivmod>
 8006978:	0002      	movs	r2, r0
 800697a:	000b      	movs	r3, r1
 800697c:	0013      	movs	r3, r2
 800697e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006982:	23c0      	movs	r3, #192	@ 0xc0
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	429a      	cmp	r2, r3
 8006988:	d309      	bcc.n	800699e <UART_SetConfig+0x332>
 800698a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800698c:	2380      	movs	r3, #128	@ 0x80
 800698e:	035b      	lsls	r3, r3, #13
 8006990:	429a      	cmp	r2, r3
 8006992:	d204      	bcs.n	800699e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800699a:	60da      	str	r2, [r3, #12]
 800699c:	e0eb      	b.n	8006b76 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800699e:	231a      	movs	r3, #26
 80069a0:	2218      	movs	r2, #24
 80069a2:	189b      	adds	r3, r3, r2
 80069a4:	19db      	adds	r3, r3, r7
 80069a6:	2201      	movs	r2, #1
 80069a8:	701a      	strb	r2, [r3, #0]
 80069aa:	e0e4      	b.n	8006b76 <UART_SetConfig+0x50a>
 80069ac:	efff69f3 	.word	0xefff69f3
 80069b0:	ffffcfff 	.word	0xffffcfff
 80069b4:	40004800 	.word	0x40004800
 80069b8:	fffff4ff 	.word	0xfffff4ff
 80069bc:	40013800 	.word	0x40013800
 80069c0:	40021000 	.word	0x40021000
 80069c4:	40004400 	.word	0x40004400
 80069c8:	40004c00 	.word	0x40004c00
 80069cc:	40005000 	.word	0x40005000
 80069d0:	003d0900 	.word	0x003d0900
 80069d4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	69da      	ldr	r2, [r3, #28]
 80069dc:	2380      	movs	r3, #128	@ 0x80
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d000      	beq.n	80069e6 <UART_SetConfig+0x37a>
 80069e4:	e070      	b.n	8006ac8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80069e6:	231b      	movs	r3, #27
 80069e8:	2218      	movs	r2, #24
 80069ea:	189b      	adds	r3, r3, r2
 80069ec:	19db      	adds	r3, r3, r7
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d822      	bhi.n	8006a3a <UART_SetConfig+0x3ce>
 80069f4:	009a      	lsls	r2, r3, #2
 80069f6:	4b67      	ldr	r3, [pc, #412]	@ (8006b94 <UART_SetConfig+0x528>)
 80069f8:	18d3      	adds	r3, r2, r3
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069fe:	f7fe fef9 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 8006a02:	0003      	movs	r3, r0
 8006a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a06:	e021      	b.n	8006a4c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a08:	f7fe ff0a 	bl	8005820 <HAL_RCC_GetPCLK2Freq>
 8006a0c:	0003      	movs	r3, r0
 8006a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a10:	e01c      	b.n	8006a4c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a12:	4b61      	ldr	r3, [pc, #388]	@ (8006b98 <UART_SetConfig+0x52c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2210      	movs	r2, #16
 8006a18:	4013      	ands	r3, r2
 8006a1a:	d002      	beq.n	8006a22 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006a1c:	4b5f      	ldr	r3, [pc, #380]	@ (8006b9c <UART_SetConfig+0x530>)
 8006a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a20:	e014      	b.n	8006a4c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006a22:	4b5f      	ldr	r3, [pc, #380]	@ (8006ba0 <UART_SetConfig+0x534>)
 8006a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a26:	e011      	b.n	8006a4c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a28:	f7fe fe54 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 8006a2c:	0003      	movs	r3, r0
 8006a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a30:	e00c      	b.n	8006a4c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a32:	2380      	movs	r3, #128	@ 0x80
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a38:	e008      	b.n	8006a4c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006a3e:	231a      	movs	r3, #26
 8006a40:	2218      	movs	r2, #24
 8006a42:	189b      	adds	r3, r3, r2
 8006a44:	19db      	adds	r3, r3, r7
 8006a46:	2201      	movs	r2, #1
 8006a48:	701a      	strb	r2, [r3, #0]
        break;
 8006a4a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d100      	bne.n	8006a54 <UART_SetConfig+0x3e8>
 8006a52:	e090      	b.n	8006b76 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a56:	005a      	lsls	r2, r3, #1
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	085b      	lsrs	r3, r3, #1
 8006a5e:	18d2      	adds	r2, r2, r3
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	0019      	movs	r1, r3
 8006a66:	0010      	movs	r0, r2
 8006a68:	f7f9 fb60 	bl	800012c <__udivsi3>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a72:	2b0f      	cmp	r3, #15
 8006a74:	d921      	bls.n	8006aba <UART_SetConfig+0x44e>
 8006a76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a78:	2380      	movs	r3, #128	@ 0x80
 8006a7a:	025b      	lsls	r3, r3, #9
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d21c      	bcs.n	8006aba <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	200e      	movs	r0, #14
 8006a86:	2418      	movs	r4, #24
 8006a88:	1903      	adds	r3, r0, r4
 8006a8a:	19db      	adds	r3, r3, r7
 8006a8c:	210f      	movs	r1, #15
 8006a8e:	438a      	bics	r2, r1
 8006a90:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a94:	085b      	lsrs	r3, r3, #1
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	2207      	movs	r2, #7
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	b299      	uxth	r1, r3
 8006a9e:	1903      	adds	r3, r0, r4
 8006aa0:	19db      	adds	r3, r3, r7
 8006aa2:	1902      	adds	r2, r0, r4
 8006aa4:	19d2      	adds	r2, r2, r7
 8006aa6:	8812      	ldrh	r2, [r2, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	1902      	adds	r2, r0, r4
 8006ab2:	19d2      	adds	r2, r2, r7
 8006ab4:	8812      	ldrh	r2, [r2, #0]
 8006ab6:	60da      	str	r2, [r3, #12]
 8006ab8:	e05d      	b.n	8006b76 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006aba:	231a      	movs	r3, #26
 8006abc:	2218      	movs	r2, #24
 8006abe:	189b      	adds	r3, r3, r2
 8006ac0:	19db      	adds	r3, r3, r7
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	e056      	b.n	8006b76 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ac8:	231b      	movs	r3, #27
 8006aca:	2218      	movs	r2, #24
 8006acc:	189b      	adds	r3, r3, r2
 8006ace:	19db      	adds	r3, r3, r7
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d822      	bhi.n	8006b1c <UART_SetConfig+0x4b0>
 8006ad6:	009a      	lsls	r2, r3, #2
 8006ad8:	4b32      	ldr	r3, [pc, #200]	@ (8006ba4 <UART_SetConfig+0x538>)
 8006ada:	18d3      	adds	r3, r2, r3
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae0:	f7fe fe88 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 8006ae4:	0003      	movs	r3, r0
 8006ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006ae8:	e021      	b.n	8006b2e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aea:	f7fe fe99 	bl	8005820 <HAL_RCC_GetPCLK2Freq>
 8006aee:	0003      	movs	r3, r0
 8006af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006af2:	e01c      	b.n	8006b2e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006af4:	4b28      	ldr	r3, [pc, #160]	@ (8006b98 <UART_SetConfig+0x52c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2210      	movs	r2, #16
 8006afa:	4013      	ands	r3, r2
 8006afc:	d002      	beq.n	8006b04 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006afe:	4b27      	ldr	r3, [pc, #156]	@ (8006b9c <UART_SetConfig+0x530>)
 8006b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b02:	e014      	b.n	8006b2e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006b04:	4b26      	ldr	r3, [pc, #152]	@ (8006ba0 <UART_SetConfig+0x534>)
 8006b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b08:	e011      	b.n	8006b2e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b0a:	f7fe fde3 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 8006b0e:	0003      	movs	r3, r0
 8006b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b12:	e00c      	b.n	8006b2e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b14:	2380      	movs	r3, #128	@ 0x80
 8006b16:	021b      	lsls	r3, r3, #8
 8006b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b1a:	e008      	b.n	8006b2e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006b20:	231a      	movs	r3, #26
 8006b22:	2218      	movs	r2, #24
 8006b24:	189b      	adds	r3, r3, r2
 8006b26:	19db      	adds	r3, r3, r7
 8006b28:	2201      	movs	r2, #1
 8006b2a:	701a      	strb	r2, [r3, #0]
        break;
 8006b2c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d020      	beq.n	8006b76 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	085a      	lsrs	r2, r3, #1
 8006b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3c:	18d2      	adds	r2, r2, r3
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	0019      	movs	r1, r3
 8006b44:	0010      	movs	r0, r2
 8006b46:	f7f9 faf1 	bl	800012c <__udivsi3>
 8006b4a:	0003      	movs	r3, r0
 8006b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b50:	2b0f      	cmp	r3, #15
 8006b52:	d90a      	bls.n	8006b6a <UART_SetConfig+0x4fe>
 8006b54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b56:	2380      	movs	r3, #128	@ 0x80
 8006b58:	025b      	lsls	r3, r3, #9
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d205      	bcs.n	8006b6a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	60da      	str	r2, [r3, #12]
 8006b68:	e005      	b.n	8006b76 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006b6a:	231a      	movs	r3, #26
 8006b6c:	2218      	movs	r2, #24
 8006b6e:	189b      	adds	r3, r3, r2
 8006b70:	19db      	adds	r3, r3, r7
 8006b72:	2201      	movs	r2, #1
 8006b74:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006b82:	231a      	movs	r3, #26
 8006b84:	2218      	movs	r2, #24
 8006b86:	189b      	adds	r3, r3, r2
 8006b88:	19db      	adds	r3, r3, r7
 8006b8a:	781b      	ldrb	r3, [r3, #0]
}
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	b00e      	add	sp, #56	@ 0x38
 8006b92:	bdb0      	pop	{r4, r5, r7, pc}
 8006b94:	08007d88 	.word	0x08007d88
 8006b98:	40021000 	.word	0x40021000
 8006b9c:	003d0900 	.word	0x003d0900
 8006ba0:	00f42400 	.word	0x00f42400
 8006ba4:	08007dac 	.word	0x08007dac

08006ba8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb4:	2208      	movs	r2, #8
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	d00b      	beq.n	8006bd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8006cec <UART_AdvFeatureConfig+0x144>)
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	0019      	movs	r1, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	4013      	ands	r3, r2
 8006bda:	d00b      	beq.n	8006bf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	4a43      	ldr	r2, [pc, #268]	@ (8006cf0 <UART_AdvFeatureConfig+0x148>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	0019      	movs	r1, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d00b      	beq.n	8006c16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	4a3b      	ldr	r2, [pc, #236]	@ (8006cf4 <UART_AdvFeatureConfig+0x14c>)
 8006c06:	4013      	ands	r3, r2
 8006c08:	0019      	movs	r1, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	d00b      	beq.n	8006c38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	4a34      	ldr	r2, [pc, #208]	@ (8006cf8 <UART_AdvFeatureConfig+0x150>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	0019      	movs	r1, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3c:	2210      	movs	r2, #16
 8006c3e:	4013      	ands	r3, r2
 8006c40:	d00b      	beq.n	8006c5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	4a2c      	ldr	r2, [pc, #176]	@ (8006cfc <UART_AdvFeatureConfig+0x154>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	0019      	movs	r1, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5e:	2220      	movs	r2, #32
 8006c60:	4013      	ands	r3, r2
 8006c62:	d00b      	beq.n	8006c7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	4a25      	ldr	r2, [pc, #148]	@ (8006d00 <UART_AdvFeatureConfig+0x158>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	0019      	movs	r1, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c80:	2240      	movs	r2, #64	@ 0x40
 8006c82:	4013      	ands	r3, r2
 8006c84:	d01d      	beq.n	8006cc2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006d04 <UART_AdvFeatureConfig+0x15c>)
 8006c8e:	4013      	ands	r3, r2
 8006c90:	0019      	movs	r1, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ca2:	2380      	movs	r3, #128	@ 0x80
 8006ca4:	035b      	lsls	r3, r3, #13
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d10b      	bne.n	8006cc2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	4a15      	ldr	r2, [pc, #84]	@ (8006d08 <UART_AdvFeatureConfig+0x160>)
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	0019      	movs	r1, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc6:	2280      	movs	r2, #128	@ 0x80
 8006cc8:	4013      	ands	r3, r2
 8006cca:	d00b      	beq.n	8006ce4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8006d0c <UART_AdvFeatureConfig+0x164>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	0019      	movs	r1, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	605a      	str	r2, [r3, #4]
  }
}
 8006ce4:	46c0      	nop			@ (mov r8, r8)
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	b002      	add	sp, #8
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	ffff7fff 	.word	0xffff7fff
 8006cf0:	fffdffff 	.word	0xfffdffff
 8006cf4:	fffeffff 	.word	0xfffeffff
 8006cf8:	fffbffff 	.word	0xfffbffff
 8006cfc:	ffffefff 	.word	0xffffefff
 8006d00:	ffffdfff 	.word	0xffffdfff
 8006d04:	ffefffff 	.word	0xffefffff
 8006d08:	ff9fffff 	.word	0xff9fffff
 8006d0c:	fff7ffff 	.word	0xfff7ffff

08006d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b092      	sub	sp, #72	@ 0x48
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2284      	movs	r2, #132	@ 0x84
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d20:	f7fb fed8 	bl	8002ad4 <HAL_GetTick>
 8006d24:	0003      	movs	r3, r0
 8006d26:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2208      	movs	r2, #8
 8006d30:	4013      	ands	r3, r2
 8006d32:	2b08      	cmp	r3, #8
 8006d34:	d12c      	bne.n	8006d90 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d38:	2280      	movs	r2, #128	@ 0x80
 8006d3a:	0391      	lsls	r1, r2, #14
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4a46      	ldr	r2, [pc, #280]	@ (8006e58 <UART_CheckIdleState+0x148>)
 8006d40:	9200      	str	r2, [sp, #0]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f000 f88c 	bl	8006e60 <UART_WaitOnFlagUntilTimeout>
 8006d48:	1e03      	subs	r3, r0, #0
 8006d4a:	d021      	beq.n	8006d90 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d56:	2301      	movs	r3, #1
 8006d58:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5c:	f383 8810 	msr	PRIMASK, r3
}
 8006d60:	46c0      	nop			@ (mov r8, r8)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2180      	movs	r1, #128	@ 0x80
 8006d6e:	438a      	bics	r2, r1
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d78:	f383 8810 	msr	PRIMASK, r3
}
 8006d7c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2220      	movs	r2, #32
 8006d82:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2278      	movs	r2, #120	@ 0x78
 8006d88:	2100      	movs	r1, #0
 8006d8a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e05f      	b.n	8006e50 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2204      	movs	r2, #4
 8006d98:	4013      	ands	r3, r2
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	d146      	bne.n	8006e2c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006da0:	2280      	movs	r2, #128	@ 0x80
 8006da2:	03d1      	lsls	r1, r2, #15
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4a2c      	ldr	r2, [pc, #176]	@ (8006e58 <UART_CheckIdleState+0x148>)
 8006da8:	9200      	str	r2, [sp, #0]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f000 f858 	bl	8006e60 <UART_WaitOnFlagUntilTimeout>
 8006db0:	1e03      	subs	r3, r0, #0
 8006db2:	d03b      	beq.n	8006e2c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db4:	f3ef 8310 	mrs	r3, PRIMASK
 8006db8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dba:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f383 8810 	msr	PRIMASK, r3
}
 8006dc8:	46c0      	nop			@ (mov r8, r8)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4921      	ldr	r1, [pc, #132]	@ (8006e5c <UART_CheckIdleState+0x14c>)
 8006dd6:	400a      	ands	r2, r1
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ddc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f383 8810 	msr	PRIMASK, r3
}
 8006de4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de6:	f3ef 8310 	mrs	r3, PRIMASK
 8006dea:	61bb      	str	r3, [r7, #24]
  return(result);
 8006dec:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dee:	633b      	str	r3, [r7, #48]	@ 0x30
 8006df0:	2301      	movs	r3, #1
 8006df2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	f383 8810 	msr	PRIMASK, r3
}
 8006dfa:	46c0      	nop			@ (mov r8, r8)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2101      	movs	r1, #1
 8006e08:	438a      	bics	r2, r1
 8006e0a:	609a      	str	r2, [r3, #8]
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	f383 8810 	msr	PRIMASK, r3
}
 8006e16:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2280      	movs	r2, #128	@ 0x80
 8006e1c:	2120      	movs	r1, #32
 8006e1e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2278      	movs	r2, #120	@ 0x78
 8006e24:	2100      	movs	r1, #0
 8006e26:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e011      	b.n	8006e50 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2280      	movs	r2, #128	@ 0x80
 8006e36:	2120      	movs	r1, #32
 8006e38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2278      	movs	r2, #120	@ 0x78
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	0018      	movs	r0, r3
 8006e52:	46bd      	mov	sp, r7
 8006e54:	b010      	add	sp, #64	@ 0x40
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	01ffffff 	.word	0x01ffffff
 8006e5c:	fffffedf 	.word	0xfffffedf

08006e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	1dfb      	adds	r3, r7, #7
 8006e6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e70:	e051      	b.n	8006f16 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	3301      	adds	r3, #1
 8006e76:	d04e      	beq.n	8006f16 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e78:	f7fb fe2c 	bl	8002ad4 <HAL_GetTick>
 8006e7c:	0002      	movs	r2, r0
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d302      	bcc.n	8006e8e <UART_WaitOnFlagUntilTimeout+0x2e>
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e051      	b.n	8006f36 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2204      	movs	r2, #4
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	d03b      	beq.n	8006f16 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b80      	cmp	r3, #128	@ 0x80
 8006ea2:	d038      	beq.n	8006f16 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b40      	cmp	r3, #64	@ 0x40
 8006ea8:	d035      	beq.n	8006f16 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	2208      	movs	r2, #8
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d111      	bne.n	8006edc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2208      	movs	r2, #8
 8006ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f000 f83c 	bl	8006f40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2284      	movs	r2, #132	@ 0x84
 8006ecc:	2108      	movs	r1, #8
 8006ece:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2278      	movs	r2, #120	@ 0x78
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e02c      	b.n	8006f36 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69da      	ldr	r2, [r3, #28]
 8006ee2:	2380      	movs	r3, #128	@ 0x80
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	401a      	ands	r2, r3
 8006ee8:	2380      	movs	r3, #128	@ 0x80
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d112      	bne.n	8006f16 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2280      	movs	r2, #128	@ 0x80
 8006ef6:	0112      	lsls	r2, r2, #4
 8006ef8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	0018      	movs	r0, r3
 8006efe:	f000 f81f 	bl	8006f40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2284      	movs	r2, #132	@ 0x84
 8006f06:	2120      	movs	r1, #32
 8006f08:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2278      	movs	r2, #120	@ 0x78
 8006f0e:	2100      	movs	r1, #0
 8006f10:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e00f      	b.n	8006f36 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	425a      	negs	r2, r3
 8006f26:	4153      	adcs	r3, r2
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	001a      	movs	r2, r3
 8006f2c:	1dfb      	adds	r3, r7, #7
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d09e      	beq.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	0018      	movs	r0, r3
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	b004      	add	sp, #16
 8006f3c:	bd80      	pop	{r7, pc}
	...

08006f40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08e      	sub	sp, #56	@ 0x38
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f48:	f3ef 8310 	mrs	r3, PRIMASK
 8006f4c:	617b      	str	r3, [r7, #20]
  return(result);
 8006f4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f52:	2301      	movs	r3, #1
 8006f54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	f383 8810 	msr	PRIMASK, r3
}
 8006f5c:	46c0      	nop			@ (mov r8, r8)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4926      	ldr	r1, [pc, #152]	@ (8007004 <UART_EndRxTransfer+0xc4>)
 8006f6a:	400a      	ands	r2, r1
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	f383 8810 	msr	PRIMASK, r3
}
 8006f78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f7e:	623b      	str	r3, [r7, #32]
  return(result);
 8006f80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f82:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f84:	2301      	movs	r3, #1
 8006f86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8a:	f383 8810 	msr	PRIMASK, r3
}
 8006f8e:	46c0      	nop			@ (mov r8, r8)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	438a      	bics	r2, r1
 8006f9e:	609a      	str	r2, [r3, #8]
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa6:	f383 8810 	msr	PRIMASK, r3
}
 8006faa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d118      	bne.n	8006fe6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8006fb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f383 8810 	msr	PRIMASK, r3
}
 8006fc8:	46c0      	nop			@ (mov r8, r8)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2110      	movs	r1, #16
 8006fd6:	438a      	bics	r2, r1
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f383 8810 	msr	PRIMASK, r3
}
 8006fe4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2280      	movs	r2, #128	@ 0x80
 8006fea:	2120      	movs	r1, #32
 8006fec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ffa:	46c0      	nop			@ (mov r8, r8)
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	b00e      	add	sp, #56	@ 0x38
 8007000:	bd80      	pop	{r7, pc}
 8007002:	46c0      	nop			@ (mov r8, r8)
 8007004:	fffffedf 	.word	0xfffffedf

08007008 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	603b      	str	r3, [r7, #0]
 8007014:	1dbb      	adds	r3, r7, #6
 8007016:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2280      	movs	r2, #128	@ 0x80
 800701c:	589b      	ldr	r3, [r3, r2]
 800701e:	2b20      	cmp	r3, #32
 8007020:	d000      	beq.n	8007024 <HAL_UARTEx_ReceiveToIdle+0x1c>
 8007022:	e109      	b.n	8007238 <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_UARTEx_ReceiveToIdle+0x2a>
 800702a:	1dbb      	adds	r3, r7, #6
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e101      	b.n	800723a <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	2380      	movs	r3, #128	@ 0x80
 800703c:	015b      	lsls	r3, r3, #5
 800703e:	429a      	cmp	r2, r3
 8007040:	d109      	bne.n	8007056 <HAL_UARTEx_ReceiveToIdle+0x4e>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d105      	bne.n	8007056 <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2201      	movs	r2, #1
 800704e:	4013      	ands	r3, r2
 8007050:	d001      	beq.n	8007056 <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e0f1      	b.n	800723a <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2284      	movs	r2, #132	@ 0x84
 800705a:	2100      	movs	r1, #0
 800705c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2280      	movs	r2, #128	@ 0x80
 8007062:	2122      	movs	r1, #34	@ 0x22
 8007064:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007072:	f7fb fd2f 	bl	8002ad4 <HAL_GetTick>
 8007076:	0003      	movs	r3, r0
 8007078:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	1dba      	adds	r2, r7, #6
 800707e:	2158      	movs	r1, #88	@ 0x58
 8007080:	8812      	ldrh	r2, [r2, #0]
 8007082:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	1dba      	adds	r2, r7, #6
 8007088:	215a      	movs	r1, #90	@ 0x5a
 800708a:	8812      	ldrh	r2, [r2, #0]
 800708c:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	689a      	ldr	r2, [r3, #8]
 8007092:	2380      	movs	r3, #128	@ 0x80
 8007094:	015b      	lsls	r3, r3, #5
 8007096:	429a      	cmp	r2, r3
 8007098:	d10d      	bne.n	80070b6 <HAL_UARTEx_ReceiveToIdle+0xae>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d104      	bne.n	80070ac <HAL_UARTEx_ReceiveToIdle+0xa4>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	225c      	movs	r2, #92	@ 0x5c
 80070a6:	4967      	ldr	r1, [pc, #412]	@ (8007244 <HAL_UARTEx_ReceiveToIdle+0x23c>)
 80070a8:	5299      	strh	r1, [r3, r2]
 80070aa:	e02e      	b.n	800710a <HAL_UARTEx_ReceiveToIdle+0x102>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	225c      	movs	r2, #92	@ 0x5c
 80070b0:	21ff      	movs	r1, #255	@ 0xff
 80070b2:	5299      	strh	r1, [r3, r2]
 80070b4:	e029      	b.n	800710a <HAL_UARTEx_ReceiveToIdle+0x102>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10d      	bne.n	80070da <HAL_UARTEx_ReceiveToIdle+0xd2>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d104      	bne.n	80070d0 <HAL_UARTEx_ReceiveToIdle+0xc8>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	225c      	movs	r2, #92	@ 0x5c
 80070ca:	21ff      	movs	r1, #255	@ 0xff
 80070cc:	5299      	strh	r1, [r3, r2]
 80070ce:	e01c      	b.n	800710a <HAL_UARTEx_ReceiveToIdle+0x102>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	225c      	movs	r2, #92	@ 0x5c
 80070d4:	217f      	movs	r1, #127	@ 0x7f
 80070d6:	5299      	strh	r1, [r3, r2]
 80070d8:	e017      	b.n	800710a <HAL_UARTEx_ReceiveToIdle+0x102>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	2380      	movs	r3, #128	@ 0x80
 80070e0:	055b      	lsls	r3, r3, #21
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d10d      	bne.n	8007102 <HAL_UARTEx_ReceiveToIdle+0xfa>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d104      	bne.n	80070f8 <HAL_UARTEx_ReceiveToIdle+0xf0>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	225c      	movs	r2, #92	@ 0x5c
 80070f2:	217f      	movs	r1, #127	@ 0x7f
 80070f4:	5299      	strh	r1, [r3, r2]
 80070f6:	e008      	b.n	800710a <HAL_UARTEx_ReceiveToIdle+0x102>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	225c      	movs	r2, #92	@ 0x5c
 80070fc:	213f      	movs	r1, #63	@ 0x3f
 80070fe:	5299      	strh	r1, [r3, r2]
 8007100:	e003      	b.n	800710a <HAL_UARTEx_ReceiveToIdle+0x102>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	225c      	movs	r2, #92	@ 0x5c
 8007106:	2100      	movs	r1, #0
 8007108:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800710a:	2312      	movs	r3, #18
 800710c:	18fb      	adds	r3, r7, r3
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	215c      	movs	r1, #92	@ 0x5c
 8007112:	5a52      	ldrh	r2, [r2, r1]
 8007114:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689a      	ldr	r2, [r3, #8]
 800711a:	2380      	movs	r3, #128	@ 0x80
 800711c:	015b      	lsls	r3, r3, #5
 800711e:	429a      	cmp	r2, r3
 8007120:	d108      	bne.n	8007134 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d104      	bne.n	8007134 <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	61bb      	str	r3, [r7, #24]
 8007132:	e003      	b.n	800713c <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007138:	2300      	movs	r3, #0
 800713a:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2200      	movs	r2, #0
 8007140:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007142:	e062      	b.n	800720a <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	2210      	movs	r2, #16
 800714c:	4013      	ands	r3, r2
 800714e:	2b10      	cmp	r3, #16
 8007150:	d110      	bne.n	8007174 <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2210      	movs	r2, #16
 8007158:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d008      	beq.n	8007174 <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2202      	movs	r2, #2
 8007166:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2280      	movs	r2, #128	@ 0x80
 800716c:	2120      	movs	r1, #32
 800716e:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	e062      	b.n	800723a <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	2220      	movs	r2, #32
 800717c:	4013      	ands	r3, r2
 800717e:	2b20      	cmp	r3, #32
 8007180:	d12f      	bne.n	80071e2 <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10e      	bne.n	80071a6 <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	b29b      	uxth	r3, r3
 8007190:	2212      	movs	r2, #18
 8007192:	18ba      	adds	r2, r7, r2
 8007194:	8812      	ldrh	r2, [r2, #0]
 8007196:	4013      	ands	r3, r2
 8007198:	b29a      	uxth	r2, r3
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	3302      	adds	r3, #2
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	e00e      	b.n	80071c4 <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2212      	movs	r2, #18
 80071b0:	18ba      	adds	r2, r7, r2
 80071b2:	8812      	ldrh	r2, [r2, #0]
 80071b4:	b2d2      	uxtb	r2, r2
 80071b6:	4013      	ands	r3, r2
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	3301      	adds	r3, #1
 80071c2:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	3301      	adds	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	225a      	movs	r2, #90	@ 0x5a
 80071d4:	5a9b      	ldrh	r3, [r3, r2]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3b01      	subs	r3, #1
 80071da:	b299      	uxth	r1, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	225a      	movs	r2, #90	@ 0x5a
 80071e0:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80071e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e4:	3301      	adds	r3, #1
 80071e6:	d010      	beq.n	800720a <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80071e8:	f7fb fc74 	bl	8002ad4 <HAL_GetTick>
 80071ec:	0002      	movs	r2, r0
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d302      	bcc.n	80071fe <HAL_UARTEx_ReceiveToIdle+0x1f6>
 80071f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d105      	bne.n	800720a <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2280      	movs	r2, #128	@ 0x80
 8007202:	2120      	movs	r1, #32
 8007204:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e017      	b.n	800723a <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	225a      	movs	r2, #90	@ 0x5a
 800720e:	5a9b      	ldrh	r3, [r3, r2]
 8007210:	b29b      	uxth	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d196      	bne.n	8007144 <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2258      	movs	r2, #88	@ 0x58
 800721a:	5a9a      	ldrh	r2, [r3, r2]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	215a      	movs	r1, #90	@ 0x5a
 8007220:	5a5b      	ldrh	r3, [r3, r1]
 8007222:	b29b      	uxth	r3, r3
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	b29a      	uxth	r2, r3
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2280      	movs	r2, #128	@ 0x80
 8007230:	2120      	movs	r1, #32
 8007232:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	e000      	b.n	800723a <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 8007238:	2302      	movs	r3, #2
  }
}
 800723a:	0018      	movs	r0, r3
 800723c:	46bd      	mov	sp, r7
 800723e:	b008      	add	sp, #32
 8007240:	bd80      	pop	{r7, pc}
 8007242:	46c0      	nop			@ (mov r8, r8)
 8007244:	000001ff 	.word	0x000001ff

08007248 <sniprintf>:
 8007248:	b40c      	push	{r2, r3}
 800724a:	b530      	push	{r4, r5, lr}
 800724c:	4b18      	ldr	r3, [pc, #96]	@ (80072b0 <sniprintf+0x68>)
 800724e:	000c      	movs	r4, r1
 8007250:	681d      	ldr	r5, [r3, #0]
 8007252:	b09d      	sub	sp, #116	@ 0x74
 8007254:	2900      	cmp	r1, #0
 8007256:	da08      	bge.n	800726a <sniprintf+0x22>
 8007258:	238b      	movs	r3, #139	@ 0x8b
 800725a:	2001      	movs	r0, #1
 800725c:	602b      	str	r3, [r5, #0]
 800725e:	4240      	negs	r0, r0
 8007260:	b01d      	add	sp, #116	@ 0x74
 8007262:	bc30      	pop	{r4, r5}
 8007264:	bc08      	pop	{r3}
 8007266:	b002      	add	sp, #8
 8007268:	4718      	bx	r3
 800726a:	2382      	movs	r3, #130	@ 0x82
 800726c:	466a      	mov	r2, sp
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	8293      	strh	r3, [r2, #20]
 8007272:	2300      	movs	r3, #0
 8007274:	9002      	str	r0, [sp, #8]
 8007276:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007278:	9006      	str	r0, [sp, #24]
 800727a:	4299      	cmp	r1, r3
 800727c:	d000      	beq.n	8007280 <sniprintf+0x38>
 800727e:	1e4b      	subs	r3, r1, #1
 8007280:	9304      	str	r3, [sp, #16]
 8007282:	9307      	str	r3, [sp, #28]
 8007284:	2301      	movs	r3, #1
 8007286:	466a      	mov	r2, sp
 8007288:	425b      	negs	r3, r3
 800728a:	82d3      	strh	r3, [r2, #22]
 800728c:	0028      	movs	r0, r5
 800728e:	ab21      	add	r3, sp, #132	@ 0x84
 8007290:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007292:	a902      	add	r1, sp, #8
 8007294:	9301      	str	r3, [sp, #4]
 8007296:	f000 f99d 	bl	80075d4 <_svfiprintf_r>
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	da01      	bge.n	80072a2 <sniprintf+0x5a>
 800729e:	238b      	movs	r3, #139	@ 0x8b
 80072a0:	602b      	str	r3, [r5, #0]
 80072a2:	2c00      	cmp	r4, #0
 80072a4:	d0dc      	beq.n	8007260 <sniprintf+0x18>
 80072a6:	2200      	movs	r2, #0
 80072a8:	9b02      	ldr	r3, [sp, #8]
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	e7d8      	b.n	8007260 <sniprintf+0x18>
 80072ae:	46c0      	nop			@ (mov r8, r8)
 80072b0:	20000014 	.word	0x20000014

080072b4 <memset>:
 80072b4:	0003      	movs	r3, r0
 80072b6:	1882      	adds	r2, r0, r2
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d100      	bne.n	80072be <memset+0xa>
 80072bc:	4770      	bx	lr
 80072be:	7019      	strb	r1, [r3, #0]
 80072c0:	3301      	adds	r3, #1
 80072c2:	e7f9      	b.n	80072b8 <memset+0x4>

080072c4 <__errno>:
 80072c4:	4b01      	ldr	r3, [pc, #4]	@ (80072cc <__errno+0x8>)
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	4770      	bx	lr
 80072ca:	46c0      	nop			@ (mov r8, r8)
 80072cc:	20000014 	.word	0x20000014

080072d0 <__libc_init_array>:
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	2600      	movs	r6, #0
 80072d4:	4c0c      	ldr	r4, [pc, #48]	@ (8007308 <__libc_init_array+0x38>)
 80072d6:	4d0d      	ldr	r5, [pc, #52]	@ (800730c <__libc_init_array+0x3c>)
 80072d8:	1b64      	subs	r4, r4, r5
 80072da:	10a4      	asrs	r4, r4, #2
 80072dc:	42a6      	cmp	r6, r4
 80072de:	d109      	bne.n	80072f4 <__libc_init_array+0x24>
 80072e0:	2600      	movs	r6, #0
 80072e2:	f000 fc61 	bl	8007ba8 <_init>
 80072e6:	4c0a      	ldr	r4, [pc, #40]	@ (8007310 <__libc_init_array+0x40>)
 80072e8:	4d0a      	ldr	r5, [pc, #40]	@ (8007314 <__libc_init_array+0x44>)
 80072ea:	1b64      	subs	r4, r4, r5
 80072ec:	10a4      	asrs	r4, r4, #2
 80072ee:	42a6      	cmp	r6, r4
 80072f0:	d105      	bne.n	80072fe <__libc_init_array+0x2e>
 80072f2:	bd70      	pop	{r4, r5, r6, pc}
 80072f4:	00b3      	lsls	r3, r6, #2
 80072f6:	58eb      	ldr	r3, [r5, r3]
 80072f8:	4798      	blx	r3
 80072fa:	3601      	adds	r6, #1
 80072fc:	e7ee      	b.n	80072dc <__libc_init_array+0xc>
 80072fe:	00b3      	lsls	r3, r6, #2
 8007300:	58eb      	ldr	r3, [r5, r3]
 8007302:	4798      	blx	r3
 8007304:	3601      	adds	r6, #1
 8007306:	e7f2      	b.n	80072ee <__libc_init_array+0x1e>
 8007308:	08007e0c 	.word	0x08007e0c
 800730c:	08007e0c 	.word	0x08007e0c
 8007310:	08007e10 	.word	0x08007e10
 8007314:	08007e0c 	.word	0x08007e0c

08007318 <__retarget_lock_acquire_recursive>:
 8007318:	4770      	bx	lr

0800731a <__retarget_lock_release_recursive>:
 800731a:	4770      	bx	lr

0800731c <_free_r>:
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	0005      	movs	r5, r0
 8007320:	1e0c      	subs	r4, r1, #0
 8007322:	d010      	beq.n	8007346 <_free_r+0x2a>
 8007324:	3c04      	subs	r4, #4
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	da00      	bge.n	800732e <_free_r+0x12>
 800732c:	18e4      	adds	r4, r4, r3
 800732e:	0028      	movs	r0, r5
 8007330:	f000 f8e0 	bl	80074f4 <__malloc_lock>
 8007334:	4a1d      	ldr	r2, [pc, #116]	@ (80073ac <_free_r+0x90>)
 8007336:	6813      	ldr	r3, [r2, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d105      	bne.n	8007348 <_free_r+0x2c>
 800733c:	6063      	str	r3, [r4, #4]
 800733e:	6014      	str	r4, [r2, #0]
 8007340:	0028      	movs	r0, r5
 8007342:	f000 f8df 	bl	8007504 <__malloc_unlock>
 8007346:	bd70      	pop	{r4, r5, r6, pc}
 8007348:	42a3      	cmp	r3, r4
 800734a:	d908      	bls.n	800735e <_free_r+0x42>
 800734c:	6820      	ldr	r0, [r4, #0]
 800734e:	1821      	adds	r1, r4, r0
 8007350:	428b      	cmp	r3, r1
 8007352:	d1f3      	bne.n	800733c <_free_r+0x20>
 8007354:	6819      	ldr	r1, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	1809      	adds	r1, r1, r0
 800735a:	6021      	str	r1, [r4, #0]
 800735c:	e7ee      	b.n	800733c <_free_r+0x20>
 800735e:	001a      	movs	r2, r3
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <_free_r+0x4e>
 8007366:	42a3      	cmp	r3, r4
 8007368:	d9f9      	bls.n	800735e <_free_r+0x42>
 800736a:	6811      	ldr	r1, [r2, #0]
 800736c:	1850      	adds	r0, r2, r1
 800736e:	42a0      	cmp	r0, r4
 8007370:	d10b      	bne.n	800738a <_free_r+0x6e>
 8007372:	6820      	ldr	r0, [r4, #0]
 8007374:	1809      	adds	r1, r1, r0
 8007376:	1850      	adds	r0, r2, r1
 8007378:	6011      	str	r1, [r2, #0]
 800737a:	4283      	cmp	r3, r0
 800737c:	d1e0      	bne.n	8007340 <_free_r+0x24>
 800737e:	6818      	ldr	r0, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	1841      	adds	r1, r0, r1
 8007384:	6011      	str	r1, [r2, #0]
 8007386:	6053      	str	r3, [r2, #4]
 8007388:	e7da      	b.n	8007340 <_free_r+0x24>
 800738a:	42a0      	cmp	r0, r4
 800738c:	d902      	bls.n	8007394 <_free_r+0x78>
 800738e:	230c      	movs	r3, #12
 8007390:	602b      	str	r3, [r5, #0]
 8007392:	e7d5      	b.n	8007340 <_free_r+0x24>
 8007394:	6820      	ldr	r0, [r4, #0]
 8007396:	1821      	adds	r1, r4, r0
 8007398:	428b      	cmp	r3, r1
 800739a:	d103      	bne.n	80073a4 <_free_r+0x88>
 800739c:	6819      	ldr	r1, [r3, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	1809      	adds	r1, r1, r0
 80073a2:	6021      	str	r1, [r4, #0]
 80073a4:	6063      	str	r3, [r4, #4]
 80073a6:	6054      	str	r4, [r2, #4]
 80073a8:	e7ca      	b.n	8007340 <_free_r+0x24>
 80073aa:	46c0      	nop			@ (mov r8, r8)
 80073ac:	200005d8 	.word	0x200005d8

080073b0 <sbrk_aligned>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	4e0f      	ldr	r6, [pc, #60]	@ (80073f0 <sbrk_aligned+0x40>)
 80073b4:	000d      	movs	r5, r1
 80073b6:	6831      	ldr	r1, [r6, #0]
 80073b8:	0004      	movs	r4, r0
 80073ba:	2900      	cmp	r1, #0
 80073bc:	d102      	bne.n	80073c4 <sbrk_aligned+0x14>
 80073be:	f000 fb95 	bl	8007aec <_sbrk_r>
 80073c2:	6030      	str	r0, [r6, #0]
 80073c4:	0029      	movs	r1, r5
 80073c6:	0020      	movs	r0, r4
 80073c8:	f000 fb90 	bl	8007aec <_sbrk_r>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d103      	bne.n	80073d8 <sbrk_aligned+0x28>
 80073d0:	2501      	movs	r5, #1
 80073d2:	426d      	negs	r5, r5
 80073d4:	0028      	movs	r0, r5
 80073d6:	bd70      	pop	{r4, r5, r6, pc}
 80073d8:	2303      	movs	r3, #3
 80073da:	1cc5      	adds	r5, r0, #3
 80073dc:	439d      	bics	r5, r3
 80073de:	42a8      	cmp	r0, r5
 80073e0:	d0f8      	beq.n	80073d4 <sbrk_aligned+0x24>
 80073e2:	1a29      	subs	r1, r5, r0
 80073e4:	0020      	movs	r0, r4
 80073e6:	f000 fb81 	bl	8007aec <_sbrk_r>
 80073ea:	3001      	adds	r0, #1
 80073ec:	d1f2      	bne.n	80073d4 <sbrk_aligned+0x24>
 80073ee:	e7ef      	b.n	80073d0 <sbrk_aligned+0x20>
 80073f0:	200005d4 	.word	0x200005d4

080073f4 <_malloc_r>:
 80073f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073f6:	2203      	movs	r2, #3
 80073f8:	1ccb      	adds	r3, r1, #3
 80073fa:	4393      	bics	r3, r2
 80073fc:	3308      	adds	r3, #8
 80073fe:	0005      	movs	r5, r0
 8007400:	001f      	movs	r7, r3
 8007402:	2b0c      	cmp	r3, #12
 8007404:	d234      	bcs.n	8007470 <_malloc_r+0x7c>
 8007406:	270c      	movs	r7, #12
 8007408:	42b9      	cmp	r1, r7
 800740a:	d833      	bhi.n	8007474 <_malloc_r+0x80>
 800740c:	0028      	movs	r0, r5
 800740e:	f000 f871 	bl	80074f4 <__malloc_lock>
 8007412:	4e37      	ldr	r6, [pc, #220]	@ (80074f0 <_malloc_r+0xfc>)
 8007414:	6833      	ldr	r3, [r6, #0]
 8007416:	001c      	movs	r4, r3
 8007418:	2c00      	cmp	r4, #0
 800741a:	d12f      	bne.n	800747c <_malloc_r+0x88>
 800741c:	0039      	movs	r1, r7
 800741e:	0028      	movs	r0, r5
 8007420:	f7ff ffc6 	bl	80073b0 <sbrk_aligned>
 8007424:	0004      	movs	r4, r0
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	d15f      	bne.n	80074ea <_malloc_r+0xf6>
 800742a:	6834      	ldr	r4, [r6, #0]
 800742c:	9400      	str	r4, [sp, #0]
 800742e:	9b00      	ldr	r3, [sp, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d14a      	bne.n	80074ca <_malloc_r+0xd6>
 8007434:	2c00      	cmp	r4, #0
 8007436:	d052      	beq.n	80074de <_malloc_r+0xea>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	0028      	movs	r0, r5
 800743c:	18e3      	adds	r3, r4, r3
 800743e:	9900      	ldr	r1, [sp, #0]
 8007440:	9301      	str	r3, [sp, #4]
 8007442:	f000 fb53 	bl	8007aec <_sbrk_r>
 8007446:	9b01      	ldr	r3, [sp, #4]
 8007448:	4283      	cmp	r3, r0
 800744a:	d148      	bne.n	80074de <_malloc_r+0xea>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	0028      	movs	r0, r5
 8007450:	1aff      	subs	r7, r7, r3
 8007452:	0039      	movs	r1, r7
 8007454:	f7ff ffac 	bl	80073b0 <sbrk_aligned>
 8007458:	3001      	adds	r0, #1
 800745a:	d040      	beq.n	80074de <_malloc_r+0xea>
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	19db      	adds	r3, r3, r7
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	6833      	ldr	r3, [r6, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	2a00      	cmp	r2, #0
 8007468:	d133      	bne.n	80074d2 <_malloc_r+0xde>
 800746a:	9b00      	ldr	r3, [sp, #0]
 800746c:	6033      	str	r3, [r6, #0]
 800746e:	e019      	b.n	80074a4 <_malloc_r+0xb0>
 8007470:	2b00      	cmp	r3, #0
 8007472:	dac9      	bge.n	8007408 <_malloc_r+0x14>
 8007474:	230c      	movs	r3, #12
 8007476:	602b      	str	r3, [r5, #0]
 8007478:	2000      	movs	r0, #0
 800747a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800747c:	6821      	ldr	r1, [r4, #0]
 800747e:	1bc9      	subs	r1, r1, r7
 8007480:	d420      	bmi.n	80074c4 <_malloc_r+0xd0>
 8007482:	290b      	cmp	r1, #11
 8007484:	d90a      	bls.n	800749c <_malloc_r+0xa8>
 8007486:	19e2      	adds	r2, r4, r7
 8007488:	6027      	str	r7, [r4, #0]
 800748a:	42a3      	cmp	r3, r4
 800748c:	d104      	bne.n	8007498 <_malloc_r+0xa4>
 800748e:	6032      	str	r2, [r6, #0]
 8007490:	6863      	ldr	r3, [r4, #4]
 8007492:	6011      	str	r1, [r2, #0]
 8007494:	6053      	str	r3, [r2, #4]
 8007496:	e005      	b.n	80074a4 <_malloc_r+0xb0>
 8007498:	605a      	str	r2, [r3, #4]
 800749a:	e7f9      	b.n	8007490 <_malloc_r+0x9c>
 800749c:	6862      	ldr	r2, [r4, #4]
 800749e:	42a3      	cmp	r3, r4
 80074a0:	d10e      	bne.n	80074c0 <_malloc_r+0xcc>
 80074a2:	6032      	str	r2, [r6, #0]
 80074a4:	0028      	movs	r0, r5
 80074a6:	f000 f82d 	bl	8007504 <__malloc_unlock>
 80074aa:	0020      	movs	r0, r4
 80074ac:	2207      	movs	r2, #7
 80074ae:	300b      	adds	r0, #11
 80074b0:	1d23      	adds	r3, r4, #4
 80074b2:	4390      	bics	r0, r2
 80074b4:	1ac2      	subs	r2, r0, r3
 80074b6:	4298      	cmp	r0, r3
 80074b8:	d0df      	beq.n	800747a <_malloc_r+0x86>
 80074ba:	1a1b      	subs	r3, r3, r0
 80074bc:	50a3      	str	r3, [r4, r2]
 80074be:	e7dc      	b.n	800747a <_malloc_r+0x86>
 80074c0:	605a      	str	r2, [r3, #4]
 80074c2:	e7ef      	b.n	80074a4 <_malloc_r+0xb0>
 80074c4:	0023      	movs	r3, r4
 80074c6:	6864      	ldr	r4, [r4, #4]
 80074c8:	e7a6      	b.n	8007418 <_malloc_r+0x24>
 80074ca:	9c00      	ldr	r4, [sp, #0]
 80074cc:	6863      	ldr	r3, [r4, #4]
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	e7ad      	b.n	800742e <_malloc_r+0x3a>
 80074d2:	001a      	movs	r2, r3
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	42a3      	cmp	r3, r4
 80074d8:	d1fb      	bne.n	80074d2 <_malloc_r+0xde>
 80074da:	2300      	movs	r3, #0
 80074dc:	e7da      	b.n	8007494 <_malloc_r+0xa0>
 80074de:	230c      	movs	r3, #12
 80074e0:	0028      	movs	r0, r5
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	f000 f80e 	bl	8007504 <__malloc_unlock>
 80074e8:	e7c6      	b.n	8007478 <_malloc_r+0x84>
 80074ea:	6007      	str	r7, [r0, #0]
 80074ec:	e7da      	b.n	80074a4 <_malloc_r+0xb0>
 80074ee:	46c0      	nop			@ (mov r8, r8)
 80074f0:	200005d8 	.word	0x200005d8

080074f4 <__malloc_lock>:
 80074f4:	b510      	push	{r4, lr}
 80074f6:	4802      	ldr	r0, [pc, #8]	@ (8007500 <__malloc_lock+0xc>)
 80074f8:	f7ff ff0e 	bl	8007318 <__retarget_lock_acquire_recursive>
 80074fc:	bd10      	pop	{r4, pc}
 80074fe:	46c0      	nop			@ (mov r8, r8)
 8007500:	200005d0 	.word	0x200005d0

08007504 <__malloc_unlock>:
 8007504:	b510      	push	{r4, lr}
 8007506:	4802      	ldr	r0, [pc, #8]	@ (8007510 <__malloc_unlock+0xc>)
 8007508:	f7ff ff07 	bl	800731a <__retarget_lock_release_recursive>
 800750c:	bd10      	pop	{r4, pc}
 800750e:	46c0      	nop			@ (mov r8, r8)
 8007510:	200005d0 	.word	0x200005d0

08007514 <__ssputs_r>:
 8007514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007516:	688e      	ldr	r6, [r1, #8]
 8007518:	b085      	sub	sp, #20
 800751a:	001f      	movs	r7, r3
 800751c:	000c      	movs	r4, r1
 800751e:	680b      	ldr	r3, [r1, #0]
 8007520:	9002      	str	r0, [sp, #8]
 8007522:	9203      	str	r2, [sp, #12]
 8007524:	42be      	cmp	r6, r7
 8007526:	d830      	bhi.n	800758a <__ssputs_r+0x76>
 8007528:	210c      	movs	r1, #12
 800752a:	5e62      	ldrsh	r2, [r4, r1]
 800752c:	2190      	movs	r1, #144	@ 0x90
 800752e:	00c9      	lsls	r1, r1, #3
 8007530:	420a      	tst	r2, r1
 8007532:	d028      	beq.n	8007586 <__ssputs_r+0x72>
 8007534:	2003      	movs	r0, #3
 8007536:	6921      	ldr	r1, [r4, #16]
 8007538:	1a5b      	subs	r3, r3, r1
 800753a:	9301      	str	r3, [sp, #4]
 800753c:	6963      	ldr	r3, [r4, #20]
 800753e:	4343      	muls	r3, r0
 8007540:	9801      	ldr	r0, [sp, #4]
 8007542:	0fdd      	lsrs	r5, r3, #31
 8007544:	18ed      	adds	r5, r5, r3
 8007546:	1c7b      	adds	r3, r7, #1
 8007548:	181b      	adds	r3, r3, r0
 800754a:	106d      	asrs	r5, r5, #1
 800754c:	42ab      	cmp	r3, r5
 800754e:	d900      	bls.n	8007552 <__ssputs_r+0x3e>
 8007550:	001d      	movs	r5, r3
 8007552:	0552      	lsls	r2, r2, #21
 8007554:	d528      	bpl.n	80075a8 <__ssputs_r+0x94>
 8007556:	0029      	movs	r1, r5
 8007558:	9802      	ldr	r0, [sp, #8]
 800755a:	f7ff ff4b 	bl	80073f4 <_malloc_r>
 800755e:	1e06      	subs	r6, r0, #0
 8007560:	d02c      	beq.n	80075bc <__ssputs_r+0xa8>
 8007562:	9a01      	ldr	r2, [sp, #4]
 8007564:	6921      	ldr	r1, [r4, #16]
 8007566:	f000 fade 	bl	8007b26 <memcpy>
 800756a:	89a2      	ldrh	r2, [r4, #12]
 800756c:	4b18      	ldr	r3, [pc, #96]	@ (80075d0 <__ssputs_r+0xbc>)
 800756e:	401a      	ands	r2, r3
 8007570:	2380      	movs	r3, #128	@ 0x80
 8007572:	4313      	orrs	r3, r2
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	9b01      	ldr	r3, [sp, #4]
 8007578:	6126      	str	r6, [r4, #16]
 800757a:	18f6      	adds	r6, r6, r3
 800757c:	6026      	str	r6, [r4, #0]
 800757e:	003e      	movs	r6, r7
 8007580:	6165      	str	r5, [r4, #20]
 8007582:	1aed      	subs	r5, r5, r3
 8007584:	60a5      	str	r5, [r4, #8]
 8007586:	42be      	cmp	r6, r7
 8007588:	d900      	bls.n	800758c <__ssputs_r+0x78>
 800758a:	003e      	movs	r6, r7
 800758c:	0032      	movs	r2, r6
 800758e:	9903      	ldr	r1, [sp, #12]
 8007590:	6820      	ldr	r0, [r4, #0]
 8007592:	f000 fa99 	bl	8007ac8 <memmove>
 8007596:	2000      	movs	r0, #0
 8007598:	68a3      	ldr	r3, [r4, #8]
 800759a:	1b9b      	subs	r3, r3, r6
 800759c:	60a3      	str	r3, [r4, #8]
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	199b      	adds	r3, r3, r6
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	b005      	add	sp, #20
 80075a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a8:	002a      	movs	r2, r5
 80075aa:	9802      	ldr	r0, [sp, #8]
 80075ac:	f000 fac4 	bl	8007b38 <_realloc_r>
 80075b0:	1e06      	subs	r6, r0, #0
 80075b2:	d1e0      	bne.n	8007576 <__ssputs_r+0x62>
 80075b4:	6921      	ldr	r1, [r4, #16]
 80075b6:	9802      	ldr	r0, [sp, #8]
 80075b8:	f7ff feb0 	bl	800731c <_free_r>
 80075bc:	230c      	movs	r3, #12
 80075be:	2001      	movs	r0, #1
 80075c0:	9a02      	ldr	r2, [sp, #8]
 80075c2:	4240      	negs	r0, r0
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	89a2      	ldrh	r2, [r4, #12]
 80075c8:	3334      	adds	r3, #52	@ 0x34
 80075ca:	4313      	orrs	r3, r2
 80075cc:	81a3      	strh	r3, [r4, #12]
 80075ce:	e7e9      	b.n	80075a4 <__ssputs_r+0x90>
 80075d0:	fffffb7f 	.word	0xfffffb7f

080075d4 <_svfiprintf_r>:
 80075d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075d6:	b0a1      	sub	sp, #132	@ 0x84
 80075d8:	9003      	str	r0, [sp, #12]
 80075da:	001d      	movs	r5, r3
 80075dc:	898b      	ldrh	r3, [r1, #12]
 80075de:	000f      	movs	r7, r1
 80075e0:	0016      	movs	r6, r2
 80075e2:	061b      	lsls	r3, r3, #24
 80075e4:	d511      	bpl.n	800760a <_svfiprintf_r+0x36>
 80075e6:	690b      	ldr	r3, [r1, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10e      	bne.n	800760a <_svfiprintf_r+0x36>
 80075ec:	2140      	movs	r1, #64	@ 0x40
 80075ee:	f7ff ff01 	bl	80073f4 <_malloc_r>
 80075f2:	6038      	str	r0, [r7, #0]
 80075f4:	6138      	str	r0, [r7, #16]
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d105      	bne.n	8007606 <_svfiprintf_r+0x32>
 80075fa:	230c      	movs	r3, #12
 80075fc:	9a03      	ldr	r2, [sp, #12]
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	2001      	movs	r0, #1
 8007602:	4240      	negs	r0, r0
 8007604:	e0cf      	b.n	80077a6 <_svfiprintf_r+0x1d2>
 8007606:	2340      	movs	r3, #64	@ 0x40
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	2300      	movs	r3, #0
 800760c:	ac08      	add	r4, sp, #32
 800760e:	6163      	str	r3, [r4, #20]
 8007610:	3320      	adds	r3, #32
 8007612:	7663      	strb	r3, [r4, #25]
 8007614:	3310      	adds	r3, #16
 8007616:	76a3      	strb	r3, [r4, #26]
 8007618:	9507      	str	r5, [sp, #28]
 800761a:	0035      	movs	r5, r6
 800761c:	782b      	ldrb	r3, [r5, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d001      	beq.n	8007626 <_svfiprintf_r+0x52>
 8007622:	2b25      	cmp	r3, #37	@ 0x25
 8007624:	d148      	bne.n	80076b8 <_svfiprintf_r+0xe4>
 8007626:	1bab      	subs	r3, r5, r6
 8007628:	9305      	str	r3, [sp, #20]
 800762a:	42b5      	cmp	r5, r6
 800762c:	d00b      	beq.n	8007646 <_svfiprintf_r+0x72>
 800762e:	0032      	movs	r2, r6
 8007630:	0039      	movs	r1, r7
 8007632:	9803      	ldr	r0, [sp, #12]
 8007634:	f7ff ff6e 	bl	8007514 <__ssputs_r>
 8007638:	3001      	adds	r0, #1
 800763a:	d100      	bne.n	800763e <_svfiprintf_r+0x6a>
 800763c:	e0ae      	b.n	800779c <_svfiprintf_r+0x1c8>
 800763e:	6963      	ldr	r3, [r4, #20]
 8007640:	9a05      	ldr	r2, [sp, #20]
 8007642:	189b      	adds	r3, r3, r2
 8007644:	6163      	str	r3, [r4, #20]
 8007646:	782b      	ldrb	r3, [r5, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d100      	bne.n	800764e <_svfiprintf_r+0x7a>
 800764c:	e0a6      	b.n	800779c <_svfiprintf_r+0x1c8>
 800764e:	2201      	movs	r2, #1
 8007650:	2300      	movs	r3, #0
 8007652:	4252      	negs	r2, r2
 8007654:	6062      	str	r2, [r4, #4]
 8007656:	a904      	add	r1, sp, #16
 8007658:	3254      	adds	r2, #84	@ 0x54
 800765a:	1852      	adds	r2, r2, r1
 800765c:	1c6e      	adds	r6, r5, #1
 800765e:	6023      	str	r3, [r4, #0]
 8007660:	60e3      	str	r3, [r4, #12]
 8007662:	60a3      	str	r3, [r4, #8]
 8007664:	7013      	strb	r3, [r2, #0]
 8007666:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007668:	4b54      	ldr	r3, [pc, #336]	@ (80077bc <_svfiprintf_r+0x1e8>)
 800766a:	2205      	movs	r2, #5
 800766c:	0018      	movs	r0, r3
 800766e:	7831      	ldrb	r1, [r6, #0]
 8007670:	9305      	str	r3, [sp, #20]
 8007672:	f000 fa4d 	bl	8007b10 <memchr>
 8007676:	1c75      	adds	r5, r6, #1
 8007678:	2800      	cmp	r0, #0
 800767a:	d11f      	bne.n	80076bc <_svfiprintf_r+0xe8>
 800767c:	6822      	ldr	r2, [r4, #0]
 800767e:	06d3      	lsls	r3, r2, #27
 8007680:	d504      	bpl.n	800768c <_svfiprintf_r+0xb8>
 8007682:	2353      	movs	r3, #83	@ 0x53
 8007684:	a904      	add	r1, sp, #16
 8007686:	185b      	adds	r3, r3, r1
 8007688:	2120      	movs	r1, #32
 800768a:	7019      	strb	r1, [r3, #0]
 800768c:	0713      	lsls	r3, r2, #28
 800768e:	d504      	bpl.n	800769a <_svfiprintf_r+0xc6>
 8007690:	2353      	movs	r3, #83	@ 0x53
 8007692:	a904      	add	r1, sp, #16
 8007694:	185b      	adds	r3, r3, r1
 8007696:	212b      	movs	r1, #43	@ 0x2b
 8007698:	7019      	strb	r1, [r3, #0]
 800769a:	7833      	ldrb	r3, [r6, #0]
 800769c:	2b2a      	cmp	r3, #42	@ 0x2a
 800769e:	d016      	beq.n	80076ce <_svfiprintf_r+0xfa>
 80076a0:	0035      	movs	r5, r6
 80076a2:	2100      	movs	r1, #0
 80076a4:	200a      	movs	r0, #10
 80076a6:	68e3      	ldr	r3, [r4, #12]
 80076a8:	782a      	ldrb	r2, [r5, #0]
 80076aa:	1c6e      	adds	r6, r5, #1
 80076ac:	3a30      	subs	r2, #48	@ 0x30
 80076ae:	2a09      	cmp	r2, #9
 80076b0:	d950      	bls.n	8007754 <_svfiprintf_r+0x180>
 80076b2:	2900      	cmp	r1, #0
 80076b4:	d111      	bne.n	80076da <_svfiprintf_r+0x106>
 80076b6:	e017      	b.n	80076e8 <_svfiprintf_r+0x114>
 80076b8:	3501      	adds	r5, #1
 80076ba:	e7af      	b.n	800761c <_svfiprintf_r+0x48>
 80076bc:	9b05      	ldr	r3, [sp, #20]
 80076be:	6822      	ldr	r2, [r4, #0]
 80076c0:	1ac0      	subs	r0, r0, r3
 80076c2:	2301      	movs	r3, #1
 80076c4:	4083      	lsls	r3, r0
 80076c6:	4313      	orrs	r3, r2
 80076c8:	002e      	movs	r6, r5
 80076ca:	6023      	str	r3, [r4, #0]
 80076cc:	e7cc      	b.n	8007668 <_svfiprintf_r+0x94>
 80076ce:	9b07      	ldr	r3, [sp, #28]
 80076d0:	1d19      	adds	r1, r3, #4
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	9107      	str	r1, [sp, #28]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	db01      	blt.n	80076de <_svfiprintf_r+0x10a>
 80076da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076dc:	e004      	b.n	80076e8 <_svfiprintf_r+0x114>
 80076de:	425b      	negs	r3, r3
 80076e0:	60e3      	str	r3, [r4, #12]
 80076e2:	2302      	movs	r3, #2
 80076e4:	4313      	orrs	r3, r2
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	782b      	ldrb	r3, [r5, #0]
 80076ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80076ec:	d10c      	bne.n	8007708 <_svfiprintf_r+0x134>
 80076ee:	786b      	ldrb	r3, [r5, #1]
 80076f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80076f2:	d134      	bne.n	800775e <_svfiprintf_r+0x18a>
 80076f4:	9b07      	ldr	r3, [sp, #28]
 80076f6:	3502      	adds	r5, #2
 80076f8:	1d1a      	adds	r2, r3, #4
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	9207      	str	r2, [sp, #28]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	da01      	bge.n	8007706 <_svfiprintf_r+0x132>
 8007702:	2301      	movs	r3, #1
 8007704:	425b      	negs	r3, r3
 8007706:	9309      	str	r3, [sp, #36]	@ 0x24
 8007708:	4e2d      	ldr	r6, [pc, #180]	@ (80077c0 <_svfiprintf_r+0x1ec>)
 800770a:	2203      	movs	r2, #3
 800770c:	0030      	movs	r0, r6
 800770e:	7829      	ldrb	r1, [r5, #0]
 8007710:	f000 f9fe 	bl	8007b10 <memchr>
 8007714:	2800      	cmp	r0, #0
 8007716:	d006      	beq.n	8007726 <_svfiprintf_r+0x152>
 8007718:	2340      	movs	r3, #64	@ 0x40
 800771a:	1b80      	subs	r0, r0, r6
 800771c:	4083      	lsls	r3, r0
 800771e:	6822      	ldr	r2, [r4, #0]
 8007720:	3501      	adds	r5, #1
 8007722:	4313      	orrs	r3, r2
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	7829      	ldrb	r1, [r5, #0]
 8007728:	2206      	movs	r2, #6
 800772a:	4826      	ldr	r0, [pc, #152]	@ (80077c4 <_svfiprintf_r+0x1f0>)
 800772c:	1c6e      	adds	r6, r5, #1
 800772e:	7621      	strb	r1, [r4, #24]
 8007730:	f000 f9ee 	bl	8007b10 <memchr>
 8007734:	2800      	cmp	r0, #0
 8007736:	d038      	beq.n	80077aa <_svfiprintf_r+0x1d6>
 8007738:	4b23      	ldr	r3, [pc, #140]	@ (80077c8 <_svfiprintf_r+0x1f4>)
 800773a:	2b00      	cmp	r3, #0
 800773c:	d122      	bne.n	8007784 <_svfiprintf_r+0x1b0>
 800773e:	2207      	movs	r2, #7
 8007740:	9b07      	ldr	r3, [sp, #28]
 8007742:	3307      	adds	r3, #7
 8007744:	4393      	bics	r3, r2
 8007746:	3308      	adds	r3, #8
 8007748:	9307      	str	r3, [sp, #28]
 800774a:	6963      	ldr	r3, [r4, #20]
 800774c:	9a04      	ldr	r2, [sp, #16]
 800774e:	189b      	adds	r3, r3, r2
 8007750:	6163      	str	r3, [r4, #20]
 8007752:	e762      	b.n	800761a <_svfiprintf_r+0x46>
 8007754:	4343      	muls	r3, r0
 8007756:	0035      	movs	r5, r6
 8007758:	2101      	movs	r1, #1
 800775a:	189b      	adds	r3, r3, r2
 800775c:	e7a4      	b.n	80076a8 <_svfiprintf_r+0xd4>
 800775e:	2300      	movs	r3, #0
 8007760:	200a      	movs	r0, #10
 8007762:	0019      	movs	r1, r3
 8007764:	3501      	adds	r5, #1
 8007766:	6063      	str	r3, [r4, #4]
 8007768:	782a      	ldrb	r2, [r5, #0]
 800776a:	1c6e      	adds	r6, r5, #1
 800776c:	3a30      	subs	r2, #48	@ 0x30
 800776e:	2a09      	cmp	r2, #9
 8007770:	d903      	bls.n	800777a <_svfiprintf_r+0x1a6>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0c8      	beq.n	8007708 <_svfiprintf_r+0x134>
 8007776:	9109      	str	r1, [sp, #36]	@ 0x24
 8007778:	e7c6      	b.n	8007708 <_svfiprintf_r+0x134>
 800777a:	4341      	muls	r1, r0
 800777c:	0035      	movs	r5, r6
 800777e:	2301      	movs	r3, #1
 8007780:	1889      	adds	r1, r1, r2
 8007782:	e7f1      	b.n	8007768 <_svfiprintf_r+0x194>
 8007784:	aa07      	add	r2, sp, #28
 8007786:	9200      	str	r2, [sp, #0]
 8007788:	0021      	movs	r1, r4
 800778a:	003a      	movs	r2, r7
 800778c:	4b0f      	ldr	r3, [pc, #60]	@ (80077cc <_svfiprintf_r+0x1f8>)
 800778e:	9803      	ldr	r0, [sp, #12]
 8007790:	e000      	b.n	8007794 <_svfiprintf_r+0x1c0>
 8007792:	bf00      	nop
 8007794:	9004      	str	r0, [sp, #16]
 8007796:	9b04      	ldr	r3, [sp, #16]
 8007798:	3301      	adds	r3, #1
 800779a:	d1d6      	bne.n	800774a <_svfiprintf_r+0x176>
 800779c:	89bb      	ldrh	r3, [r7, #12]
 800779e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80077a0:	065b      	lsls	r3, r3, #25
 80077a2:	d500      	bpl.n	80077a6 <_svfiprintf_r+0x1d2>
 80077a4:	e72c      	b.n	8007600 <_svfiprintf_r+0x2c>
 80077a6:	b021      	add	sp, #132	@ 0x84
 80077a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077aa:	aa07      	add	r2, sp, #28
 80077ac:	9200      	str	r2, [sp, #0]
 80077ae:	0021      	movs	r1, r4
 80077b0:	003a      	movs	r2, r7
 80077b2:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <_svfiprintf_r+0x1f8>)
 80077b4:	9803      	ldr	r0, [sp, #12]
 80077b6:	f000 f87b 	bl	80078b0 <_printf_i>
 80077ba:	e7eb      	b.n	8007794 <_svfiprintf_r+0x1c0>
 80077bc:	08007dd0 	.word	0x08007dd0
 80077c0:	08007dd6 	.word	0x08007dd6
 80077c4:	08007dda 	.word	0x08007dda
 80077c8:	00000000 	.word	0x00000000
 80077cc:	08007515 	.word	0x08007515

080077d0 <_printf_common>:
 80077d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077d2:	0016      	movs	r6, r2
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	688a      	ldr	r2, [r1, #8]
 80077d8:	690b      	ldr	r3, [r1, #16]
 80077da:	000c      	movs	r4, r1
 80077dc:	9000      	str	r0, [sp, #0]
 80077de:	4293      	cmp	r3, r2
 80077e0:	da00      	bge.n	80077e4 <_printf_common+0x14>
 80077e2:	0013      	movs	r3, r2
 80077e4:	0022      	movs	r2, r4
 80077e6:	6033      	str	r3, [r6, #0]
 80077e8:	3243      	adds	r2, #67	@ 0x43
 80077ea:	7812      	ldrb	r2, [r2, #0]
 80077ec:	2a00      	cmp	r2, #0
 80077ee:	d001      	beq.n	80077f4 <_printf_common+0x24>
 80077f0:	3301      	adds	r3, #1
 80077f2:	6033      	str	r3, [r6, #0]
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	069b      	lsls	r3, r3, #26
 80077f8:	d502      	bpl.n	8007800 <_printf_common+0x30>
 80077fa:	6833      	ldr	r3, [r6, #0]
 80077fc:	3302      	adds	r3, #2
 80077fe:	6033      	str	r3, [r6, #0]
 8007800:	6822      	ldr	r2, [r4, #0]
 8007802:	2306      	movs	r3, #6
 8007804:	0015      	movs	r5, r2
 8007806:	401d      	ands	r5, r3
 8007808:	421a      	tst	r2, r3
 800780a:	d027      	beq.n	800785c <_printf_common+0x8c>
 800780c:	0023      	movs	r3, r4
 800780e:	3343      	adds	r3, #67	@ 0x43
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	1e5a      	subs	r2, r3, #1
 8007814:	4193      	sbcs	r3, r2
 8007816:	6822      	ldr	r2, [r4, #0]
 8007818:	0692      	lsls	r2, r2, #26
 800781a:	d430      	bmi.n	800787e <_printf_common+0xae>
 800781c:	0022      	movs	r2, r4
 800781e:	9901      	ldr	r1, [sp, #4]
 8007820:	9800      	ldr	r0, [sp, #0]
 8007822:	9d08      	ldr	r5, [sp, #32]
 8007824:	3243      	adds	r2, #67	@ 0x43
 8007826:	47a8      	blx	r5
 8007828:	3001      	adds	r0, #1
 800782a:	d025      	beq.n	8007878 <_printf_common+0xa8>
 800782c:	2206      	movs	r2, #6
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	2500      	movs	r5, #0
 8007832:	4013      	ands	r3, r2
 8007834:	2b04      	cmp	r3, #4
 8007836:	d105      	bne.n	8007844 <_printf_common+0x74>
 8007838:	6833      	ldr	r3, [r6, #0]
 800783a:	68e5      	ldr	r5, [r4, #12]
 800783c:	1aed      	subs	r5, r5, r3
 800783e:	43eb      	mvns	r3, r5
 8007840:	17db      	asrs	r3, r3, #31
 8007842:	401d      	ands	r5, r3
 8007844:	68a3      	ldr	r3, [r4, #8]
 8007846:	6922      	ldr	r2, [r4, #16]
 8007848:	4293      	cmp	r3, r2
 800784a:	dd01      	ble.n	8007850 <_printf_common+0x80>
 800784c:	1a9b      	subs	r3, r3, r2
 800784e:	18ed      	adds	r5, r5, r3
 8007850:	2600      	movs	r6, #0
 8007852:	42b5      	cmp	r5, r6
 8007854:	d120      	bne.n	8007898 <_printf_common+0xc8>
 8007856:	2000      	movs	r0, #0
 8007858:	e010      	b.n	800787c <_printf_common+0xac>
 800785a:	3501      	adds	r5, #1
 800785c:	68e3      	ldr	r3, [r4, #12]
 800785e:	6832      	ldr	r2, [r6, #0]
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	42ab      	cmp	r3, r5
 8007864:	ddd2      	ble.n	800780c <_printf_common+0x3c>
 8007866:	0022      	movs	r2, r4
 8007868:	2301      	movs	r3, #1
 800786a:	9901      	ldr	r1, [sp, #4]
 800786c:	9800      	ldr	r0, [sp, #0]
 800786e:	9f08      	ldr	r7, [sp, #32]
 8007870:	3219      	adds	r2, #25
 8007872:	47b8      	blx	r7
 8007874:	3001      	adds	r0, #1
 8007876:	d1f0      	bne.n	800785a <_printf_common+0x8a>
 8007878:	2001      	movs	r0, #1
 800787a:	4240      	negs	r0, r0
 800787c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800787e:	2030      	movs	r0, #48	@ 0x30
 8007880:	18e1      	adds	r1, r4, r3
 8007882:	3143      	adds	r1, #67	@ 0x43
 8007884:	7008      	strb	r0, [r1, #0]
 8007886:	0021      	movs	r1, r4
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	3145      	adds	r1, #69	@ 0x45
 800788c:	7809      	ldrb	r1, [r1, #0]
 800788e:	18a2      	adds	r2, r4, r2
 8007890:	3243      	adds	r2, #67	@ 0x43
 8007892:	3302      	adds	r3, #2
 8007894:	7011      	strb	r1, [r2, #0]
 8007896:	e7c1      	b.n	800781c <_printf_common+0x4c>
 8007898:	0022      	movs	r2, r4
 800789a:	2301      	movs	r3, #1
 800789c:	9901      	ldr	r1, [sp, #4]
 800789e:	9800      	ldr	r0, [sp, #0]
 80078a0:	9f08      	ldr	r7, [sp, #32]
 80078a2:	321a      	adds	r2, #26
 80078a4:	47b8      	blx	r7
 80078a6:	3001      	adds	r0, #1
 80078a8:	d0e6      	beq.n	8007878 <_printf_common+0xa8>
 80078aa:	3601      	adds	r6, #1
 80078ac:	e7d1      	b.n	8007852 <_printf_common+0x82>
	...

080078b0 <_printf_i>:
 80078b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078b2:	b08b      	sub	sp, #44	@ 0x2c
 80078b4:	9206      	str	r2, [sp, #24]
 80078b6:	000a      	movs	r2, r1
 80078b8:	3243      	adds	r2, #67	@ 0x43
 80078ba:	9307      	str	r3, [sp, #28]
 80078bc:	9005      	str	r0, [sp, #20]
 80078be:	9203      	str	r2, [sp, #12]
 80078c0:	7e0a      	ldrb	r2, [r1, #24]
 80078c2:	000c      	movs	r4, r1
 80078c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80078c6:	2a78      	cmp	r2, #120	@ 0x78
 80078c8:	d809      	bhi.n	80078de <_printf_i+0x2e>
 80078ca:	2a62      	cmp	r2, #98	@ 0x62
 80078cc:	d80b      	bhi.n	80078e6 <_printf_i+0x36>
 80078ce:	2a00      	cmp	r2, #0
 80078d0:	d100      	bne.n	80078d4 <_printf_i+0x24>
 80078d2:	e0ba      	b.n	8007a4a <_printf_i+0x19a>
 80078d4:	497a      	ldr	r1, [pc, #488]	@ (8007ac0 <_printf_i+0x210>)
 80078d6:	9104      	str	r1, [sp, #16]
 80078d8:	2a58      	cmp	r2, #88	@ 0x58
 80078da:	d100      	bne.n	80078de <_printf_i+0x2e>
 80078dc:	e08e      	b.n	80079fc <_printf_i+0x14c>
 80078de:	0025      	movs	r5, r4
 80078e0:	3542      	adds	r5, #66	@ 0x42
 80078e2:	702a      	strb	r2, [r5, #0]
 80078e4:	e022      	b.n	800792c <_printf_i+0x7c>
 80078e6:	0010      	movs	r0, r2
 80078e8:	3863      	subs	r0, #99	@ 0x63
 80078ea:	2815      	cmp	r0, #21
 80078ec:	d8f7      	bhi.n	80078de <_printf_i+0x2e>
 80078ee:	f7f8 fc13 	bl	8000118 <__gnu_thumb1_case_shi>
 80078f2:	0016      	.short	0x0016
 80078f4:	fff6001f 	.word	0xfff6001f
 80078f8:	fff6fff6 	.word	0xfff6fff6
 80078fc:	001ffff6 	.word	0x001ffff6
 8007900:	fff6fff6 	.word	0xfff6fff6
 8007904:	fff6fff6 	.word	0xfff6fff6
 8007908:	0036009f 	.word	0x0036009f
 800790c:	fff6007e 	.word	0xfff6007e
 8007910:	00b0fff6 	.word	0x00b0fff6
 8007914:	0036fff6 	.word	0x0036fff6
 8007918:	fff6fff6 	.word	0xfff6fff6
 800791c:	0082      	.short	0x0082
 800791e:	0025      	movs	r5, r4
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	3542      	adds	r5, #66	@ 0x42
 8007924:	1d11      	adds	r1, r2, #4
 8007926:	6019      	str	r1, [r3, #0]
 8007928:	6813      	ldr	r3, [r2, #0]
 800792a:	702b      	strb	r3, [r5, #0]
 800792c:	2301      	movs	r3, #1
 800792e:	e09e      	b.n	8007a6e <_printf_i+0x1be>
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	6809      	ldr	r1, [r1, #0]
 8007934:	1d02      	adds	r2, r0, #4
 8007936:	060d      	lsls	r5, r1, #24
 8007938:	d50b      	bpl.n	8007952 <_printf_i+0xa2>
 800793a:	6806      	ldr	r6, [r0, #0]
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	2e00      	cmp	r6, #0
 8007940:	da03      	bge.n	800794a <_printf_i+0x9a>
 8007942:	232d      	movs	r3, #45	@ 0x2d
 8007944:	9a03      	ldr	r2, [sp, #12]
 8007946:	4276      	negs	r6, r6
 8007948:	7013      	strb	r3, [r2, #0]
 800794a:	4b5d      	ldr	r3, [pc, #372]	@ (8007ac0 <_printf_i+0x210>)
 800794c:	270a      	movs	r7, #10
 800794e:	9304      	str	r3, [sp, #16]
 8007950:	e018      	b.n	8007984 <_printf_i+0xd4>
 8007952:	6806      	ldr	r6, [r0, #0]
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	0649      	lsls	r1, r1, #25
 8007958:	d5f1      	bpl.n	800793e <_printf_i+0x8e>
 800795a:	b236      	sxth	r6, r6
 800795c:	e7ef      	b.n	800793e <_printf_i+0x8e>
 800795e:	6808      	ldr	r0, [r1, #0]
 8007960:	6819      	ldr	r1, [r3, #0]
 8007962:	c940      	ldmia	r1!, {r6}
 8007964:	0605      	lsls	r5, r0, #24
 8007966:	d402      	bmi.n	800796e <_printf_i+0xbe>
 8007968:	0640      	lsls	r0, r0, #25
 800796a:	d500      	bpl.n	800796e <_printf_i+0xbe>
 800796c:	b2b6      	uxth	r6, r6
 800796e:	6019      	str	r1, [r3, #0]
 8007970:	4b53      	ldr	r3, [pc, #332]	@ (8007ac0 <_printf_i+0x210>)
 8007972:	270a      	movs	r7, #10
 8007974:	9304      	str	r3, [sp, #16]
 8007976:	2a6f      	cmp	r2, #111	@ 0x6f
 8007978:	d100      	bne.n	800797c <_printf_i+0xcc>
 800797a:	3f02      	subs	r7, #2
 800797c:	0023      	movs	r3, r4
 800797e:	2200      	movs	r2, #0
 8007980:	3343      	adds	r3, #67	@ 0x43
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	6863      	ldr	r3, [r4, #4]
 8007986:	60a3      	str	r3, [r4, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	db06      	blt.n	800799a <_printf_i+0xea>
 800798c:	2104      	movs	r1, #4
 800798e:	6822      	ldr	r2, [r4, #0]
 8007990:	9d03      	ldr	r5, [sp, #12]
 8007992:	438a      	bics	r2, r1
 8007994:	6022      	str	r2, [r4, #0]
 8007996:	4333      	orrs	r3, r6
 8007998:	d00c      	beq.n	80079b4 <_printf_i+0x104>
 800799a:	9d03      	ldr	r5, [sp, #12]
 800799c:	0030      	movs	r0, r6
 800799e:	0039      	movs	r1, r7
 80079a0:	f7f8 fc4a 	bl	8000238 <__aeabi_uidivmod>
 80079a4:	9b04      	ldr	r3, [sp, #16]
 80079a6:	3d01      	subs	r5, #1
 80079a8:	5c5b      	ldrb	r3, [r3, r1]
 80079aa:	702b      	strb	r3, [r5, #0]
 80079ac:	0033      	movs	r3, r6
 80079ae:	0006      	movs	r6, r0
 80079b0:	429f      	cmp	r7, r3
 80079b2:	d9f3      	bls.n	800799c <_printf_i+0xec>
 80079b4:	2f08      	cmp	r7, #8
 80079b6:	d109      	bne.n	80079cc <_printf_i+0x11c>
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	07db      	lsls	r3, r3, #31
 80079bc:	d506      	bpl.n	80079cc <_printf_i+0x11c>
 80079be:	6862      	ldr	r2, [r4, #4]
 80079c0:	6923      	ldr	r3, [r4, #16]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	dc02      	bgt.n	80079cc <_printf_i+0x11c>
 80079c6:	2330      	movs	r3, #48	@ 0x30
 80079c8:	3d01      	subs	r5, #1
 80079ca:	702b      	strb	r3, [r5, #0]
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	1b5b      	subs	r3, r3, r5
 80079d0:	6123      	str	r3, [r4, #16]
 80079d2:	9b07      	ldr	r3, [sp, #28]
 80079d4:	0021      	movs	r1, r4
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	9805      	ldr	r0, [sp, #20]
 80079da:	9b06      	ldr	r3, [sp, #24]
 80079dc:	aa09      	add	r2, sp, #36	@ 0x24
 80079de:	f7ff fef7 	bl	80077d0 <_printf_common>
 80079e2:	3001      	adds	r0, #1
 80079e4:	d148      	bne.n	8007a78 <_printf_i+0x1c8>
 80079e6:	2001      	movs	r0, #1
 80079e8:	4240      	negs	r0, r0
 80079ea:	b00b      	add	sp, #44	@ 0x2c
 80079ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ee:	2220      	movs	r2, #32
 80079f0:	6809      	ldr	r1, [r1, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	6022      	str	r2, [r4, #0]
 80079f6:	2278      	movs	r2, #120	@ 0x78
 80079f8:	4932      	ldr	r1, [pc, #200]	@ (8007ac4 <_printf_i+0x214>)
 80079fa:	9104      	str	r1, [sp, #16]
 80079fc:	0021      	movs	r1, r4
 80079fe:	3145      	adds	r1, #69	@ 0x45
 8007a00:	700a      	strb	r2, [r1, #0]
 8007a02:	6819      	ldr	r1, [r3, #0]
 8007a04:	6822      	ldr	r2, [r4, #0]
 8007a06:	c940      	ldmia	r1!, {r6}
 8007a08:	0610      	lsls	r0, r2, #24
 8007a0a:	d402      	bmi.n	8007a12 <_printf_i+0x162>
 8007a0c:	0650      	lsls	r0, r2, #25
 8007a0e:	d500      	bpl.n	8007a12 <_printf_i+0x162>
 8007a10:	b2b6      	uxth	r6, r6
 8007a12:	6019      	str	r1, [r3, #0]
 8007a14:	07d3      	lsls	r3, r2, #31
 8007a16:	d502      	bpl.n	8007a1e <_printf_i+0x16e>
 8007a18:	2320      	movs	r3, #32
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	2e00      	cmp	r6, #0
 8007a20:	d001      	beq.n	8007a26 <_printf_i+0x176>
 8007a22:	2710      	movs	r7, #16
 8007a24:	e7aa      	b.n	800797c <_printf_i+0xcc>
 8007a26:	2220      	movs	r2, #32
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	4393      	bics	r3, r2
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	e7f8      	b.n	8007a22 <_printf_i+0x172>
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	680d      	ldr	r5, [r1, #0]
 8007a34:	1d10      	adds	r0, r2, #4
 8007a36:	6949      	ldr	r1, [r1, #20]
 8007a38:	6018      	str	r0, [r3, #0]
 8007a3a:	6813      	ldr	r3, [r2, #0]
 8007a3c:	062e      	lsls	r6, r5, #24
 8007a3e:	d501      	bpl.n	8007a44 <_printf_i+0x194>
 8007a40:	6019      	str	r1, [r3, #0]
 8007a42:	e002      	b.n	8007a4a <_printf_i+0x19a>
 8007a44:	066d      	lsls	r5, r5, #25
 8007a46:	d5fb      	bpl.n	8007a40 <_printf_i+0x190>
 8007a48:	8019      	strh	r1, [r3, #0]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9d03      	ldr	r5, [sp, #12]
 8007a4e:	6123      	str	r3, [r4, #16]
 8007a50:	e7bf      	b.n	80079d2 <_printf_i+0x122>
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	1d11      	adds	r1, r2, #4
 8007a56:	6019      	str	r1, [r3, #0]
 8007a58:	6815      	ldr	r5, [r2, #0]
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	0028      	movs	r0, r5
 8007a5e:	6862      	ldr	r2, [r4, #4]
 8007a60:	f000 f856 	bl	8007b10 <memchr>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d001      	beq.n	8007a6c <_printf_i+0x1bc>
 8007a68:	1b40      	subs	r0, r0, r5
 8007a6a:	6060      	str	r0, [r4, #4]
 8007a6c:	6863      	ldr	r3, [r4, #4]
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	2300      	movs	r3, #0
 8007a72:	9a03      	ldr	r2, [sp, #12]
 8007a74:	7013      	strb	r3, [r2, #0]
 8007a76:	e7ac      	b.n	80079d2 <_printf_i+0x122>
 8007a78:	002a      	movs	r2, r5
 8007a7a:	6923      	ldr	r3, [r4, #16]
 8007a7c:	9906      	ldr	r1, [sp, #24]
 8007a7e:	9805      	ldr	r0, [sp, #20]
 8007a80:	9d07      	ldr	r5, [sp, #28]
 8007a82:	47a8      	blx	r5
 8007a84:	3001      	adds	r0, #1
 8007a86:	d0ae      	beq.n	80079e6 <_printf_i+0x136>
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	079b      	lsls	r3, r3, #30
 8007a8c:	d415      	bmi.n	8007aba <_printf_i+0x20a>
 8007a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a90:	68e0      	ldr	r0, [r4, #12]
 8007a92:	4298      	cmp	r0, r3
 8007a94:	daa9      	bge.n	80079ea <_printf_i+0x13a>
 8007a96:	0018      	movs	r0, r3
 8007a98:	e7a7      	b.n	80079ea <_printf_i+0x13a>
 8007a9a:	0022      	movs	r2, r4
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	9906      	ldr	r1, [sp, #24]
 8007aa0:	9805      	ldr	r0, [sp, #20]
 8007aa2:	9e07      	ldr	r6, [sp, #28]
 8007aa4:	3219      	adds	r2, #25
 8007aa6:	47b0      	blx	r6
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d09c      	beq.n	80079e6 <_printf_i+0x136>
 8007aac:	3501      	adds	r5, #1
 8007aae:	68e3      	ldr	r3, [r4, #12]
 8007ab0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ab2:	1a9b      	subs	r3, r3, r2
 8007ab4:	42ab      	cmp	r3, r5
 8007ab6:	dcf0      	bgt.n	8007a9a <_printf_i+0x1ea>
 8007ab8:	e7e9      	b.n	8007a8e <_printf_i+0x1de>
 8007aba:	2500      	movs	r5, #0
 8007abc:	e7f7      	b.n	8007aae <_printf_i+0x1fe>
 8007abe:	46c0      	nop			@ (mov r8, r8)
 8007ac0:	08007de1 	.word	0x08007de1
 8007ac4:	08007df2 	.word	0x08007df2

08007ac8 <memmove>:
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	4288      	cmp	r0, r1
 8007acc:	d902      	bls.n	8007ad4 <memmove+0xc>
 8007ace:	188b      	adds	r3, r1, r2
 8007ad0:	4298      	cmp	r0, r3
 8007ad2:	d308      	bcc.n	8007ae6 <memmove+0x1e>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d007      	beq.n	8007aea <memmove+0x22>
 8007ada:	5ccc      	ldrb	r4, [r1, r3]
 8007adc:	54c4      	strb	r4, [r0, r3]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	e7f9      	b.n	8007ad6 <memmove+0xe>
 8007ae2:	5c8b      	ldrb	r3, [r1, r2]
 8007ae4:	5483      	strb	r3, [r0, r2]
 8007ae6:	3a01      	subs	r2, #1
 8007ae8:	d2fb      	bcs.n	8007ae2 <memmove+0x1a>
 8007aea:	bd10      	pop	{r4, pc}

08007aec <_sbrk_r>:
 8007aec:	2300      	movs	r3, #0
 8007aee:	b570      	push	{r4, r5, r6, lr}
 8007af0:	4d06      	ldr	r5, [pc, #24]	@ (8007b0c <_sbrk_r+0x20>)
 8007af2:	0004      	movs	r4, r0
 8007af4:	0008      	movs	r0, r1
 8007af6:	602b      	str	r3, [r5, #0]
 8007af8:	f7fa fb2c 	bl	8002154 <_sbrk>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d103      	bne.n	8007b08 <_sbrk_r+0x1c>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d000      	beq.n	8007b08 <_sbrk_r+0x1c>
 8007b06:	6023      	str	r3, [r4, #0]
 8007b08:	bd70      	pop	{r4, r5, r6, pc}
 8007b0a:	46c0      	nop			@ (mov r8, r8)
 8007b0c:	200005cc 	.word	0x200005cc

08007b10 <memchr>:
 8007b10:	b2c9      	uxtb	r1, r1
 8007b12:	1882      	adds	r2, r0, r2
 8007b14:	4290      	cmp	r0, r2
 8007b16:	d101      	bne.n	8007b1c <memchr+0xc>
 8007b18:	2000      	movs	r0, #0
 8007b1a:	4770      	bx	lr
 8007b1c:	7803      	ldrb	r3, [r0, #0]
 8007b1e:	428b      	cmp	r3, r1
 8007b20:	d0fb      	beq.n	8007b1a <memchr+0xa>
 8007b22:	3001      	adds	r0, #1
 8007b24:	e7f6      	b.n	8007b14 <memchr+0x4>

08007b26 <memcpy>:
 8007b26:	2300      	movs	r3, #0
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d100      	bne.n	8007b30 <memcpy+0xa>
 8007b2e:	bd10      	pop	{r4, pc}
 8007b30:	5ccc      	ldrb	r4, [r1, r3]
 8007b32:	54c4      	strb	r4, [r0, r3]
 8007b34:	3301      	adds	r3, #1
 8007b36:	e7f8      	b.n	8007b2a <memcpy+0x4>

08007b38 <_realloc_r>:
 8007b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b3a:	0006      	movs	r6, r0
 8007b3c:	000c      	movs	r4, r1
 8007b3e:	0015      	movs	r5, r2
 8007b40:	2900      	cmp	r1, #0
 8007b42:	d105      	bne.n	8007b50 <_realloc_r+0x18>
 8007b44:	0011      	movs	r1, r2
 8007b46:	f7ff fc55 	bl	80073f4 <_malloc_r>
 8007b4a:	0004      	movs	r4, r0
 8007b4c:	0020      	movs	r0, r4
 8007b4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b50:	2a00      	cmp	r2, #0
 8007b52:	d103      	bne.n	8007b5c <_realloc_r+0x24>
 8007b54:	f7ff fbe2 	bl	800731c <_free_r>
 8007b58:	002c      	movs	r4, r5
 8007b5a:	e7f7      	b.n	8007b4c <_realloc_r+0x14>
 8007b5c:	f000 f81c 	bl	8007b98 <_malloc_usable_size_r>
 8007b60:	0007      	movs	r7, r0
 8007b62:	4285      	cmp	r5, r0
 8007b64:	d802      	bhi.n	8007b6c <_realloc_r+0x34>
 8007b66:	0843      	lsrs	r3, r0, #1
 8007b68:	42ab      	cmp	r3, r5
 8007b6a:	d3ef      	bcc.n	8007b4c <_realloc_r+0x14>
 8007b6c:	0029      	movs	r1, r5
 8007b6e:	0030      	movs	r0, r6
 8007b70:	f7ff fc40 	bl	80073f4 <_malloc_r>
 8007b74:	9001      	str	r0, [sp, #4]
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d101      	bne.n	8007b7e <_realloc_r+0x46>
 8007b7a:	9c01      	ldr	r4, [sp, #4]
 8007b7c:	e7e6      	b.n	8007b4c <_realloc_r+0x14>
 8007b7e:	002a      	movs	r2, r5
 8007b80:	42bd      	cmp	r5, r7
 8007b82:	d900      	bls.n	8007b86 <_realloc_r+0x4e>
 8007b84:	003a      	movs	r2, r7
 8007b86:	0021      	movs	r1, r4
 8007b88:	9801      	ldr	r0, [sp, #4]
 8007b8a:	f7ff ffcc 	bl	8007b26 <memcpy>
 8007b8e:	0021      	movs	r1, r4
 8007b90:	0030      	movs	r0, r6
 8007b92:	f7ff fbc3 	bl	800731c <_free_r>
 8007b96:	e7f0      	b.n	8007b7a <_realloc_r+0x42>

08007b98 <_malloc_usable_size_r>:
 8007b98:	1f0b      	subs	r3, r1, #4
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	1f18      	subs	r0, r3, #4
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	da01      	bge.n	8007ba6 <_malloc_usable_size_r+0xe>
 8007ba2:	580b      	ldr	r3, [r1, r0]
 8007ba4:	18c0      	adds	r0, r0, r3
 8007ba6:	4770      	bx	lr

08007ba8 <_init>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	46c0      	nop			@ (mov r8, r8)
 8007bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bae:	bc08      	pop	{r3}
 8007bb0:	469e      	mov	lr, r3
 8007bb2:	4770      	bx	lr

08007bb4 <_fini>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	46c0      	nop			@ (mov r8, r8)
 8007bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bba:	bc08      	pop	{r3}
 8007bbc:	469e      	mov	lr, r3
 8007bbe:	4770      	bx	lr
