
seri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003848  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003908  08003908  00004908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039bc  080039bc  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080039bc  080039bc  000049bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039c4  080039c4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039c4  080039c4  000049c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039c8  080039c8  000049c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080039cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  080039d8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080039d8  00005164  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdd5  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd5  00000000  00000000  00010e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  00012de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083d  00000000  00000000  00013890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f2a  00000000  00000000  000140cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf0b  00000000  00000000  00028ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082535  00000000  00000000  00035f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8437  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002538  00000000  00000000  000b847c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000ba9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038f0 	.word	0x080038f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080038f0 	.word	0x080038f0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	@ (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	@ (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	d434      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a6:	469b      	mov	fp, r3
 80002a8:	4653      	mov	r3, sl
 80002aa:	465a      	mov	r2, fp
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83b      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e079      	b.n	80003b6 <__udivmoddi4+0x146>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e076      	b.n	80003bc <__udivmoddi4+0x14c>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e029      	b.n	800033c <__udivmoddi4+0xcc>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	469b      	mov	fp, r3
 8000314:	2320      	movs	r3, #32
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	4652      	mov	r2, sl
 800031a:	40da      	lsrs	r2, r3
 800031c:	4641      	mov	r1, r8
 800031e:	0013      	movs	r3, r2
 8000320:	464a      	mov	r2, r9
 8000322:	408a      	lsls	r2, r1
 8000324:	0017      	movs	r7, r2
 8000326:	4642      	mov	r2, r8
 8000328:	431f      	orrs	r7, r3
 800032a:	4653      	mov	r3, sl
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d9c3      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000334:	2200      	movs	r2, #0
 8000336:	2300      	movs	r3, #0
 8000338:	9200      	str	r2, [sp, #0]
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	4643      	mov	r3, r8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0d8      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000342:	07fb      	lsls	r3, r7, #31
 8000344:	0872      	lsrs	r2, r6, #1
 8000346:	431a      	orrs	r2, r3
 8000348:	4646      	mov	r6, r8
 800034a:	087b      	lsrs	r3, r7, #1
 800034c:	e00e      	b.n	800036c <__udivmoddi4+0xfc>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d101      	bne.n	8000356 <__udivmoddi4+0xe6>
 8000352:	42a2      	cmp	r2, r4
 8000354:	d80c      	bhi.n	8000370 <__udivmoddi4+0x100>
 8000356:	1aa4      	subs	r4, r4, r2
 8000358:	419d      	sbcs	r5, r3
 800035a:	2001      	movs	r0, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2100      	movs	r1, #0
 8000362:	3e01      	subs	r6, #1
 8000364:	1824      	adds	r4, r4, r0
 8000366:	414d      	adcs	r5, r1
 8000368:	2e00      	cmp	r6, #0
 800036a:	d006      	beq.n	800037a <__udivmoddi4+0x10a>
 800036c:	42ab      	cmp	r3, r5
 800036e:	d9ee      	bls.n	800034e <__udivmoddi4+0xde>
 8000370:	3e01      	subs	r6, #1
 8000372:	1924      	adds	r4, r4, r4
 8000374:	416d      	adcs	r5, r5
 8000376:	2e00      	cmp	r6, #0
 8000378:	d1f8      	bne.n	800036c <__udivmoddi4+0xfc>
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	465b      	mov	r3, fp
 8000380:	1900      	adds	r0, r0, r4
 8000382:	4169      	adcs	r1, r5
 8000384:	2b00      	cmp	r3, #0
 8000386:	db24      	blt.n	80003d2 <__udivmoddi4+0x162>
 8000388:	002b      	movs	r3, r5
 800038a:	465a      	mov	r2, fp
 800038c:	4644      	mov	r4, r8
 800038e:	40d3      	lsrs	r3, r2
 8000390:	002a      	movs	r2, r5
 8000392:	40e2      	lsrs	r2, r4
 8000394:	001c      	movs	r4, r3
 8000396:	465b      	mov	r3, fp
 8000398:	0015      	movs	r5, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	db2a      	blt.n	80003f4 <__udivmoddi4+0x184>
 800039e:	0026      	movs	r6, r4
 80003a0:	409e      	lsls	r6, r3
 80003a2:	0033      	movs	r3, r6
 80003a4:	0026      	movs	r6, r4
 80003a6:	4647      	mov	r7, r8
 80003a8:	40be      	lsls	r6, r7
 80003aa:	0032      	movs	r2, r6
 80003ac:	1a80      	subs	r0, r0, r2
 80003ae:	4199      	sbcs	r1, r3
 80003b0:	9000      	str	r0, [sp, #0]
 80003b2:	9101      	str	r1, [sp, #4]
 80003b4:	e79e      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b6:	42a3      	cmp	r3, r4
 80003b8:	d8bc      	bhi.n	8000334 <__udivmoddi4+0xc4>
 80003ba:	e782      	b.n	80002c2 <__udivmoddi4+0x52>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	2100      	movs	r1, #0
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	2200      	movs	r2, #0
 80003c6:	9100      	str	r1, [sp, #0]
 80003c8:	9201      	str	r2, [sp, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	e785      	b.n	80002de <__udivmoddi4+0x6e>
 80003d2:	4642      	mov	r2, r8
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	002a      	movs	r2, r5
 80003da:	4646      	mov	r6, r8
 80003dc:	409a      	lsls	r2, r3
 80003de:	0023      	movs	r3, r4
 80003e0:	40f3      	lsrs	r3, r6
 80003e2:	4644      	mov	r4, r8
 80003e4:	4313      	orrs	r3, r2
 80003e6:	002a      	movs	r2, r5
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	465b      	mov	r3, fp
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	dad4      	bge.n	800039e <__udivmoddi4+0x12e>
 80003f4:	4642      	mov	r2, r8
 80003f6:	002f      	movs	r7, r5
 80003f8:	2320      	movs	r3, #32
 80003fa:	0026      	movs	r6, r4
 80003fc:	4097      	lsls	r7, r2
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	40de      	lsrs	r6, r3
 8000402:	003b      	movs	r3, r7
 8000404:	4333      	orrs	r3, r6
 8000406:	e7cd      	b.n	80003a4 <__udivmoddi4+0x134>

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	0008      	movs	r0, r1
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	@ (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <lorawan_is_config_required>:




int lorawan_is_config_required(UART_HandleTypeDef *huart)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b087      	sub	sp, #28
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	  uint8_t rxbuf[16] = {0};
 8000464:	2408      	movs	r4, #8
 8000466:	193b      	adds	r3, r7, r4
 8000468:	0018      	movs	r0, r3
 800046a:	2310      	movs	r3, #16
 800046c:	001a      	movs	r2, r3
 800046e:	2100      	movs	r1, #0
 8000470:	f003 fa12 	bl	8003898 <memset>
	  // Totally Flush buffer and stuff
	  HAL_UART_AbortReceive(huart);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	0018      	movs	r0, r3
 8000478:	f002 fb72 	bl	8002b60 <HAL_UART_AbortReceive>
	  __HAL_UART_FLUSH_DRREGISTER(huart);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	699a      	ldr	r2, [r3, #24]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2108      	movs	r1, #8
 8000488:	430a      	orrs	r2, r1
 800048a:	619a      	str	r2, [r3, #24]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	699a      	ldr	r2, [r3, #24]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2110      	movs	r1, #16
 8000498:	430a      	orrs	r2, r1
 800049a:	619a      	str	r2, [r3, #24]
	  __HAL_UART_CLEAR_IDLEFLAG(huart);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2210      	movs	r2, #16
 80004a2:	621a      	str	r2, [r3, #32]
	  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_FEF | UART_CLEAR_PEF | UART_CLEAR_NEF);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	220f      	movs	r2, #15
 80004aa:	621a      	str	r2, [r3, #32]

	  HAL_UART_Transmit(&huart2, (uint8_t*)"AT%S 502=?\r\n", 12, 300);
 80004ac:	2396      	movs	r3, #150	@ 0x96
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	4911      	ldr	r1, [pc, #68]	@ (80004f8 <lorawan_is_config_required+0x9c>)
 80004b2:	4812      	ldr	r0, [pc, #72]	@ (80004fc <lorawan_is_config_required+0xa0>)
 80004b4:	220c      	movs	r2, #12
 80004b6:	f002 f9cd 	bl	8002854 <HAL_UART_Transmit>
	  HAL_UART_Receive(huart, rxbuf, 16, 200);
 80004ba:	1939      	adds	r1, r7, r4
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	23c8      	movs	r3, #200	@ 0xc8
 80004c0:	2210      	movs	r2, #16
 80004c2:	f002 fa67 	bl	8002994 <HAL_UART_Receive>

	  if (rxbuf[1] == '0')
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	785b      	ldrb	r3, [r3, #1]
 80004ca:	2b30      	cmp	r3, #48	@ 0x30
 80004cc:	d107      	bne.n	80004de <lorawan_is_config_required+0x82>
	  {
		  memset(rxbuf, 0, sizeof(rxbuf)); // Clear buffer
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2210      	movs	r2, #16
 80004d2:	2100      	movs	r1, #0
 80004d4:	0018      	movs	r0, r3
 80004d6:	f003 f9df 	bl	8003898 <memset>
		  return 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	e007      	b.n	80004ee <lorawan_is_config_required+0x92>
	  }
	  else
	  {
		  memset(rxbuf, 0, sizeof(rxbuf)); // Clear buffer
 80004de:	2308      	movs	r3, #8
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	2210      	movs	r2, #16
 80004e4:	2100      	movs	r1, #0
 80004e6:	0018      	movs	r0, r3
 80004e8:	f003 f9d6 	bl	8003898 <memset>
		  return 1;
 80004ec:	2301      	movs	r3, #1
	  }
}
 80004ee:	0018      	movs	r0, r3
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b007      	add	sp, #28
 80004f4:	bd90      	pop	{r4, r7, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	08003908 	.word	0x08003908
 80004fc:	200000d4 	.word	0x200000d4

08000500 <lorawan_is_connected>:



int lorawan_is_connected(UART_HandleTypeDef *huart)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b0c2      	sub	sp, #264	@ 0x108
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	  uint8_t rxbuf[256] = {0};
 8000508:	4b28      	ldr	r3, [pc, #160]	@ (80005ac <lorawan_is_connected+0xac>)
 800050a:	2484      	movs	r4, #132	@ 0x84
 800050c:	0064      	lsls	r4, r4, #1
 800050e:	191b      	adds	r3, r3, r4
 8000510:	19db      	adds	r3, r3, r7
 8000512:	0018      	movs	r0, r3
 8000514:	2380      	movs	r3, #128	@ 0x80
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f003 f9bc 	bl	8003898 <memset>
	  // Totally Flush buffer and stuff
	  HAL_UART_AbortReceive(huart);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	0018      	movs	r0, r3
 8000524:	f002 fb1c 	bl	8002b60 <HAL_UART_AbortReceive>
	  __HAL_UART_FLUSH_DRREGISTER(huart);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	699a      	ldr	r2, [r3, #24]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2108      	movs	r1, #8
 8000534:	430a      	orrs	r2, r1
 8000536:	619a      	str	r2, [r3, #24]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	699a      	ldr	r2, [r3, #24]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2110      	movs	r1, #16
 8000544:	430a      	orrs	r2, r1
 8000546:	619a      	str	r2, [r3, #24]
	  __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2210      	movs	r2, #16
 800054e:	621a      	str	r2, [r3, #32]
	  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_FEF | UART_CLEAR_PEF | UART_CLEAR_NEF);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	220f      	movs	r2, #15
 8000556:	621a      	str	r2, [r3, #32]

	  HAL_UART_Transmit(huart, (uint8_t*)"ATI 3001\r\n", 10, 300);
 8000558:	2396      	movs	r3, #150	@ 0x96
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	4914      	ldr	r1, [pc, #80]	@ (80005b0 <lorawan_is_connected+0xb0>)
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	220a      	movs	r2, #10
 8000562:	f002 f977 	bl	8002854 <HAL_UART_Transmit>
	  HAL_UART_Receive(huart, rxbuf, 7, 100);
 8000566:	2508      	movs	r5, #8
 8000568:	1979      	adds	r1, r7, r5
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	2364      	movs	r3, #100	@ 0x64
 800056e:	2207      	movs	r2, #7
 8000570:	f002 fa10 	bl	8002994 <HAL_UART_Receive>

	  if (rxbuf[1] == '0')
 8000574:	4b0d      	ldr	r3, [pc, #52]	@ (80005ac <lorawan_is_connected+0xac>)
 8000576:	191b      	adds	r3, r3, r4
 8000578:	19db      	adds	r3, r3, r7
 800057a:	785b      	ldrb	r3, [r3, #1]
 800057c:	2b30      	cmp	r3, #48	@ 0x30
 800057e:	d108      	bne.n	8000592 <lorawan_is_connected+0x92>
	  {
		  memset(rxbuf, 0, sizeof(rxbuf)); // Clear buffer
 8000580:	2380      	movs	r3, #128	@ 0x80
 8000582:	005a      	lsls	r2, r3, #1
 8000584:	197b      	adds	r3, r7, r5
 8000586:	2100      	movs	r1, #0
 8000588:	0018      	movs	r0, r3
 800058a:	f003 f985 	bl	8003898 <memset>
		  return 0;
 800058e:	2300      	movs	r3, #0
 8000590:	e008      	b.n	80005a4 <lorawan_is_connected+0xa4>
	  }
	  else
	  {
		  memset(rxbuf, 0, sizeof(rxbuf)); // Clear buffer
 8000592:	2380      	movs	r3, #128	@ 0x80
 8000594:	005a      	lsls	r2, r3, #1
 8000596:	2308      	movs	r3, #8
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	2100      	movs	r1, #0
 800059c:	0018      	movs	r0, r3
 800059e:	f003 f97b 	bl	8003898 <memset>
		  return 1;
 80005a2:	2301      	movs	r3, #1
	  }
}
 80005a4:	0018      	movs	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b042      	add	sp, #264	@ 0x108
 80005aa:	bdb0      	pop	{r4, r5, r7, pc}
 80005ac:	ffffff00 	.word	0xffffff00
 80005b0:	08003918 	.word	0x08003918

080005b4 <join>:


int join(UART_HandleTypeDef *huart)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b0c7      	sub	sp, #284	@ 0x11c
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	6078      	str	r0, [r7, #4]
	uint16_t total_rcv = 0;
 80005bc:	2386      	movs	r3, #134	@ 0x86
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	2200      	movs	r2, #0
 80005c4:	801a      	strh	r2, [r3, #0]
	int16_t total_expected =11;
 80005c6:	2387      	movs	r3, #135	@ 0x87
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	18fb      	adds	r3, r7, r3
 80005cc:	220b      	movs	r2, #11
 80005ce:	801a      	strh	r2, [r3, #0]
	uint8_t rxbuf[256] = {0};
 80005d0:	4b39      	ldr	r3, [pc, #228]	@ (80006b8 <join+0x104>)
 80005d2:	2288      	movs	r2, #136	@ 0x88
 80005d4:	0052      	lsls	r2, r2, #1
 80005d6:	189b      	adds	r3, r3, r2
 80005d8:	19db      	adds	r3, r3, r7
 80005da:	0018      	movs	r0, r3
 80005dc:	2380      	movs	r3, #128	@ 0x80
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f003 f958 	bl	8003898 <memset>
	HAL_UART_Transmit(&huart2, (uint8_t*)"AT+JOIN\r\n", 9, 300);
 80005e8:	2396      	movs	r3, #150	@ 0x96
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4933      	ldr	r1, [pc, #204]	@ (80006bc <join+0x108>)
 80005ee:	4834      	ldr	r0, [pc, #208]	@ (80006c0 <join+0x10c>)
 80005f0:	2209      	movs	r2, #9
 80005f2:	f002 f92f 	bl	8002854 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rxbuf, 4, 100);
 80005f6:	230c      	movs	r3, #12
 80005f8:	18f9      	adds	r1, r7, r3
 80005fa:	4831      	ldr	r0, [pc, #196]	@ (80006c0 <join+0x10c>)
 80005fc:	2364      	movs	r3, #100	@ 0x64
 80005fe:	2204      	movs	r2, #4
 8000600:	f002 f9c8 	bl	8002994 <HAL_UART_Receive>
	__HAL_UART_FLUSH_DRREGISTER(&huart2);
 8000604:	4b2e      	ldr	r3, [pc, #184]	@ (80006c0 <join+0x10c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	699a      	ldr	r2, [r3, #24]
 800060a:	4b2d      	ldr	r3, [pc, #180]	@ (80006c0 <join+0x10c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2108      	movs	r1, #8
 8000610:	430a      	orrs	r2, r1
 8000612:	619a      	str	r2, [r3, #24]
 8000614:	4b2a      	ldr	r3, [pc, #168]	@ (80006c0 <join+0x10c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	699a      	ldr	r2, [r3, #24]
 800061a:	4b29      	ldr	r3, [pc, #164]	@ (80006c0 <join+0x10c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2110      	movs	r1, #16
 8000620:	430a      	orrs	r2, r1
 8000622:	619a      	str	r2, [r3, #24]
	__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8000624:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <join+0x10c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2210      	movs	r2, #16
 800062a:	621a      	str	r2, [r3, #32]

	while (total_expected > 0)
 800062c:	e019      	b.n	8000662 <join+0xae>
	{
		  HAL_UARTEx_ReceiveToIdle(&huart2, rxbuf + total_rcv, 100, &total_rcv, 10000);
 800062e:	2086      	movs	r0, #134	@ 0x86
 8000630:	0040      	lsls	r0, r0, #1
 8000632:	183b      	adds	r3, r7, r0
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	001a      	movs	r2, r3
 8000638:	230c      	movs	r3, #12
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	1899      	adds	r1, r3, r2
 800063e:	0004      	movs	r4, r0
 8000640:	183b      	adds	r3, r7, r0
 8000642:	481f      	ldr	r0, [pc, #124]	@ (80006c0 <join+0x10c>)
 8000644:	4a1f      	ldr	r2, [pc, #124]	@ (80006c4 <join+0x110>)
 8000646:	9200      	str	r2, [sp, #0]
 8000648:	2264      	movs	r2, #100	@ 0x64
 800064a:	f003 f805 	bl	8003658 <HAL_UARTEx_ReceiveToIdle>
		  total_expected -= total_rcv;
 800064e:	2187      	movs	r1, #135	@ 0x87
 8000650:	0049      	lsls	r1, r1, #1
 8000652:	187b      	adds	r3, r7, r1
 8000654:	881a      	ldrh	r2, [r3, #0]
 8000656:	193b      	adds	r3, r7, r4
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	b29a      	uxth	r2, r3
 800065e:	187b      	adds	r3, r7, r1
 8000660:	801a      	strh	r2, [r3, #0]
	while (total_expected > 0)
 8000662:	2387      	movs	r3, #135	@ 0x87
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	2200      	movs	r2, #0
 800066a:	5e9b      	ldrsh	r3, [r3, r2]
 800066c:	2b00      	cmp	r3, #0
 800066e:	dcde      	bgt.n	800062e <join+0x7a>
	}

	__HAL_UART_FLUSH_DRREGISTER(&huart2);
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <join+0x10c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	699a      	ldr	r2, [r3, #24]
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <join+0x10c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2108      	movs	r1, #8
 800067c:	430a      	orrs	r2, r1
 800067e:	619a      	str	r2, [r3, #24]
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <join+0x10c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	699a      	ldr	r2, [r3, #24]
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <join+0x10c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2110      	movs	r1, #16
 800068c:	430a      	orrs	r2, r1
 800068e:	619a      	str	r2, [r3, #24]
	__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8000690:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <join+0x10c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2210      	movs	r2, #16
 8000696:	621a      	str	r2, [r3, #32]

	if (rxbuf[8] == 'O')
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <join+0x104>)
 800069a:	2288      	movs	r2, #136	@ 0x88
 800069c:	0052      	lsls	r2, r2, #1
 800069e:	189b      	adds	r3, r3, r2
 80006a0:	19db      	adds	r3, r3, r7
 80006a2:	7a1b      	ldrb	r3, [r3, #8]
 80006a4:	2b4f      	cmp	r3, #79	@ 0x4f
 80006a6:	d101      	bne.n	80006ac <join+0xf8>
	{
		return 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e000      	b.n	80006ae <join+0xfa>
		__NOP(); // success
	}
	else
	{
		return 0;
 80006ac:	2300      	movs	r3, #0
		__NOP(); // fail
	}
}
 80006ae:	0018      	movs	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b045      	add	sp, #276	@ 0x114
 80006b4:	bd90      	pop	{r4, r7, pc}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	fffffefc 	.word	0xfffffefc
 80006bc:	08003924 	.word	0x08003924
 80006c0:	200000d4 	.word	0x200000d4
 80006c4:	00002710 	.word	0x00002710

080006c8 <SendData>:



int SendData(UART_HandleTypeDef *huart, char* data)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b0c4      	sub	sp, #272	@ 0x110
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	uint16_t total_rcv = 0;
 80006d2:	2387      	movs	r3, #135	@ 0x87
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	2200      	movs	r2, #0
 80006da:	801a      	strh	r2, [r3, #0]
	int16_t total_expected = 200;
 80006dc:	2386      	movs	r3, #134	@ 0x86
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	18fb      	adds	r3, r7, r3
 80006e2:	22c8      	movs	r2, #200	@ 0xc8
 80006e4:	801a      	strh	r2, [r3, #0]
	uint8_t rxbuf[256] = {0};
 80006e6:	4b31      	ldr	r3, [pc, #196]	@ (80007ac <SendData+0xe4>)
 80006e8:	2288      	movs	r2, #136	@ 0x88
 80006ea:	0052      	lsls	r2, r2, #1
 80006ec:	189b      	adds	r3, r3, r2
 80006ee:	19db      	adds	r3, r3, r7
 80006f0:	0018      	movs	r0, r3
 80006f2:	2380      	movs	r3, #128	@ 0x80
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	001a      	movs	r2, r3
 80006f8:	2100      	movs	r1, #0
 80006fa:	f003 f8cd 	bl	8003898 <memset>
	int data_size = strlen(data);
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	0018      	movs	r0, r3
 8000702:	f7ff fd01 	bl	8000108 <strlen>
 8000706:	0003      	movs	r3, r0
 8000708:	2284      	movs	r2, #132	@ 0x84
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	18b9      	adds	r1, r7, r2
 800070e:	600b      	str	r3, [r1, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)data, data_size, 300);
 8000710:	18bb      	adds	r3, r7, r2
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	b29a      	uxth	r2, r3
 8000716:	2396      	movs	r3, #150	@ 0x96
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	6839      	ldr	r1, [r7, #0]
 800071c:	4824      	ldr	r0, [pc, #144]	@ (80007b0 <SendData+0xe8>)
 800071e:	f002 f899 	bl	8002854 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, rxbuf, 4, 100); // Get the OK back from the sync data send
 8000722:	2308      	movs	r3, #8
 8000724:	18f9      	adds	r1, r7, r3
 8000726:	4822      	ldr	r0, [pc, #136]	@ (80007b0 <SendData+0xe8>)
 8000728:	2364      	movs	r3, #100	@ 0x64
 800072a:	2204      	movs	r2, #4
 800072c:	f002 f932 	bl	8002994 <HAL_UART_Receive>
	  HAL_UART_AbortReceive(huart);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	0018      	movs	r0, r3
 8000734:	f002 fa14 	bl	8002b60 <HAL_UART_AbortReceive>
	  __HAL_UART_FLUSH_DRREGISTER(huart);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	699a      	ldr	r2, [r3, #24]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2108      	movs	r1, #8
 8000744:	430a      	orrs	r2, r1
 8000746:	619a      	str	r2, [r3, #24]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2110      	movs	r1, #16
 8000754:	430a      	orrs	r2, r1
 8000756:	619a      	str	r2, [r3, #24]
	  __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2210      	movs	r2, #16
 800075e:	621a      	str	r2, [r3, #32]
	  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_FEF | UART_CLEAR_PEF | UART_CLEAR_NEF);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	220f      	movs	r2, #15
 8000766:	621a      	str	r2, [r3, #32]
//	{
//		  HAL_UARTEx_ReceiveToIdle(&huart2, rxbuf + total_rcv, 200, &total_rcv, 15000);
//		  total_expected -= total_rcv;
//	}

	  HAL_UART_AbortReceive(huart);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	0018      	movs	r0, r3
 800076c:	f002 f9f8 	bl	8002b60 <HAL_UART_AbortReceive>
	  __HAL_UART_FLUSH_DRREGISTER(huart);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	699a      	ldr	r2, [r3, #24]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2108      	movs	r1, #8
 800077c:	430a      	orrs	r2, r1
 800077e:	619a      	str	r2, [r3, #24]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	699a      	ldr	r2, [r3, #24]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2110      	movs	r1, #16
 800078c:	430a      	orrs	r2, r1
 800078e:	619a      	str	r2, [r3, #24]
	  __HAL_UART_CLEAR_IDLEFLAG(huart);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2210      	movs	r2, #16
 8000796:	621a      	str	r2, [r3, #32]
	  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_FEF | UART_CLEAR_PEF | UART_CLEAR_NEF);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	220f      	movs	r2, #15
 800079e:	621a      	str	r2, [r3, #32]

	  return 1;
 80007a0:	2301      	movs	r3, #1
//	else
//	{
//		return 0;
//		__NOP(); // fail
//	}
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b044      	add	sp, #272	@ 0x110
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	fffffef8 	.word	0xfffffef8
 80007b0:	200000d4 	.word	0x200000d4

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b8:	f000 fab2 	bl	8000d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007bc:	f000 f844 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f000 f986 	bl	8000ad0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007c4:	f000 f954 	bl	8000a70 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80007c8:	f000 f91e 	bl	8000a08 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80007cc:	f000 f8e8 	bl	80009a0 <MX_RTC_Init>
//	  HAL_Delay(10);
//  }



  lorawan_is_config_required(&huart2);
 80007d0:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <main+0x84>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f7ff fe42 	bl	800045c <lorawan_is_config_required>


  is_connected = lorawan_is_connected(&huart2);
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <main+0x84>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f7ff fe90 	bl	8000500 <lorawan_is_connected>
 80007e0:	0002      	movs	r2, r0
 80007e2:	4b16      	ldr	r3, [pc, #88]	@ (800083c <main+0x88>)
 80007e4:	601a      	str	r2, [r3, #0]
  if (!is_connected)
 80007e6:	4b15      	ldr	r3, [pc, #84]	@ (800083c <main+0x88>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d106      	bne.n	80007fc <main+0x48>
  {
	  is_connected = join(&huart2);
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <main+0x84>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff fedf 	bl	80005b4 <join>
 80007f6:	0002      	movs	r2, r0
 80007f8:	4b10      	ldr	r3, [pc, #64]	@ (800083c <main+0x88>)
 80007fa:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	is_connected = lorawan_is_connected(&huart2);
 80007fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <main+0x84>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff fe7e 	bl	8000500 <lorawan_is_connected>
 8000804:	0002      	movs	r2, r0
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <main+0x88>)
 8000808:	601a      	str	r2, [r3, #0]
	if (!is_connected)
 800080a:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <main+0x88>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d107      	bne.n	8000822 <main+0x6e>
	{
	  is_connected = join(&huart2);
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <main+0x84>)
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff fecd 	bl	80005b4 <join>
 800081a:	0002      	movs	r2, r0
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <main+0x88>)
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	e005      	b.n	800082e <main+0x7a>
	}
	else
	{
		// We ARE connected!
		SendData(&huart2, "AT+SEND \"AABB\"\r\n");
 8000822:	4a07      	ldr	r2, [pc, #28]	@ (8000840 <main+0x8c>)
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <main+0x84>)
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff ff4d 	bl	80006c8 <SendData>
	}

	HAL_Delay(60000);
 800082e:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <main+0x90>)
 8000830:	0018      	movs	r0, r3
 8000832:	f000 fae5 	bl	8000e00 <HAL_Delay>
	is_connected = lorawan_is_connected(&huart2);
 8000836:	e7e1      	b.n	80007fc <main+0x48>
 8000838:	200000d4 	.word	0x200000d4
 800083c:	2000015c 	.word	0x2000015c
 8000840:	0800393c 	.word	0x0800393c
 8000844:	0000ea60 	.word	0x0000ea60

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b0a5      	sub	sp, #148	@ 0x94
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	2458      	movs	r4, #88	@ 0x58
 8000850:	193b      	adds	r3, r7, r4
 8000852:	0018      	movs	r0, r3
 8000854:	2338      	movs	r3, #56	@ 0x38
 8000856:	001a      	movs	r2, r3
 8000858:	2100      	movs	r1, #0
 800085a:	f003 f81d 	bl	8003898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085e:	2344      	movs	r3, #68	@ 0x44
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	0018      	movs	r0, r3
 8000864:	2314      	movs	r3, #20
 8000866:	001a      	movs	r2, r3
 8000868:	2100      	movs	r1, #0
 800086a:	f003 f815 	bl	8003898 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800086e:	231c      	movs	r3, #28
 8000870:	18fb      	adds	r3, r7, r3
 8000872:	0018      	movs	r0, r3
 8000874:	2328      	movs	r3, #40	@ 0x28
 8000876:	001a      	movs	r2, r3
 8000878:	2100      	movs	r1, #0
 800087a:	f003 f80d 	bl	8003898 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	0018      	movs	r0, r3
 8000882:	2318      	movs	r3, #24
 8000884:	001a      	movs	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	f003 f806 	bl	8003898 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088c:	4b40      	ldr	r3, [pc, #256]	@ (8000990 <SystemClock_Config+0x148>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a40      	ldr	r2, [pc, #256]	@ (8000994 <SystemClock_Config+0x14c>)
 8000892:	401a      	ands	r2, r3
 8000894:	4b3e      	ldr	r3, [pc, #248]	@ (8000990 <SystemClock_Config+0x148>)
 8000896:	2180      	movs	r1, #128	@ 0x80
 8000898:	0109      	lsls	r1, r1, #4
 800089a:	430a      	orrs	r2, r1
 800089c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800089e:	f000 fd79 	bl	8001394 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000998 <SystemClock_Config+0x150>)
 80008a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80008a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000998 <SystemClock_Config+0x150>)
 80008a8:	493a      	ldr	r1, [pc, #232]	@ (8000994 <SystemClock_Config+0x14c>)
 80008aa:	400a      	ands	r2, r1
 80008ac:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	221c      	movs	r2, #28
 80008b2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2280      	movs	r2, #128	@ 0x80
 80008b8:	0052      	lsls	r2, r2, #1
 80008ba:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008bc:	0021      	movs	r1, r4
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2201      	movs	r2, #1
 80008c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2201      	movs	r2, #1
 80008c8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	22a0      	movs	r2, #160	@ 0xa0
 80008d4:	0212      	lsls	r2, r2, #8
 80008d6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 fd65 	bl	80013b0 <HAL_RCC_OscConfig>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ea:	f000 f913 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	2144      	movs	r1, #68	@ 0x44
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	220f      	movs	r2, #15
 80008f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2100      	movs	r1, #0
 8000912:	0018      	movs	r0, r3
 8000914:	f001 f920 	bl	8001b58 <HAL_RCC_ClockConfig>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800091c:	f000 f8fa 	bl	8000b14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000920:	211c      	movs	r1, #28
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2223      	movs	r2, #35	@ 0x23
 8000926:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2280      	movs	r2, #128	@ 0x80
 8000938:	0292      	lsls	r2, r2, #10
 800093a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093c:	187b      	adds	r3, r7, r1
 800093e:	0018      	movs	r0, r3
 8000940:	f001 fb0e 	bl	8001f60 <HAL_RCCEx_PeriphCLKConfig>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000948:	f000 f8e4 	bl	8000b14 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800094c:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <SystemClock_Config+0x150>)
 800094e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <SystemClock_Config+0x150>)
 8000952:	2180      	movs	r1, #128	@ 0x80
 8000954:	0509      	lsls	r1, r1, #20
 8000956:	430a      	orrs	r2, r1
 8000958:	639a      	str	r2, [r3, #56]	@ 0x38

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	0552      	lsls	r2, r2, #21
 8000966:	605a      	str	r2, [r3, #4]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <SystemClock_Config+0x154>)
 8000972:	60da      	str	r2, [r3, #12]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2222      	movs	r2, #34	@ 0x22
 8000978:	611a      	str	r2, [r3, #16]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2220      	movs	r2, #32
 800097e:	615a      	str	r2, [r3, #20]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	0018      	movs	r0, r3
 8000984:	f001 fc8a 	bl	800229c <HAL_RCCEx_CRSConfig>
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b025      	add	sp, #148	@ 0x94
 800098e:	bd90      	pop	{r4, r7, pc}
 8000990:	40007000 	.word	0x40007000
 8000994:	ffffe7ff 	.word	0xffffe7ff
 8000998:	40021000 	.word	0x40021000
 800099c:	000005b7 	.word	0x000005b7

080009a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009a4:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <MX_RTC_Init+0x60>)
 80009a6:	4a17      	ldr	r2, [pc, #92]	@ (8000a04 <MX_RTC_Init+0x64>)
 80009a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009aa:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <MX_RTC_Init+0x60>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009b0:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <MX_RTC_Init+0x60>)
 80009b2:	227f      	movs	r2, #127	@ 0x7f
 80009b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009b6:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <MX_RTC_Init+0x60>)
 80009b8:	22ff      	movs	r2, #255	@ 0xff
 80009ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009bc:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <MX_RTC_Init+0x60>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <MX_RTC_Init+0x60>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <MX_RTC_Init+0x60>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_RTC_Init+0x60>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <MX_RTC_Init+0x60>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f001 fca6 	bl	8002328 <HAL_RTC_Init>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80009e0:	f000 f898 	bl	8000b14 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <MX_RTC_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 fdce 	bl	800258c <HAL_RTCEx_SetWakeUpTimer_IT>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80009f4:	f000 f88e 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	20000028 	.word	0x20000028
 8000a04:	40002800 	.word	0x40002800

08000a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <MX_USART1_UART_Init+0x60>)
 8000a0e:	4a17      	ldr	r2, [pc, #92]	@ (8000a6c <MX_USART1_UART_Init+0x64>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <MX_USART1_UART_Init+0x60>)
 8000a14:	22e1      	movs	r2, #225	@ 0xe1
 8000a16:	0252      	lsls	r2, r2, #9
 8000a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <MX_USART1_UART_Init+0x60>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_USART1_UART_Init+0x60>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <MX_USART1_UART_Init+0x60>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_USART1_UART_Init+0x60>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <MX_USART1_UART_Init+0x60>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <MX_USART1_UART_Init+0x60>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <MX_USART1_UART_Init+0x60>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <MX_USART1_UART_Init+0x60>)
 8000a46:	2220      	movs	r2, #32
 8000a48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <MX_USART1_UART_Init+0x60>)
 8000a4c:	2280      	movs	r2, #128	@ 0x80
 8000a4e:	0192      	lsls	r2, r2, #6
 8000a50:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a52:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <MX_USART1_UART_Init+0x60>)
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 fea9 	bl	80027ac <HAL_UART_Init>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000a5e:	f000 f859 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000004c 	.word	0x2000004c
 8000a6c:	40013800 	.word	0x40013800

08000a70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <MX_USART2_UART_Init+0x58>)
 8000a76:	4a15      	ldr	r2, [pc, #84]	@ (8000acc <MX_USART2_UART_Init+0x5c>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <MX_USART2_UART_Init+0x58>)
 8000a7c:	2296      	movs	r2, #150	@ 0x96
 8000a7e:	0192      	lsls	r2, r2, #6
 8000a80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_USART2_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <MX_USART2_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <MX_USART2_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <MX_USART2_UART_Init+0x58>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <MX_USART2_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <MX_USART2_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <MX_USART2_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <MX_USART2_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab2:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <MX_USART2_UART_Init+0x58>)
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 fe79 	bl	80027ac <HAL_UART_Init>
 8000aba:	1e03      	subs	r3, r0, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000abe:	f000 f829 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200000d4 	.word	0x200000d4
 8000acc:	40004400 	.word	0x40004400

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <MX_GPIO_Init+0x40>)
 8000ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ada:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <MX_GPIO_Init+0x40>)
 8000adc:	2104      	movs	r1, #4
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <MX_GPIO_Init+0x40>)
 8000ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	4013      	ands	r3, r2
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <MX_GPIO_Init+0x40>)
 8000af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <MX_GPIO_Init+0x40>)
 8000af4:	2101      	movs	r1, #1
 8000af6:	430a      	orrs	r2, r1
 8000af8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000afa:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <MX_GPIO_Init+0x40>)
 8000afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000afe:	2201      	movs	r2, #1
 8000b00:	4013      	ands	r3, r2
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b002      	add	sp, #8
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	40021000 	.word	0x40021000

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	e7fd      	b.n	8000b1c <Error_Handler+0x8>

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b24:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <HAL_MspInit+0x24>)
 8000b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_MspInit+0x24>)
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b30:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <HAL_MspInit+0x24>)
 8000b32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b34:	4b03      	ldr	r3, [pc, #12]	@ (8000b44 <HAL_MspInit+0x24>)
 8000b36:	2180      	movs	r1, #128	@ 0x80
 8000b38:	0549      	lsls	r1, r1, #21
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <HAL_RTC_MspInit+0x38>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d10e      	bne.n	8000b78 <HAL_RTC_MspInit+0x30>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <HAL_RTC_MspInit+0x3c>)
 8000b5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <HAL_RTC_MspInit+0x3c>)
 8000b60:	2180      	movs	r1, #128	@ 0x80
 8000b62:	02c9      	lsls	r1, r1, #11
 8000b64:	430a      	orrs	r2, r1
 8000b66:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f000 fa17 	bl	8000fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000b72:	2002      	movs	r0, #2
 8000b74:	f000 fa29 	bl	8000fca <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b002      	add	sp, #8
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40002800 	.word	0x40002800
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b08b      	sub	sp, #44	@ 0x2c
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	2414      	movs	r4, #20
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	0018      	movs	r0, r3
 8000b96:	2314      	movs	r3, #20
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f002 fe7c 	bl	8003898 <memset>
  if(huart->Instance==USART1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a30      	ldr	r2, [pc, #192]	@ (8000c68 <HAL_UART_MspInit+0xe0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12b      	bne.n	8000c02 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000baa:	4b30      	ldr	r3, [pc, #192]	@ (8000c6c <HAL_UART_MspInit+0xe4>)
 8000bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bae:	4b2f      	ldr	r3, [pc, #188]	@ (8000c6c <HAL_UART_MspInit+0xe4>)
 8000bb0:	2180      	movs	r1, #128	@ 0x80
 8000bb2:	01c9      	lsls	r1, r1, #7
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c6c <HAL_UART_MspInit+0xe4>)
 8000bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8000c6c <HAL_UART_MspInit+0xe4>)
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bc4:	4b29      	ldr	r3, [pc, #164]	@ (8000c6c <HAL_UART_MspInit+0xe4>)
 8000bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	22c0      	movs	r2, #192	@ 0xc0
 8000bd4:	00d2      	lsls	r2, r2, #3
 8000bd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	0021      	movs	r1, r4
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2202      	movs	r2, #2
 8000bde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2203      	movs	r2, #3
 8000bea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2204      	movs	r2, #4
 8000bf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	187a      	adds	r2, r7, r1
 8000bf4:	23a0      	movs	r3, #160	@ 0xa0
 8000bf6:	05db      	lsls	r3, r3, #23
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fa4c 	bl	8001098 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c00:	e02e      	b.n	8000c60 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a1a      	ldr	r2, [pc, #104]	@ (8000c70 <HAL_UART_MspInit+0xe8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d129      	bne.n	8000c60 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c0c:	4b17      	ldr	r3, [pc, #92]	@ (8000c6c <HAL_UART_MspInit+0xe4>)
 8000c0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c10:	4b16      	ldr	r3, [pc, #88]	@ (8000c6c <HAL_UART_MspInit+0xe4>)
 8000c12:	2180      	movs	r1, #128	@ 0x80
 8000c14:	0289      	lsls	r1, r1, #10
 8000c16:	430a      	orrs	r2, r1
 8000c18:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <HAL_UART_MspInit+0xe4>)
 8000c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c1e:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <HAL_UART_MspInit+0xe4>)
 8000c20:	2101      	movs	r1, #1
 8000c22:	430a      	orrs	r2, r1
 8000c24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <HAL_UART_MspInit+0xe4>)
 8000c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c32:	2114      	movs	r1, #20
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2203      	movs	r2, #3
 8000c4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2204      	movs	r2, #4
 8000c50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	187a      	adds	r2, r7, r1
 8000c54:	23a0      	movs	r3, #160	@ 0xa0
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	0011      	movs	r1, r2
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 fa1c 	bl	8001098 <HAL_GPIO_Init>
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b00b      	add	sp, #44	@ 0x2c
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40004400 	.word	0x40004400

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c78:	46c0      	nop			@ (mov r8, r8)
 8000c7a:	e7fd      	b.n	8000c78 <NMI_Handler+0x4>

08000c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	e7fd      	b.n	8000c80 <HardFault_Handler+0x4>

08000c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 f894 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <RTC_IRQHandler+0x14>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f001 fd44 	bl	800273c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	20000028 	.word	0x20000028

08000cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ccc:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000cce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cd0:	f7ff fff6 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd4:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd6:	490d      	ldr	r1, [pc, #52]	@ (8000d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d10 <LoopForever+0xe>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cec:	4c0a      	ldr	r4, [pc, #40]	@ (8000d18 <LoopForever+0x16>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f002 fdd5 	bl	80038a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfe:	f7ff fd59 	bl	80007b4 <main>

08000d02 <LoopForever>:

LoopForever:
    b LoopForever
 8000d02:	e7fe      	b.n	8000d02 <LoopForever>
   ldr   r0, =_estack
 8000d04:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d10:	080039cc 	.word	0x080039cc
  ldr r2, =_sbss
 8000d14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d18:	20000164 	.word	0x20000164

08000d1c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC1_COMP_IRQHandler>
	...

08000d20 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <HAL_Init+0x3c>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_Init+0x3c>)
 8000d32:	2140      	movs	r1, #64	@ 0x40
 8000d34:	430a      	orrs	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f811 	bl	8000d60 <HAL_InitTick>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	e001      	b.n	8000d4e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d4a:	f7ff fee9 	bl	8000b20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	40022000 	.word	0x40022000

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <HAL_InitTick+0x5c>)
 8000d6a:	681c      	ldr	r4, [r3, #0]
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <HAL_InitTick+0x60>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	0019      	movs	r1, r3
 8000d72:	23fa      	movs	r3, #250	@ 0xfa
 8000d74:	0098      	lsls	r0, r3, #2
 8000d76:	f7ff f9cf 	bl	8000118 <__udivsi3>
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	0020      	movs	r0, r4
 8000d80:	f7ff f9ca 	bl	8000118 <__udivsi3>
 8000d84:	0003      	movs	r3, r0
 8000d86:	0018      	movs	r0, r3
 8000d88:	f000 f92f 	bl	8000fea <HAL_SYSTICK_Config>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e00f      	b.n	8000db4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d80b      	bhi.n	8000db2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	425b      	negs	r3, r3
 8000da0:	2200      	movs	r2, #0
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 f8fc 	bl	8000fa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_InitTick+0x64>)
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	0018      	movs	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b003      	add	sp, #12
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <HAL_IncTick+0x1c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <HAL_IncTick+0x20>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	18d2      	adds	r2, r2, r3
 8000dd8:	4b03      	ldr	r3, [pc, #12]	@ (8000de8 <HAL_IncTick+0x20>)
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000160 	.word	0x20000160

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b02      	ldr	r3, [pc, #8]	@ (8000dfc <HAL_GetTick+0x10>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	0018      	movs	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	20000160 	.word	0x20000160

08000e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff fff0 	bl	8000dec <HAL_GetTick>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3301      	adds	r3, #1
 8000e18:	d005      	beq.n	8000e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <HAL_Delay+0x44>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	001a      	movs	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	189b      	adds	r3, r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	f7ff ffe0 	bl	8000dec <HAL_GetTick>
 8000e2c:	0002      	movs	r2, r0
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8f7      	bhi.n	8000e28 <HAL_Delay+0x28>
  {
  }
}
 8000e38:	46c0      	nop			@ (mov r8, r8)
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b004      	add	sp, #16
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	20000008 	.word	0x20000008

08000e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	0002      	movs	r2, r0
 8000e50:	1dfb      	adds	r3, r7, #7
 8000e52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	1dfb      	adds	r3, r7, #7
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e5a:	d809      	bhi.n	8000e70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	001a      	movs	r2, r3
 8000e62:	231f      	movs	r3, #31
 8000e64:	401a      	ands	r2, r3
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <__NVIC_EnableIRQ+0x30>)
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4091      	lsls	r1, r2
 8000e6c:	000a      	movs	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]
  }
}
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	0002      	movs	r2, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e90:	d828      	bhi.n	8000ee4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e92:	4a2f      	ldr	r2, [pc, #188]	@ (8000f50 <__NVIC_SetPriority+0xd4>)
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	33c0      	adds	r3, #192	@ 0xc0
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	589b      	ldr	r3, [r3, r2]
 8000ea2:	1dfa      	adds	r2, r7, #7
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	400a      	ands	r2, r1
 8000eac:	00d2      	lsls	r2, r2, #3
 8000eae:	21ff      	movs	r1, #255	@ 0xff
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	000a      	movs	r2, r1
 8000eb4:	43d2      	mvns	r2, r2
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	019b      	lsls	r3, r3, #6
 8000ebe:	22ff      	movs	r2, #255	@ 0xff
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	2303      	movs	r3, #3
 8000eca:	4003      	ands	r3, r0
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed0:	481f      	ldr	r0, [pc, #124]	@ (8000f50 <__NVIC_SetPriority+0xd4>)
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	430a      	orrs	r2, r1
 8000edc:	33c0      	adds	r3, #192	@ 0xc0
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ee2:	e031      	b.n	8000f48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f54 <__NVIC_SetPriority+0xd8>)
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	0019      	movs	r1, r3
 8000eec:	230f      	movs	r3, #15
 8000eee:	400b      	ands	r3, r1
 8000ef0:	3b08      	subs	r3, #8
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	3306      	adds	r3, #6
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	18d3      	adds	r3, r2, r3
 8000efa:	3304      	adds	r3, #4
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	1dfa      	adds	r2, r7, #7
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	0011      	movs	r1, r2
 8000f04:	2203      	movs	r2, #3
 8000f06:	400a      	ands	r2, r1
 8000f08:	00d2      	lsls	r2, r2, #3
 8000f0a:	21ff      	movs	r1, #255	@ 0xff
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	000a      	movs	r2, r1
 8000f10:	43d2      	mvns	r2, r2
 8000f12:	401a      	ands	r2, r3
 8000f14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	019b      	lsls	r3, r3, #6
 8000f1a:	22ff      	movs	r2, #255	@ 0xff
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	0018      	movs	r0, r3
 8000f24:	2303      	movs	r3, #3
 8000f26:	4003      	ands	r3, r0
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2c:	4809      	ldr	r0, [pc, #36]	@ (8000f54 <__NVIC_SetPriority+0xd8>)
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	001c      	movs	r4, r3
 8000f34:	230f      	movs	r3, #15
 8000f36:	4023      	ands	r3, r4
 8000f38:	3b08      	subs	r3, #8
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	3306      	adds	r3, #6
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	18c3      	adds	r3, r0, r3
 8000f44:	3304      	adds	r3, #4
 8000f46:	601a      	str	r2, [r3, #0]
}
 8000f48:	46c0      	nop			@ (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b003      	add	sp, #12
 8000f4e:	bd90      	pop	{r4, r7, pc}
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	1e5a      	subs	r2, r3, #1
 8000f64:	2380      	movs	r3, #128	@ 0x80
 8000f66:	045b      	lsls	r3, r3, #17
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d301      	bcc.n	8000f70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e010      	b.n	8000f92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f70:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <SysTick_Config+0x44>)
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	3a01      	subs	r2, #1
 8000f76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f78:	2301      	movs	r3, #1
 8000f7a:	425b      	negs	r3, r3
 8000f7c:	2103      	movs	r1, #3
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff ff7c 	bl	8000e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f84:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <SysTick_Config+0x44>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8a:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <SysTick_Config+0x44>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	0018      	movs	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	e000e010 	.word	0xe000e010

08000fa0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	210f      	movs	r1, #15
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	1c02      	adds	r2, r0, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	0011      	movs	r1, r2
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff ff5d 	bl	8000e7c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b004      	add	sp, #16
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	0002      	movs	r2, r0
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff ff33 	bl	8000e48 <__NVIC_EnableIRQ>
}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff ffaf 	bl	8000f58 <SysTick_Config>
 8000ffa:	0003      	movs	r3, r0
}
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800100c:	230f      	movs	r3, #15
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2225      	movs	r2, #37	@ 0x25
 8001018:	5c9b      	ldrb	r3, [r3, r2]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d008      	beq.n	8001032 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2204      	movs	r2, #4
 8001024:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2224      	movs	r2, #36	@ 0x24
 800102a:	2100      	movs	r1, #0
 800102c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e024      	b.n	800107c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	210e      	movs	r1, #14
 800103e:	438a      	bics	r2, r1
 8001040:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2101      	movs	r1, #1
 800104e:	438a      	bics	r2, r1
 8001050:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	221c      	movs	r2, #28
 8001058:	401a      	ands	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	2101      	movs	r1, #1
 8001060:	4091      	lsls	r1, r2
 8001062:	000a      	movs	r2, r1
 8001064:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2225      	movs	r2, #37	@ 0x25
 800106a:	2101      	movs	r1, #1
 800106c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2224      	movs	r2, #36	@ 0x24
 8001072:	2100      	movs	r1, #0
 8001074:	5499      	strb	r1, [r3, r2]

    return status;
 8001076:	230f      	movs	r3, #15
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b004      	add	sp, #16
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001090:	0018      	movs	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	b002      	add	sp, #8
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010ae:	e155      	b.n	800135c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2101      	movs	r1, #1
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4091      	lsls	r1, r2
 80010ba:	000a      	movs	r2, r1
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d100      	bne.n	80010c8 <HAL_GPIO_Init+0x30>
 80010c6:	e146      	b.n	8001356 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2203      	movs	r2, #3
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d005      	beq.n	80010e0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2203      	movs	r2, #3
 80010da:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d130      	bne.n	8001142 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	409a      	lsls	r2, r3
 80010ee:	0013      	movs	r3, r2
 80010f0:	43da      	mvns	r2, r3
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	409a      	lsls	r2, r3
 8001102:	0013      	movs	r3, r2
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001116:	2201      	movs	r2, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
 800111c:	0013      	movs	r3, r2
 800111e:	43da      	mvns	r2, r3
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	2201      	movs	r2, #1
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2203      	movs	r2, #3
 8001148:	4013      	ands	r3, r2
 800114a:	2b03      	cmp	r3, #3
 800114c:	d017      	beq.n	800117e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	409a      	lsls	r2, r3
 800115c:	0013      	movs	r3, r2
 800115e:	43da      	mvns	r2, r3
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2203      	movs	r2, #3
 8001184:	4013      	ands	r3, r2
 8001186:	2b02      	cmp	r3, #2
 8001188:	d123      	bne.n	80011d2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	58d3      	ldr	r3, [r2, r3]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	2207      	movs	r2, #7
 800119c:	4013      	ands	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	220f      	movs	r2, #15
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	43da      	mvns	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	691a      	ldr	r2, [r3, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2107      	movs	r1, #7
 80011b6:	400b      	ands	r3, r1
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	409a      	lsls	r2, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	08da      	lsrs	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3208      	adds	r2, #8
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	6939      	ldr	r1, [r7, #16]
 80011d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	409a      	lsls	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	43da      	mvns	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2203      	movs	r2, #3
 80011f0:	401a      	ands	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	23c0      	movs	r3, #192	@ 0xc0
 800120c:	029b      	lsls	r3, r3, #10
 800120e:	4013      	ands	r3, r2
 8001210:	d100      	bne.n	8001214 <HAL_GPIO_Init+0x17c>
 8001212:	e0a0      	b.n	8001356 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001214:	4b57      	ldr	r3, [pc, #348]	@ (8001374 <HAL_GPIO_Init+0x2dc>)
 8001216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001218:	4b56      	ldr	r3, [pc, #344]	@ (8001374 <HAL_GPIO_Init+0x2dc>)
 800121a:	2101      	movs	r1, #1
 800121c:	430a      	orrs	r2, r1
 800121e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001220:	4a55      	ldr	r2, [pc, #340]	@ (8001378 <HAL_GPIO_Init+0x2e0>)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	589b      	ldr	r3, [r3, r2]
 800122c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2203      	movs	r2, #3
 8001232:	4013      	ands	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	409a      	lsls	r2, r3
 800123a:	0013      	movs	r3, r2
 800123c:	43da      	mvns	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	23a0      	movs	r3, #160	@ 0xa0
 8001248:	05db      	lsls	r3, r3, #23
 800124a:	429a      	cmp	r2, r3
 800124c:	d01f      	beq.n	800128e <HAL_GPIO_Init+0x1f6>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4a      	ldr	r2, [pc, #296]	@ (800137c <HAL_GPIO_Init+0x2e4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d019      	beq.n	800128a <HAL_GPIO_Init+0x1f2>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a49      	ldr	r2, [pc, #292]	@ (8001380 <HAL_GPIO_Init+0x2e8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0x1ee>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a48      	ldr	r2, [pc, #288]	@ (8001384 <HAL_GPIO_Init+0x2ec>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00d      	beq.n	8001282 <HAL_GPIO_Init+0x1ea>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a47      	ldr	r2, [pc, #284]	@ (8001388 <HAL_GPIO_Init+0x2f0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0x1e6>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a46      	ldr	r2, [pc, #280]	@ (800138c <HAL_GPIO_Init+0x2f4>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_GPIO_Init+0x1e2>
 8001276:	2305      	movs	r3, #5
 8001278:	e00a      	b.n	8001290 <HAL_GPIO_Init+0x1f8>
 800127a:	2306      	movs	r3, #6
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x1f8>
 800127e:	2304      	movs	r3, #4
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x1f8>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x1f8>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x1f8>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x1f8>
 800128e:	2300      	movs	r3, #0
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	2103      	movs	r1, #3
 8001294:	400a      	ands	r2, r1
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a0:	4935      	ldr	r1, [pc, #212]	@ (8001378 <HAL_GPIO_Init+0x2e0>)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b38      	ldr	r3, [pc, #224]	@ (8001390 <HAL_GPIO_Init+0x2f8>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43da      	mvns	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	2380      	movs	r3, #128	@ 0x80
 80012c4:	035b      	lsls	r3, r3, #13
 80012c6:	4013      	ands	r3, r2
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <HAL_GPIO_Init+0x2f8>)
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001390 <HAL_GPIO_Init+0x2f8>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	43da      	mvns	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	2380      	movs	r3, #128	@ 0x80
 80012ee:	039b      	lsls	r3, r3, #14
 80012f0:	4013      	ands	r3, r2
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012fc:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <HAL_GPIO_Init+0x2f8>)
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001302:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <HAL_GPIO_Init+0x2f8>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	2380      	movs	r3, #128	@ 0x80
 8001318:	029b      	lsls	r3, r3, #10
 800131a:	4013      	ands	r3, r2
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_GPIO_Init+0x2f8>)
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132c:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <HAL_GPIO_Init+0x2f8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43da      	mvns	r2, r3
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	025b      	lsls	r3, r3, #9
 8001344:	4013      	ands	r3, r2
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001350:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <HAL_GPIO_Init+0x2f8>)
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	40da      	lsrs	r2, r3
 8001364:	1e13      	subs	r3, r2, #0
 8001366:	d000      	beq.n	800136a <HAL_GPIO_Init+0x2d2>
 8001368:	e6a2      	b.n	80010b0 <HAL_GPIO_Init+0x18>
  }
}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b006      	add	sp, #24
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000
 800137c:	50000400 	.word	0x50000400
 8001380:	50000800 	.word	0x50000800
 8001384:	50000c00 	.word	0x50000c00
 8001388:	50001000 	.word	0x50001000
 800138c:	50001c00 	.word	0x50001c00
 8001390:	40010400 	.word	0x40010400

08001394 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b03      	ldr	r3, [pc, #12]	@ (80013ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800139e:	2180      	movs	r1, #128	@ 0x80
 80013a0:	0049      	lsls	r1, r1, #1
 80013a2:	430a      	orrs	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]
}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40007000 	.word	0x40007000

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b08a      	sub	sp, #40	@ 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	f000 fbbf 	bl	8001b42 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c4:	4bc9      	ldr	r3, [pc, #804]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	220c      	movs	r2, #12
 80013ca:	4013      	ands	r3, r2
 80013cc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ce:	4bc7      	ldr	r3, [pc, #796]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	2380      	movs	r3, #128	@ 0x80
 80013d4:	025b      	lsls	r3, r3, #9
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2201      	movs	r2, #1
 80013e0:	4013      	ands	r3, r2
 80013e2:	d100      	bne.n	80013e6 <HAL_RCC_OscConfig+0x36>
 80013e4:	e07e      	b.n	80014e4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d007      	beq.n	80013fc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	d112      	bne.n	8001418 <HAL_RCC_OscConfig+0x68>
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	2380      	movs	r3, #128	@ 0x80
 80013f6:	025b      	lsls	r3, r3, #9
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d10d      	bne.n	8001418 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	4bbb      	ldr	r3, [pc, #748]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	029b      	lsls	r3, r3, #10
 8001404:	4013      	ands	r3, r2
 8001406:	d100      	bne.n	800140a <HAL_RCC_OscConfig+0x5a>
 8001408:	e06b      	b.n	80014e2 <HAL_RCC_OscConfig+0x132>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d167      	bne.n	80014e2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	f000 fb95 	bl	8001b42 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	2380      	movs	r3, #128	@ 0x80
 800141e:	025b      	lsls	r3, r3, #9
 8001420:	429a      	cmp	r2, r3
 8001422:	d107      	bne.n	8001434 <HAL_RCC_OscConfig+0x84>
 8001424:	4bb1      	ldr	r3, [pc, #708]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4bb0      	ldr	r3, [pc, #704]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 800142a:	2180      	movs	r1, #128	@ 0x80
 800142c:	0249      	lsls	r1, r1, #9
 800142e:	430a      	orrs	r2, r1
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	e027      	b.n	8001484 <HAL_RCC_OscConfig+0xd4>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	23a0      	movs	r3, #160	@ 0xa0
 800143a:	02db      	lsls	r3, r3, #11
 800143c:	429a      	cmp	r2, r3
 800143e:	d10e      	bne.n	800145e <HAL_RCC_OscConfig+0xae>
 8001440:	4baa      	ldr	r3, [pc, #680]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4ba9      	ldr	r3, [pc, #676]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001446:	2180      	movs	r1, #128	@ 0x80
 8001448:	02c9      	lsls	r1, r1, #11
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	4ba7      	ldr	r3, [pc, #668]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4ba6      	ldr	r3, [pc, #664]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001454:	2180      	movs	r1, #128	@ 0x80
 8001456:	0249      	lsls	r1, r1, #9
 8001458:	430a      	orrs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e012      	b.n	8001484 <HAL_RCC_OscConfig+0xd4>
 800145e:	4ba3      	ldr	r3, [pc, #652]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4ba2      	ldr	r3, [pc, #648]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001464:	49a2      	ldr	r1, [pc, #648]	@ (80016f0 <HAL_RCC_OscConfig+0x340>)
 8001466:	400a      	ands	r2, r1
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	4ba0      	ldr	r3, [pc, #640]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	025b      	lsls	r3, r3, #9
 8001472:	4013      	ands	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4b9c      	ldr	r3, [pc, #624]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b9b      	ldr	r3, [pc, #620]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 800147e:	499d      	ldr	r1, [pc, #628]	@ (80016f4 <HAL_RCC_OscConfig+0x344>)
 8001480:	400a      	ands	r2, r1
 8001482:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d015      	beq.n	80014b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fcae 	bl	8000dec <HAL_GetTick>
 8001490:	0003      	movs	r3, r0
 8001492:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001494:	e009      	b.n	80014aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001496:	f7ff fca9 	bl	8000dec <HAL_GetTick>
 800149a:	0002      	movs	r2, r0
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b64      	cmp	r3, #100	@ 0x64
 80014a2:	d902      	bls.n	80014aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	f000 fb4c 	bl	8001b42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014aa:	4b90      	ldr	r3, [pc, #576]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	2380      	movs	r3, #128	@ 0x80
 80014b0:	029b      	lsls	r3, r3, #10
 80014b2:	4013      	ands	r3, r2
 80014b4:	d0ef      	beq.n	8001496 <HAL_RCC_OscConfig+0xe6>
 80014b6:	e015      	b.n	80014e4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fc98 	bl	8000dec <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c2:	f7ff fc93 	bl	8000dec <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b64      	cmp	r3, #100	@ 0x64
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e336      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014d4:	4b85      	ldr	r3, [pc, #532]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	@ 0x80
 80014da:	029b      	lsls	r3, r3, #10
 80014dc:	4013      	ands	r3, r2
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x112>
 80014e0:	e000      	b.n	80014e4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2202      	movs	r2, #2
 80014ea:	4013      	ands	r3, r2
 80014ec:	d100      	bne.n	80014f0 <HAL_RCC_OscConfig+0x140>
 80014ee:	e099      	b.n	8001624 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80014f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f8:	2220      	movs	r2, #32
 80014fa:	4013      	ands	r3, r2
 80014fc:	d009      	beq.n	8001512 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80014fe:	4b7b      	ldr	r3, [pc, #492]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b7a      	ldr	r3, [pc, #488]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001504:	2120      	movs	r1, #32
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	2220      	movs	r2, #32
 800150e:	4393      	bics	r3, r2
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d005      	beq.n	8001524 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b0c      	cmp	r3, #12
 800151c:	d13e      	bne.n	800159c <HAL_RCC_OscConfig+0x1ec>
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d13b      	bne.n	800159c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001524:	4b71      	ldr	r3, [pc, #452]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2204      	movs	r2, #4
 800152a:	4013      	ands	r3, r2
 800152c:	d004      	beq.n	8001538 <HAL_RCC_OscConfig+0x188>
 800152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e304      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b6c      	ldr	r3, [pc, #432]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a6e      	ldr	r2, [pc, #440]	@ (80016f8 <HAL_RCC_OscConfig+0x348>)
 800153e:	4013      	ands	r3, r2
 8001540:	0019      	movs	r1, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	021a      	lsls	r2, r3, #8
 8001548:	4b68      	ldr	r3, [pc, #416]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800154e:	4b67      	ldr	r3, [pc, #412]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2209      	movs	r2, #9
 8001554:	4393      	bics	r3, r2
 8001556:	0019      	movs	r1, r3
 8001558:	4b64      	ldr	r3, [pc, #400]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 800155a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001560:	f000 fc42 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8001564:	0001      	movs	r1, r0
 8001566:	4b61      	ldr	r3, [pc, #388]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	220f      	movs	r2, #15
 800156e:	4013      	ands	r3, r2
 8001570:	4a62      	ldr	r2, [pc, #392]	@ (80016fc <HAL_RCC_OscConfig+0x34c>)
 8001572:	5cd3      	ldrb	r3, [r2, r3]
 8001574:	000a      	movs	r2, r1
 8001576:	40da      	lsrs	r2, r3
 8001578:	4b61      	ldr	r3, [pc, #388]	@ (8001700 <HAL_RCC_OscConfig+0x350>)
 800157a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800157c:	4b61      	ldr	r3, [pc, #388]	@ (8001704 <HAL_RCC_OscConfig+0x354>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2513      	movs	r5, #19
 8001582:	197c      	adds	r4, r7, r5
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff fbeb 	bl	8000d60 <HAL_InitTick>
 800158a:	0003      	movs	r3, r0
 800158c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800158e:	197b      	adds	r3, r7, r5
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d046      	beq.n	8001624 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001596:	197b      	adds	r3, r7, r5
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	e2d2      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d027      	beq.n	80015f2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015a2:	4b52      	ldr	r3, [pc, #328]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2209      	movs	r2, #9
 80015a8:	4393      	bics	r3, r2
 80015aa:	0019      	movs	r1, r3
 80015ac:	4b4f      	ldr	r3, [pc, #316]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 80015ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fc1a 	bl	8000dec <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015be:	f7ff fc15 	bl	8000dec <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e2b8      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015d0:	4b46      	ldr	r3, [pc, #280]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2204      	movs	r2, #4
 80015d6:	4013      	ands	r3, r2
 80015d8:	d0f1      	beq.n	80015be <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015da:	4b44      	ldr	r3, [pc, #272]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4a46      	ldr	r2, [pc, #280]	@ (80016f8 <HAL_RCC_OscConfig+0x348>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	0019      	movs	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	021a      	lsls	r2, r3, #8
 80015ea:	4b40      	ldr	r3, [pc, #256]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 80015ec:	430a      	orrs	r2, r1
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	e018      	b.n	8001624 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f2:	4b3e      	ldr	r3, [pc, #248]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4b3d      	ldr	r3, [pc, #244]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 80015f8:	2101      	movs	r1, #1
 80015fa:	438a      	bics	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fbf5 	bl	8000dec <HAL_GetTick>
 8001602:	0003      	movs	r3, r0
 8001604:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001608:	f7ff fbf0 	bl	8000dec <HAL_GetTick>
 800160c:	0002      	movs	r2, r0
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e293      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800161a:	4b34      	ldr	r3, [pc, #208]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2204      	movs	r2, #4
 8001620:	4013      	ands	r3, r2
 8001622:	d1f1      	bne.n	8001608 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2210      	movs	r2, #16
 800162a:	4013      	ands	r3, r2
 800162c:	d100      	bne.n	8001630 <HAL_RCC_OscConfig+0x280>
 800162e:	e0a2      	b.n	8001776 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d140      	bne.n	80016b8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001636:	4b2d      	ldr	r3, [pc, #180]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	2380      	movs	r3, #128	@ 0x80
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d005      	beq.n	800164e <HAL_RCC_OscConfig+0x29e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e279      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800164e:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4a2d      	ldr	r2, [pc, #180]	@ (8001708 <HAL_RCC_OscConfig+0x358>)
 8001654:	4013      	ands	r3, r2
 8001656:	0019      	movs	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800165c:	4b23      	ldr	r3, [pc, #140]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001662:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	0a19      	lsrs	r1, r3, #8
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	061a      	lsls	r2, r3, #24
 8001670:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001672:	430a      	orrs	r2, r1
 8001674:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167a:	0b5b      	lsrs	r3, r3, #13
 800167c:	3301      	adds	r3, #1
 800167e:	2280      	movs	r2, #128	@ 0x80
 8001680:	0212      	lsls	r2, r2, #8
 8001682:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	210f      	movs	r1, #15
 800168c:	400b      	ands	r3, r1
 800168e:	491b      	ldr	r1, [pc, #108]	@ (80016fc <HAL_RCC_OscConfig+0x34c>)
 8001690:	5ccb      	ldrb	r3, [r1, r3]
 8001692:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001694:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <HAL_RCC_OscConfig+0x350>)
 8001696:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001698:	4b1a      	ldr	r3, [pc, #104]	@ (8001704 <HAL_RCC_OscConfig+0x354>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2513      	movs	r5, #19
 800169e:	197c      	adds	r4, r7, r5
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff fb5d 	bl	8000d60 <HAL_InitTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80016aa:	197b      	adds	r3, r7, r5
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d061      	beq.n	8001776 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80016b2:	197b      	adds	r3, r7, r5
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	e244      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d040      	beq.n	8001742 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016c0:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <HAL_RCC_OscConfig+0x33c>)
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	0049      	lsls	r1, r1, #1
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb8d 	bl	8000dec <HAL_GetTick>
 80016d2:	0003      	movs	r3, r0
 80016d4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016d6:	e019      	b.n	800170c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d8:	f7ff fb88 	bl	8000dec <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d912      	bls.n	800170c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e22b      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
 80016ea:	46c0      	nop			@ (mov r8, r8)
 80016ec:	40021000 	.word	0x40021000
 80016f0:	fffeffff 	.word	0xfffeffff
 80016f4:	fffbffff 	.word	0xfffbffff
 80016f8:	ffffe0ff 	.word	0xffffe0ff
 80016fc:	08003950 	.word	0x08003950
 8001700:	20000000 	.word	0x20000000
 8001704:	20000004 	.word	0x20000004
 8001708:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800170c:	4bca      	ldr	r3, [pc, #808]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2380      	movs	r3, #128	@ 0x80
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4013      	ands	r3, r2
 8001716:	d0df      	beq.n	80016d8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001718:	4bc7      	ldr	r3, [pc, #796]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4ac7      	ldr	r2, [pc, #796]	@ (8001a3c <HAL_RCC_OscConfig+0x68c>)
 800171e:	4013      	ands	r3, r2
 8001720:	0019      	movs	r1, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001726:	4bc4      	ldr	r3, [pc, #784]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001728:	430a      	orrs	r2, r1
 800172a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800172c:	4bc2      	ldr	r3, [pc, #776]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	0a19      	lsrs	r1, r3, #8
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	061a      	lsls	r2, r3, #24
 800173a:	4bbf      	ldr	r3, [pc, #764]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 800173c:	430a      	orrs	r2, r1
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	e019      	b.n	8001776 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001742:	4bbd      	ldr	r3, [pc, #756]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4bbc      	ldr	r3, [pc, #752]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001748:	49bd      	ldr	r1, [pc, #756]	@ (8001a40 <HAL_RCC_OscConfig+0x690>)
 800174a:	400a      	ands	r2, r1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff fb4d 	bl	8000dec <HAL_GetTick>
 8001752:	0003      	movs	r3, r0
 8001754:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001758:	f7ff fb48 	bl	8000dec <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1eb      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800176a:	4bb3      	ldr	r3, [pc, #716]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	2380      	movs	r3, #128	@ 0x80
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4013      	ands	r3, r2
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2208      	movs	r2, #8
 800177c:	4013      	ands	r3, r2
 800177e:	d036      	beq.n	80017ee <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d019      	beq.n	80017bc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001788:	4bab      	ldr	r3, [pc, #684]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 800178a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800178c:	4baa      	ldr	r3, [pc, #680]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 800178e:	2101      	movs	r1, #1
 8001790:	430a      	orrs	r2, r1
 8001792:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001794:	f7ff fb2a 	bl	8000dec <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fb25 	bl	8000dec <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1c8      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017b0:	4ba1      	ldr	r3, [pc, #644]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80017b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d0f1      	beq.n	800179e <HAL_RCC_OscConfig+0x3ee>
 80017ba:	e018      	b.n	80017ee <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017bc:	4b9e      	ldr	r3, [pc, #632]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80017be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017c0:	4b9d      	ldr	r3, [pc, #628]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80017c2:	2101      	movs	r1, #1
 80017c4:	438a      	bics	r2, r1
 80017c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7ff fb10 	bl	8000dec <HAL_GetTick>
 80017cc:	0003      	movs	r3, r0
 80017ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff fb0b 	bl	8000dec <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1ae      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017e4:	4b94      	ldr	r3, [pc, #592]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80017e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017e8:	2202      	movs	r2, #2
 80017ea:	4013      	ands	r3, r2
 80017ec:	d1f1      	bne.n	80017d2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2204      	movs	r2, #4
 80017f4:	4013      	ands	r3, r2
 80017f6:	d100      	bne.n	80017fa <HAL_RCC_OscConfig+0x44a>
 80017f8:	e0ae      	b.n	8001958 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fa:	2023      	movs	r0, #35	@ 0x23
 80017fc:	183b      	adds	r3, r7, r0
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001802:	4b8d      	ldr	r3, [pc, #564]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	055b      	lsls	r3, r3, #21
 800180a:	4013      	ands	r3, r2
 800180c:	d109      	bne.n	8001822 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b8a      	ldr	r3, [pc, #552]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001812:	4b89      	ldr	r3, [pc, #548]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001814:	2180      	movs	r1, #128	@ 0x80
 8001816:	0549      	lsls	r1, r1, #21
 8001818:	430a      	orrs	r2, r1
 800181a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800181c:	183b      	adds	r3, r7, r0
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001822:	4b88      	ldr	r3, [pc, #544]	@ (8001a44 <HAL_RCC_OscConfig+0x694>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	2380      	movs	r3, #128	@ 0x80
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4013      	ands	r3, r2
 800182c:	d11a      	bne.n	8001864 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182e:	4b85      	ldr	r3, [pc, #532]	@ (8001a44 <HAL_RCC_OscConfig+0x694>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b84      	ldr	r3, [pc, #528]	@ (8001a44 <HAL_RCC_OscConfig+0x694>)
 8001834:	2180      	movs	r1, #128	@ 0x80
 8001836:	0049      	lsls	r1, r1, #1
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183c:	f7ff fad6 	bl	8000dec <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001846:	f7ff fad1 	bl	8000dec <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b64      	cmp	r3, #100	@ 0x64
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e174      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	4b7a      	ldr	r3, [pc, #488]	@ (8001a44 <HAL_RCC_OscConfig+0x694>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4013      	ands	r3, r2
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	429a      	cmp	r2, r3
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x4d0>
 8001870:	4b71      	ldr	r3, [pc, #452]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001872:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001874:	4b70      	ldr	r3, [pc, #448]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001876:	2180      	movs	r1, #128	@ 0x80
 8001878:	0049      	lsls	r1, r1, #1
 800187a:	430a      	orrs	r2, r1
 800187c:	651a      	str	r2, [r3, #80]	@ 0x50
 800187e:	e031      	b.n	80018e4 <HAL_RCC_OscConfig+0x534>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10c      	bne.n	80018a2 <HAL_RCC_OscConfig+0x4f2>
 8001888:	4b6b      	ldr	r3, [pc, #428]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 800188a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800188c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 800188e:	496c      	ldr	r1, [pc, #432]	@ (8001a40 <HAL_RCC_OscConfig+0x690>)
 8001890:	400a      	ands	r2, r1
 8001892:	651a      	str	r2, [r3, #80]	@ 0x50
 8001894:	4b68      	ldr	r3, [pc, #416]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001896:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001898:	4b67      	ldr	r3, [pc, #412]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 800189a:	496b      	ldr	r1, [pc, #428]	@ (8001a48 <HAL_RCC_OscConfig+0x698>)
 800189c:	400a      	ands	r2, r1
 800189e:	651a      	str	r2, [r3, #80]	@ 0x50
 80018a0:	e020      	b.n	80018e4 <HAL_RCC_OscConfig+0x534>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	23a0      	movs	r3, #160	@ 0xa0
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d10e      	bne.n	80018cc <HAL_RCC_OscConfig+0x51c>
 80018ae:	4b62      	ldr	r3, [pc, #392]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80018b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018b2:	4b61      	ldr	r3, [pc, #388]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80018b4:	2180      	movs	r1, #128	@ 0x80
 80018b6:	00c9      	lsls	r1, r1, #3
 80018b8:	430a      	orrs	r2, r1
 80018ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80018bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80018be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018c0:	4b5d      	ldr	r3, [pc, #372]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80018c2:	2180      	movs	r1, #128	@ 0x80
 80018c4:	0049      	lsls	r1, r1, #1
 80018c6:	430a      	orrs	r2, r1
 80018c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0x534>
 80018cc:	4b5a      	ldr	r3, [pc, #360]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80018ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018d0:	4b59      	ldr	r3, [pc, #356]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80018d2:	495b      	ldr	r1, [pc, #364]	@ (8001a40 <HAL_RCC_OscConfig+0x690>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80018d8:	4b57      	ldr	r3, [pc, #348]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80018da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018dc:	4b56      	ldr	r3, [pc, #344]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80018de:	495a      	ldr	r1, [pc, #360]	@ (8001a48 <HAL_RCC_OscConfig+0x698>)
 80018e0:	400a      	ands	r2, r1
 80018e2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d015      	beq.n	8001918 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ec:	f7ff fa7e 	bl	8000dec <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018f4:	e009      	b.n	800190a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f7ff fa79 	bl	8000dec <HAL_GetTick>
 80018fa:	0002      	movs	r2, r0
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	4a52      	ldr	r2, [pc, #328]	@ (8001a4c <HAL_RCC_OscConfig+0x69c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e11b      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800190a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 800190c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800190e:	2380      	movs	r3, #128	@ 0x80
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4013      	ands	r3, r2
 8001914:	d0ef      	beq.n	80018f6 <HAL_RCC_OscConfig+0x546>
 8001916:	e014      	b.n	8001942 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001918:	f7ff fa68 	bl	8000dec <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001920:	e009      	b.n	8001936 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7ff fa63 	bl	8000dec <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	4a47      	ldr	r2, [pc, #284]	@ (8001a4c <HAL_RCC_OscConfig+0x69c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e105      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001936:	4b40      	ldr	r3, [pc, #256]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001938:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800193a:	2380      	movs	r3, #128	@ 0x80
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4013      	ands	r3, r2
 8001940:	d1ef      	bne.n	8001922 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001942:	2323      	movs	r3, #35	@ 0x23
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 800194e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001950:	4b39      	ldr	r3, [pc, #228]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001952:	493f      	ldr	r1, [pc, #252]	@ (8001a50 <HAL_RCC_OscConfig+0x6a0>)
 8001954:	400a      	ands	r2, r1
 8001956:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2220      	movs	r2, #32
 800195e:	4013      	ands	r3, r2
 8001960:	d049      	beq.n	80019f6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d026      	beq.n	80019b8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800196a:	4b33      	ldr	r3, [pc, #204]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	4b32      	ldr	r3, [pc, #200]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001970:	2101      	movs	r1, #1
 8001972:	430a      	orrs	r2, r1
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	4b30      	ldr	r3, [pc, #192]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800197a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 800197c:	2101      	movs	r1, #1
 800197e:	430a      	orrs	r2, r1
 8001980:	635a      	str	r2, [r3, #52]	@ 0x34
 8001982:	4b34      	ldr	r3, [pc, #208]	@ (8001a54 <HAL_RCC_OscConfig+0x6a4>)
 8001984:	6a1a      	ldr	r2, [r3, #32]
 8001986:	4b33      	ldr	r3, [pc, #204]	@ (8001a54 <HAL_RCC_OscConfig+0x6a4>)
 8001988:	2180      	movs	r1, #128	@ 0x80
 800198a:	0189      	lsls	r1, r1, #6
 800198c:	430a      	orrs	r2, r1
 800198e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fa2c 	bl	8000dec <HAL_GetTick>
 8001994:	0003      	movs	r3, r0
 8001996:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800199a:	f7ff fa27 	bl	8000dec <HAL_GetTick>
 800199e:	0002      	movs	r2, r0
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e0ca      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019ac:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2202      	movs	r2, #2
 80019b2:	4013      	ands	r3, r2
 80019b4:	d0f1      	beq.n	800199a <HAL_RCC_OscConfig+0x5ea>
 80019b6:	e01e      	b.n	80019f6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80019b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80019be:	2101      	movs	r1, #1
 80019c0:	438a      	bics	r2, r1
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	4b23      	ldr	r3, [pc, #140]	@ (8001a54 <HAL_RCC_OscConfig+0x6a4>)
 80019c6:	6a1a      	ldr	r2, [r3, #32]
 80019c8:	4b22      	ldr	r3, [pc, #136]	@ (8001a54 <HAL_RCC_OscConfig+0x6a4>)
 80019ca:	4923      	ldr	r1, [pc, #140]	@ (8001a58 <HAL_RCC_OscConfig+0x6a8>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fa0c 	bl	8000dec <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019da:	f7ff fa07 	bl	8000dec <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e0aa      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019ec:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2202      	movs	r2, #2
 80019f2:	4013      	ands	r3, r2
 80019f4:	d1f1      	bne.n	80019da <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d100      	bne.n	8001a00 <HAL_RCC_OscConfig+0x650>
 80019fe:	e09f      	b.n	8001b40 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d100      	bne.n	8001a08 <HAL_RCC_OscConfig+0x658>
 8001a06:	e078      	b.n	8001afa <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d159      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a10:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <HAL_RCC_OscConfig+0x688>)
 8001a16:	4911      	ldr	r1, [pc, #68]	@ (8001a5c <HAL_RCC_OscConfig+0x6ac>)
 8001a18:	400a      	ands	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f9e6 	bl	8000dec <HAL_GetTick>
 8001a20:	0003      	movs	r3, r0
 8001a22:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a24:	e01c      	b.n	8001a60 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f9e1 	bl	8000dec <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d915      	bls.n	8001a60 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e084      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	ffff1fff 	.word	0xffff1fff
 8001a40:	fffffeff 	.word	0xfffffeff
 8001a44:	40007000 	.word	0x40007000
 8001a48:	fffffbff 	.word	0xfffffbff
 8001a4c:	00001388 	.word	0x00001388
 8001a50:	efffffff 	.word	0xefffffff
 8001a54:	40010000 	.word	0x40010000
 8001a58:	ffffdfff 	.word	0xffffdfff
 8001a5c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a60:	4b3a      	ldr	r3, [pc, #232]	@ (8001b4c <HAL_RCC_OscConfig+0x79c>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	049b      	lsls	r3, r3, #18
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d1dc      	bne.n	8001a26 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a6c:	4b37      	ldr	r3, [pc, #220]	@ (8001b4c <HAL_RCC_OscConfig+0x79c>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4a37      	ldr	r2, [pc, #220]	@ (8001b50 <HAL_RCC_OscConfig+0x7a0>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a84:	431a      	orrs	r2, r3
 8001a86:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <HAL_RCC_OscConfig+0x79c>)
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b4c <HAL_RCC_OscConfig+0x79c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b2e      	ldr	r3, [pc, #184]	@ (8001b4c <HAL_RCC_OscConfig+0x79c>)
 8001a92:	2180      	movs	r1, #128	@ 0x80
 8001a94:	0449      	lsls	r1, r1, #17
 8001a96:	430a      	orrs	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7ff f9a7 	bl	8000dec <HAL_GetTick>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f9a2 	bl	8000dec <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e045      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ab6:	4b25      	ldr	r3, [pc, #148]	@ (8001b4c <HAL_RCC_OscConfig+0x79c>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	2380      	movs	r3, #128	@ 0x80
 8001abc:	049b      	lsls	r3, r3, #18
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x6f4>
 8001ac2:	e03d      	b.n	8001b40 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac4:	4b21      	ldr	r3, [pc, #132]	@ (8001b4c <HAL_RCC_OscConfig+0x79c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b20      	ldr	r3, [pc, #128]	@ (8001b4c <HAL_RCC_OscConfig+0x79c>)
 8001aca:	4922      	ldr	r1, [pc, #136]	@ (8001b54 <HAL_RCC_OscConfig+0x7a4>)
 8001acc:	400a      	ands	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f98c 	bl	8000dec <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff f987 	bl	8000dec <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e02a      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aec:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <HAL_RCC_OscConfig+0x79c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	049b      	lsls	r3, r3, #18
 8001af4:	4013      	ands	r3, r2
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x72a>
 8001af8:	e022      	b.n	8001b40 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e01d      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_RCC_OscConfig+0x79c>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	2380      	movs	r3, #128	@ 0x80
 8001b10:	025b      	lsls	r3, r3, #9
 8001b12:	401a      	ands	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d10f      	bne.n	8001b3c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	23f0      	movs	r3, #240	@ 0xf0
 8001b20:	039b      	lsls	r3, r3, #14
 8001b22:	401a      	ands	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	23c0      	movs	r3, #192	@ 0xc0
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	401a      	ands	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	0018      	movs	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b00a      	add	sp, #40	@ 0x28
 8001b48:	bdb0      	pop	{r4, r5, r7, pc}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	ff02ffff 	.word	0xff02ffff
 8001b54:	feffffff 	.word	0xfeffffff

08001b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e128      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b96      	ldr	r3, [pc, #600]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2201      	movs	r2, #1
 8001b72:	4013      	ands	r3, r2
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d91e      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b93      	ldr	r3, [pc, #588]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4393      	bics	r3, r2
 8001b82:	0019      	movs	r1, r3
 8001b84:	4b90      	ldr	r3, [pc, #576]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b8c:	f7ff f92e 	bl	8000dec <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b94:	e009      	b.n	8001baa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b96:	f7ff f929 	bl	8000dec <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4a8a      	ldr	r2, [pc, #552]	@ (8001dcc <HAL_RCC_ClockConfig+0x274>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e109      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b87      	ldr	r3, [pc, #540]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1ee      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d009      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc2:	4b83      	ldr	r3, [pc, #524]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	22f0      	movs	r2, #240	@ 0xf0
 8001bc8:	4393      	bics	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d100      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x8a>
 8001be0:	e089      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bea:	4b79      	ldr	r3, [pc, #484]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	2380      	movs	r3, #128	@ 0x80
 8001bf0:	029b      	lsls	r3, r3, #10
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d120      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0e1      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c02:	4b73      	ldr	r3, [pc, #460]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	2380      	movs	r3, #128	@ 0x80
 8001c08:	049b      	lsls	r3, r3, #18
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d114      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0d5      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d106      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c1a:	4b6d      	ldr	r3, [pc, #436]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2204      	movs	r2, #4
 8001c20:	4013      	ands	r3, r2
 8001c22:	d109      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0ca      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c28:	4b69      	ldr	r3, [pc, #420]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4013      	ands	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0c2      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c38:	4b65      	ldr	r3, [pc, #404]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	4393      	bics	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4b62      	ldr	r3, [pc, #392]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c4c:	f7ff f8ce 	bl	8000dec <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d111      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c5c:	e009      	b.n	8001c72 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5e:	f7ff f8c5 	bl	8000dec <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	4a58      	ldr	r2, [pc, #352]	@ (8001dcc <HAL_RCC_ClockConfig+0x274>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e0a5      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c72:	4b57      	ldr	r3, [pc, #348]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	220c      	movs	r2, #12
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d1ef      	bne.n	8001c5e <HAL_RCC_ClockConfig+0x106>
 8001c7e:	e03a      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d111      	bne.n	8001cac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c88:	e009      	b.n	8001c9e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8a:	f7ff f8af 	bl	8000dec <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	4a4d      	ldr	r2, [pc, #308]	@ (8001dcc <HAL_RCC_ClockConfig+0x274>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e08f      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d1ef      	bne.n	8001c8a <HAL_RCC_ClockConfig+0x132>
 8001caa:	e024      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d11b      	bne.n	8001cec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb4:	e009      	b.n	8001cca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb6:	f7ff f899 	bl	8000dec <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	4a42      	ldr	r2, [pc, #264]	@ (8001dcc <HAL_RCC_ClockConfig+0x274>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e079      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cca:	4b41      	ldr	r3, [pc, #260]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	220c      	movs	r2, #12
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d1ef      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0x15e>
 8001cd6:	e00e      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd8:	f7ff f888 	bl	8000dec <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	4a3a      	ldr	r2, [pc, #232]	@ (8001dcc <HAL_RCC_ClockConfig+0x274>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e068      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cec:	4b38      	ldr	r3, [pc, #224]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	220c      	movs	r2, #12
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf6:	4b34      	ldr	r3, [pc, #208]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d21e      	bcs.n	8001d42 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d04:	4b30      	ldr	r3, [pc, #192]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4393      	bics	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d16:	f7ff f869 	bl	8000dec <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	e009      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d20:	f7ff f864 	bl	8000dec <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	4a28      	ldr	r2, [pc, #160]	@ (8001dcc <HAL_RCC_ClockConfig+0x274>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e044      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d34:	4b24      	ldr	r3, [pc, #144]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d1ee      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2204      	movs	r2, #4
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d009      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4a20      	ldr	r2, [pc, #128]	@ (8001dd4 <HAL_RCC_ClockConfig+0x27c>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	0019      	movs	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2208      	movs	r2, #8
 8001d66:	4013      	ands	r3, r2
 8001d68:	d00a      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d6a:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd8 <HAL_RCC_ClockConfig+0x280>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	00da      	lsls	r2, r3, #3
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d80:	f000 f832 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8001d84:	0001      	movs	r1, r0
 8001d86:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	4013      	ands	r3, r2
 8001d90:	4a12      	ldr	r2, [pc, #72]	@ (8001ddc <HAL_RCC_ClockConfig+0x284>)
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	000a      	movs	r2, r1
 8001d96:	40da      	lsrs	r2, r3
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <HAL_RCC_ClockConfig+0x288>)
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d9c:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <HAL_RCC_ClockConfig+0x28c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	250b      	movs	r5, #11
 8001da2:	197c      	adds	r4, r7, r5
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7fe ffdb 	bl	8000d60 <HAL_InitTick>
 8001daa:	0003      	movs	r3, r0
 8001dac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001dae:	197b      	adds	r3, r7, r5
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001db6:	197b      	adds	r3, r7, r5
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b004      	add	sp, #16
 8001dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	00001388 	.word	0x00001388
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	fffff8ff 	.word	0xfffff8ff
 8001dd8:	ffffc7ff 	.word	0xffffc7ff
 8001ddc:	08003950 	.word	0x08003950
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001dee:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	220c      	movs	r2, #12
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d013      	beq.n	8001e26 <HAL_RCC_GetSysClockFreq+0x3e>
 8001dfe:	d85c      	bhi.n	8001eba <HAL_RCC_GetSysClockFreq+0xd2>
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d002      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0x22>
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d00b      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x38>
 8001e08:	e057      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e0a:	4b35      	ldr	r3, [pc, #212]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2210      	movs	r2, #16
 8001e10:	4013      	ands	r3, r2
 8001e12:	d002      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e14:	4b33      	ldr	r3, [pc, #204]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e16:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e18:	e05d      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001e1a:	4b33      	ldr	r3, [pc, #204]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e1c:	613b      	str	r3, [r7, #16]
      break;
 8001e1e:	e05a      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e20:	4b32      	ldr	r3, [pc, #200]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x104>)
 8001e22:	613b      	str	r3, [r7, #16]
      break;
 8001e24:	e057      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	0c9b      	lsrs	r3, r3, #18
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	4a30      	ldr	r2, [pc, #192]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e30:	5cd3      	ldrb	r3, [r2, r3]
 8001e32:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	0d9b      	lsrs	r3, r3, #22
 8001e38:	2203      	movs	r2, #3
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e40:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	2380      	movs	r3, #128	@ 0x80
 8001e46:	025b      	lsls	r3, r3, #9
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d00f      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	000a      	movs	r2, r1
 8001e50:	0152      	lsls	r2, r2, #5
 8001e52:	1a52      	subs	r2, r2, r1
 8001e54:	0193      	lsls	r3, r2, #6
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	185b      	adds	r3, r3, r1
 8001e5c:	025b      	lsls	r3, r3, #9
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7fe f959 	bl	8000118 <__udivsi3>
 8001e66:	0003      	movs	r3, r0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e023      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2210      	movs	r2, #16
 8001e72:	4013      	ands	r3, r2
 8001e74:	d00f      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001e76:	68b9      	ldr	r1, [r7, #8]
 8001e78:	000a      	movs	r2, r1
 8001e7a:	0152      	lsls	r2, r2, #5
 8001e7c:	1a52      	subs	r2, r2, r1
 8001e7e:	0193      	lsls	r3, r2, #6
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	185b      	adds	r3, r3, r1
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f7fe f944 	bl	8000118 <__udivsi3>
 8001e90:	0003      	movs	r3, r0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	e00e      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	000a      	movs	r2, r1
 8001e9a:	0152      	lsls	r2, r2, #5
 8001e9c:	1a52      	subs	r2, r2, r1
 8001e9e:	0193      	lsls	r3, r2, #6
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	185b      	adds	r3, r3, r1
 8001ea6:	029b      	lsls	r3, r3, #10
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f7fe f934 	bl	8000118 <__udivsi3>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	613b      	str	r3, [r7, #16]
      break;
 8001eb8:	e00d      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001eba:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	0b5b      	lsrs	r3, r3, #13
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	2280      	movs	r2, #128	@ 0x80
 8001ecc:	0212      	lsls	r2, r2, #8
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	0013      	movs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
      break;
 8001ed4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ed6:	693b      	ldr	r3, [r7, #16]
}
 8001ed8:	0018      	movs	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b006      	add	sp, #24
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	003d0900 	.word	0x003d0900
 8001ee8:	00f42400 	.word	0x00f42400
 8001eec:	007a1200 	.word	0x007a1200
 8001ef0:	08003968 	.word	0x08003968

08001ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef8:	4b02      	ldr	r3, [pc, #8]	@ (8001f04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			@ (mov r8, r8)
 8001f04:	20000000 	.word	0x20000000

08001f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f0c:	f7ff fff2 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f10:	0001      	movs	r1, r0
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	2207      	movs	r2, #7
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	40d9      	lsrs	r1, r3
 8001f22:	000b      	movs	r3, r1
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	08003960 	.word	0x08003960

08001f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f38:	f7ff ffdc 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f3c:	0001      	movs	r1, r0
 8001f3e:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	0adb      	lsrs	r3, r3, #11
 8001f44:	2207      	movs	r2, #7
 8001f46:	4013      	ands	r3, r2
 8001f48:	4a04      	ldr	r2, [pc, #16]	@ (8001f5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f4a:	5cd3      	ldrb	r3, [r2, r3]
 8001f4c:	40d9      	lsrs	r1, r3
 8001f4e:	000b      	movs	r3, r1
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08003960 	.word	0x08003960

08001f60 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f68:	2317      	movs	r3, #23
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2220      	movs	r2, #32
 8001f76:	4013      	ands	r3, r2
 8001f78:	d106      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	2380      	movs	r3, #128	@ 0x80
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	4013      	ands	r3, r2
 8001f84:	d100      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001f86:	e104      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f88:	4bb9      	ldr	r3, [pc, #740]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f8c:	2380      	movs	r3, #128	@ 0x80
 8001f8e:	055b      	lsls	r3, r3, #21
 8001f90:	4013      	ands	r3, r2
 8001f92:	d10a      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	4bb6      	ldr	r3, [pc, #728]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f98:	4bb5      	ldr	r3, [pc, #724]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f9a:	2180      	movs	r1, #128	@ 0x80
 8001f9c:	0549      	lsls	r1, r1, #21
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001fa2:	2317      	movs	r3, #23
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4bb2      	ldr	r3, [pc, #712]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	@ 0x80
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d11a      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4baf      	ldr	r3, [pc, #700]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4bae      	ldr	r3, [pc, #696]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001fbc:	2180      	movs	r1, #128	@ 0x80
 8001fbe:	0049      	lsls	r1, r1, #1
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc4:	f7fe ff12 	bl	8000dec <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fce:	f7fe ff0d 	bl	8000dec <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b64      	cmp	r3, #100	@ 0x64
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e143      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	4ba4      	ldr	r3, [pc, #656]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	@ 0x80
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001fec:	4ba0      	ldr	r3, [pc, #640]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	23c0      	movs	r3, #192	@ 0xc0
 8001ff2:	039b      	lsls	r3, r3, #14
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	23c0      	movs	r3, #192	@ 0xc0
 8001ffe:	039b      	lsls	r3, r3, #14
 8002000:	4013      	ands	r3, r2
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	429a      	cmp	r2, r3
 8002006:	d107      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	23c0      	movs	r3, #192	@ 0xc0
 800200e:	039b      	lsls	r3, r3, #14
 8002010:	4013      	ands	r3, r2
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d013      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	23c0      	movs	r3, #192	@ 0xc0
 800201e:	029b      	lsls	r3, r3, #10
 8002020:	401a      	ands	r2, r3
 8002022:	23c0      	movs	r3, #192	@ 0xc0
 8002024:	029b      	lsls	r3, r3, #10
 8002026:	429a      	cmp	r2, r3
 8002028:	d10a      	bne.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800202a:	4b91      	ldr	r3, [pc, #580]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	2380      	movs	r3, #128	@ 0x80
 8002030:	029b      	lsls	r3, r3, #10
 8002032:	401a      	ands	r2, r3
 8002034:	2380      	movs	r3, #128	@ 0x80
 8002036:	029b      	lsls	r3, r3, #10
 8002038:	429a      	cmp	r2, r3
 800203a:	d101      	bne.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e113      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002040:	4b8b      	ldr	r3, [pc, #556]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002042:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002044:	23c0      	movs	r3, #192	@ 0xc0
 8002046:	029b      	lsls	r3, r3, #10
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d049      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	23c0      	movs	r3, #192	@ 0xc0
 8002058:	029b      	lsls	r3, r3, #10
 800205a:	4013      	ands	r3, r2
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	429a      	cmp	r2, r3
 8002060:	d004      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2220      	movs	r2, #32
 8002068:	4013      	ands	r3, r2
 800206a:	d10d      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	23c0      	movs	r3, #192	@ 0xc0
 8002072:	029b      	lsls	r3, r3, #10
 8002074:	4013      	ands	r3, r2
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	429a      	cmp	r2, r3
 800207a:	d034      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	2380      	movs	r3, #128	@ 0x80
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	4013      	ands	r3, r2
 8002086:	d02e      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002088:	4b79      	ldr	r3, [pc, #484]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800208a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800208c:	4a7a      	ldr	r2, [pc, #488]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800208e:	4013      	ands	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002092:	4b77      	ldr	r3, [pc, #476]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002094:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002096:	4b76      	ldr	r3, [pc, #472]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002098:	2180      	movs	r1, #128	@ 0x80
 800209a:	0309      	lsls	r1, r1, #12
 800209c:	430a      	orrs	r2, r1
 800209e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020a0:	4b73      	ldr	r3, [pc, #460]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80020a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020a4:	4b72      	ldr	r3, [pc, #456]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80020a6:	4975      	ldr	r1, [pc, #468]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80020a8:	400a      	ands	r2, r1
 80020aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80020ac:	4b70      	ldr	r3, [pc, #448]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4013      	ands	r3, r2
 80020ba:	d014      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7fe fe96 	bl	8000dec <HAL_GetTick>
 80020c0:	0003      	movs	r3, r0
 80020c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020c4:	e009      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7fe fe91 	bl	8000dec <HAL_GetTick>
 80020ca:	0002      	movs	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	4a6b      	ldr	r2, [pc, #428]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0c6      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020da:	4b65      	ldr	r3, [pc, #404]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80020dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020de:	2380      	movs	r3, #128	@ 0x80
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4013      	ands	r3, r2
 80020e4:	d0ef      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	2380      	movs	r3, #128	@ 0x80
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	4013      	ands	r3, r2
 80020f0:	d01f      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	23c0      	movs	r3, #192	@ 0xc0
 80020f8:	029b      	lsls	r3, r3, #10
 80020fa:	401a      	ands	r2, r3
 80020fc:	23c0      	movs	r3, #192	@ 0xc0
 80020fe:	029b      	lsls	r3, r3, #10
 8002100:	429a      	cmp	r2, r3
 8002102:	d10c      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002104:	4b5a      	ldr	r3, [pc, #360]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a5e      	ldr	r2, [pc, #376]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800210a:	4013      	ands	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	23c0      	movs	r3, #192	@ 0xc0
 8002114:	039b      	lsls	r3, r3, #14
 8002116:	401a      	ands	r2, r3
 8002118:	4b55      	ldr	r3, [pc, #340]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800211a:	430a      	orrs	r2, r1
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	4b54      	ldr	r3, [pc, #336]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002120:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	23c0      	movs	r3, #192	@ 0xc0
 8002128:	029b      	lsls	r3, r3, #10
 800212a:	401a      	ands	r2, r3
 800212c:	4b50      	ldr	r3, [pc, #320]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800212e:	430a      	orrs	r2, r1
 8002130:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2220      	movs	r2, #32
 8002138:	4013      	ands	r3, r2
 800213a:	d01f      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	23c0      	movs	r3, #192	@ 0xc0
 8002142:	029b      	lsls	r3, r3, #10
 8002144:	401a      	ands	r2, r3
 8002146:	23c0      	movs	r3, #192	@ 0xc0
 8002148:	029b      	lsls	r3, r3, #10
 800214a:	429a      	cmp	r2, r3
 800214c:	d10c      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800214e:	4b48      	ldr	r3, [pc, #288]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a4c      	ldr	r2, [pc, #304]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002154:	4013      	ands	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	23c0      	movs	r3, #192	@ 0xc0
 800215e:	039b      	lsls	r3, r3, #14
 8002160:	401a      	ands	r2, r3
 8002162:	4b43      	ldr	r3, [pc, #268]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	4b41      	ldr	r3, [pc, #260]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800216a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	23c0      	movs	r3, #192	@ 0xc0
 8002172:	029b      	lsls	r3, r3, #10
 8002174:	401a      	ands	r2, r3
 8002176:	4b3e      	ldr	r3, [pc, #248]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002178:	430a      	orrs	r2, r1
 800217a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800217c:	2317      	movs	r3, #23
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d105      	bne.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002186:	4b3a      	ldr	r3, [pc, #232]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800218a:	4b39      	ldr	r3, [pc, #228]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800218c:	493e      	ldr	r1, [pc, #248]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800218e:	400a      	ands	r2, r1
 8002190:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2201      	movs	r2, #1
 8002198:	4013      	ands	r3, r2
 800219a:	d009      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800219c:	4b34      	ldr	r3, [pc, #208]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a0:	2203      	movs	r2, #3
 80021a2:	4393      	bics	r3, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	4b31      	ldr	r3, [pc, #196]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80021ac:	430a      	orrs	r2, r1
 80021ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2202      	movs	r2, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	d009      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021be:	220c      	movs	r2, #12
 80021c0:	4393      	bics	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	4b29      	ldr	r3, [pc, #164]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80021ca:	430a      	orrs	r2, r1
 80021cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2204      	movs	r2, #4
 80021d4:	4013      	ands	r3, r2
 80021d6:	d009      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021d8:	4b25      	ldr	r3, [pc, #148]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80021da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021dc:	4a2b      	ldr	r2, [pc, #172]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80021de:	4013      	ands	r3, r2
 80021e0:	0019      	movs	r1, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	4b22      	ldr	r3, [pc, #136]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80021e8:	430a      	orrs	r2, r1
 80021ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2208      	movs	r2, #8
 80021f2:	4013      	ands	r3, r2
 80021f4:	d009      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fa:	4a25      	ldr	r2, [pc, #148]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	0019      	movs	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	4b1a      	ldr	r3, [pc, #104]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002206:	430a      	orrs	r2, r1
 8002208:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4013      	ands	r3, r2
 8002214:	d009      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002216:	4b16      	ldr	r3, [pc, #88]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	4a17      	ldr	r2, [pc, #92]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800221c:	4013      	ands	r3, r2
 800221e:	0019      	movs	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002226:	430a      	orrs	r2, r1
 8002228:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2240      	movs	r2, #64	@ 0x40
 8002230:	4013      	ands	r3, r2
 8002232:	d009      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002234:	4b0e      	ldr	r3, [pc, #56]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002238:	4a16      	ldr	r2, [pc, #88]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800223a:	4013      	ands	r3, r2
 800223c:	0019      	movs	r1, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002242:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002244:	430a      	orrs	r2, r1
 8002246:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2280      	movs	r2, #128	@ 0x80
 800224e:	4013      	ands	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002252:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002256:	4a10      	ldr	r2, [pc, #64]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002258:	4013      	ands	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1a      	ldr	r2, [r3, #32]
 8002260:	4b03      	ldr	r3, [pc, #12]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002262:	430a      	orrs	r2, r1
 8002264:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b006      	add	sp, #24
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	40007000 	.word	0x40007000
 8002278:	fffcffff 	.word	0xfffcffff
 800227c:	fff7ffff 	.word	0xfff7ffff
 8002280:	00001388 	.word	0x00001388
 8002284:	ffcfffff 	.word	0xffcfffff
 8002288:	efffffff 	.word	0xefffffff
 800228c:	fffff3ff 	.word	0xfffff3ff
 8002290:	ffffcfff 	.word	0xffffcfff
 8002294:	fbffffff 	.word	0xfbffffff
 8002298:	fff3ffff 	.word	0xfff3ffff

0800229c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80022a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <HAL_RCCEx_CRSConfig+0x7c>)
 80022a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <HAL_RCCEx_CRSConfig+0x7c>)
 80022aa:	2180      	movs	r1, #128	@ 0x80
 80022ac:	0509      	lsls	r1, r1, #20
 80022ae:	430a      	orrs	r2, r1
 80022b0:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_CRS_RELEASE_RESET();
 80022b2:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <HAL_RCCEx_CRSConfig+0x7c>)
 80022b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022b6:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <HAL_RCCEx_CRSConfig+0x7c>)
 80022b8:	4918      	ldr	r1, [pc, #96]	@ (800231c <HAL_RCCEx_CRSConfig+0x80>)
 80022ba:	400a      	ands	r2, r1
 80022bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	041b      	lsls	r3, r3, #16
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80022e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <HAL_RCCEx_CRSConfig+0x84>)
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80022ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <HAL_RCCEx_CRSConfig+0x84>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002324 <HAL_RCCEx_CRSConfig+0x88>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	021a      	lsls	r2, r3, #8
 80022fc:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <HAL_RCCEx_CRSConfig+0x84>)
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8002302:	4b07      	ldr	r3, [pc, #28]	@ (8002320 <HAL_RCCEx_CRSConfig+0x84>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_RCCEx_CRSConfig+0x84>)
 8002308:	2160      	movs	r1, #96	@ 0x60
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]
}
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	46bd      	mov	sp, r7
 8002312:	b004      	add	sp, #16
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	40021000 	.word	0x40021000
 800231c:	f7ffffff 	.word	0xf7ffffff
 8002320:	40006c00 	.word	0x40006c00
 8002324:	ffffc0ff 	.word	0xffffc0ff

08002328 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002330:	230f      	movs	r3, #15
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e088      	b.n	8002454 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2221      	movs	r2, #33	@ 0x21
 8002346:	5c9b      	ldrb	r3, [r3, r2]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2220      	movs	r2, #32
 8002352:	2100      	movs	r1, #0
 8002354:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0018      	movs	r0, r3
 800235a:	f7fe fbf5 	bl	8000b48 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2221      	movs	r2, #33	@ 0x21
 8002362:	2102      	movs	r1, #2
 8002364:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2210      	movs	r2, #16
 800236e:	4013      	ands	r3, r2
 8002370:	2b10      	cmp	r3, #16
 8002372:	d05f      	beq.n	8002434 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	22ca      	movs	r2, #202	@ 0xca
 800237a:	625a      	str	r2, [r3, #36]	@ 0x24
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2253      	movs	r2, #83	@ 0x53
 8002382:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002384:	250f      	movs	r5, #15
 8002386:	197c      	adds	r4, r7, r5
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0018      	movs	r0, r3
 800238c:	f000 f890 	bl	80024b0 <RTC_EnterInitMode>
 8002390:	0003      	movs	r3, r0
 8002392:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002394:	0028      	movs	r0, r5
 8002396:	183b      	adds	r3, r7, r0
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d12c      	bne.n	80023f8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	492c      	ldr	r1, [pc, #176]	@ (800245c <HAL_RTC_Init+0x134>)
 80023aa:	400a      	ands	r2, r1
 80023ac:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	68d2      	ldr	r2, [r2, #12]
 80023d4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6919      	ldr	r1, [r3, #16]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	041a      	lsls	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80023ea:	183c      	adds	r4, r7, r0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 f8a2 	bl	8002538 <RTC_ExitInitMode>
 80023f4:	0003      	movs	r3, r0
 80023f6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80023f8:	230f      	movs	r3, #15
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d113      	bne.n	800242a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2103      	movs	r1, #3
 800240e:	438a      	bics	r2, r1
 8002410:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	22ff      	movs	r2, #255	@ 0xff
 8002430:	625a      	str	r2, [r3, #36]	@ 0x24
 8002432:	e003      	b.n	800243c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002434:	230f      	movs	r3, #15
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800243c:	230f      	movs	r3, #15
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d103      	bne.n	800244e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2221      	movs	r2, #33	@ 0x21
 800244a:	2101      	movs	r1, #1
 800244c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800244e:	230f      	movs	r3, #15
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	781b      	ldrb	r3, [r3, #0]
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b004      	add	sp, #16
 800245a:	bdb0      	pop	{r4, r5, r7, pc}
 800245c:	ff8fffbf 	.word	0xff8fffbf

08002460 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0e      	ldr	r2, [pc, #56]	@ (80024ac <HAL_RTC_WaitForSynchro+0x4c>)
 8002472:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002474:	f7fe fcba 	bl	8000dec <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800247c:	e00a      	b.n	8002494 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800247e:	f7fe fcb5 	bl	8000dec <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad2      	subs	r2, r2, r3
 8002488:	23fa      	movs	r3, #250	@ 0xfa
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d901      	bls.n	8002494 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e006      	b.n	80024a2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	4013      	ands	r3, r2
 800249e:	d0ee      	beq.n	800247e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b004      	add	sp, #16
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	0001ff5f 	.word	0x0001ff5f

080024b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80024bc:	230f      	movs	r3, #15
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2240      	movs	r2, #64	@ 0x40
 80024cc:	4013      	ands	r3, r2
 80024ce:	d12c      	bne.n	800252a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2180      	movs	r1, #128	@ 0x80
 80024dc:	430a      	orrs	r2, r1
 80024de:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024e0:	f7fe fc84 	bl	8000dec <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80024e8:	e014      	b.n	8002514 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80024ea:	f7fe fc7f 	bl	8000dec <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	1ad2      	subs	r2, r2, r3
 80024f4:	200f      	movs	r0, #15
 80024f6:	183b      	adds	r3, r7, r0
 80024f8:	1839      	adds	r1, r7, r0
 80024fa:	7809      	ldrb	r1, [r1, #0]
 80024fc:	7019      	strb	r1, [r3, #0]
 80024fe:	23fa      	movs	r3, #250	@ 0xfa
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	429a      	cmp	r2, r3
 8002504:	d906      	bls.n	8002514 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2221      	movs	r2, #33	@ 0x21
 800250a:	2104      	movs	r1, #4
 800250c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800250e:	183b      	adds	r3, r7, r0
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2240      	movs	r2, #64	@ 0x40
 800251c:	4013      	ands	r3, r2
 800251e:	d104      	bne.n	800252a <RTC_EnterInitMode+0x7a>
 8002520:	230f      	movs	r3, #15
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d1df      	bne.n	80024ea <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800252a:	230f      	movs	r3, #15
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	781b      	ldrb	r3, [r3, #0]
}
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	b004      	add	sp, #16
 8002536:	bd80      	pop	{r7, pc}

08002538 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002540:	240f      	movs	r4, #15
 8002542:	193b      	adds	r3, r7, r4
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2180      	movs	r1, #128	@ 0x80
 8002554:	438a      	bics	r2, r1
 8002556:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2220      	movs	r2, #32
 8002560:	4013      	ands	r3, r2
 8002562:	d10c      	bne.n	800257e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	0018      	movs	r0, r3
 8002568:	f7ff ff7a 	bl	8002460 <HAL_RTC_WaitForSynchro>
 800256c:	1e03      	subs	r3, r0, #0
 800256e:	d006      	beq.n	800257e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2221      	movs	r2, #33	@ 0x21
 8002574:	2104      	movs	r1, #4
 8002576:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002578:	193b      	adds	r3, r7, r4
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800257e:	230f      	movs	r3, #15
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	781b      	ldrb	r3, [r3, #0]
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b005      	add	sp, #20
 800258a:	bd90      	pop	{r4, r7, pc}

0800258c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002598:	4b64      	ldr	r3, [pc, #400]	@ (800272c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	22fa      	movs	r2, #250	@ 0xfa
 800259e:	01d1      	lsls	r1, r2, #7
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7fd fdb9 	bl	8000118 <__udivsi3>
 80025a6:	0003      	movs	r3, r0
 80025a8:	001a      	movs	r2, r3
 80025aa:	0013      	movs	r3, r2
 80025ac:	015b      	lsls	r3, r3, #5
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	189b      	adds	r3, r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	5c9b      	ldrb	r3, [r3, r2]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e0ad      	b.n	8002722 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2220      	movs	r2, #32
 80025ca:	2101      	movs	r1, #1
 80025cc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2221      	movs	r2, #33	@ 0x21
 80025d2:	2102      	movs	r1, #2
 80025d4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	22ca      	movs	r2, #202	@ 0xca
 80025dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2253      	movs	r2, #83	@ 0x53
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	2380      	movs	r3, #128	@ 0x80
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4013      	ands	r3, r2
 80025f2:	d019      	beq.n	8002628 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10d      	bne.n	800261c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	22ff      	movs	r2, #255	@ 0xff
 8002606:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2221      	movs	r2, #33	@ 0x21
 800260c:	2103      	movs	r1, #3
 800260e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	2100      	movs	r1, #0
 8002616:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e082      	b.n	8002722 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2204      	movs	r2, #4
 8002624:	4013      	ands	r3, r2
 8002626:	d1e5      	bne.n	80025f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	493f      	ldr	r1, [pc, #252]	@ (8002730 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8002634:	400a      	ands	r2, r1
 8002636:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	22ff      	movs	r2, #255	@ 0xff
 8002640:	401a      	ands	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	493b      	ldr	r1, [pc, #236]	@ (8002734 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8002648:	430a      	orrs	r2, r1
 800264a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800264c:	4b37      	ldr	r3, [pc, #220]	@ (800272c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	22fa      	movs	r2, #250	@ 0xfa
 8002652:	01d1      	lsls	r1, r2, #7
 8002654:	0018      	movs	r0, r3
 8002656:	f7fd fd5f 	bl	8000118 <__udivsi3>
 800265a:	0003      	movs	r3, r0
 800265c:	001a      	movs	r2, r3
 800265e:	0013      	movs	r3, r2
 8002660:	015b      	lsls	r3, r3, #5
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	189b      	adds	r3, r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3b01      	subs	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10d      	bne.n	8002694 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	22ff      	movs	r2, #255	@ 0xff
 800267e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2221      	movs	r2, #33	@ 0x21
 8002684:	2103      	movs	r1, #3
 8002686:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	2100      	movs	r1, #0
 800268e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e046      	b.n	8002722 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2204      	movs	r2, #4
 800269c:	4013      	ands	r3, r2
 800269e:	d0e5      	beq.n	800266c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2107      	movs	r1, #7
 80026ac:	438a      	bics	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6899      	ldr	r1, [r3, #8]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	430a      	orrs	r2, r1
 80026be:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80026c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80026ce:	2180      	movs	r1, #128	@ 0x80
 80026d0:	0349      	lsls	r1, r1, #13
 80026d2:	430a      	orrs	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80026d6:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	4b17      	ldr	r3, [pc, #92]	@ (8002738 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80026dc:	2180      	movs	r1, #128	@ 0x80
 80026de:	0349      	lsls	r1, r1, #13
 80026e0:	430a      	orrs	r2, r1
 80026e2:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2180      	movs	r1, #128	@ 0x80
 80026f0:	01c9      	lsls	r1, r1, #7
 80026f2:	430a      	orrs	r2, r1
 80026f4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2180      	movs	r1, #128	@ 0x80
 8002702:	00c9      	lsls	r1, r1, #3
 8002704:	430a      	orrs	r2, r1
 8002706:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	22ff      	movs	r2, #255	@ 0xff
 800270e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2221      	movs	r2, #33	@ 0x21
 8002714:	2101      	movs	r1, #1
 8002716:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	2100      	movs	r1, #0
 800271e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b006      	add	sp, #24
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			@ (mov r8, r8)
 800272c:	20000000 	.word	0x20000000
 8002730:	fffffbff 	.word	0xfffffbff
 8002734:	fffffb7f 	.word	0xfffffb7f
 8002738:	40010400 	.word	0x40010400

0800273c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8002746:	2280      	movs	r2, #128	@ 0x80
 8002748:	0352      	lsls	r2, r2, #13
 800274a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	2380      	movs	r3, #128	@ 0x80
 8002754:	01db      	lsls	r3, r3, #7
 8002756:	4013      	ands	r3, r2
 8002758:	d014      	beq.n	8002784 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4013      	ands	r3, r2
 8002766:	d00d      	beq.n	8002784 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	22ff      	movs	r2, #255	@ 0xff
 8002770:	401a      	ands	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4908      	ldr	r1, [pc, #32]	@ (8002798 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8002778:	430a      	orrs	r2, r1
 800277a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	0018      	movs	r0, r3
 8002780:	f000 f80c 	bl	800279c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2221      	movs	r2, #33	@ 0x21
 8002788:	2101      	movs	r1, #1
 800278a:	5499      	strb	r1, [r3, r2]
}
 800278c:	46c0      	nop			@ (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40010400 	.word	0x40010400
 8002798:	fffffb7f 	.word	0xfffffb7f

0800279c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80027a4:	46c0      	nop			@ (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b002      	add	sp, #8
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e044      	b.n	8002848 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d107      	bne.n	80027d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2278      	movs	r2, #120	@ 0x78
 80027ca:	2100      	movs	r1, #0
 80027cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7fe f9d9 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2224      	movs	r2, #36	@ 0x24
 80027da:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2101      	movs	r1, #1
 80027e8:	438a      	bics	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 fcfe 	bl	80031f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 fa5c 	bl	8002cbc <UART_SetConfig>
 8002804:	0003      	movs	r3, r0
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e01c      	b.n	8002848 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	490d      	ldr	r1, [pc, #52]	@ (8002850 <HAL_UART_Init+0xa4>)
 800281a:	400a      	ands	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	212a      	movs	r1, #42	@ 0x2a
 800282a:	438a      	bics	r2, r1
 800282c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2101      	movs	r1, #1
 800283a:	430a      	orrs	r2, r1
 800283c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	0018      	movs	r0, r3
 8002842:	f000 fd8d 	bl	8003360 <UART_CheckIdleState>
 8002846:	0003      	movs	r3, r0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}
 8002850:	ffffb7ff 	.word	0xffffb7ff

08002854 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	@ 0x28
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	1dbb      	adds	r3, r7, #6
 8002862:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002868:	2b20      	cmp	r3, #32
 800286a:	d000      	beq.n	800286e <HAL_UART_Transmit+0x1a>
 800286c:	e08c      	b.n	8002988 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_UART_Transmit+0x28>
 8002874:	1dbb      	adds	r3, r7, #6
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e084      	b.n	800298a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	015b      	lsls	r3, r3, #5
 8002888:	429a      	cmp	r2, r3
 800288a:	d109      	bne.n	80028a0 <HAL_UART_Transmit+0x4c>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d105      	bne.n	80028a0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2201      	movs	r2, #1
 8002898:	4013      	ands	r3, r2
 800289a:	d001      	beq.n	80028a0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e074      	b.n	800298a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2284      	movs	r2, #132	@ 0x84
 80028a4:	2100      	movs	r1, #0
 80028a6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2221      	movs	r2, #33	@ 0x21
 80028ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ae:	f7fe fa9d 	bl	8000dec <HAL_GetTick>
 80028b2:	0003      	movs	r3, r0
 80028b4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1dba      	adds	r2, r7, #6
 80028ba:	2150      	movs	r1, #80	@ 0x50
 80028bc:	8812      	ldrh	r2, [r2, #0]
 80028be:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1dba      	adds	r2, r7, #6
 80028c4:	2152      	movs	r1, #82	@ 0x52
 80028c6:	8812      	ldrh	r2, [r2, #0]
 80028c8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	2380      	movs	r3, #128	@ 0x80
 80028d0:	015b      	lsls	r3, r3, #5
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d108      	bne.n	80028e8 <HAL_UART_Transmit+0x94>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d104      	bne.n	80028e8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	e003      	b.n	80028f0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028f0:	e02f      	b.n	8002952 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	0013      	movs	r3, r2
 80028fc:	2200      	movs	r2, #0
 80028fe:	2180      	movs	r1, #128	@ 0x80
 8002900:	f000 fdd6 	bl	80034b0 <UART_WaitOnFlagUntilTimeout>
 8002904:	1e03      	subs	r3, r0, #0
 8002906:	d004      	beq.n	8002912 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e03b      	b.n	800298a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10b      	bne.n	8002930 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	001a      	movs	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	05d2      	lsls	r2, r2, #23
 8002924:	0dd2      	lsrs	r2, r2, #23
 8002926:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	3302      	adds	r3, #2
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	e007      	b.n	8002940 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	781a      	ldrb	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3301      	adds	r3, #1
 800293e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2252      	movs	r2, #82	@ 0x52
 8002944:	5a9b      	ldrh	r3, [r3, r2]
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b299      	uxth	r1, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2252      	movs	r2, #82	@ 0x52
 8002950:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2252      	movs	r2, #82	@ 0x52
 8002956:	5a9b      	ldrh	r3, [r3, r2]
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1c9      	bne.n	80028f2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	0013      	movs	r3, r2
 8002968:	2200      	movs	r2, #0
 800296a:	2140      	movs	r1, #64	@ 0x40
 800296c:	f000 fda0 	bl	80034b0 <UART_WaitOnFlagUntilTimeout>
 8002970:	1e03      	subs	r3, r0, #0
 8002972:	d004      	beq.n	800297e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e005      	b.n	800298a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	e000      	b.n	800298a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002988:	2302      	movs	r3, #2
  }
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b008      	add	sp, #32
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	@ 0x28
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	1dbb      	adds	r3, r7, #6
 80029a2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2280      	movs	r2, #128	@ 0x80
 80029a8:	589b      	ldr	r3, [r3, r2]
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d000      	beq.n	80029b0 <HAL_UART_Receive+0x1c>
 80029ae:	e0d0      	b.n	8002b52 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_UART_Receive+0x2a>
 80029b6:	1dbb      	adds	r3, r7, #6
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0c8      	b.n	8002b54 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	2380      	movs	r3, #128	@ 0x80
 80029c8:	015b      	lsls	r3, r3, #5
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d109      	bne.n	80029e2 <HAL_UART_Receive+0x4e>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2201      	movs	r2, #1
 80029da:	4013      	ands	r3, r2
 80029dc:	d001      	beq.n	80029e2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0b8      	b.n	8002b54 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2284      	movs	r2, #132	@ 0x84
 80029e6:	2100      	movs	r1, #0
 80029e8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2280      	movs	r2, #128	@ 0x80
 80029ee:	2122      	movs	r1, #34	@ 0x22
 80029f0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029f8:	f7fe f9f8 	bl	8000dec <HAL_GetTick>
 80029fc:	0003      	movs	r3, r0
 80029fe:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1dba      	adds	r2, r7, #6
 8002a04:	2158      	movs	r1, #88	@ 0x58
 8002a06:	8812      	ldrh	r2, [r2, #0]
 8002a08:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1dba      	adds	r2, r7, #6
 8002a0e:	215a      	movs	r1, #90	@ 0x5a
 8002a10:	8812      	ldrh	r2, [r2, #0]
 8002a12:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	015b      	lsls	r3, r3, #5
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d10d      	bne.n	8002a3c <HAL_UART_Receive+0xa8>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d104      	bne.n	8002a32 <HAL_UART_Receive+0x9e>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	225c      	movs	r2, #92	@ 0x5c
 8002a2c:	494b      	ldr	r1, [pc, #300]	@ (8002b5c <HAL_UART_Receive+0x1c8>)
 8002a2e:	5299      	strh	r1, [r3, r2]
 8002a30:	e02e      	b.n	8002a90 <HAL_UART_Receive+0xfc>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	225c      	movs	r2, #92	@ 0x5c
 8002a36:	21ff      	movs	r1, #255	@ 0xff
 8002a38:	5299      	strh	r1, [r3, r2]
 8002a3a:	e029      	b.n	8002a90 <HAL_UART_Receive+0xfc>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10d      	bne.n	8002a60 <HAL_UART_Receive+0xcc>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <HAL_UART_Receive+0xc2>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	225c      	movs	r2, #92	@ 0x5c
 8002a50:	21ff      	movs	r1, #255	@ 0xff
 8002a52:	5299      	strh	r1, [r3, r2]
 8002a54:	e01c      	b.n	8002a90 <HAL_UART_Receive+0xfc>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	225c      	movs	r2, #92	@ 0x5c
 8002a5a:	217f      	movs	r1, #127	@ 0x7f
 8002a5c:	5299      	strh	r1, [r3, r2]
 8002a5e:	e017      	b.n	8002a90 <HAL_UART_Receive+0xfc>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	2380      	movs	r3, #128	@ 0x80
 8002a66:	055b      	lsls	r3, r3, #21
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d10d      	bne.n	8002a88 <HAL_UART_Receive+0xf4>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_Receive+0xea>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	225c      	movs	r2, #92	@ 0x5c
 8002a78:	217f      	movs	r1, #127	@ 0x7f
 8002a7a:	5299      	strh	r1, [r3, r2]
 8002a7c:	e008      	b.n	8002a90 <HAL_UART_Receive+0xfc>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	225c      	movs	r2, #92	@ 0x5c
 8002a82:	213f      	movs	r1, #63	@ 0x3f
 8002a84:	5299      	strh	r1, [r3, r2]
 8002a86:	e003      	b.n	8002a90 <HAL_UART_Receive+0xfc>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	225c      	movs	r2, #92	@ 0x5c
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002a90:	2312      	movs	r3, #18
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	215c      	movs	r1, #92	@ 0x5c
 8002a98:	5a52      	ldrh	r2, [r2, r1]
 8002a9a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	2380      	movs	r3, #128	@ 0x80
 8002aa2:	015b      	lsls	r3, r3, #5
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d108      	bne.n	8002aba <HAL_UART_Receive+0x126>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d104      	bne.n	8002aba <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	e003      	b.n	8002ac2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002ac2:	e03a      	b.n	8002b3a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	0013      	movs	r3, r2
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	f000 fced 	bl	80034b0 <UART_WaitOnFlagUntilTimeout>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2280      	movs	r2, #128	@ 0x80
 8002ade:	2120      	movs	r1, #32
 8002ae0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e036      	b.n	8002b54 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10e      	bne.n	8002b0a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2212      	movs	r2, #18
 8002af6:	18ba      	adds	r2, r7, r2
 8002af8:	8812      	ldrh	r2, [r2, #0]
 8002afa:	4013      	ands	r3, r2
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	3302      	adds	r3, #2
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	e00e      	b.n	8002b28 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2212      	movs	r2, #18
 8002b14:	18ba      	adds	r2, r7, r2
 8002b16:	8812      	ldrh	r2, [r2, #0]
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	225a      	movs	r2, #90	@ 0x5a
 8002b2c:	5a9b      	ldrh	r3, [r3, r2]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b299      	uxth	r1, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	225a      	movs	r2, #90	@ 0x5a
 8002b38:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	225a      	movs	r2, #90	@ 0x5a
 8002b3e:	5a9b      	ldrh	r3, [r3, r2]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1be      	bne.n	8002ac4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2280      	movs	r2, #128	@ 0x80
 8002b4a:	2120      	movs	r1, #32
 8002b4c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
  }
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b008      	add	sp, #32
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	000001ff 	.word	0x000001ff

08002b60 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b092      	sub	sp, #72	@ 0x48
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b68:	f3ef 8310 	mrs	r3, PRIMASK
 8002b6c:	623b      	str	r3, [r7, #32]
  return(result);
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b72:	2301      	movs	r3, #1
 8002b74:	627b      	str	r3, [r7, #36]	@ 0x24
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	f383 8810 	msr	PRIMASK, r3
}
 8002b7c:	46c0      	nop			@ (mov r8, r8)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	494b      	ldr	r1, [pc, #300]	@ (8002cb8 <HAL_UART_AbortReceive+0x158>)
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b94:	f383 8810 	msr	PRIMASK, r3
}
 8002b98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8002ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002baa:	f383 8810 	msr	PRIMASK, r3
}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2101      	movs	r1, #1
 8002bbc:	438a      	bics	r2, r1
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc6:	f383 8810 	msr	PRIMASK, r3
}
 8002bca:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d118      	bne.n	8002c06 <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002bd8:	617b      	str	r3, [r7, #20]
  return(result);
 8002bda:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bde:	2301      	movs	r3, #1
 8002be0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f383 8810 	msr	PRIMASK, r3
}
 8002be8:	46c0      	nop			@ (mov r8, r8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2110      	movs	r1, #16
 8002bf6:	438a      	bics	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f383 8810 	msr	PRIMASK, r3
}
 8002c04:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2240      	movs	r2, #64	@ 0x40
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b40      	cmp	r3, #64	@ 0x40
 8002c12:	d135      	bne.n	8002c80 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c14:	f3ef 8310 	mrs	r3, PRIMASK
 8002c18:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c1e:	2301      	movs	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f383 8810 	msr	PRIMASK, r3
}
 8002c28:	46c0      	nop			@ (mov r8, r8)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2140      	movs	r1, #64	@ 0x40
 8002c36:	438a      	bics	r2, r1
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f383 8810 	msr	PRIMASK, r3
}
 8002c44:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d018      	beq.n	8002c80 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c52:	2200      	movs	r2, #0
 8002c54:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7fe f9d2 	bl	8001004 <HAL_DMA_Abort>
 8002c60:	1e03      	subs	r3, r0, #0
 8002c62:	d00d      	beq.n	8002c80 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7fe fa0b 	bl	8001084 <HAL_DMA_GetError>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d105      	bne.n	8002c80 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2284      	movs	r2, #132	@ 0x84
 8002c78:	2110      	movs	r1, #16
 8002c7a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e017      	b.n	8002cb0 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	225a      	movs	r2, #90	@ 0x5a
 8002c84:	2100      	movs	r1, #0
 8002c86:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	220f      	movs	r2, #15
 8002c8e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2108      	movs	r1, #8
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2280      	movs	r2, #128	@ 0x80
 8002ca4:	2120      	movs	r1, #32
 8002ca6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b012      	add	sp, #72	@ 0x48
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	fffffedf 	.word	0xfffffedf

08002cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b08e      	sub	sp, #56	@ 0x38
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cc4:	231a      	movs	r3, #26
 8002cc6:	2218      	movs	r2, #24
 8002cc8:	189b      	adds	r3, r3, r2
 8002cca:	19db      	adds	r3, r3, r7
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4ac3      	ldr	r2, [pc, #780]	@ (8002ffc <UART_SetConfig+0x340>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	4abe      	ldr	r2, [pc, #760]	@ (8003000 <UART_SetConfig+0x344>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4ab8      	ldr	r2, [pc, #736]	@ (8003004 <UART_SetConfig+0x348>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d004      	beq.n	8002d30 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4ab4      	ldr	r2, [pc, #720]	@ (8003008 <UART_SetConfig+0x34c>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d42:	430a      	orrs	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4ab0      	ldr	r2, [pc, #704]	@ (800300c <UART_SetConfig+0x350>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d131      	bne.n	8002db4 <UART_SetConfig+0xf8>
 8002d50:	4baf      	ldr	r3, [pc, #700]	@ (8003010 <UART_SetConfig+0x354>)
 8002d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d54:	2203      	movs	r2, #3
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d01d      	beq.n	8002d98 <UART_SetConfig+0xdc>
 8002d5c:	d823      	bhi.n	8002da6 <UART_SetConfig+0xea>
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d00c      	beq.n	8002d7c <UART_SetConfig+0xc0>
 8002d62:	d820      	bhi.n	8002da6 <UART_SetConfig+0xea>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <UART_SetConfig+0xb2>
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d00e      	beq.n	8002d8a <UART_SetConfig+0xce>
 8002d6c:	e01b      	b.n	8002da6 <UART_SetConfig+0xea>
 8002d6e:	231b      	movs	r3, #27
 8002d70:	2218      	movs	r2, #24
 8002d72:	189b      	adds	r3, r3, r2
 8002d74:	19db      	adds	r3, r3, r7
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	e0b4      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002d7c:	231b      	movs	r3, #27
 8002d7e:	2218      	movs	r2, #24
 8002d80:	189b      	adds	r3, r3, r2
 8002d82:	19db      	adds	r3, r3, r7
 8002d84:	2202      	movs	r2, #2
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e0ad      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002d8a:	231b      	movs	r3, #27
 8002d8c:	2218      	movs	r2, #24
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	19db      	adds	r3, r3, r7
 8002d92:	2204      	movs	r2, #4
 8002d94:	701a      	strb	r2, [r3, #0]
 8002d96:	e0a6      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002d98:	231b      	movs	r3, #27
 8002d9a:	2218      	movs	r2, #24
 8002d9c:	189b      	adds	r3, r3, r2
 8002d9e:	19db      	adds	r3, r3, r7
 8002da0:	2208      	movs	r2, #8
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	e09f      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002da6:	231b      	movs	r3, #27
 8002da8:	2218      	movs	r2, #24
 8002daa:	189b      	adds	r3, r3, r2
 8002dac:	19db      	adds	r3, r3, r7
 8002dae:	2210      	movs	r2, #16
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e098      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a96      	ldr	r2, [pc, #600]	@ (8003014 <UART_SetConfig+0x358>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d131      	bne.n	8002e22 <UART_SetConfig+0x166>
 8002dbe:	4b94      	ldr	r3, [pc, #592]	@ (8003010 <UART_SetConfig+0x354>)
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc2:	220c      	movs	r2, #12
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b0c      	cmp	r3, #12
 8002dc8:	d01d      	beq.n	8002e06 <UART_SetConfig+0x14a>
 8002dca:	d823      	bhi.n	8002e14 <UART_SetConfig+0x158>
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d00c      	beq.n	8002dea <UART_SetConfig+0x12e>
 8002dd0:	d820      	bhi.n	8002e14 <UART_SetConfig+0x158>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <UART_SetConfig+0x120>
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d00e      	beq.n	8002df8 <UART_SetConfig+0x13c>
 8002dda:	e01b      	b.n	8002e14 <UART_SetConfig+0x158>
 8002ddc:	231b      	movs	r3, #27
 8002dde:	2218      	movs	r2, #24
 8002de0:	189b      	adds	r3, r3, r2
 8002de2:	19db      	adds	r3, r3, r7
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	e07d      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002dea:	231b      	movs	r3, #27
 8002dec:	2218      	movs	r2, #24
 8002dee:	189b      	adds	r3, r3, r2
 8002df0:	19db      	adds	r3, r3, r7
 8002df2:	2202      	movs	r2, #2
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	e076      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002df8:	231b      	movs	r3, #27
 8002dfa:	2218      	movs	r2, #24
 8002dfc:	189b      	adds	r3, r3, r2
 8002dfe:	19db      	adds	r3, r3, r7
 8002e00:	2204      	movs	r2, #4
 8002e02:	701a      	strb	r2, [r3, #0]
 8002e04:	e06f      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002e06:	231b      	movs	r3, #27
 8002e08:	2218      	movs	r2, #24
 8002e0a:	189b      	adds	r3, r3, r2
 8002e0c:	19db      	adds	r3, r3, r7
 8002e0e:	2208      	movs	r2, #8
 8002e10:	701a      	strb	r2, [r3, #0]
 8002e12:	e068      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002e14:	231b      	movs	r3, #27
 8002e16:	2218      	movs	r2, #24
 8002e18:	189b      	adds	r3, r3, r2
 8002e1a:	19db      	adds	r3, r3, r7
 8002e1c:	2210      	movs	r2, #16
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	e061      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a7c      	ldr	r2, [pc, #496]	@ (8003018 <UART_SetConfig+0x35c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d106      	bne.n	8002e3a <UART_SetConfig+0x17e>
 8002e2c:	231b      	movs	r3, #27
 8002e2e:	2218      	movs	r2, #24
 8002e30:	189b      	adds	r3, r3, r2
 8002e32:	19db      	adds	r3, r3, r7
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
 8002e38:	e055      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a77      	ldr	r2, [pc, #476]	@ (800301c <UART_SetConfig+0x360>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d106      	bne.n	8002e52 <UART_SetConfig+0x196>
 8002e44:	231b      	movs	r3, #27
 8002e46:	2218      	movs	r2, #24
 8002e48:	189b      	adds	r3, r3, r2
 8002e4a:	19db      	adds	r3, r3, r7
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	e049      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6b      	ldr	r2, [pc, #428]	@ (8003004 <UART_SetConfig+0x348>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d13e      	bne.n	8002eda <UART_SetConfig+0x21e>
 8002e5c:	4b6c      	ldr	r3, [pc, #432]	@ (8003010 <UART_SetConfig+0x354>)
 8002e5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e60:	23c0      	movs	r3, #192	@ 0xc0
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	4013      	ands	r3, r2
 8002e66:	22c0      	movs	r2, #192	@ 0xc0
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d027      	beq.n	8002ebe <UART_SetConfig+0x202>
 8002e6e:	22c0      	movs	r2, #192	@ 0xc0
 8002e70:	0112      	lsls	r2, r2, #4
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d82a      	bhi.n	8002ecc <UART_SetConfig+0x210>
 8002e76:	2280      	movs	r2, #128	@ 0x80
 8002e78:	0112      	lsls	r2, r2, #4
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d011      	beq.n	8002ea2 <UART_SetConfig+0x1e6>
 8002e7e:	2280      	movs	r2, #128	@ 0x80
 8002e80:	0112      	lsls	r2, r2, #4
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d822      	bhi.n	8002ecc <UART_SetConfig+0x210>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <UART_SetConfig+0x1d8>
 8002e8a:	2280      	movs	r2, #128	@ 0x80
 8002e8c:	00d2      	lsls	r2, r2, #3
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00e      	beq.n	8002eb0 <UART_SetConfig+0x1f4>
 8002e92:	e01b      	b.n	8002ecc <UART_SetConfig+0x210>
 8002e94:	231b      	movs	r3, #27
 8002e96:	2218      	movs	r2, #24
 8002e98:	189b      	adds	r3, r3, r2
 8002e9a:	19db      	adds	r3, r3, r7
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e021      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002ea2:	231b      	movs	r3, #27
 8002ea4:	2218      	movs	r2, #24
 8002ea6:	189b      	adds	r3, r3, r2
 8002ea8:	19db      	adds	r3, r3, r7
 8002eaa:	2202      	movs	r2, #2
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e01a      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002eb0:	231b      	movs	r3, #27
 8002eb2:	2218      	movs	r2, #24
 8002eb4:	189b      	adds	r3, r3, r2
 8002eb6:	19db      	adds	r3, r3, r7
 8002eb8:	2204      	movs	r2, #4
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	e013      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002ebe:	231b      	movs	r3, #27
 8002ec0:	2218      	movs	r2, #24
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	19db      	adds	r3, r3, r7
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e00c      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002ecc:	231b      	movs	r3, #27
 8002ece:	2218      	movs	r2, #24
 8002ed0:	189b      	adds	r3, r3, r2
 8002ed2:	19db      	adds	r3, r3, r7
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	e005      	b.n	8002ee6 <UART_SetConfig+0x22a>
 8002eda:	231b      	movs	r3, #27
 8002edc:	2218      	movs	r2, #24
 8002ede:	189b      	adds	r3, r3, r2
 8002ee0:	19db      	adds	r3, r3, r7
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a46      	ldr	r2, [pc, #280]	@ (8003004 <UART_SetConfig+0x348>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d000      	beq.n	8002ef2 <UART_SetConfig+0x236>
 8002ef0:	e09a      	b.n	8003028 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ef2:	231b      	movs	r3, #27
 8002ef4:	2218      	movs	r2, #24
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	19db      	adds	r3, r3, r7
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d01d      	beq.n	8002f3c <UART_SetConfig+0x280>
 8002f00:	dc20      	bgt.n	8002f44 <UART_SetConfig+0x288>
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d015      	beq.n	8002f32 <UART_SetConfig+0x276>
 8002f06:	dc1d      	bgt.n	8002f44 <UART_SetConfig+0x288>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <UART_SetConfig+0x256>
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d005      	beq.n	8002f1c <UART_SetConfig+0x260>
 8002f10:	e018      	b.n	8002f44 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f12:	f7fe fff9 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8002f16:	0003      	movs	r3, r0
 8002f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f1a:	e01c      	b.n	8002f56 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8003010 <UART_SetConfig+0x354>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2210      	movs	r2, #16
 8002f22:	4013      	ands	r3, r2
 8002f24:	d002      	beq.n	8002f2c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f26:	4b3e      	ldr	r3, [pc, #248]	@ (8003020 <UART_SetConfig+0x364>)
 8002f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f2a:	e014      	b.n	8002f56 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8002f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003024 <UART_SetConfig+0x368>)
 8002f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f30:	e011      	b.n	8002f56 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f32:	f7fe ff59 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8002f36:	0003      	movs	r3, r0
 8002f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f3a:	e00c      	b.n	8002f56 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f3c:	2380      	movs	r3, #128	@ 0x80
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f42:	e008      	b.n	8002f56 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002f48:	231a      	movs	r3, #26
 8002f4a:	2218      	movs	r2, #24
 8002f4c:	189b      	adds	r3, r3, r2
 8002f4e:	19db      	adds	r3, r3, r7
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
        break;
 8002f54:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d100      	bne.n	8002f5e <UART_SetConfig+0x2a2>
 8002f5c:	e133      	b.n	80031c6 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	0013      	movs	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	189b      	adds	r3, r3, r2
 8002f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d305      	bcc.n	8002f7a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d906      	bls.n	8002f88 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8002f7a:	231a      	movs	r3, #26
 8002f7c:	2218      	movs	r2, #24
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	19db      	adds	r3, r3, r7
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e11e      	b.n	80031c6 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	6939      	ldr	r1, [r7, #16]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	000b      	movs	r3, r1
 8002f96:	0e1b      	lsrs	r3, r3, #24
 8002f98:	0010      	movs	r0, r2
 8002f9a:	0205      	lsls	r5, r0, #8
 8002f9c:	431d      	orrs	r5, r3
 8002f9e:	000b      	movs	r3, r1
 8002fa0:	021c      	lsls	r4, r3, #8
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68b8      	ldr	r0, [r7, #8]
 8002fb0:	68f9      	ldr	r1, [r7, #12]
 8002fb2:	1900      	adds	r0, r0, r4
 8002fb4:	4169      	adcs	r1, r5
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f7fd f934 	bl	8000230 <__aeabi_uldivmod>
 8002fc8:	0002      	movs	r2, r0
 8002fca:	000b      	movs	r3, r1
 8002fcc:	0013      	movs	r3, r2
 8002fce:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fd2:	23c0      	movs	r3, #192	@ 0xc0
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d309      	bcc.n	8002fee <UART_SetConfig+0x332>
 8002fda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	035b      	lsls	r3, r3, #13
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d204      	bcs.n	8002fee <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fea:	60da      	str	r2, [r3, #12]
 8002fec:	e0eb      	b.n	80031c6 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8002fee:	231a      	movs	r3, #26
 8002ff0:	2218      	movs	r2, #24
 8002ff2:	189b      	adds	r3, r3, r2
 8002ff4:	19db      	adds	r3, r3, r7
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
 8002ffa:	e0e4      	b.n	80031c6 <UART_SetConfig+0x50a>
 8002ffc:	efff69f3 	.word	0xefff69f3
 8003000:	ffffcfff 	.word	0xffffcfff
 8003004:	40004800 	.word	0x40004800
 8003008:	fffff4ff 	.word	0xfffff4ff
 800300c:	40013800 	.word	0x40013800
 8003010:	40021000 	.word	0x40021000
 8003014:	40004400 	.word	0x40004400
 8003018:	40004c00 	.word	0x40004c00
 800301c:	40005000 	.word	0x40005000
 8003020:	003d0900 	.word	0x003d0900
 8003024:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	2380      	movs	r3, #128	@ 0x80
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	429a      	cmp	r2, r3
 8003032:	d000      	beq.n	8003036 <UART_SetConfig+0x37a>
 8003034:	e070      	b.n	8003118 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8003036:	231b      	movs	r3, #27
 8003038:	2218      	movs	r2, #24
 800303a:	189b      	adds	r3, r3, r2
 800303c:	19db      	adds	r3, r3, r7
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d822      	bhi.n	800308a <UART_SetConfig+0x3ce>
 8003044:	009a      	lsls	r2, r3, #2
 8003046:	4b67      	ldr	r3, [pc, #412]	@ (80031e4 <UART_SetConfig+0x528>)
 8003048:	18d3      	adds	r3, r2, r3
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800304e:	f7fe ff5b 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8003052:	0003      	movs	r3, r0
 8003054:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003056:	e021      	b.n	800309c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003058:	f7fe ff6c 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 800305c:	0003      	movs	r3, r0
 800305e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003060:	e01c      	b.n	800309c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003062:	4b61      	ldr	r3, [pc, #388]	@ (80031e8 <UART_SetConfig+0x52c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2210      	movs	r2, #16
 8003068:	4013      	ands	r3, r2
 800306a:	d002      	beq.n	8003072 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800306c:	4b5f      	ldr	r3, [pc, #380]	@ (80031ec <UART_SetConfig+0x530>)
 800306e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003070:	e014      	b.n	800309c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003072:	4b5f      	ldr	r3, [pc, #380]	@ (80031f0 <UART_SetConfig+0x534>)
 8003074:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003076:	e011      	b.n	800309c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003078:	f7fe feb6 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 800307c:	0003      	movs	r3, r0
 800307e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003080:	e00c      	b.n	800309c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003082:	2380      	movs	r3, #128	@ 0x80
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003088:	e008      	b.n	800309c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800308e:	231a      	movs	r3, #26
 8003090:	2218      	movs	r2, #24
 8003092:	189b      	adds	r3, r3, r2
 8003094:	19db      	adds	r3, r3, r7
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
        break;
 800309a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800309c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d100      	bne.n	80030a4 <UART_SetConfig+0x3e8>
 80030a2:	e090      	b.n	80031c6 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a6:	005a      	lsls	r2, r3, #1
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	18d2      	adds	r2, r2, r3
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	0019      	movs	r1, r3
 80030b6:	0010      	movs	r0, r2
 80030b8:	f7fd f82e 	bl	8000118 <__udivsi3>
 80030bc:	0003      	movs	r3, r0
 80030be:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c2:	2b0f      	cmp	r3, #15
 80030c4:	d921      	bls.n	800310a <UART_SetConfig+0x44e>
 80030c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030c8:	2380      	movs	r3, #128	@ 0x80
 80030ca:	025b      	lsls	r3, r3, #9
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d21c      	bcs.n	800310a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	200e      	movs	r0, #14
 80030d6:	2418      	movs	r4, #24
 80030d8:	1903      	adds	r3, r0, r4
 80030da:	19db      	adds	r3, r3, r7
 80030dc:	210f      	movs	r1, #15
 80030de:	438a      	bics	r2, r1
 80030e0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2207      	movs	r2, #7
 80030ea:	4013      	ands	r3, r2
 80030ec:	b299      	uxth	r1, r3
 80030ee:	1903      	adds	r3, r0, r4
 80030f0:	19db      	adds	r3, r3, r7
 80030f2:	1902      	adds	r2, r0, r4
 80030f4:	19d2      	adds	r2, r2, r7
 80030f6:	8812      	ldrh	r2, [r2, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	1902      	adds	r2, r0, r4
 8003102:	19d2      	adds	r2, r2, r7
 8003104:	8812      	ldrh	r2, [r2, #0]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	e05d      	b.n	80031c6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800310a:	231a      	movs	r3, #26
 800310c:	2218      	movs	r2, #24
 800310e:	189b      	adds	r3, r3, r2
 8003110:	19db      	adds	r3, r3, r7
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e056      	b.n	80031c6 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003118:	231b      	movs	r3, #27
 800311a:	2218      	movs	r2, #24
 800311c:	189b      	adds	r3, r3, r2
 800311e:	19db      	adds	r3, r3, r7
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b08      	cmp	r3, #8
 8003124:	d822      	bhi.n	800316c <UART_SetConfig+0x4b0>
 8003126:	009a      	lsls	r2, r3, #2
 8003128:	4b32      	ldr	r3, [pc, #200]	@ (80031f4 <UART_SetConfig+0x538>)
 800312a:	18d3      	adds	r3, r2, r3
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003130:	f7fe feea 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8003134:	0003      	movs	r3, r0
 8003136:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003138:	e021      	b.n	800317e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800313a:	f7fe fefb 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 800313e:	0003      	movs	r3, r0
 8003140:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003142:	e01c      	b.n	800317e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003144:	4b28      	ldr	r3, [pc, #160]	@ (80031e8 <UART_SetConfig+0x52c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2210      	movs	r2, #16
 800314a:	4013      	ands	r3, r2
 800314c:	d002      	beq.n	8003154 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800314e:	4b27      	ldr	r3, [pc, #156]	@ (80031ec <UART_SetConfig+0x530>)
 8003150:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003152:	e014      	b.n	800317e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003154:	4b26      	ldr	r3, [pc, #152]	@ (80031f0 <UART_SetConfig+0x534>)
 8003156:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003158:	e011      	b.n	800317e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800315a:	f7fe fe45 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 800315e:	0003      	movs	r3, r0
 8003160:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003162:	e00c      	b.n	800317e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003164:	2380      	movs	r3, #128	@ 0x80
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800316a:	e008      	b.n	800317e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003170:	231a      	movs	r3, #26
 8003172:	2218      	movs	r2, #24
 8003174:	189b      	adds	r3, r3, r2
 8003176:	19db      	adds	r3, r3, r7
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
        break;
 800317c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800317e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d020      	beq.n	80031c6 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	085a      	lsrs	r2, r3, #1
 800318a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318c:	18d2      	adds	r2, r2, r3
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	0019      	movs	r1, r3
 8003194:	0010      	movs	r0, r2
 8003196:	f7fc ffbf 	bl	8000118 <__udivsi3>
 800319a:	0003      	movs	r3, r0
 800319c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800319e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d90a      	bls.n	80031ba <UART_SetConfig+0x4fe>
 80031a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031a6:	2380      	movs	r3, #128	@ 0x80
 80031a8:	025b      	lsls	r3, r3, #9
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d205      	bcs.n	80031ba <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	60da      	str	r2, [r3, #12]
 80031b8:	e005      	b.n	80031c6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80031ba:	231a      	movs	r3, #26
 80031bc:	2218      	movs	r2, #24
 80031be:	189b      	adds	r3, r3, r2
 80031c0:	19db      	adds	r3, r3, r7
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	2200      	movs	r2, #0
 80031ca:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2200      	movs	r2, #0
 80031d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80031d2:	231a      	movs	r3, #26
 80031d4:	2218      	movs	r2, #24
 80031d6:	189b      	adds	r3, r3, r2
 80031d8:	19db      	adds	r3, r3, r7
 80031da:	781b      	ldrb	r3, [r3, #0]
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	b00e      	add	sp, #56	@ 0x38
 80031e2:	bdb0      	pop	{r4, r5, r7, pc}
 80031e4:	08003974 	.word	0x08003974
 80031e8:	40021000 	.word	0x40021000
 80031ec:	003d0900 	.word	0x003d0900
 80031f0:	00f42400 	.word	0x00f42400
 80031f4:	08003998 	.word	0x08003998

080031f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	2208      	movs	r2, #8
 8003206:	4013      	ands	r3, r2
 8003208:	d00b      	beq.n	8003222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a4a      	ldr	r2, [pc, #296]	@ (800333c <UART_AdvFeatureConfig+0x144>)
 8003212:	4013      	ands	r3, r2
 8003214:	0019      	movs	r1, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	2201      	movs	r2, #1
 8003228:	4013      	ands	r3, r2
 800322a:	d00b      	beq.n	8003244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4a43      	ldr	r2, [pc, #268]	@ (8003340 <UART_AdvFeatureConfig+0x148>)
 8003234:	4013      	ands	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	2202      	movs	r2, #2
 800324a:	4013      	ands	r3, r2
 800324c:	d00b      	beq.n	8003266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a3b      	ldr	r2, [pc, #236]	@ (8003344 <UART_AdvFeatureConfig+0x14c>)
 8003256:	4013      	ands	r3, r2
 8003258:	0019      	movs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326a:	2204      	movs	r2, #4
 800326c:	4013      	ands	r3, r2
 800326e:	d00b      	beq.n	8003288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4a34      	ldr	r2, [pc, #208]	@ (8003348 <UART_AdvFeatureConfig+0x150>)
 8003278:	4013      	ands	r3, r2
 800327a:	0019      	movs	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	2210      	movs	r2, #16
 800328e:	4013      	ands	r3, r2
 8003290:	d00b      	beq.n	80032aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4a2c      	ldr	r2, [pc, #176]	@ (800334c <UART_AdvFeatureConfig+0x154>)
 800329a:	4013      	ands	r3, r2
 800329c:	0019      	movs	r1, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	2220      	movs	r2, #32
 80032b0:	4013      	ands	r3, r2
 80032b2:	d00b      	beq.n	80032cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4a25      	ldr	r2, [pc, #148]	@ (8003350 <UART_AdvFeatureConfig+0x158>)
 80032bc:	4013      	ands	r3, r2
 80032be:	0019      	movs	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	2240      	movs	r2, #64	@ 0x40
 80032d2:	4013      	ands	r3, r2
 80032d4:	d01d      	beq.n	8003312 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003354 <UART_AdvFeatureConfig+0x15c>)
 80032de:	4013      	ands	r3, r2
 80032e0:	0019      	movs	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032f2:	2380      	movs	r3, #128	@ 0x80
 80032f4:	035b      	lsls	r3, r3, #13
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d10b      	bne.n	8003312 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4a15      	ldr	r2, [pc, #84]	@ (8003358 <UART_AdvFeatureConfig+0x160>)
 8003302:	4013      	ands	r3, r2
 8003304:	0019      	movs	r1, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	2280      	movs	r2, #128	@ 0x80
 8003318:	4013      	ands	r3, r2
 800331a:	d00b      	beq.n	8003334 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4a0e      	ldr	r2, [pc, #56]	@ (800335c <UART_AdvFeatureConfig+0x164>)
 8003324:	4013      	ands	r3, r2
 8003326:	0019      	movs	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	605a      	str	r2, [r3, #4]
  }
}
 8003334:	46c0      	nop			@ (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}
 800333c:	ffff7fff 	.word	0xffff7fff
 8003340:	fffdffff 	.word	0xfffdffff
 8003344:	fffeffff 	.word	0xfffeffff
 8003348:	fffbffff 	.word	0xfffbffff
 800334c:	ffffefff 	.word	0xffffefff
 8003350:	ffffdfff 	.word	0xffffdfff
 8003354:	ffefffff 	.word	0xffefffff
 8003358:	ff9fffff 	.word	0xff9fffff
 800335c:	fff7ffff 	.word	0xfff7ffff

08003360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b092      	sub	sp, #72	@ 0x48
 8003364:	af02      	add	r7, sp, #8
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2284      	movs	r2, #132	@ 0x84
 800336c:	2100      	movs	r1, #0
 800336e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003370:	f7fd fd3c 	bl	8000dec <HAL_GetTick>
 8003374:	0003      	movs	r3, r0
 8003376:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2208      	movs	r2, #8
 8003380:	4013      	ands	r3, r2
 8003382:	2b08      	cmp	r3, #8
 8003384:	d12c      	bne.n	80033e0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003388:	2280      	movs	r2, #128	@ 0x80
 800338a:	0391      	lsls	r1, r2, #14
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4a46      	ldr	r2, [pc, #280]	@ (80034a8 <UART_CheckIdleState+0x148>)
 8003390:	9200      	str	r2, [sp, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	f000 f88c 	bl	80034b0 <UART_WaitOnFlagUntilTimeout>
 8003398:	1e03      	subs	r3, r0, #0
 800339a:	d021      	beq.n	80033e0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339c:	f3ef 8310 	mrs	r3, PRIMASK
 80033a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033a6:	2301      	movs	r3, #1
 80033a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ac:	f383 8810 	msr	PRIMASK, r3
}
 80033b0:	46c0      	nop			@ (mov r8, r8)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2180      	movs	r1, #128	@ 0x80
 80033be:	438a      	bics	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c8:	f383 8810 	msr	PRIMASK, r3
}
 80033cc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2278      	movs	r2, #120	@ 0x78
 80033d8:	2100      	movs	r1, #0
 80033da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e05f      	b.n	80034a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2204      	movs	r2, #4
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d146      	bne.n	800347c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f0:	2280      	movs	r2, #128	@ 0x80
 80033f2:	03d1      	lsls	r1, r2, #15
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4a2c      	ldr	r2, [pc, #176]	@ (80034a8 <UART_CheckIdleState+0x148>)
 80033f8:	9200      	str	r2, [sp, #0]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f000 f858 	bl	80034b0 <UART_WaitOnFlagUntilTimeout>
 8003400:	1e03      	subs	r3, r0, #0
 8003402:	d03b      	beq.n	800347c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003404:	f3ef 8310 	mrs	r3, PRIMASK
 8003408:	60fb      	str	r3, [r7, #12]
  return(result);
 800340a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800340c:	637b      	str	r3, [r7, #52]	@ 0x34
 800340e:	2301      	movs	r3, #1
 8003410:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f383 8810 	msr	PRIMASK, r3
}
 8003418:	46c0      	nop			@ (mov r8, r8)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4921      	ldr	r1, [pc, #132]	@ (80034ac <UART_CheckIdleState+0x14c>)
 8003426:	400a      	ands	r2, r1
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800342c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f383 8810 	msr	PRIMASK, r3
}
 8003434:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003436:	f3ef 8310 	mrs	r3, PRIMASK
 800343a:	61bb      	str	r3, [r7, #24]
  return(result);
 800343c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003440:	2301      	movs	r3, #1
 8003442:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f383 8810 	msr	PRIMASK, r3
}
 800344a:	46c0      	nop			@ (mov r8, r8)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2101      	movs	r1, #1
 8003458:	438a      	bics	r2, r1
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	f383 8810 	msr	PRIMASK, r3
}
 8003466:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2280      	movs	r2, #128	@ 0x80
 800346c:	2120      	movs	r1, #32
 800346e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2278      	movs	r2, #120	@ 0x78
 8003474:	2100      	movs	r1, #0
 8003476:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e011      	b.n	80034a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2280      	movs	r2, #128	@ 0x80
 8003486:	2120      	movs	r1, #32
 8003488:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2278      	movs	r2, #120	@ 0x78
 800349a:	2100      	movs	r1, #0
 800349c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b010      	add	sp, #64	@ 0x40
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	01ffffff 	.word	0x01ffffff
 80034ac:	fffffedf 	.word	0xfffffedf

080034b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	1dfb      	adds	r3, r7, #7
 80034be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c0:	e051      	b.n	8003566 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	3301      	adds	r3, #1
 80034c6:	d04e      	beq.n	8003566 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c8:	f7fd fc90 	bl	8000dec <HAL_GetTick>
 80034cc:	0002      	movs	r2, r0
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d302      	bcc.n	80034de <UART_WaitOnFlagUntilTimeout+0x2e>
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e051      	b.n	8003586 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2204      	movs	r2, #4
 80034ea:	4013      	ands	r3, r2
 80034ec:	d03b      	beq.n	8003566 <UART_WaitOnFlagUntilTimeout+0xb6>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b80      	cmp	r3, #128	@ 0x80
 80034f2:	d038      	beq.n	8003566 <UART_WaitOnFlagUntilTimeout+0xb6>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b40      	cmp	r3, #64	@ 0x40
 80034f8:	d035      	beq.n	8003566 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	2208      	movs	r2, #8
 8003502:	4013      	ands	r3, r2
 8003504:	2b08      	cmp	r3, #8
 8003506:	d111      	bne.n	800352c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2208      	movs	r2, #8
 800350e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	0018      	movs	r0, r3
 8003514:	f000 f83c 	bl	8003590 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2284      	movs	r2, #132	@ 0x84
 800351c:	2108      	movs	r1, #8
 800351e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2278      	movs	r2, #120	@ 0x78
 8003524:	2100      	movs	r1, #0
 8003526:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e02c      	b.n	8003586 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	2380      	movs	r3, #128	@ 0x80
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	401a      	ands	r2, r3
 8003538:	2380      	movs	r3, #128	@ 0x80
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	429a      	cmp	r2, r3
 800353e:	d112      	bne.n	8003566 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2280      	movs	r2, #128	@ 0x80
 8003546:	0112      	lsls	r2, r2, #4
 8003548:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	0018      	movs	r0, r3
 800354e:	f000 f81f 	bl	8003590 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2284      	movs	r2, #132	@ 0x84
 8003556:	2120      	movs	r1, #32
 8003558:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2278      	movs	r2, #120	@ 0x78
 800355e:	2100      	movs	r1, #0
 8003560:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e00f      	b.n	8003586 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	4013      	ands	r3, r2
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	425a      	negs	r2, r3
 8003576:	4153      	adcs	r3, r2
 8003578:	b2db      	uxtb	r3, r3
 800357a:	001a      	movs	r2, r3
 800357c:	1dfb      	adds	r3, r7, #7
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d09e      	beq.n	80034c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b004      	add	sp, #16
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08e      	sub	sp, #56	@ 0x38
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003598:	f3ef 8310 	mrs	r3, PRIMASK
 800359c:	617b      	str	r3, [r7, #20]
  return(result);
 800359e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a2:	2301      	movs	r3, #1
 80035a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	46c0      	nop			@ (mov r8, r8)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4926      	ldr	r1, [pc, #152]	@ (8003654 <UART_EndRxTransfer+0xc4>)
 80035ba:	400a      	ands	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f383 8810 	msr	PRIMASK, r3
}
 80035c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ca:	f3ef 8310 	mrs	r3, PRIMASK
 80035ce:	623b      	str	r3, [r7, #32]
  return(result);
 80035d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80035d4:	2301      	movs	r3, #1
 80035d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	f383 8810 	msr	PRIMASK, r3
}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2101      	movs	r1, #1
 80035ec:	438a      	bics	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f6:	f383 8810 	msr	PRIMASK, r3
}
 80035fa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003600:	2b01      	cmp	r3, #1
 8003602:	d118      	bne.n	8003636 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003604:	f3ef 8310 	mrs	r3, PRIMASK
 8003608:	60bb      	str	r3, [r7, #8]
  return(result);
 800360a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800360c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800360e:	2301      	movs	r3, #1
 8003610:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f383 8810 	msr	PRIMASK, r3
}
 8003618:	46c0      	nop			@ (mov r8, r8)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2110      	movs	r1, #16
 8003626:	438a      	bics	r2, r1
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f383 8810 	msr	PRIMASK, r3
}
 8003634:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2280      	movs	r2, #128	@ 0x80
 800363a:	2120      	movs	r1, #32
 800363c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	46bd      	mov	sp, r7
 800364e:	b00e      	add	sp, #56	@ 0x38
 8003650:	bd80      	pop	{r7, pc}
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	fffffedf 	.word	0xfffffedf

08003658 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	1dbb      	adds	r3, r7, #6
 8003666:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2280      	movs	r2, #128	@ 0x80
 800366c:	589b      	ldr	r3, [r3, r2]
 800366e:	2b20      	cmp	r3, #32
 8003670:	d000      	beq.n	8003674 <HAL_UARTEx_ReceiveToIdle+0x1c>
 8003672:	e109      	b.n	8003888 <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_UARTEx_ReceiveToIdle+0x2a>
 800367a:	1dbb      	adds	r3, r7, #6
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e101      	b.n	800388a <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	015b      	lsls	r3, r3, #5
 800368e:	429a      	cmp	r2, r3
 8003690:	d109      	bne.n	80036a6 <HAL_UARTEx_ReceiveToIdle+0x4e>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d105      	bne.n	80036a6 <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2201      	movs	r2, #1
 800369e:	4013      	ands	r3, r2
 80036a0:	d001      	beq.n	80036a6 <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e0f1      	b.n	800388a <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2284      	movs	r2, #132	@ 0x84
 80036aa:	2100      	movs	r1, #0
 80036ac:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2280      	movs	r2, #128	@ 0x80
 80036b2:	2122      	movs	r1, #34	@ 0x22
 80036b4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c2:	f7fd fb93 	bl	8000dec <HAL_GetTick>
 80036c6:	0003      	movs	r3, r0
 80036c8:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1dba      	adds	r2, r7, #6
 80036ce:	2158      	movs	r1, #88	@ 0x58
 80036d0:	8812      	ldrh	r2, [r2, #0]
 80036d2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	215a      	movs	r1, #90	@ 0x5a
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	2380      	movs	r3, #128	@ 0x80
 80036e4:	015b      	lsls	r3, r3, #5
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d10d      	bne.n	8003706 <HAL_UARTEx_ReceiveToIdle+0xae>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d104      	bne.n	80036fc <HAL_UARTEx_ReceiveToIdle+0xa4>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	225c      	movs	r2, #92	@ 0x5c
 80036f6:	4967      	ldr	r1, [pc, #412]	@ (8003894 <HAL_UARTEx_ReceiveToIdle+0x23c>)
 80036f8:	5299      	strh	r1, [r3, r2]
 80036fa:	e02e      	b.n	800375a <HAL_UARTEx_ReceiveToIdle+0x102>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	225c      	movs	r2, #92	@ 0x5c
 8003700:	21ff      	movs	r1, #255	@ 0xff
 8003702:	5299      	strh	r1, [r3, r2]
 8003704:	e029      	b.n	800375a <HAL_UARTEx_ReceiveToIdle+0x102>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10d      	bne.n	800372a <HAL_UARTEx_ReceiveToIdle+0xd2>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <HAL_UARTEx_ReceiveToIdle+0xc8>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	225c      	movs	r2, #92	@ 0x5c
 800371a:	21ff      	movs	r1, #255	@ 0xff
 800371c:	5299      	strh	r1, [r3, r2]
 800371e:	e01c      	b.n	800375a <HAL_UARTEx_ReceiveToIdle+0x102>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	225c      	movs	r2, #92	@ 0x5c
 8003724:	217f      	movs	r1, #127	@ 0x7f
 8003726:	5299      	strh	r1, [r3, r2]
 8003728:	e017      	b.n	800375a <HAL_UARTEx_ReceiveToIdle+0x102>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	055b      	lsls	r3, r3, #21
 8003732:	429a      	cmp	r2, r3
 8003734:	d10d      	bne.n	8003752 <HAL_UARTEx_ReceiveToIdle+0xfa>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <HAL_UARTEx_ReceiveToIdle+0xf0>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	225c      	movs	r2, #92	@ 0x5c
 8003742:	217f      	movs	r1, #127	@ 0x7f
 8003744:	5299      	strh	r1, [r3, r2]
 8003746:	e008      	b.n	800375a <HAL_UARTEx_ReceiveToIdle+0x102>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	225c      	movs	r2, #92	@ 0x5c
 800374c:	213f      	movs	r1, #63	@ 0x3f
 800374e:	5299      	strh	r1, [r3, r2]
 8003750:	e003      	b.n	800375a <HAL_UARTEx_ReceiveToIdle+0x102>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	225c      	movs	r2, #92	@ 0x5c
 8003756:	2100      	movs	r1, #0
 8003758:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800375a:	2312      	movs	r3, #18
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	215c      	movs	r1, #92	@ 0x5c
 8003762:	5a52      	ldrh	r2, [r2, r1]
 8003764:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	2380      	movs	r3, #128	@ 0x80
 800376c:	015b      	lsls	r3, r3, #5
 800376e:	429a      	cmp	r2, r3
 8003770:	d108      	bne.n	8003784 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d104      	bne.n	8003784 <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	e003      	b.n	800378c <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003788:	2300      	movs	r3, #0
 800378a:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003792:	e062      	b.n	800385a <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	2210      	movs	r2, #16
 800379c:	4013      	ands	r3, r2
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d110      	bne.n	80037c4 <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2210      	movs	r2, #16
 80037a8:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2202      	movs	r2, #2
 80037b6:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2280      	movs	r2, #128	@ 0x80
 80037bc:	2120      	movs	r1, #32
 80037be:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e062      	b.n	800388a <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	2220      	movs	r2, #32
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d12f      	bne.n	8003832 <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10e      	bne.n	80037f6 <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2212      	movs	r2, #18
 80037e2:	18ba      	adds	r2, r7, r2
 80037e4:	8812      	ldrh	r2, [r2, #0]
 80037e6:	4013      	ands	r3, r2
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	3302      	adds	r3, #2
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	e00e      	b.n	8003814 <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2212      	movs	r2, #18
 8003800:	18ba      	adds	r2, r7, r2
 8003802:	8812      	ldrh	r2, [r2, #0]
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	4013      	ands	r3, r2
 8003808:	b2da      	uxtb	r2, r3
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3301      	adds	r3, #1
 8003812:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	225a      	movs	r2, #90	@ 0x5a
 8003824:	5a9b      	ldrh	r3, [r3, r2]
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b299      	uxth	r1, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	225a      	movs	r2, #90	@ 0x5a
 8003830:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	3301      	adds	r3, #1
 8003836:	d010      	beq.n	800385a <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003838:	f7fd fad8 	bl	8000dec <HAL_GetTick>
 800383c:	0002      	movs	r2, r0
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003844:	429a      	cmp	r2, r3
 8003846:	d302      	bcc.n	800384e <HAL_UARTEx_ReceiveToIdle+0x1f6>
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	2b00      	cmp	r3, #0
 800384c:	d105      	bne.n	800385a <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2280      	movs	r2, #128	@ 0x80
 8003852:	2120      	movs	r1, #32
 8003854:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e017      	b.n	800388a <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	225a      	movs	r2, #90	@ 0x5a
 800385e:	5a9b      	ldrh	r3, [r3, r2]
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d196      	bne.n	8003794 <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2258      	movs	r2, #88	@ 0x58
 800386a:	5a9a      	ldrh	r2, [r3, r2]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	215a      	movs	r1, #90	@ 0x5a
 8003870:	5a5b      	ldrh	r3, [r3, r1]
 8003872:	b29b      	uxth	r3, r3
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	b29a      	uxth	r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2280      	movs	r2, #128	@ 0x80
 8003880:	2120      	movs	r1, #32
 8003882:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	e000      	b.n	800388a <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
  }
}
 800388a:	0018      	movs	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	b008      	add	sp, #32
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	000001ff 	.word	0x000001ff

08003898 <memset>:
 8003898:	0003      	movs	r3, r0
 800389a:	1882      	adds	r2, r0, r2
 800389c:	4293      	cmp	r3, r2
 800389e:	d100      	bne.n	80038a2 <memset+0xa>
 80038a0:	4770      	bx	lr
 80038a2:	7019      	strb	r1, [r3, #0]
 80038a4:	3301      	adds	r3, #1
 80038a6:	e7f9      	b.n	800389c <memset+0x4>

080038a8 <__libc_init_array>:
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	2600      	movs	r6, #0
 80038ac:	4c0c      	ldr	r4, [pc, #48]	@ (80038e0 <__libc_init_array+0x38>)
 80038ae:	4d0d      	ldr	r5, [pc, #52]	@ (80038e4 <__libc_init_array+0x3c>)
 80038b0:	1b64      	subs	r4, r4, r5
 80038b2:	10a4      	asrs	r4, r4, #2
 80038b4:	42a6      	cmp	r6, r4
 80038b6:	d109      	bne.n	80038cc <__libc_init_array+0x24>
 80038b8:	2600      	movs	r6, #0
 80038ba:	f000 f819 	bl	80038f0 <_init>
 80038be:	4c0a      	ldr	r4, [pc, #40]	@ (80038e8 <__libc_init_array+0x40>)
 80038c0:	4d0a      	ldr	r5, [pc, #40]	@ (80038ec <__libc_init_array+0x44>)
 80038c2:	1b64      	subs	r4, r4, r5
 80038c4:	10a4      	asrs	r4, r4, #2
 80038c6:	42a6      	cmp	r6, r4
 80038c8:	d105      	bne.n	80038d6 <__libc_init_array+0x2e>
 80038ca:	bd70      	pop	{r4, r5, r6, pc}
 80038cc:	00b3      	lsls	r3, r6, #2
 80038ce:	58eb      	ldr	r3, [r5, r3]
 80038d0:	4798      	blx	r3
 80038d2:	3601      	adds	r6, #1
 80038d4:	e7ee      	b.n	80038b4 <__libc_init_array+0xc>
 80038d6:	00b3      	lsls	r3, r6, #2
 80038d8:	58eb      	ldr	r3, [r5, r3]
 80038da:	4798      	blx	r3
 80038dc:	3601      	adds	r6, #1
 80038de:	e7f2      	b.n	80038c6 <__libc_init_array+0x1e>
 80038e0:	080039c4 	.word	0x080039c4
 80038e4:	080039c4 	.word	0x080039c4
 80038e8:	080039c8 	.word	0x080039c8
 80038ec:	080039c4 	.word	0x080039c4

080038f0 <_init>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f6:	bc08      	pop	{r3}
 80038f8:	469e      	mov	lr, r3
 80038fa:	4770      	bx	lr

080038fc <_fini>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003902:	bc08      	pop	{r3}
 8003904:	469e      	mov	lr, r3
 8003906:	4770      	bx	lr
